#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 597)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'98,99,101,236,246,236,327,102,103,59,80,119,120,121,13,183,89,184,309',
'18,80,123,109,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,130,77,79,63,112,63,26,60,27,183,149,184,122,80,131',
'148,29,78,279,173,174,126,54,173,174,173,174,129,181,118,136,132,16',
'98,99,101,133,115,116,117,102,103,173,174,119,120,121,13,13,89,61,12',
'11,17,123,109,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,130,184,308,183,112,22,22,227,23,23,77,215,122,153',
'131,289,216,155,80,65,288,126,186,66,173,174,78,129,80,118,136,132,16',
'98,99,101,133,115,116,117,102,103,173,174,119,120,121,13,13,89,63,307',
'11,17,123,109,234,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,130,153,177,16,112,155,22,155,22,23,328,23,122,70',
'131,342,80,63,80,13,176,126,12,11,17,80,80,129,76,118,136,132,16,98',
'99,101,133,115,116,117,102,103,173,174,119,120,121,13,13,89,173,174',
'11,17,123,109,60,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,130,142,16,63,112,190,191,192,193,194,195,152,122',
'22,131,157,23,22,13,160,23,126,11,17,197,198,175,129,185,118,136,132',
'214,98,99,101,133,115,116,117,102,103,173,174,119,120,121,13,22,89,22',
'23,217,23,123,109,63,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,130,173,174,228,112,190,191,192,193,194,195,142',
'122,184,131,190,191,192,193,194,195,126,177,196,197,198,183,129,234',
'118,136,132,238,98,99,101,133,115,116,117,102,103,173,174,119,120,121',
'13,22,89,22,23,249,23,123,109,251,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,130,173,174,254,112,190,191,192,193',
'194,195,255,122,281,131,190,191,192,193,194,195,126,194,196,197,198',
'63,129,142,118,136,132,160,98,99,101,133,115,116,117,102,103,173,174',
'119,120,121,13,299,89,192,193,194,195,123,109,300,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,130,173,174,173,112',
'192,193,194,195,194,336,194,122,337,131,319,320,241,242,243,244,126',
'173,174,173,174,194,129,194,118,136,132,311,98,99,101,133,115,116,117',
'102,103,173,174,119,120,121,13,315,89,319,320,316,321,123,109,324,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,130',
'255,16,223,112,119,120,121,142,331,80,344,122,142,131,123,,,13,,,126',
'11,17,,,,129,,118,136,132,,119,120,121,133,115,116,117,,130,,123,,164',
',,,,,,,122,,131,22,,,23,,,126,,,,,,129,130,118,136,132,164,119,120,121',
'133,115,116,117,122,,131,123,119,120,121,,,126,,,,,123,129,,118,136',
'132,,,,,133,115,116,117,,130,,,,164,,,,,,,171,122,,131,164,119,120,121',
',,126,,122,,131,123,129,,118,136,132,,,,,133,115,116,117,118,136,132',
',119,120,121,133,115,116,117,,130,,123,,164,,,,,,,,122,,131,,,,,,,126',
',,,16,313,129,130,118,136,132,164,119,120,121,133,115,116,117,122,13',
'131,123,,11,17,,,,,,,,,129,,118,136,132,,119,120,121,133,115,116,117',
',130,,123,,164,,,,,,22,,122,23,131,,,,,,,126,,,,,,129,130,118,136,132',
'164,119,120,121,133,115,116,117,122,,131,123,119,120,121,,,126,,,,,123',
'129,,118,136,132,,,,,133,115,116,117,,171,,,,164,,,,,,,171,122,,131',
'164,119,120,121,,,,,122,,131,123,,,118,136,132,,,,,133,115,116,117,118',
'136,132,,119,120,121,133,115,116,117,,171,,123,,164,190,191,192,193',
'194,195,,122,,131,,,,,,,,,196,197,198,199,200,130,118,136,132,164,119',
'120,121,133,115,116,117,122,,131,123,,,119,120,121,126,,,,,,129,123',
'118,136,132,,,,,133,115,116,117,,171,,,,164,119,120,121,,,,,122,130',
'131,123,,164,,,,,,,,122,,131,,118,136,132,,,126,,133,115,116,117,129',
'130,118,136,132,164,119,120,121,133,115,116,117,122,,131,123,,,,,,126',
',,,,,129,,118,136,132,,119,120,121,133,115,116,117,,130,,123,,164,,',
',,,,,122,,131,,,,,,,126,,,,,,129,130,118,136,132,164,119,120,121,133',
'115,116,117,122,,131,123,,,,,,126,,,,,,129,,118,136,132,,119,120,121',
'133,115,116,117,,130,,123,,164,,,,,,,,122,,131,,,,,,,126,,,,,,129,130',
'118,136,132,164,119,120,121,133,115,116,117,122,,131,123,,,,,,126,,',
',,,129,,118,136,132,,119,120,121,133,115,116,117,,130,,123,,164,,,,',
',,,122,,131,,,,,,,126,,,,,,129,130,118,136,132,164,119,120,121,133,115',
'116,117,122,,131,123,119,120,121,,,126,,,,,123,129,,118,136,132,,,,',
'133,115,116,117,,171,,,,164,,,,,,,171,122,,131,164,119,120,121,,,,,122',
',131,123,,,118,136,132,,,,,133,115,116,117,118,136,132,,119,120,121',
'133,115,116,117,,171,,123,,164,119,120,121,,,,,122,,131,123,,,,,,,,',
',,,,171,118,136,132,164,119,120,121,133,115,116,117,122,171,131,123',
',164,119,120,121,,,,,122,,131,123,118,136,132,,,,,133,115,116,117,,171',
'118,136,132,164,119,120,121,133,115,116,117,122,171,131,123,,164,119',
'120,121,,,,,122,,131,123,118,136,132,,,,,133,115,116,117,,171,118,136',
'132,164,119,120,121,133,115,116,117,122,171,131,123,,164,119,120,121',
',,,,122,,131,123,118,136,132,,,,,133,115,116,117,,171,118,136,132,164',
'119,120,121,133,115,116,117,122,171,131,123,,164,119,120,121,,,,,122',
',131,123,118,136,132,,,,,133,115,116,117,,171,118,136,132,164,119,120',
'121,133,115,116,117,122,171,131,123,,164,119,120,121,,,,,122,,131,123',
'118,136,132,,,,,133,115,116,117,,171,118,136,132,164,119,120,121,133',
'115,116,117,122,171,131,123,,164,119,120,121,,,,,122,,131,123,118,136',
'132,,,,,133,115,116,117,,171,118,136,132,164,119,120,121,133,115,116',
'117,122,171,131,123,,164,,,,,,,,122,,131,,118,136,132,,,,,133,115,116',
'117,,130,118,136,132,164,119,120,121,133,115,116,117,122,,131,123,,',
',,,126,,,,,,129,,118,136,132,,,,,133,115,116,117,,130,,306,,164,119',
'120,121,,,,,122,,131,123,,,,,,126,,,,,,129,,118,136,132,,119,120,121',
'133,115,116,117,,130,,123,,164,,,,,,,,122,,131,,,,,,,126,,,,,,129,130',
'118,136,132,164,119,120,121,133,115,116,117,122,,131,123,119,120,121',
',,126,,,,,123,129,,118,136,132,,,,,133,115,116,117,,171,,,,164,,,,,',
',171,122,,131,164,119,120,121,,,,,122,,131,123,,,118,136,132,,,,,133',
'115,116,117,118,136,132,,,,,133,115,116,117,,130,,,,164,,,,,,,,122,',
'131,150,,,,,,126,,,,,,129,,118,136,132,,,,,133,115,116,117,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,225,,,,',
'22,,,23,,,,,,,13,,89,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,280,,,,,22,,,23,,,,190,191,192,193,194,195',
',201,203,204,205,206,280,,,,,,196,197,198,199,200,,190,191,192,193,194',
'195,202,,,,,,,13,,89,,,196,197,198,199,200,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,294,,,,,,,,,,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,190,191,192,193',
'194,195,,201,203,204,205,206,,,,,,,196,197,198,199,200,,,,,,,,202,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,,-47',
',,,,-47,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,,,,,140,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,,,,,140,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,190,191,192,193,194,195,,,241,242,243,244',
',,,,,,196,197,198,199,200,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,190,191,192,193,194,195,190,191,192,193,194',
'195,190,191,192,193,194,195,196,197,198,199,200,,196,197,198,199,200',
',196,197,198,199,200,190,191,192,193,194,195,190,191,192,193,194,195',
',,,,,,196,197,198,199,200,,196,197,198,199,200,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,190,191,192,193,194',
'195,190,191,192,193,194,195,,,,,,,196,197,198,199,200,,196,197,198,199',
'200' ]
        racc_action_table = arr = ::Array.new(2484, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'75,75,75,168,172,332,310,75,75,25,261,75,75,75,75,164,75,164,261,1,310',
'75,75,11,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,65,67,168,75,332,12,25,13,112,89,112,75,67,75,89,16,65,208',
'172,172,75,18,168,168,332,332,75,112,75,75,75,20,159,159,159,75,75,75',
'75,159,159,208,208,159,159,159,159,20,159,26,20,20,20,159,159,27,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,251,258,114,159,159,20,146,159,20,251,137,159',
'93,159,222,137,93,146,28,222,159,114,29,258,258,251,159,93,159,159,159',
'24,218,218,218,159,159,159,159,218,218,108,108,218,218,218,218,24,218',
'58,257,24,24,218,218,257,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,286,110,0,218,286',
'24,230,2,24,314,2,218,60,218,338,286,61,230,0,110,218,0,0,0,314,338',
'218,64,218,218,218,68,235,235,235,218,218,218,218,235,235,161,161,235',
'235,235,235,68,235,167,167,68,68,235,235,69,235,235,235,235,235,235',
'235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235',
'235,79,144,82,235,268,268,268,268,268,268,91,235,5,235,94,5,72,144,96',
'72,235,144,144,268,268,109,235,113,235,235,235,136,238,238,238,235,235',
'235,235,238,238,233,233,238,238,238,238,81,238,83,81,139,83,238,238',
'141,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,250,250,147,238,271,271,271,271,271',
'271,154,238,155,238,269,269,269,269,269,269,238,162,271,271,271,165',
'238,166,238,238,238,169,246,246,246,238,238,238,238,246,246,256,256',
'246,246,246,246,95,246,224,95,175,224,246,246,177,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,259,259,178,246,272,272,272,272,272,272,179,246,210,246,270',
'270,270,270,270,270,246,211,272,272,272,215,246,227,246,246,246,232',
'320,320,320,246,246,246,246,320,320,260,260,320,320,320,320,239,320',
'262,262,262,262,320,320,240,320,320,320,320,320,320,320,320,320,320',
'320,320,320,320,320,320,320,320,320,320,320,320,320,320,296,296,248',
'320,263,263,263,263,264,325,265,320,325,320,297,297,299,299,300,300',
'320,305,305,326,326,266,320,267,320,320,320,285,339,339,339,320,320',
'320,320,339,339,340,340,339,339,339,339,294,339,343,343,295,298,339',
'339,301,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,303,143,143,339,98,98,98,316,317',
'329,341,339,344,339,98,,,143,,,339,143,143,,,,339,,339,339,339,,99,99',
'99,339,339,339,339,,98,,99,,98,,,,,,,,98,,98,143,,,143,,,98,,,,,,98',
'99,98,98,98,99,101,101,101,98,98,98,98,99,,99,101,102,102,102,,,99,',
',,,102,99,,99,99,99,,,,,99,99,99,99,,101,,,,101,,,,,,,102,101,,101,102',
'103,103,103,,,101,,102,,102,103,101,,101,101,101,,,,,101,101,101,101',
'102,102,102,,125,125,125,102,102,102,102,,103,,125,,103,,,,,,,,103,',
'103,,,,,,,103,,,,290,290,103,125,103,103,103,125,129,129,129,103,103',
'103,103,125,290,125,129,,290,290,,,,,,,,,125,,125,125,125,,130,130,130',
'125,125,125,125,,129,,130,,129,,,,,,290,,129,290,129,,,,,,,129,,,,,',
'129,130,129,129,129,130,131,131,131,129,129,129,129,130,,130,131,132',
'132,132,,,130,,,,,132,130,,130,130,130,,,,,130,130,130,130,,131,,,,131',
',,,,,,132,131,,131,132,133,133,133,,,,,132,,132,133,,,131,131,131,,',
',,131,131,131,131,132,132,132,,160,160,160,132,132,132,132,,133,,160',
',133,273,273,273,273,273,273,,133,,133,,,,,,,,,273,273,273,273,273,160',
'133,133,133,160,171,171,171,133,133,133,133,160,,160,171,,,173,173,173',
'160,,,,,,160,173,160,160,160,,,,,160,160,160,160,,171,,,,171,174,174',
'174,,,,,171,173,171,174,,173,,,,,,,,173,,173,,171,171,171,,,173,,171',
'171,171,171,173,174,173,173,173,174,176,176,176,173,173,173,173,174',
',174,176,,,,,,174,,,,,,174,,174,174,174,,181,181,181,174,174,174,174',
',176,,181,,176,,,,,,,,176,,176,,,,,,,176,,,,,,176,181,176,176,176,181',
'183,183,183,176,176,176,176,181,,181,183,,,,,,181,,,,,,181,,181,181',
'181,,184,184,184,181,181,181,181,,183,,184,,183,,,,,,,,183,,183,,,,',
',,183,,,,,,183,184,183,183,183,184,185,185,185,183,183,183,183,184,',
'184,185,,,,,,184,,,,,,184,,184,184,184,,186,186,186,184,184,184,184',
',185,,186,,185,,,,,,,,185,,185,,,,,,,185,,,,,,185,186,185,185,185,186',
'190,190,190,185,185,185,185,186,,186,190,191,191,191,,,186,,,,,191,186',
',186,186,186,,,,,186,186,186,186,,190,,,,190,,,,,,,191,190,,190,191',
'192,192,192,,,,,191,,191,192,,,190,190,190,,,,,190,190,190,190,191,191',
'191,,193,193,193,191,191,191,191,,192,,193,,192,194,194,194,,,,,192',
',192,194,,,,,,,,,,,,,193,192,192,192,193,195,195,195,192,192,192,192',
'193,194,193,195,,194,196,196,196,,,,,194,,194,196,193,193,193,,,,,193',
'193,193,193,,195,194,194,194,195,197,197,197,194,194,194,194,195,196',
'195,197,,196,198,198,198,,,,,196,,196,198,195,195,195,,,,,195,195,195',
'195,,197,196,196,196,197,199,199,199,196,196,196,196,197,198,197,199',
',198,200,200,200,,,,,198,,198,200,197,197,197,,,,,197,197,197,197,,199',
'198,198,198,199,201,201,201,198,198,198,198,199,200,199,201,,200,202',
'202,202,,,,,200,,200,202,199,199,199,,,,,199,199,199,199,,201,200,200',
'200,201,203,203,203,200,200,200,200,201,202,201,203,,202,204,204,204',
',,,,202,,202,204,201,201,201,,,,,201,201,201,201,,203,202,202,202,203',
'205,205,205,202,202,202,202,203,204,203,205,,204,206,206,206,,,,,204',
',204,206,203,203,203,,,,,203,203,203,203,,205,204,204,204,205,234,234',
'234,204,204,204,204,205,206,205,234,,206,,,,,,,,206,,206,,205,205,205',
',,,,205,205,205,205,,234,206,206,206,234,255,255,255,206,206,206,206',
'234,,234,255,,,,,,234,,,,,,234,,234,234,234,,,,,234,234,234,234,,255',
',255,,255,306,306,306,,,,,255,,255,306,,,,,,255,,,,,,255,,255,255,255',
',319,319,319,255,255,255,255,,306,,319,,306,,,,,,,,306,,306,,,,,,,306',
',,,,,306,319,306,306,306,319,322,322,322,306,306,306,306,319,,319,322',
'323,323,323,,,319,,,,,323,319,,319,319,319,,,,,319,319,319,319,,322',
',,,322,,,,,,,323,322,,322,323,337,337,337,,,,,323,,323,337,,,322,322',
'322,,,,,322,322,322,322,323,323,323,,,,,323,323,323,323,,337,,,,337',
',,,,,,,337,,337,90,,,,,,337,,,,,,337,,337,337,337,,,,,337,337,337,337',
'90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90',
'145,,,,,90,,,90,,,,,,,145,,145,,,,,,,,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,209,,,,',
'145,,,145,,,,209,209,209,209,209,209,,209,209,209,209,209,245,,,,,,209',
'209,209,209,209,,245,245,245,245,245,245,209,,,,,,,71,,71,,,245,245',
'245,245,245,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,228,,,,,,,,,,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,127,127,127,127,127',
'127,,127,127,127,127,127,,,,,,,127,127,127,127,127,,,,,,,,127,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,,142,,,,,142,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,76,76,76,76,76,,,,,76,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,,,,,216',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59',
'62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62',
'126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126',
'126,126,126,126,126,126,170,170,170,170,170,170,,,170,170,170,170,,',
',,,,170,170,170,170,170,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,274,274,274,274,274',
'274,275,275,275,275,275,275,276,276,276,276,276,276,274,274,274,274',
'274,,275,275,275,275,275,,276,276,276,276,276,277,277,277,277,277,277',
'278,278,278,278,278,278,,,,,,,277,277,277,277,277,,278,278,278,278,278',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,334,334,334,334,334,334,335,335,335,335,335',
'335,,,,,,,334,334,334,334,334,,335,335,335,335,335' ]
        racc_action_check = arr = ::Array.new(2484, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   208,    19,   159,   nil,   nil,   244,   nil,   nil,   nil,   nil,
   nil,   -32,   -27,     0,   nil,   nil,    39,  2202,    69,   nil,
    77,   nil,   nil,   nil,   157,   -18,    83,    47,    91,    89,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121,  2225,
   165,   168,  2248,   nil,   184,   -14,   nil,    -6,   237,   191,
   nil,  2029,   248,   nil,   nil,    -4,  2146,   nil,   nil,   237,
   nil,   279,   234,   281,   nil,   nil,   nil,   nil,   nil,     7,
  1899,   241,   nil,    89,   299,   359,   300,   nil,   597,   625,
   nil,   666,   677,   718,   nil,   nil,   nil,   nil,    93,   295,
   148,   nil,     5,   245,    79,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   746,  2271,  2049,   nil,   787,
   815,   856,   867,   908,   nil,   nil,   268,    86,   nil,   284,
   nil,   287,  2116,   607,   287,  1947,    79,   300,   nil,   nil,
   nil,   nil,   nil,   nil,   327,   327,   nil,   nil,   nil,    76,
   936,   173,   328,   nil,   -36,   342,   338,   181,    -6,   385,
  2258,   977,   -10,   990,  1018,   364,  1059,   368,   393,   388,
   nil,  1087,   nil,  1128,  1156,  1197,  1225,   nil,   nil,   nil,
  1266,  1277,  1318,  1346,  1359,  1387,  1400,  1428,  1441,  1469,
  1482,  1510,  1523,  1551,  1564,  1592,  1605,   nil,    13,  1946,
   408,   401,   nil,   nil,  2317,   417,  2174,   nil,   156,   nil,
   nil,   nil,    90,   nil,   361,   nil,   nil,   424,  2062,   nil,
   159,   nil,   473,   253,  1633,   236,   nil,   nil,   316,   440,
   448,   nil,   nil,   nil,   nil,  1970,   396,   nil,   454,   nil,
   292,    75,   nil,   nil,   nil,  1674,   333,   126,    75,   372,
   413,   -56,   431,   466,   468,   470,   485,   487,   228,   318,
   398,   308,   388,   900,  2304,  2310,  2316,  2339,  2345,   nil,
   nil,   nil,   nil,   nil,   nil,   556,   157,   nil,  2404,   nil,
   792,   nil,   nil,   nil,   520,   527,   452,   535,   577,   472,
   472,   580,   nil,   538,   nil,   473,  1715,   nil,   nil,   nil,
   -46,   nil,   nil,   nil,   166,   nil,   564,   613,   nil,  1743,
   476,   nil,  1784,  1795,   nil,   483,   475,   nil,   nil,   551,
   nil,   nil,    -4,   nil,  2391,  2397,   nil,  1836,   167,   556,
   493,   566,   nil,   570,   569,   nil,   nil ]

racc_action_default = [
    -6,  -199,  -192,    -2,    -4,  -199,    -7,    -9,   -10,   -11,
   -12,  -199,  -199,  -199,   -40,   -41,   -52,  -199,  -199,    -1,
  -193,  -194,  -196,  -197,    -5,   -15,   -18,  -199,  -199,  -199,
   -97,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,   347,    -3,  -195,    -8,  -199,  -199,
  -199,  -199,   -26,  -198,  -117,  -116,   -53,  -199,    -6,   -15,
   -16,  -199,  -199,   -27,   -97,   -55,  -199,  -114,  -115,   -50,
   -98,  -199,  -199,  -199,   -19,   -21,   -22,   -23,   -97,  -199,
  -199,   -29,   -31,  -199,  -199,  -192,   -56,   -58,  -199,  -165,
   -61,  -199,  -199,  -199,   -66,   -67,   -68,   -69,   -70,  -199,
  -147,   -97,  -163,  -155,  -163,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -123,  -199,  -199,  -128,  -129,  -199,
  -199,  -199,  -199,  -199,  -156,  -158,  -199,  -199,  -119,  -199,
  -122,  -199,   -97,  -199,    -6,  -199,  -199,  -199,   -33,   -34,
   -25,   -28,   -97,   -97,   -50,   -92,   -93,   -42,   -54,  -193,
  -199,   -59,  -147,  -155,  -163,  -163,   -60,  -166,  -199,  -199,
  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,   -85,   -88,
   -89,  -199,  -157,  -165,  -199,  -199,  -199,  -160,  -124,   -97,
  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,
  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -130,  -199,  -128,
  -129,  -143,  -144,  -145,  -199,  -199,  -199,  -121,   -55,   -97,
   -46,   -48,  -199,   -13,  -199,   -17,   -20,   -50,  -199,   -30,
  -199,   -91,   -57,   -63,  -199,   -55,   -79,   -80,   -55,  -199,
  -199,   -75,   -76,   -77,   -78,  -199,   -55,  -125,  -126,   -71,
   -72,  -116,  -161,  -162,   -97,  -199,  -102,  -199,  -199,  -103,
  -104,  -199,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -148,  -149,  -150,  -151,  -152,  -153,  -131,
  -146,  -154,   -97,  -118,  -120,  -199,   -44,   -45,   -97,   -51,
  -199,   -24,   -32,   -97,  -199,  -199,  -167,   -81,  -199,  -199,
  -199,  -199,   -86,   -87,   -94,   -95,   -99,  -164,  -168,  -127,
  -199,   -43,   -49,   -14,   -35,   -97,   -50,  -199,   -82,  -199,
   -55,   -64,  -199,  -199,   -65,  -199,  -100,  -159,   -97,   -36,
   -90,   -62,  -199,   -84,   -73,   -74,   -96,  -199,   -38,   -55,
  -101,  -199,   -39,   -81,   -50,   -83,   -37 ]

racc_goto_table = [
    67,    10,    30,    57,    62,   141,    64,    20,    56,   180,
    24,    94,    56,   110,   239,   113,    92,   114,   221,   235,
   240,    10,   138,    19,   166,    10,    81,   317,   187,    84,
    87,     3,    58,   156,    73,    68,     1,     2,    71,    83,
    72,    91,   147,   292,    69,   341,    28,    74,    75,   222,
   232,    55,   169,   179,   178,   295,    88,   304,   146,   144,
   325,   139,   151,   137,   188,   210,   nil,   nil,   nil,    10,
   nil,   nil,    86,   345,   nil,    74,    82,    90,    56,   187,
   231,   nil,   nil,   nil,   nil,   nil,   143,   nil,   145,   nil,
   nil,   nil,   nil,   nil,   229,   nil,   nil,   110,   nil,   113,
   159,   114,   224,   226,    87,   nil,   nil,   nil,   257,   nil,
   nil,   189,   nil,   nil,   nil,   nil,   158,   253,   218,   nil,
   nil,   nil,    57,   230,   nil,   nil,   nil,   219,   nil,   nil,
    88,    56,   nil,    56,   nil,   nil,   161,   167,   nil,   168,
   nil,   172,   nil,   322,    10,    10,    86,    56,   nil,   nil,
   323,   nil,   302,   291,   285,   252,   110,   nil,   113,   261,
   114,   287,   284,   nil,   312,   nil,   nil,   207,   208,   nil,
   156,   297,   nil,   110,   298,   113,   110,   114,   113,   nil,
   114,   nil,   301,   339,   110,   nil,   113,   nil,   114,   286,
   nil,   nil,   283,   nil,   nil,   nil,   303,   nil,   233,   282,
   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   248,   293,   250,   170,   nil,   nil,   nil,   256,
   nil,   167,   258,   259,   260,   nil,   156,   nil,   nil,   290,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   330,   209,   211,   212,   213,   nil,   nil,   nil,
   nil,   nil,   310,   nil,   nil,   nil,   333,   nil,   110,   nil,
   113,   nil,   114,   314,   nil,   nil,   nil,   nil,   nil,    57,
   346,   nil,   296,   219,   nil,   343,   nil,   110,    56,   113,
   nil,   114,   nil,   nil,   245,   329,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   305,   nil,   nil,   nil,   nil,   338,   nil,
   nil,   nil,   nil,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   326,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   332,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   340,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   334,   335 ]

racc_goto_check = [
    20,    12,    15,     8,    14,    21,    32,     5,    68,    54,
     5,    34,    68,    48,    50,    56,    25,    59,    35,    43,
    51,    12,    62,     3,    41,    12,     7,    44,    66,    17,
    19,     4,    13,    56,    23,    14,     1,     2,    14,    16,
    22,    24,    26,    27,    15,    28,    31,    15,    33,    36,
    38,     4,    45,    25,    53,    55,    15,    57,    20,    14,
    58,    15,    23,    61,    63,    65,   nil,   nil,   nil,    12,
   nil,   nil,    12,    44,   nil,    15,    13,     5,    68,    66,
    21,   nil,   nil,   nil,   nil,   nil,     5,   nil,     5,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,    48,   nil,    56,
     5,    59,     7,    17,    19,   nil,   nil,   nil,    41,   nil,
   nil,    15,   nil,   nil,   nil,   nil,     3,    56,    14,   nil,
   nil,   nil,     8,    20,   nil,   nil,   nil,    15,   nil,   nil,
    15,    68,   nil,    68,   nil,   nil,    40,    40,   nil,    40,
   nil,    40,   nil,    50,    12,    12,    12,    68,   nil,   nil,
    51,   nil,    54,    21,    34,    32,    48,   nil,    56,    20,
    59,    25,    62,   nil,    35,   nil,   nil,    40,    40,   nil,
    56,    34,   nil,    48,    34,    56,    48,    59,    56,   nil,
    59,   nil,    34,    43,    48,   nil,    56,   nil,    59,    20,
   nil,   nil,    14,   nil,   nil,   nil,    25,   nil,    40,    15,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,    40,    15,    40,    49,   nil,   nil,   nil,    40,
   nil,    40,    40,    40,    40,   nil,    56,   nil,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    49,    49,    49,    49,   nil,   nil,   nil,
   nil,   nil,    20,   nil,   nil,   nil,    34,   nil,    48,   nil,
    56,   nil,    59,    20,   nil,   nil,   nil,   nil,   nil,     8,
    21,   nil,    40,    15,   nil,    34,   nil,    48,    68,    56,
   nil,    59,   nil,   nil,    49,    20,   nil,   nil,   nil,   nil,
   nil,    12,   nil,    40,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    49,    49 ]

racc_goto_pointer = [
   nil,    36,    37,    21,    31,     5,   nil,   -42,   -21,   nil,
   nil,   nil,     1,     7,   -23,   -15,   -32,   -42,   nil,   -41,
   -30,   -74,   -22,   -28,   -33,   -58,   -47,  -185,  -293,   nil,
   nil,    30,   -22,   -16,   -64,  -124,   -93,   nil,  -109,   nil,
    38,   -75,   nil,  -149,  -270,   -50,   nil,   nil,   -62,   113,
  -156,  -150,   nil,   -57,  -102,  -175,   -60,  -198,  -246,   -58,
   nil,   -13,   -54,   -61,   nil,   -65,   -86,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   105,   nil,   237,   111,   nil,   nil,    85,   107,
    93,   nil,   nil,   nil,   nil,   220,   nil,   nil,   nil,    14,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    95,    96,    97,
   108,   nil,   100,   nil,   nil,   nil,   104,   106,   162,   127,
   nil,   nil,   318,   nil,   nil,   154,   163,   nil,   nil,   165,
   134,   nil,   nil,   124,   125,   128,   182,   135,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 96, :_reduce_1,
  1, 97, :_reduce_2,
  3, 97, :_reduce_3,
  1, 99, :_reduce_4,
  2, 99, :_reduce_5,
  0, 102, :_reduce_6,
  1, 102, :_reduce_7,
  3, 102, :_reduce_8,
  1, 103, :_reduce_9,
  1, 103, :_reduce_10,
  1, 103, :_reduce_11,
  1, 103, :_reduce_12,
  7, 105, :_reduce_13,
  9, 106, :_reduce_14,
  0, 108, :_reduce_15,
  2, 108, :_reduce_16,
  7, 101, :_reduce_17,
  2, 101, :_reduce_18,
  1, 111, :_reduce_19,
  3, 111, :_reduce_20,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  4, 113, :_reduce_24,
  6, 107, :_reduce_25,
  0, 117, :_reduce_26,
  1, 117, :_reduce_27,
  3, 117, :_reduce_28,
  2, 118, :_reduce_29,
  3, 119, :_reduce_30,
  1, 119, :_reduce_31,
  4, 114, :_reduce_32,
  1, 121, :_reduce_none,
  1, 121, :_reduce_34,
  2, 122, :_reduce_35,
  3, 122, :_reduce_36,
  7, 122, :_reduce_37,
  0, 123, :_reduce_38,
  1, 123, :_reduce_39,
  1, 104, :_reduce_40,
  1, 104, :_reduce_41,
  6, 124, :_reduce_42,
  8, 125, :_reduce_43,
  2, 130, :_reduce_44,
  2, 130, :_reduce_45,
  1, 130, :_reduce_46,
  0, 131, :_reduce_47,
  1, 131, :_reduce_48,
  3, 131, :_reduce_49,
  0, 116, :_reduce_50,
  3, 116, :_reduce_51,
  0, 126, :_reduce_52,
  2, 126, :_reduce_53,
  2, 129, :_reduce_54,
  0, 132, :_reduce_55,
  1, 132, :_reduce_56,
  3, 132, :_reduce_57,
  1, 133, :_reduce_58,
  2, 133, :_reduce_59,
  2, 133, :_reduce_60,
  1, 133, :_reduce_61,
  6, 133, :_reduce_62,
  3, 133, :_reduce_63,
  5, 133, :_reduce_64,
  5, 133, :_reduce_65,
  1, 133, :_reduce_66,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_70,
  3, 142, :_reduce_71,
  3, 141, :_reduce_72,
  5, 140, :_reduce_73,
  5, 140, :_reduce_74,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 139, :_reduce_81,
  1, 139, :_reduce_82,
  5, 139, :_reduce_83,
  2, 147, :_reduce_84,
  2, 134, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  1, 148, :_reduce_88,
  1, 148, :_reduce_89,
  6, 120, :_reduce_90,
  3, 120, :_reduce_91,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_94,
  1, 152, :_reduce_none,
  3, 152, :_reduce_96,
  0, 115, :_reduce_97,
  2, 115, :_reduce_98,
  0, 153, :_reduce_99,
  1, 153, :_reduce_100,
  3, 153, :_reduce_101,
  3, 137, :_reduce_102,
  3, 137, :_reduce_103,
  3, 137, :_reduce_104,
  1, 155, :_reduce_105,
  1, 155, :_reduce_106,
  1, 155, :_reduce_107,
  1, 155, :_reduce_108,
  1, 155, :_reduce_109,
  1, 155, :_reduce_110,
  1, 155, :_reduce_111,
  1, 155, :_reduce_112,
  1, 155, :_reduce_113,
  2, 127, :_reduce_114,
  2, 127, :_reduce_115,
  1, 127, :_reduce_116,
  0, 128, :_reduce_117,
  4, 128, :_reduce_118,
  1, 156, :_reduce_119,
  3, 156, :_reduce_120,
  2, 157, :_reduce_121,
  1, 157, :_reduce_122,
  1, 135, :_reduce_123,
  2, 135, :_reduce_124,
  3, 135, :_reduce_125,
  3, 135, :_reduce_126,
  4, 159, :_reduce_127,
  1, 158, :_reduce_128,
  1, 158, :_reduce_129,
  2, 158, :_reduce_130,
  3, 158, :_reduce_131,
  3, 144, :_reduce_132,
  3, 144, :_reduce_133,
  3, 144, :_reduce_134,
  3, 144, :_reduce_135,
  3, 144, :_reduce_136,
  3, 144, :_reduce_137,
  3, 144, :_reduce_138,
  3, 144, :_reduce_139,
  3, 144, :_reduce_140,
  3, 144, :_reduce_141,
  3, 144, :_reduce_142,
  2, 144, :_reduce_143,
  2, 144, :_reduce_144,
  2, 144, :_reduce_145,
  3, 144, :_reduce_146,
  1, 144, :_reduce_147,
  3, 160, :_reduce_148,
  3, 160, :_reduce_149,
  3, 160, :_reduce_150,
  3, 160, :_reduce_151,
  3, 160, :_reduce_152,
  3, 160, :_reduce_153,
  3, 160, :_reduce_154,
  1, 143, :_reduce_155,
  1, 143, :_reduce_156,
  2, 143, :_reduce_157,
  1, 143, :_reduce_none,
  5, 143, :_reduce_159,
  2, 162, :_reduce_160,
  3, 154, :_reduce_161,
  3, 154, :_reduce_162,
  0, 161, :_reduce_163,
  3, 161, :_reduce_164,
  0, 136, :_reduce_165,
  1, 136, :_reduce_166,
  3, 136, :_reduce_167,
  4, 151, :_reduce_168,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_191,
  0, 98, :_reduce_192,
  1, 98, :_reduce_193,
  1, 100, :_reduce_194,
  2, 100, :_reduce_195,
  1, 163, :_reduce_196,
  1, 163, :_reduce_none,
  1, 109, :_reduce_198 ]

racc_reduce_n = 199

racc_shift_n = 347

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :kDTYPE_SIZE_T => 48,
  :kDTYPE_RB_STR => 49,
  :tCUSTOM_DTYPE => 50,
  :tLPAREN => 51,
  :tRPAREN => 52,
  :tLSQUARE => 53,
  :tRSQUARE => 54,
  :tIDENTIFIER => 55,
  :tNL => 56,
  :tCOMMA => 57,
  :tSQUOTE => 58,
  :tSCOLON => 59,
  :EOF => 60,
  :tDOT => 61,
  :tQMARK => 62,
  :tSYMBOL => 63,
  :tPLUS => 64,
  :tMINUS => 65,
  :tSTAR => 66,
  :tDIVIDE => 67,
  :tEXPO => 68,
  :tMODULUS => 69,
  :tASSIGN => 70,
  :tEQ => 71,
  :tLT => 72,
  :tLTEQ => 73,
  :tGT => 74,
  :tGTEQ => 75,
  :tANDOP => 76,
  :tOROP => 77,
  :tBANG => 78,
  :tOP_ASSIGN => 79,
  :tSTRING => 80,
  :kSIZEOF => 81,
  :tBIT_AND => 82,
  :tBIT_OR => 83,
  :tBIT_XOR => 84,
  :tBIT_LSHIFT => 85,
  :tBIT_RSHIFT => 86,
  :tBIT_NOT => 87,
  :tINTEGER => 88,
  :tFLOAT => 89,
  :tSINGLE_CHAR => 90,
  :ADDRESS_OF => 91,
  :TYPECAST => 92,
  :UMINUS => 93,
  :tNEQ => 94 }

racc_nt_base = 95

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_24(val, _values, result)
            val[3].pop # HACK: because declared external C functions don't have implicit self argument.
        result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_27(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_29(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_32(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_35(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_36(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_37(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_42(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_43(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_44(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_45(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_46(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_50(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_51(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_94(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_97(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_98(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_100(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_101(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_103(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_104(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_115(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_118(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_119(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_120(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_122(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_124(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_127(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_130(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_143(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_144(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_145(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_157(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_159(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_160(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_161(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_162(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_166(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_167(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_168(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_191(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_193(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_194(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_195(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_196(val, _values, result)
    
    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_198(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
