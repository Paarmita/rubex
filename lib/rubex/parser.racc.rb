#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 469)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'94,95,97,219,229,219,213,98,99,-143,141,114,115,116,89,140,84,77,283',
'267,17,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'121,162,163,67,107,67,162,163,198,169,203,170,117,199,122,202,284,162',
'163,162,163,217,169,162,163,162,163,120,167,113,123,15,94,95,97,124',
'110,111,112,98,99,172,24,114,115,116,89,12,84,25,11,10,16,30,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,170,285,169,107',
'170,21,26,21,22,73,22,117,-150,122,174,175,176,177,178,179,28,167,165',
'162,163,74,120,52,113,123,15,94,95,97,124,110,111,112,98,99,164,57,114',
'115,116,89,12,84,162,163,10,16,30,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,121,15,73,15,107,21,21,21,22,22,22,58,117,21',
'122,59,22,12,74,12,11,10,16,10,16,21,61,120,22,113,123,62,94,95,97,124',
'110,111,112,98,99,162,163,114,115,116,89,21,84,21,22,63,22,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,169,64,170',
'107,174,175,176,177,178,179,67,117,68,122,174,175,176,177,178,179,67',
'180,181,182,183,184,120,307,113,123,308,94,95,97,124,110,111,112,98',
'99,162,163,114,115,116,89,67,84,176,177,178,179,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,162,163,72,107,174,175',
'176,177,178,179,75,117,77,122,176,177,178,179,162,163,67,180,181,182',
'183,184,120,138,113,123,142,94,95,97,124,110,111,112,98,99,162,163,114',
'115,116,89,64,84,162,163,290,291,30,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,121,224,225,145,107,174,175,176,177,178,179',
'146,117,149,122,226,227,162,163,290,291,64,180,181,182,183,184,120,171',
'113,123,200,94,95,97,124,110,111,112,98,99,162,163,114,115,116,89,201',
'84,75,209,59,165,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,121,169,217,221,107,174,175,176,177,178,179,233,117,266',
'122,178,67,271,275,170,149,279,180,181,182,183,184,120,280,113,123,162',
'94,95,97,124,110,111,112,98,99,282,165,114,115,116,89,178,84,178,178',
'178,286,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,121,213,292,295,107,15,205,299,114,115,116,,117,,122,174,175,176',
'177,178,179,12,,,,10,16,120,,113,123,,,181,182,124,110,111,112,121,',
',,153,,,,114,115,116,,117,,122,21,,,22,114,115,116,,,,,,120,,113,123',
',,,,124,110,111,112,121,,,,153,,,,114,115,116,160,117,,122,153,,,,,',
',,117,,122,,120,,113,123,,,,,124,110,111,112,121,113,123,,153,,,124',
'110,111,112,,117,,122,114,115,116,,,,,,,,,,120,,113,123,,,,,124,110',
'111,112,265,,,,114,115,116,121,,,,153,174,175,176,177,178,179,,117,',
'122,,114,115,116,,,,180,181,182,183,184,120,121,113,123,,153,,,124,110',
'111,112,,117,,122,,114,115,116,121,,,,153,,,,120,,113,123,117,,122,',
'124,110,111,112,,,,,114,115,116,120,160,113,123,,153,,,124,110,111,112',
',117,,122,114,115,116,,,,,,,,,,160,,113,123,153,,,,124,110,111,112,117',
',122,114,115,116,,160,,,,153,,,,,,113,123,117,,122,,124,110,111,112',
',,,,114,115,116,121,,113,123,153,,,,124,110,111,112,117,,122,,114,115',
'116,,,,,,,,,120,160,113,123,,153,,,124,110,111,112,,117,,122,,114,115',
'116,121,,,,153,,,,,,113,123,117,,122,,124,110,111,112,,,,,114,115,116',
'120,121,113,123,,153,,,124,110,111,112,,117,,122,114,115,116,,,,,,,',
',,120,,113,123,239,,,,124,110,111,112,117,,,77,114,115,116,121,,,,153',
',,,,,113,,117,,122,,,110,111,112,,,,,,,,120,121,113,123,,153,,,124,110',
'111,112,,117,,122,114,115,116,,,,,,,,,,120,,113,123,,,,,124,110,111',
'112,,,,,114,115,116,121,,,,153,174,175,176,177,178,179,,117,,122,,114',
'115,116,,,,180,181,182,183,184,120,121,113,123,,153,,,124,110,111,112',
',117,,122,,114,115,116,121,,,,153,,,,120,,113,123,117,,122,,124,110',
'111,112,,,,,,,,120,121,113,123,,153,,,124,110,111,112,,117,,122,114',
'115,116,,,,,,,,,,120,,113,123,,,,,124,110,111,112,,,,114,115,116,,160',
',,,153,,,,,114,115,116,117,,122,174,175,176,177,178,179,,,,,,,160,,113',
'123,153,180,181,182,124,110,111,112,117,160,122,,,153,,,,114,115,116',
',117,,122,,113,123,,114,115,116,124,110,111,112,,,,113,123,,,,,124,110',
'111,112,160,,,,153,,,,114,115,116,160,117,,122,153,,,,114,115,116,,117',
',122,,,,113,123,,,,,124,110,111,112,160,113,123,,153,,,124,110,111,112',
'160,117,,122,153,,,,114,115,116,,117,,122,,,,113,123,,114,115,116,124',
'110,111,112,,113,123,,,,,124,110,111,112,160,,,,153,,,,,114,115,116',
'117,160,122,,,153,,,,,114,115,116,117,,122,,113,123,,,,,124,110,111',
'112,,160,,113,123,153,,,,124,110,111,112,117,160,122,,,153,,,,114,115',
'116,,117,,122,,113,123,,114,115,116,124,110,111,112,,,,113,123,,,,,124',
'110,111,112,160,,,,153,,,,114,115,116,160,117,,122,153,,,,114,115,116',
',117,,122,,,,113,123,,,,,124,110,111,112,160,113,123,,153,,,124,110',
'111,112,160,117,,122,153,,,,114,115,116,,117,,122,,,,113,123,,114,115',
'116,124,110,111,112,,113,123,,,,,124,110,111,112,160,,,,153,,,,,114',
'115,116,117,160,122,,,153,,,114,115,116,,,117,,122,,113,123,,,,,124',
'110,111,112,,121,,113,123,153,,,,124,110,111,112,117,,122,239,,,,114',
'115,116,,117,,,,120,,113,123,,,,,124,110,111,112,,113,,,,,,,110,111',
'112,121,,298,,153,,,,114,115,116,,117,,122,,,,,114,115,116,,,,,,120',
',113,123,,,,,124,110,111,112,121,,,,153,,,,114,115,116,160,117,,122',
'153,,,,,,,,117,,122,,120,,113,123,,,,,124,110,111,112,160,113,123,,153',
',,124,110,111,112,,117,,122,114,115,116,,,,,174,175,176,177,178,179',
',113,123,,,,,124,110,111,112,180,181,182,,114,115,116,121,,,,153,174',
'175,176,177,178,179,,117,,122,,,,,,,,180,181,182,183,184,120,121,113',
'123,,153,,,124,110,111,112,,117,,122,,,206,,,,,,,,,,120,,113,123,,12',
',84,124,110,111,112,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,265,,,,,21,,,22,,,,174,175,176,177,178,179,,185,187,188',
'189,190,,,,,,180,181,182,183,184,,,,,,,186,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,,,,,,21,,,22,174,175,176,177,178',
'179,,185,187,188,189,190,,,,,,180,181,182,183,184,12,,84,,,,186,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,274,,,,,,,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,132,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,132',
'174,175,176,177,178,179,,,224,225,226,227,,,,,,180,181,182,183,184,174',
'175,176,177,178,179,174,175,176,177,178,179,,,,,,180,181,182,183,184',
',180,181,182,183,184,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50' ]
        racc_action_table = arr = ::Array.new(2183, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,71,71,157,161,300,144,71,71,240,84,71,71,71,71,84,71,144,240,194',
'1,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'194,194,157,71,300,104,104,127,107,134,107,71,127,71,134,244,150,150',
'161,161,244,109,157,157,300,300,71,107,71,71,19,135,135,135,71,71,71',
'71,135,135,109,10,135,135,135,135,19,135,11,19,19,19,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,233,245,239,135,239,19,12,2,19,233,2,135,239,135,255,255,255,255',
'255,255,15,239,105,245,245,233,135,17,135,135,23,148,148,148,135,135',
'135,135,148,148,105,24,148,148,148,148,23,148,156,156,23,23,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,0,61,66,148,148,23,5,148,23,5,25,148,78,148,26,78,0,61,66',
'0,0,0,66,66,79,27,148,79,148,148,28,218,218,218,148,148,148,148,218',
'218,216,216,218,218,218,218,86,218,91,86,29,91,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,153',
'51,153,218,259,259,259,259,259,259,56,218,57,218,256,256,256,256,256',
'256,58,259,259,259,259,259,218,304,218,218,304,221,221,221,218,218,218',
'218,221,221,232,232,221,221,221,221,59,221,248,248,248,248,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,243,243,60,221,260,260,260,260,260,260,63,221,65,221,249,249',
'249,249,246,246,76,260,260,260,260,260,221,81,221,221,85,229,229,229',
'221,221,221,221,229,229,247,247,229,229,229,229,88,229,276,276,277,277',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,279,279,89,229,261,261,261,261,261,261,90,229,92',
'229,280,280,305,305,309,309,106,261,261,261,261,261,229,108,229,229',
'129,291,291,291,229,229,229,229,291,291,310,310,291,291,291,291,131',
'291,138,139,145,151,291,291,291,291,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,291,291,291,291,154,155,158,291,262,262,262',
'262,262,262,165,291,193,291,195,198,204,211,213,215,222,262,262,262',
'262,262,291,223,291,291,231,306,306,306,291,291,291,291,306,306,236',
'242,306,306,306,306,250,306,251,252,253,274,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,275',
'278,281,306,136,136,288,94,94,94,,306,,306,254,254,254,254,254,254,136',
',,,136,136,306,,306,306,,,254,254,306,306,306,306,94,,,,94,,,,95,95',
'95,,94,,94,136,,,136,98,98,98,,,,,,94,,94,94,,,,,94,94,94,94,95,,,,95',
',,,97,97,97,98,95,,95,98,,,,,,,,98,,98,,95,,95,95,,,,,95,95,95,95,97',
'98,98,,97,,,98,98,98,98,,97,,97,99,99,99,,,,,,,,,,97,,97,97,,,,,97,97',
'97,97,228,,,,120,120,120,99,,,,99,228,228,228,228,228,228,,99,,99,,121',
'121,121,,,,228,228,228,228,228,99,120,99,99,,120,,,99,99,99,99,,120',
',120,,122,122,122,121,,,,121,,,,120,,120,120,121,,121,,120,120,120,120',
',,,,123,123,123,121,122,121,121,,122,,,121,121,121,121,,122,,122,124',
'124,124,,,,,,,,,,123,,122,122,123,,,,122,122,122,122,123,,123,149,149',
'149,,124,,,,124,,,,,,123,123,124,,124,,123,123,123,123,,,,,160,160,160',
'149,,124,124,149,,,,124,124,124,124,149,,149,,162,162,162,,,,,,,,,149',
'160,149,149,,160,,,149,149,149,149,,160,,160,,163,163,163,162,,,,162',
',,,,,160,160,162,,162,,160,160,160,160,,,,,166,166,166,162,163,162,162',
',163,,,162,162,162,162,,163,,163,164,164,164,,,,,,,,,,163,,163,163,166',
',,,163,163,163,163,166,,,166,167,167,167,164,,,,164,,,,,,166,,164,,164',
',,166,166,166,,,,,,,,164,167,164,164,,167,,,164,164,164,164,,167,,167',
'169,169,169,,,,,,,,,,167,,167,167,,,,,167,167,167,167,,,,,170,170,170',
'169,,,,169,263,263,263,263,263,263,,169,,169,,171,171,171,,,,263,263',
'263,263,263,169,170,169,169,,170,,,169,169,169,169,,170,,170,,172,172',
'172,171,,,,171,,,,170,,170,170,171,,171,,170,170,170,170,,,,,,,,171',
'172,171,171,,172,,,171,171,171,171,,172,,172,174,174,174,,,,,,,,,,172',
',172,172,,,,,172,172,172,172,,,,175,175,175,,174,,,,174,,,,,176,176',
'176,174,,174,257,257,257,257,257,257,,,,,,,175,,174,174,175,257,257',
'257,174,174,174,174,175,176,175,,,176,,,,177,177,177,,176,,176,,175',
'175,,178,178,178,175,175,175,175,,,,176,176,,,,,176,176,176,176,177',
',,,177,,,,179,179,179,178,177,,177,178,,,,180,180,180,,178,,178,,,,177',
'177,,,,,177,177,177,177,179,178,178,,179,,,178,178,178,178,180,179,',
'179,180,,,,181,181,181,,180,,180,,,,179,179,,182,182,182,179,179,179',
'179,,180,180,,,,,180,180,180,180,181,,,,181,,,,,183,183,183,181,182',
'181,,,182,,,,,184,184,184,182,,182,,181,181,,,,,181,181,181,181,,183',
',182,182,183,,,,182,182,182,182,183,184,183,,,184,,,,185,185,185,,184',
',184,,183,183,,186,186,186,183,183,183,183,,,,184,184,,,,,184,184,184',
'184,185,,,,185,,,,187,187,187,186,185,,185,186,,,,188,188,188,,186,',
'186,,,,185,185,,,,,185,185,185,185,187,186,186,,187,,,186,186,186,186',
'188,187,,187,188,,,,189,189,189,,188,,188,,,,187,187,,190,190,190,187',
'187,187,187,,188,188,,,,,188,188,188,188,189,,,,189,,,,,217,217,217',
'189,190,189,,,190,,,282,282,282,,,190,,190,,189,189,,,,,189,189,189',
'189,,217,,190,190,217,,,,190,190,190,190,217,,217,282,,,,283,283,283',
',282,,,,217,,217,217,,,,,217,217,217,217,,282,,,,,,,282,282,282,283',
',283,,283,,,,290,290,290,,283,,283,,,,,293,293,293,,,,,,283,,283,283',
',,,,283,283,283,283,290,,,,290,,,,294,294,294,293,290,,290,293,,,,,',
',,293,,293,,290,,290,290,,,,,290,290,290,290,294,293,293,,294,,,293',
'293,293,293,,294,,294,298,298,298,,,,,258,258,258,258,258,258,,294,294',
',,,,294,294,294,294,258,258,258,,308,308,308,298,,,,298,264,264,264',
'264,264,264,,298,,298,,,,,,,,264,264,264,264,264,298,308,298,298,,308',
',,298,298,298,298,,308,,308,,,137,,,,,,,,,,308,,308,308,,137,,137,308',
'308,308,308,137,137,137,137,137,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,192,,,,,137,,,137,,,,192,192,192,192,192',
'192,,192,192,192,192,192,,,,,,192,192,192,192,192,,,,,,,192,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,,,,,,143,,,143,118,118,118,118,118,118,,118,118,118,118,118',
',,,,,118,118,118,118,118,69,,69,,,,118,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,209,,,,,,,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,72,72,72,72',
'72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,,,,,72,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,,75,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,,,,,199,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,,,,,202,159,159,159,159,159,159,,,159,159',
'159,159,,,,,,159,159,159,159,159,302,302,302,302,302,302,303,303,303',
'303,303,303,,,,,,302,302,302,302,302,,303,303,303,303,303,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70' ]
        racc_action_check = arr = ::Array.new(2183, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   189,    20,    73,   nil,   nil,   146,   nil,   nil,   nil,   nil,
    34,    16,    73,   nil,   nil,   113,  2116,   144,   nil,    71,
   nil,   nil,   nil,   145,    91,   187,   191,   166,   165,   191,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   205,   nil,   nil,   nil,   nil,   224,   227,   234,   260,
   295,   135,   nil,   303,   nil,   290,   191,   nil,   nil,  1913,
  2137,    -4,  1962,   nil,   nil,  1988,   308,   nil,   152,   164,
   nil,   316,   nil,   nil,   -35,   366,   186,   nil,   324,   365,
   420,   188,   419,   nil,   553,   592,   nil,   631,   603,   677,
   nil,   nil,   nil,   nil,   -23,    83,   372,     5,   375,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1850,   nil,
   705,   724,   752,   779,   798,   nil,   nil,     3,   nil,   393,
   nil,   409,   nil,   nil,     5,    70,   563,  1792,   415,   397,
   nil,   nil,   nil,  1854,   -44,   449,   nil,   nil,   144,   825,
   -12,   408,   nil,   219,   441,   436,    94,    -6,   475,  2032,
   853,   -10,   872,   900,   946,   447,   927,   974,   nil,  1020,
  1048,  1067,  1095,   nil,  1141,  1168,  1181,  1220,  1231,  1259,
  1270,  1309,  1322,  1349,  1362,  1401,  1412,  1440,  1451,  1490,
  1503,   nil,  1791,   452,   -28,   438,   nil,   nil,   451,  2014,
   nil,   nil,  2040,   nil,   500,   nil,   nil,   nil,   nil,  1941,
   nil,   452,   nil,   457,   nil,   500,   160,  1530,   218,   nil,
   nil,   292,   457,   464,   nil,   nil,   nil,   nil,   669,   366,
   nil,   446,   234,    69,   nil,   nil,   475,   nil,   nil,    73,
   -47,   nil,   472,   268,    11,    69,   286,   308,   252,   292,
   470,   472,   473,   474,   516,    72,   220,  1143,  1667,   210,
   284,   358,   432,  1012,  1696,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   488,   511,   316,   382,   559,   346,
   358,   560,  1541,  1580,   nil,   nil,   nil,   nil,   564,   nil,
  1619,   440,   nil,  1630,  1658,   nil,   nil,   nil,  1704,   nil,
    -4,   nil,  2054,  2060,   243,   358,   514,   nil,  1732,   424,
   382,   nil ]

racc_action_default = [
    -6,  -185,  -178,    -2,    -4,  -185,    -7,    -9,   -10,   -11,
  -185,  -185,  -185,   -35,   -36,   -39,  -185,  -185,    -1,  -179,
  -180,  -182,  -183,    -5,   -13,  -185,  -185,  -185,  -185,  -185,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,   -80,   312,    -3,  -181,    -8,  -185,  -185,  -185,  -185,
  -108,  -107,   -40,   -33,   -81,  -177,    -6,  -184,   -14,  -185,
   -60,   -42,  -185,  -105,  -106,   -30,  -185,   -82,  -185,  -185,
   -16,  -185,   -19,   -20,  -185,  -185,  -185,   -61,   -80,  -185,
  -185,  -178,   -43,   -45,  -185,  -152,   -48,  -185,  -185,  -185,
   -53,   -54,   -55,   -56,   -57,  -135,   -80,  -150,  -143,  -150,
   -97,   -98,   -99,  -100,  -101,  -102,  -103,  -104,  -114,  -115,
  -185,  -185,  -185,  -185,  -185,  -144,  -146,  -185,  -110,  -185,
  -113,   -27,   -29,   -31,  -185,   -42,  -185,  -185,   -33,  -185,
   -23,   -24,   -21,   -59,  -185,   -58,   -37,   -41,  -179,  -185,
   -46,  -135,  -143,  -150,  -150,   -47,  -153,  -185,  -185,  -185,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -145,  -152,
  -185,  -185,  -185,  -147,  -185,  -185,  -185,  -185,  -185,  -185,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,
  -185,  -118,  -114,  -115,  -185,  -131,  -132,  -133,  -185,  -185,
  -112,   -28,  -185,   -34,  -185,   -12,   -15,   -17,   -18,  -185,
   -62,   -63,   -64,   -87,   -88,   -44,   -50,  -185,   -42,   -73,
   -74,   -42,  -185,  -185,   -69,   -70,   -71,   -72,  -185,   -42,
  -116,  -117,   -66,  -107,  -148,  -149,   -79,   -85,   -86,   -87,
   -88,   -89,  -185,   -94,  -185,  -185,   -95,   -96,  -120,  -121,
  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -136,
  -137,  -138,  -139,  -140,  -141,  -134,  -142,  -119,  -109,  -111,
   -32,   -38,   -22,   -25,  -185,  -185,  -154,   -75,  -185,  -185,
  -185,  -185,  -185,  -185,  -151,  -155,   -26,   -65,  -185,   -76,
  -185,   -42,   -51,  -185,  -185,   -52,   -83,   -84,   -91,   -49,
  -185,   -78,   -67,   -68,  -185,   -92,   -42,   -90,  -185,   -75,
   -93,   -77 ]

racc_goto_table = [
    90,   105,   218,    60,   212,    18,   108,   109,   155,    55,
    66,    76,    69,    70,    54,    87,   223,    29,    54,   133,
   222,    80,   128,    83,     9,   288,   237,   173,   241,     1,
   135,    19,    65,     3,    23,     2,    78,    56,    79,   238,
    85,   139,   272,     9,   134,    27,    71,     9,   150,   156,
   215,   157,    53,   161,   158,    86,   211,   311,   236,   304,
   127,   193,   nil,   nil,   204,   105,   nil,   nil,   nil,   144,
   108,   109,   173,   129,   191,   194,   131,   nil,   105,   214,
    51,   nil,   244,   108,   109,   nil,   208,   166,   210,   207,
     9,    83,   nil,    82,   147,   nil,   242,   nil,   nil,   nil,
   235,   240,   109,   216,   159,   nil,   nil,   136,   137,   nil,
   nil,   nil,   nil,   nil,   nil,   143,   230,   231,   232,   nil,
   148,   243,    55,   156,   245,   246,   247,   192,   195,   196,
   197,    54,    54,    51,    88,   287,    51,   294,    54,    51,
   293,   234,   297,    54,   241,   306,   270,   277,   105,   269,
   278,   105,   268,   108,   109,   296,   108,   109,   281,   105,
     9,    82,   nil,   nil,   108,   109,   228,   nil,   nil,   nil,
   nil,   276,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   nil,   nil,   nil,
   129,    51,   nil,   131,   nil,   nil,   nil,    88,   nil,   nil,
   214,   nil,   242,   nil,   nil,   nil,   nil,   240,   109,   nil,
   301,   105,   nil,   nil,   nil,   nil,   108,   109,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   309,   105,   246,   nil,   nil,
   nil,   108,   109,   nil,   300,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   305,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   310,    51,   nil,   nil,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   273,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,
   303 ]

racc_goto_check = [
    30,    47,    37,    28,    46,     3,    54,    56,    35,     8,
    13,    17,    13,    13,    63,    43,    50,    16,    63,    23,
    49,    15,    59,    18,    11,    38,    46,    61,    36,     1,
    13,     5,    44,     4,     5,     2,     7,    12,    14,    53,
    19,    20,    21,    11,    24,    27,    29,    11,    34,    34,
    32,    34,     4,    34,    39,    42,    45,    38,    52,    55,
    58,    60,   nil,   nil,    30,    47,   nil,   nil,   nil,    44,
    54,    56,    61,    16,    34,    34,    16,   nil,    47,    54,
    22,   nil,    35,    54,    56,   nil,    17,    44,    43,    15,
    11,    18,   nil,    11,     3,   nil,    47,   nil,   nil,   nil,
    54,    54,    56,    34,    48,   nil,   nil,     5,     5,   nil,
   nil,   nil,   nil,   nil,   nil,     5,    34,    34,    34,   nil,
     5,    34,     8,    34,    34,    34,    34,    48,    48,    48,
    48,    63,    63,    22,    22,    46,    22,    50,    63,    22,
    49,    28,    46,    63,    36,    37,    23,    30,    47,    59,
    30,    47,    13,    54,    56,    53,    54,    56,    30,    47,
    11,    11,   nil,   nil,    54,    56,    48,   nil,   nil,   nil,
   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,   nil,   nil,   nil,
    16,    22,   nil,    16,   nil,   nil,   nil,    22,   nil,   nil,
    54,   nil,    47,   nil,   nil,   nil,   nil,    54,    56,   nil,
    30,    47,   nil,   nil,   nil,   nil,    54,    56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    30,    47,    34,   nil,   nil,
   nil,    54,    56,   nil,    34,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    34,    22,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,
    48 ]

racc_goto_pointer = [
   nil,    29,    35,     3,    33,    29,   nil,   -30,   -14,   nil,
   nil,    24,    13,   -46,   -31,   -48,     1,   -52,   -46,   -30,
   -43,  -167,    64,   -56,   -31,   nil,   nil,    30,   -24,   -14,
   -71,   nil,   -98,   nil,   -46,   -87,  -138,  -155,  -252,   -44,
   nil,   nil,   -15,   -55,   -19,   -88,  -140,   -70,     6,  -139,
  -143,   nil,  -108,  -127,   -65,  -239,   -64,   nil,   -12,   -50,
   -60,   -82,   nil,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   101,   nil,   220,   nil,   nil,    81,   nil,   103,   nil,
   nil,   nil,   106,   nil,   nil,    13,    14,   nil,   nil,   nil,
   nil,    91,    92,    93,   104,   nil,    96,   nil,   nil,   nil,
   100,   102,   nil,   nil,   nil,   nil,   nil,   151,   118,   nil,
   nil,   289,   nil,   nil,   152,   nil,   154,   125,   nil,   nil,
   119,   168,   126,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 90, :_reduce_2,
  3, 90, :_reduce_3,
  1, 92, :_reduce_4,
  2, 92, :_reduce_5,
  0, 95, :_reduce_6,
  1, 95, :_reduce_7,
  3, 95, :_reduce_8,
  1, 96, :_reduce_9,
  1, 96, :_reduce_10,
  1, 96, :_reduce_11,
  7, 98, :_reduce_12,
  0, 100, :_reduce_13,
  2, 100, :_reduce_14,
  7, 94, :_reduce_15,
  1, 102, :_reduce_16,
  3, 102, :_reduce_17,
  3, 103, :_reduce_18,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  6, 99, :_reduce_21,
  4, 106, :_reduce_22,
  1, 108, :_reduce_none,
  1, 108, :_reduce_24,
  1, 109, :_reduce_none,
  2, 109, :_reduce_26,
  1, 111, :_reduce_27,
  2, 111, :_reduce_28,
  1, 111, :_reduce_29,
  0, 112, :_reduce_30,
  1, 112, :_reduce_31,
  3, 112, :_reduce_32,
  0, 105, :_reduce_33,
  3, 105, :_reduce_34,
  1, 97, :_reduce_35,
  1, 97, :_reduce_36,
  6, 113, :_reduce_37,
  7, 114, :_reduce_38,
  0, 115, :_reduce_39,
  2, 115, :_reduce_40,
  2, 118, :_reduce_41,
  0, 119, :_reduce_42,
  1, 119, :_reduce_43,
  3, 119, :_reduce_44,
  1, 120, :_reduce_45,
  2, 120, :_reduce_46,
  2, 120, :_reduce_47,
  1, 120, :_reduce_48,
  6, 120, :_reduce_49,
  3, 120, :_reduce_50,
  5, 120, :_reduce_51,
  5, 120, :_reduce_52,
  1, 120, :_reduce_53,
  1, 120, :_reduce_none,
  1, 120, :_reduce_55,
  1, 120, :_reduce_none,
  1, 120, :_reduce_57,
  2, 129, :_reduce_58,
  2, 107, :_reduce_59,
  0, 130, :_reduce_60,
  1, 130, :_reduce_61,
  3, 130, :_reduce_62,
  3, 131, :_reduce_63,
  1, 133, :_reduce_64,
  3, 133, :_reduce_65,
  3, 128, :_reduce_66,
  5, 127, :_reduce_67,
  5, 127, :_reduce_68,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  0, 126, :_reduce_75,
  1, 126, :_reduce_76,
  5, 126, :_reduce_77,
  2, 139, :_reduce_78,
  3, 121, :_reduce_79,
  0, 132, :_reduce_80,
  1, 132, :_reduce_81,
  2, 132, :_reduce_82,
  3, 140, :_reduce_83,
  3, 140, :_reduce_84,
  1, 140, :_reduce_85,
  1, 140, :_reduce_86,
  1, 134, :_reduce_87,
  1, 134, :_reduce_88,
  1, 141, :_reduce_none,
  5, 141, :_reduce_90,
  0, 143, :_reduce_91,
  1, 143, :_reduce_92,
  3, 143, :_reduce_93,
  3, 124, :_reduce_94,
  3, 124, :_reduce_95,
  3, 124, :_reduce_96,
  1, 145, :_reduce_97,
  1, 145, :_reduce_98,
  1, 145, :_reduce_99,
  1, 145, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 145, :_reduce_103,
  1, 145, :_reduce_104,
  2, 116, :_reduce_105,
  2, 116, :_reduce_106,
  1, 116, :_reduce_107,
  0, 117, :_reduce_108,
  4, 117, :_reduce_109,
  1, 146, :_reduce_110,
  3, 146, :_reduce_111,
  2, 147, :_reduce_112,
  1, 147, :_reduce_113,
  1, 122, :_reduce_114,
  1, 122, :_reduce_115,
  3, 122, :_reduce_116,
  3, 122, :_reduce_117,
  2, 122, :_reduce_118,
  3, 122, :_reduce_119,
  3, 136, :_reduce_120,
  3, 136, :_reduce_121,
  3, 136, :_reduce_122,
  3, 136, :_reduce_123,
  3, 136, :_reduce_124,
  3, 136, :_reduce_125,
  3, 136, :_reduce_126,
  3, 136, :_reduce_127,
  3, 136, :_reduce_128,
  3, 136, :_reduce_129,
  3, 136, :_reduce_130,
  2, 136, :_reduce_131,
  2, 136, :_reduce_132,
  2, 136, :_reduce_133,
  3, 136, :_reduce_134,
  1, 136, :_reduce_135,
  3, 148, :_reduce_136,
  3, 148, :_reduce_137,
  3, 148, :_reduce_138,
  3, 148, :_reduce_139,
  3, 148, :_reduce_140,
  3, 148, :_reduce_141,
  3, 148, :_reduce_142,
  1, 135, :_reduce_143,
  1, 135, :_reduce_144,
  2, 135, :_reduce_145,
  1, 135, :_reduce_none,
  2, 150, :_reduce_147,
  3, 144, :_reduce_148,
  3, 144, :_reduce_149,
  0, 149, :_reduce_150,
  3, 149, :_reduce_151,
  0, 123, :_reduce_152,
  1, 123, :_reduce_153,
  3, 123, :_reduce_154,
  4, 142, :_reduce_155,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_176,
  2, 104, :_reduce_177,
  0, 91, :_reduce_178,
  1, 91, :_reduce_179,
  1, 93, :_reduce_180,
  2, 93, :_reduce_181,
  1, 151, :_reduce_182,
  1, 151, :_reduce_none,
  1, 101, :_reduce_184 ]

racc_reduce_n = 185

racc_shift_n = 312

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :kDTYPE_VOID => 44,
  :tCUSTOM_DTYPE => 45,
  :tLPAREN => 46,
  :tRPAREN => 47,
  :tLSQUARE => 48,
  :tRSQUARE => 49,
  :tIDENTIFIER => 50,
  :tNL => 51,
  :tCOMMA => 52,
  :tSQUOTE => 53,
  :tSCOLON => 54,
  :EOF => 55,
  :tDOT => 56,
  :tQMARK => 57,
  :tSYMBOL => 58,
  :tPLUS => 59,
  :tMINUS => 60,
  :tSTAR => 61,
  :tDIVIDE => 62,
  :tEXPO => 63,
  :tMODULUS => 64,
  :tASSIGN => 65,
  :tEQ => 66,
  :tLT => 67,
  :tLTEQ => 68,
  :tGT => 69,
  :tGTEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tBANG => 73,
  :tOP_ASSIGN => 74,
  :tSTRING => 75,
  :tBIT_AND => 76,
  :tBIT_OR => 77,
  :tBIT_XOR => 78,
  :tBIT_LSHIFT => 79,
  :tBIT_RSHIFT => 80,
  :tBIT_NOT => 81,
  :tINTEGER => 82,
  :tFLOAT => 83,
  :tSINGLE_CHAR => 84,
  :ADDRESS_OF => 85,
  :UMINUS => 86,
  :tNEQ => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "alias_stmt",
  "var_decl_stmts",
  "ident_or_custom_dtype",
  "aliased_type",
  "dtype",
  "c_func_normal_arg",
  "c_func_args",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_18(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2]
      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_22(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_26(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = CBaseType.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_28(val, _values, result)
     result = CBaseType.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_29(val, _values, result)
     result = CBaseType.new('object', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_32(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_34(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_37(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_38(val, _values, result)
            result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_39(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_40(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_42(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_43(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_44(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_45(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_46(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_47(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_48(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_49(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_50(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_51(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_52(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_57(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_58(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_59(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_60(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_62(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_63(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_65(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_66(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_67(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_68(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_75(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_76(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_77(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_78(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_79(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_80(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_81(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_82(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_84(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_86(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_87(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_88(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_90(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_91(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_92(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_93(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_94(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_95(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_96(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_97(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_98(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_99(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_100(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_105(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_106(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_107(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_108(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_109(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_111(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_112(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_113(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_118(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_119(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_131(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_132(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_133(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_135(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_144(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_145(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_147(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_148(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_149(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_150(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_152(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_153(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_154(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_155(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'parser.racc', 439)
  def _reduce_176(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_177(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_178(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_179(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_180(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_181(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_184(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
