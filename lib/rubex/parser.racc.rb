#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 428)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    41,    42,    44,   167,   178,    98,    10,    45,    46,    11,
    97,    60,    61,    62,    48,   167,    36,    10,   231,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   128,
   146,   147,   169,    53,    31,   185,   269,    15,    31,    18,
    16,    19,    15,    21,   169,    16,   182,   182,   146,   147,
    32,   127,   146,   147,    32,    41,    42,    44,    59,    56,
    57,    58,    45,    46,   146,   147,    60,    61,    62,    48,
   130,    36,    10,   135,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    10,   219,   132,    22,    53,    15,
   230,   133,    16,    15,    26,   165,    16,   148,   149,   150,
   151,   152,   153,     8,     7,    27,    15,    30,    10,    16,
    41,    42,    44,    59,    56,    57,    58,    45,    46,    34,
   251,    60,    61,    62,    48,   252,    36,     8,     7,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    99,
   127,   219,   128,    53,    15,    15,    15,    16,    16,    16,
   126,   146,   147,   148,   149,   150,   151,   152,   153,   124,
   154,   156,   157,   158,   159,    41,    42,    44,    59,    56,
    57,    58,    45,    46,   155,   102,    60,    61,    62,    48,
    15,    36,   120,    16,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,   204,   146,   147,   121,    53,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   123,
    41,    42,    44,    59,    56,    57,    58,    45,    46,   146,
   147,    60,    61,    62,    48,    15,    36,   129,    16,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   127,
   134,   128,   128,    53,    15,    15,   140,    16,    16,   126,
   126,   146,   147,   148,   149,   150,   151,   152,   153,   124,
   154,   156,   157,   158,   159,    41,    42,    44,    59,    56,
    57,    58,    45,    46,   155,   141,    60,    61,    62,    48,
   272,    36,   123,   273,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,   150,   151,   152,   153,    53,   148,
   149,   150,   151,   152,   153,   146,   147,   143,   148,   149,
   150,   151,   152,   153,   127,   154,   156,   157,   158,   159,
    41,    42,    44,    59,    56,    57,    58,    45,    46,   155,
   165,    60,    61,    62,    48,   170,    36,   146,   147,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   150,
   151,   152,   153,    53,    60,    61,    62,   146,   147,   179,
    60,    61,    62,   146,   147,   190,    60,    61,    62,   148,
   149,   150,   151,   152,   153,   241,   242,   169,    59,    56,
    57,    58,   107,   173,   174,   200,   111,   201,   107,   175,
   176,   182,   111,   102,   107,   152,   106,   220,   111,    60,
    61,    62,   106,   146,   147,    60,    61,    62,   106,   109,
   224,    59,    56,    57,    58,   109,   225,    59,    56,    57,
    58,   109,   228,    59,    56,    57,    58,   118,   241,   242,
   229,   111,   130,   107,   146,   147,   238,   111,    60,    61,
    62,   106,   146,    60,    61,    62,   152,   106,   152,    60,
    61,    62,   152,   152,   243,   246,    59,    56,    57,    58,
   109,   185,    59,    56,    57,    58,   107,   253,   123,   257,
   111,   118,   262,   274,   128,   111,   269,   107,   nil,   nil,
   106,   111,    60,    61,    62,   106,   nil,    60,    61,    62,
   nil,   106,   nil,   109,   nil,    59,    56,    57,    58,   nil,
    59,    56,    57,    58,   109,   nil,    59,    56,    57,    58,
   107,   nil,   nil,   nil,   111,   118,   nil,   nil,   nil,   111,
    60,    61,    62,   nil,   106,   nil,    60,    61,    62,   106,
   nil,   nil,    60,    61,    62,   nil,   nil,   109,   nil,    59,
    56,    57,    58,   nil,    59,    56,    57,    58,   107,   nil,
   nil,   nil,   111,   nil,   107,   nil,   nil,   nil,   111,   nil,
   107,   nil,   106,   nil,   111,    60,    61,    62,   106,   nil,
   nil,    60,    61,    62,   106,   109,   nil,    59,    56,    57,
    58,   109,   nil,    59,    56,    57,    58,   109,   nil,    59,
    56,    57,    58,   107,   nil,   nil,   nil,   111,   nil,   107,
   nil,   nil,   nil,   111,    60,    61,    62,   106,   nil,   nil,
    60,    61,    62,   106,   nil,   nil,    60,    61,    62,   nil,
   109,   nil,    59,    56,    57,    58,   109,   nil,    59,    56,
    57,    58,   107,   nil,   nil,   nil,   111,   nil,   107,   nil,
   nil,   nil,   111,   nil,   107,   nil,   106,   nil,   111,    60,
    61,    62,   106,   nil,    60,    61,    62,   nil,   106,   109,
   nil,    59,    56,    57,    58,   109,   nil,    59,    56,    57,
    58,   109,   nil,    59,    56,    57,    58,   118,   nil,   nil,
   nil,   111,   118,   nil,   nil,   nil,   111,    60,    61,    62,
   nil,   106,    60,    61,    62,   nil,   106,   nil,    60,    61,
    62,   nil,   nil,   nil,   nil,   nil,    59,    56,    57,    58,
   nil,    59,    56,    57,    58,   118,   nil,   nil,   nil,   111,
   118,   nil,   nil,   nil,   111,   nil,   118,   nil,   nil,   106,
   111,    60,    61,    62,   106,   nil,    60,    61,    62,   nil,
   106,   nil,   nil,   nil,    59,    56,    57,    58,   nil,    59,
    56,    57,    58,   nil,   nil,    59,    56,    57,    58,   118,
   nil,   nil,   nil,   111,   118,   nil,   nil,   nil,   111,    60,
    61,    62,   nil,   106,    60,    61,    62,   nil,   106,   nil,
    60,    61,    62,   nil,   nil,   nil,   nil,   nil,    59,    56,
    57,    58,   nil,    59,    56,    57,    58,   118,   nil,   nil,
   nil,   111,   118,   nil,   nil,   nil,   111,   nil,   118,   nil,
   nil,   106,   111,    60,    61,    62,   106,   nil,    60,    61,
    62,   nil,   106,   nil,   nil,   nil,    59,    56,    57,    58,
   nil,    59,    56,    57,    58,   nil,   nil,    59,    56,    57,
    58,   118,   nil,   nil,   nil,   111,   118,   nil,   nil,   nil,
   111,    60,    61,    62,   nil,   106,   nil,    60,    61,    62,
   106,   nil,   nil,    60,    61,    62,   nil,   nil,   nil,   nil,
    59,    56,    57,    58,   nil,    59,    56,    57,    58,   107,
   nil,   nil,   nil,   111,   nil,   107,   nil,   250,   nil,   111,
   nil,   107,   nil,   106,   nil,   111,    60,    61,    62,   106,
   nil,    60,    61,    62,   nil,   106,   109,   nil,    59,    56,
    57,    58,   109,   nil,    59,    56,    57,    58,   109,   nil,
    59,    56,    57,    58,   118,   nil,   nil,   nil,   111,   118,
   nil,   nil,   nil,   111,    60,    61,    62,   nil,   106,   nil,
    60,    61,    62,   106,   148,   149,   150,   151,   152,   153,
   nil,   nil,   nil,    59,    56,    57,    58,   nil,    59,    56,
    57,    58,   107,   nil,   nil,   nil,   111,   nil,   107,   nil,
   nil,   nil,   111,   nil,   nil,   nil,   106,   nil,   nil,   nil,
   nil,   nil,   106,   nil,   nil,   nil,   136,   nil,   nil,   109,
   nil,    59,    56,    57,    58,   109,   nil,    59,    56,    57,
    58,    93,   nil,    36,   nil,   nil,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    93,   nil,    36,   nil,
   nil,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,    16,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,    16,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   nil,
   nil,   nil,   nil,    88,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,   nil,   nil,   nil,   nil,    88,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,   148,
   149,   150,   151,   152,   153,   nil,   nil,   173,   174,   175,
   176,   148,   149,   150,   151,   152,   153,   148,   149,   150,
   151,   152,   153,   148,   149,   150,   151,   152,   153,   148,
   149,   150,   151,   152,   153,   148,   149,   150,   151,   152,
   153 ]

racc_action_check = [
    28,    28,    28,   115,   119,    36,    33,    28,    28,     1,
    36,    28,    28,    28,    28,   258,    28,     5,   194,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,   190,
   194,   194,   115,    28,    21,   122,   256,     2,   190,     7,
     2,     8,    33,    10,   258,    33,   122,   256,   119,   119,
    21,    55,   115,   115,   190,   101,   101,   101,    28,    28,
    28,    28,   101,   101,   258,   258,   101,   101,   101,   101,
    55,   101,    89,    89,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,     0,   177,    85,    11,   101,   101,
   193,    85,   101,    25,    18,   193,    25,   177,   177,   177,
   177,   177,   177,     0,     0,    19,    27,    20,    13,    27,
   166,   166,   166,   101,   101,   101,   101,   166,   166,    26,
   232,   166,   166,   166,   166,   232,   166,    13,    13,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,    37,
    53,   161,    53,   166,    13,    38,    91,    13,    38,    91,
    53,   103,   103,   161,   161,   161,   161,   161,   161,    53,
   161,   161,   161,   161,   161,   170,   170,   170,   166,   166,
   166,   166,   170,   170,   161,    39,   170,   170,   170,   170,
   137,   170,    48,   137,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   143,   114,   114,    51,   170,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,    52,
   178,   178,   178,   170,   170,   170,   170,   178,   178,   145,
   145,   178,   178,   178,   178,   139,   178,    54,   139,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   111,
    87,   111,   185,   178,   179,   235,    92,   179,   235,   111,
   185,   180,   180,   104,   104,   104,   104,   104,   104,   185,
   104,   104,   104,   104,   104,   242,   242,   242,   178,   178,
   178,   178,   242,   242,   104,    93,   242,   242,   242,   242,
   263,   242,    95,   263,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
   242,   242,   242,   242,   207,   207,   207,   207,   242,   213,
   213,   213,   213,   213,   213,   189,   189,    96,   163,   163,
   163,   163,   163,   163,   112,   163,   163,   163,   163,   163,
   271,   271,   271,   242,   242,   242,   242,   271,   271,   163,
   113,   271,   271,   271,   271,   116,   271,   195,   195,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   271,   208,
   208,   208,   208,   271,    41,    41,    41,   196,   196,   120,
    42,    42,    42,   221,   221,   126,    44,    44,    44,   214,
   214,   214,   214,   214,   214,   222,   222,   132,   271,   271,
   271,   271,    41,   224,   224,   140,    41,   141,    42,   225,
   225,   142,    42,   144,    44,   160,    41,   162,    44,    45,
    45,    45,    42,   264,   264,    46,    46,    46,    44,    41,
   171,    41,    41,    41,    41,    42,   172,    42,    42,    42,
    42,    44,   181,    44,    44,    44,    44,    45,   275,   275,
   186,    45,   188,    46,   276,   276,   204,    46,   102,   102,
   102,    45,   206,   106,   106,   106,   209,    46,   210,   107,
   107,   107,   211,   212,   223,   226,    45,    45,    45,    45,
    46,   228,    46,    46,    46,    46,   102,   234,   237,   239,
   102,   106,   247,   267,   269,   106,   274,   107,   nil,   nil,
   102,   107,   109,   109,   109,   106,   nil,   118,   118,   118,
   nil,   107,   nil,   102,   nil,   102,   102,   102,   102,   nil,
   106,   106,   106,   106,   107,   nil,   107,   107,   107,   107,
   109,   nil,   nil,   nil,   109,   118,   nil,   nil,   nil,   118,
   121,   121,   121,   nil,   109,   nil,   124,   124,   124,   118,
   nil,   nil,   127,   127,   127,   nil,   nil,   109,   nil,   109,
   109,   109,   109,   nil,   118,   118,   118,   118,   121,   nil,
   nil,   nil,   121,   nil,   124,   nil,   nil,   nil,   124,   nil,
   127,   nil,   121,   nil,   127,   128,   128,   128,   124,   nil,
   nil,   129,   129,   129,   127,   121,   nil,   121,   121,   121,
   121,   124,   nil,   124,   124,   124,   124,   127,   nil,   127,
   127,   127,   127,   128,   nil,   nil,   nil,   128,   nil,   129,
   nil,   nil,   nil,   129,   130,   130,   130,   128,   nil,   nil,
   146,   146,   146,   129,   nil,   nil,   147,   147,   147,   nil,
   128,   nil,   128,   128,   128,   128,   129,   nil,   129,   129,
   129,   129,   130,   nil,   nil,   nil,   130,   nil,   146,   nil,
   nil,   nil,   146,   nil,   147,   nil,   130,   nil,   147,   148,
   148,   148,   146,   nil,   149,   149,   149,   nil,   147,   130,
   nil,   130,   130,   130,   130,   146,   nil,   146,   146,   146,
   146,   147,   nil,   147,   147,   147,   147,   148,   nil,   nil,
   nil,   148,   149,   nil,   nil,   nil,   149,   150,   150,   150,
   nil,   148,   151,   151,   151,   nil,   149,   nil,   152,   152,
   152,   nil,   nil,   nil,   nil,   nil,   148,   148,   148,   148,
   nil,   149,   149,   149,   149,   150,   nil,   nil,   nil,   150,
   151,   nil,   nil,   nil,   151,   nil,   152,   nil,   nil,   150,
   152,   153,   153,   153,   151,   nil,   154,   154,   154,   nil,
   152,   nil,   nil,   nil,   150,   150,   150,   150,   nil,   151,
   151,   151,   151,   nil,   nil,   152,   152,   152,   152,   153,
   nil,   nil,   nil,   153,   154,   nil,   nil,   nil,   154,   155,
   155,   155,   nil,   153,   156,   156,   156,   nil,   154,   nil,
   157,   157,   157,   nil,   nil,   nil,   nil,   nil,   153,   153,
   153,   153,   nil,   154,   154,   154,   154,   155,   nil,   nil,
   nil,   155,   156,   nil,   nil,   nil,   156,   nil,   157,   nil,
   nil,   155,   157,   158,   158,   158,   156,   nil,   159,   159,
   159,   nil,   157,   nil,   nil,   nil,   155,   155,   155,   155,
   nil,   156,   156,   156,   156,   nil,   nil,   157,   157,   157,
   157,   158,   nil,   nil,   nil,   158,   159,   nil,   nil,   nil,
   159,   165,   165,   165,   nil,   158,   nil,   229,   229,   229,
   159,   nil,   nil,   241,   241,   241,   nil,   nil,   nil,   nil,
   158,   158,   158,   158,   nil,   159,   159,   159,   159,   165,
   nil,   nil,   nil,   165,   nil,   229,   nil,   229,   nil,   229,
   nil,   241,   nil,   165,   nil,   241,   244,   244,   244,   229,
   nil,   245,   245,   245,   nil,   241,   165,   nil,   165,   165,
   165,   165,   229,   nil,   229,   229,   229,   229,   241,   nil,
   241,   241,   241,   241,   244,   nil,   nil,   nil,   244,   245,
   nil,   nil,   nil,   245,   250,   250,   250,   nil,   244,   nil,
   273,   273,   273,   245,   215,   215,   215,   215,   215,   215,
   nil,   nil,   nil,   244,   244,   244,   244,   nil,   245,   245,
   245,   245,   250,   nil,   nil,   nil,   250,   nil,   273,   nil,
   nil,   nil,   273,   nil,   nil,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   273,   nil,   nil,   nil,    90,   nil,   nil,   250,
   nil,   250,   250,   250,   250,   273,   nil,   273,   273,   273,
   273,    90,   nil,    90,   nil,   nil,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    35,   nil,    35,   nil,
   nil,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,    35,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   255,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,    30,    30,   nil,
   nil,   nil,   nil,    30,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   nil,   nil,   nil,   nil,   133,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   117,
   117,   117,   117,   117,   117,   nil,   nil,   117,   117,   117,
   117,   216,   216,   216,   216,   216,   216,   217,   217,   217,
   217,   217,   217,   218,   218,   218,   218,   218,   218,   260,
   260,   260,   260,   260,   260,   261,   261,   261,   261,   261,
   261 ]

racc_action_pointer = [
   102,     9,    -1,   nil,   nil,    15,   nil,     2,   -21,   nil,
     6,   107,   nil,   126,   nil,   nil,   nil,   nil,    50,   111,
    84,   -10,   nil,   nil,   nil,    65,    92,    78,    -4,   nil,
  1146,   nil,   nil,     4,   nil,  1088,   -37,   166,   127,   199,
   nil,   419,   425,   nil,   431,   464,   470,   nil,   165,   nil,
   nil,   166,   201,   127,   215,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    62,   nil,   253,   nil,    80,
  1063,   128,   259,   288,   nil,   284,   315,   nil,   nil,   nil,
   nil,    61,   503,   113,   257,   nil,   508,   514,   nil,   547,
   nil,   256,   341,   351,   167,    -6,   391,  1243,   552,   -10,
   425,   585,    -2,   nil,   591,   nil,   398,   597,   630,   636,
   669,   nil,   409,  1171,   nil,   nil,   nil,   162,   nil,   227,
   422,   453,   413,   216,   467,   201,   675,   681,   714,   719,
   752,   757,   763,   796,   801,   834,   839,   845,   878,   883,
   415,   127,   433,   322,   nil,   916,   126,   nil,   nil,   nil,
   191,   443,   449,   nil,   nil,   nil,   nil,    61,   256,   256,
   243,   453,   nil,   nil,   nil,   257,   448,   nil,   450,   307,
    -6,   nil,   nil,    66,   -28,   339,   369,   nil,   nil,   nil,
  1196,  1216,   nil,   nil,   469,   nil,   454,   306,   371,   466,
   468,   472,   473,   313,   393,   968,  1255,  1261,  1267,   nil,
   nil,   375,   448,   531,   399,   403,   532,  1236,   494,   922,
   nil,   nil,    96,   nil,   544,   257,   nil,   490,   nil,   546,
   nil,   928,   321,   nil,   961,   966,   nil,   549,   nil,   nil,
   999,   nil,  1256,   nil,   nil,  1117,    -1,   nil,     6,   nil,
  1273,  1279,   nil,   294,   415,   nil,   nil,   504,   nil,   509,
   nil,   386,   nil,  1005,   509,   501,   446,   nil,   nil ]

racc_action_default = [
    -2,  -163,  -156,    -3,    -5,    -6,    -7,  -163,  -163,   -26,
  -163,  -163,    -1,  -157,  -158,  -160,  -161,   -27,    -9,  -163,
   -94,   -93,   279,    -4,  -159,  -163,  -163,  -163,   -30,   -95,
  -163,   -91,   -92,  -163,   -10,  -163,  -163,  -163,  -156,   -31,
   -33,  -163,  -132,   -36,  -163,  -163,  -163,   -41,  -163,   -43,
   -44,  -163,   -67,  -130,  -123,  -130,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,  -124,  -126,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -163,   -97,  -163,  -100,  -163,
  -163,  -156,  -163,  -163,   -16,   -67,  -163,   -19,   -20,   -28,
   -29,  -157,  -163,   -34,  -101,  -102,  -163,  -163,  -113,  -163,
  -123,  -130,  -130,   -35,  -133,  -163,  -163,  -163,  -163,  -163,
   -45,  -163,  -163,   -68,  -163,  -125,  -163,  -132,  -163,  -163,
  -163,  -127,  -163,  -163,   -99,    -8,   -11,  -156,   -12,  -157,
  -163,  -163,   -17,  -163,   -32,   -38,  -163,  -163,  -163,  -163,
  -163,  -163,  -163,  -163,  -163,  -163,  -163,  -163,  -163,  -163,
  -111,  -163,  -163,  -121,  -122,  -163,   -30,   -60,   -61,  -162,
   -30,  -163,  -163,   -56,   -57,   -58,   -59,  -163,   -30,  -156,
   -53,   -66,   -69,   -72,   -73,   -74,   -75,   -76,  -163,   -81,
   -93,  -128,  -129,  -163,  -163,   -82,   -83,   -96,   -98,   -13,
   -23,   -47,   -18,   -21,  -163,  -103,  -104,  -105,  -106,  -107,
  -108,  -109,  -110,  -114,  -115,  -116,  -117,  -118,  -119,  -112,
  -120,  -134,   -62,  -163,  -163,  -163,  -163,   -47,  -163,  -163,
  -131,  -135,  -163,   -24,  -163,  -156,   -48,   -67,   -22,  -163,
   -63,  -163,   -30,   -39,  -163,  -163,   -40,  -163,   -70,   -71,
   -78,   -14,  -163,   -15,   -46,  -157,  -163,   -37,  -163,   -65,
   -54,   -55,   -42,  -163,   -79,   -25,   -49,   -50,   -51,   -74,
   -75,   -30,   -77,  -163,  -163,   -62,   -80,   -52,   -64 ]

racc_goto_table = [
    54,    37,    51,    13,   122,    24,    12,    55,    87,   187,
    20,   166,   172,    95,   113,   171,    86,   184,    17,   131,
   233,   239,    91,    94,     3,    24,    33,    24,    35,   103,
   234,   162,   115,   164,   119,     1,     2,    23,    89,   101,
    25,    90,   100,   232,    96,   202,    28,   142,   144,   116,
   183,   266,   267,   197,   181,   263,   247,    29,    85,   nil,
   nil,   nil,   nil,   117,   nil,   nil,   nil,   nil,    95,   nil,
   nil,   nil,   265,    54,   278,    51,   131,   137,    94,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   nil,   nil,    24,   186,   138,   nil,   nil,   192,   193,
   nil,   188,    17,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   nil,    87,   189,   nil,   nil,   187,   194,   195,   196,   198,
   245,   203,   244,   248,   160,   161,   191,   163,   nil,   nil,
   nil,    24,   nil,   nil,   205,   206,   177,   nil,    54,   222,
    51,   199,    54,   223,    51,    55,   nil,   nil,   nil,    55,
    54,   226,    51,   221,   271,   nil,   249,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,    95,   237,
   nil,   nil,   nil,   227,   268,   nil,   nil,   nil,   nil,   256,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   186,   nil,   277,   nil,   nil,   237,   nil,   188,   nil,   nil,
   nil,   nil,   nil,   nil,    54,   259,    51,   195,   nil,   nil,
   nil,    55,   nil,   nil,   nil,   nil,   nil,   nil,   270,   258,
    95,   nil,   nil,   237,   nil,   nil,   255,   nil,   264,   254,
   nil,   nil,   nil,    54,   275,    51,   270,    24,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   276,   260,   261 ]

racc_goto_check = [
    47,    23,    39,     5,    17,    57,     3,    49,    16,    29,
    21,    30,    42,    16,    28,    41,    53,    46,    20,    55,
    12,    31,    11,    15,     4,    57,     5,    57,     5,    27,
    14,    54,    27,    54,    27,     1,     2,     4,     7,     5,
     9,    10,     3,    13,    18,    19,    22,    17,    25,    32,
    38,    36,    37,    43,    45,    48,    14,    51,    52,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,    16,   nil,
   nil,   nil,    12,    47,    31,    39,    55,    11,    15,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,   nil,   nil,    57,    47,     3,   nil,   nil,    47,    28,
   nil,    49,    20,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,    16,    27,   nil,   nil,    29,    27,    27,    27,    53,
    42,    16,    41,    46,    40,    40,    21,    40,   nil,   nil,
   nil,    57,   nil,   nil,    27,    27,    40,   nil,    47,    23,
    39,     3,    47,    23,    39,    49,   nil,   nil,   nil,    49,
    47,    23,    39,    27,    30,   nil,    38,    49,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    16,    16,
   nil,   nil,   nil,     3,    38,   nil,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,   nil,    38,   nil,   nil,    16,   nil,    49,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    23,    39,    27,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,    47,    27,
    16,   nil,   nil,    16,   nil,   nil,     5,   nil,    27,     3,
   nil,   nil,   nil,    47,    23,    39,    47,    57,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    40,    40 ]

racc_goto_pointer = [
   nil,    35,    36,     4,    24,     1,   nil,     5,   nil,    22,
     6,   -13,  -180,  -157,  -171,   -12,   -22,   -48,     8,   -98,
    13,     0,    26,   -27,   nil,   -53,   nil,   -12,   -28,  -113,
  -104,  -201,     4,   nil,   nil,   nil,  -204,  -204,   -72,   -26,
    18,  -102,  -105,   -79,   nil,   -68,  -105,   -28,  -195,   -21,
   nil,    37,    28,   -14,   -76,   -36,   nil,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   139,     4,     5,     6,   nil,
   nil,   nil,    92,   nil,   nil,    50,    52,   nil,   nil,   nil,
     9,   nil,   nil,   nil,    38,    39,    40,   114,   nil,    43,
   nil,   nil,   nil,    47,    49,   235,   236,   nil,   nil,   108,
   104,   nil,   nil,   168,   240,   nil,   nil,   110,   nil,   112,
    63,   nil,   nil,   nil,   105,   125,    64,    14 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 79, :_reduce_1,
  0, 80, :_reduce_2,
  1, 80, :_reduce_3,
  3, 80, :_reduce_4,
  1, 82, :_reduce_5,
  1, 82, :_reduce_6,
  1, 82, :_reduce_7,
  6, 86, :_reduce_8,
  0, 87, :_reduce_9,
  2, 87, :_reduce_10,
  6, 84, :_reduce_11,
  2, 88, :_reduce_12,
  3, 88, :_reduce_13,
  5, 89, :_reduce_14,
  5, 89, :_reduce_15,
  1, 89, :_reduce_none,
  2, 90, :_reduce_17,
  4, 93, :_reduce_18,
  1, 96, :_reduce_none,
  1, 96, :_reduce_20,
  1, 97, :_reduce_none,
  2, 97, :_reduce_22,
  0, 91, :_reduce_23,
  1, 91, :_reduce_24,
  3, 91, :_reduce_25,
  1, 85, :_reduce_26,
  2, 85, :_reduce_27,
  5, 98, :_reduce_28,
  2, 101, :_reduce_29,
  0, 102, :_reduce_30,
  1, 102, :_reduce_31,
  3, 102, :_reduce_32,
  1, 103, :_reduce_33,
  2, 103, :_reduce_34,
  2, 103, :_reduce_35,
  1, 103, :_reduce_36,
  6, 103, :_reduce_37,
  3, 103, :_reduce_38,
  5, 103, :_reduce_39,
  5, 103, :_reduce_40,
  1, 103, :_reduce_41,
  6, 103, :_reduce_42,
  1, 103, :_reduce_43,
  1, 103, :_reduce_none,
  2, 112, :_reduce_45,
  2, 92, :_reduce_46,
  0, 113, :_reduce_47,
  1, 113, :_reduce_48,
  3, 113, :_reduce_49,
  3, 114, :_reduce_50,
  1, 115, :_reduce_51,
  3, 115, :_reduce_52,
  3, 111, :_reduce_53,
  5, 110, :_reduce_54,
  5, 110, :_reduce_55,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  0, 109, :_reduce_62,
  1, 109, :_reduce_63,
  5, 109, :_reduce_64,
  2, 122, :_reduce_65,
  3, 104, :_reduce_66,
  0, 95, :_reduce_67,
  1, 95, :_reduce_68,
  2, 95, :_reduce_69,
  3, 123, :_reduce_70,
  3, 123, :_reduce_71,
  1, 123, :_reduce_72,
  1, 123, :_reduce_73,
  1, 116, :_reduce_74,
  1, 116, :_reduce_75,
  1, 124, :_reduce_none,
  5, 124, :_reduce_77,
  0, 126, :_reduce_78,
  1, 126, :_reduce_79,
  3, 126, :_reduce_80,
  3, 107, :_reduce_81,
  3, 107, :_reduce_82,
  3, 107, :_reduce_83,
  1, 128, :_reduce_84,
  1, 128, :_reduce_85,
  1, 128, :_reduce_86,
  1, 128, :_reduce_87,
  1, 128, :_reduce_88,
  1, 128, :_reduce_89,
  1, 128, :_reduce_90,
  2, 99, :_reduce_91,
  2, 99, :_reduce_92,
  1, 99, :_reduce_93,
  0, 100, :_reduce_94,
  1, 100, :_reduce_none,
  4, 129, :_reduce_96,
  1, 130, :_reduce_97,
  3, 130, :_reduce_98,
  2, 131, :_reduce_99,
  1, 131, :_reduce_100,
  1, 105, :_reduce_101,
  1, 105, :_reduce_102,
  3, 105, :_reduce_103,
  3, 105, :_reduce_104,
  3, 118, :_reduce_105,
  3, 118, :_reduce_106,
  3, 118, :_reduce_107,
  3, 118, :_reduce_108,
  3, 118, :_reduce_109,
  3, 118, :_reduce_110,
  2, 118, :_reduce_111,
  3, 118, :_reduce_112,
  1, 118, :_reduce_113,
  3, 132, :_reduce_114,
  3, 132, :_reduce_115,
  3, 132, :_reduce_116,
  3, 132, :_reduce_117,
  3, 132, :_reduce_118,
  3, 132, :_reduce_119,
  3, 132, :_reduce_120,
  2, 132, :_reduce_121,
  2, 132, :_reduce_122,
  1, 117, :_reduce_123,
  1, 117, :_reduce_124,
  2, 117, :_reduce_125,
  1, 117, :_reduce_none,
  2, 134, :_reduce_127,
  3, 127, :_reduce_128,
  3, 127, :_reduce_129,
  0, 133, :_reduce_130,
  3, 133, :_reduce_131,
  0, 106, :_reduce_132,
  1, 106, :_reduce_133,
  3, 106, :_reduce_134,
  4, 125, :_reduce_135,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_155,
  0, 81, :_reduce_156,
  1, 81, :_reduce_157,
  1, 83, :_reduce_158,
  2, 83, :_reduce_159,
  1, 135, :_reduce_160,
  1, 135, :_reduce_none,
  1, 121, :_reduce_162 ]

racc_reduce_n = 163

racc_shift_n = 279

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kDTYPE_UINT => 23,
  :kDTYPE_LINT => 24,
  :kDTYPE_LLINT => 25,
  :kDTYPE_CHAR => 26,
  :kDTYPE_I8 => 27,
  :kDTYPE_I16 => 28,
  :kDTYPE_I32 => 29,
  :kDTYPE_I64 => 30,
  :kDTYPE_UI8 => 31,
  :kDTYPE_UI16 => 32,
  :kDTYPE_UI32 => 33,
  :kDTYPE_UI64 => 34,
  :kDTYPE_INT => 35,
  :kDTYPE_F32 => 36,
  :kDTYPE_F64 => 37,
  :kDTYPE_LF64 => 38,
  :kDTYPE_ROBJ => 39,
  :kDTYPE_ULINT => 40,
  :kDTYPE_ULLINT => 41,
  :tCUSTOM_DTYPE => 42,
  :tLPAREN => 43,
  :tRPAREN => 44,
  :tLSQUARE => 45,
  :tRSQUARE => 46,
  :tIDENTIFIER => 47,
  :tNL => 48,
  :tCOMMA => 49,
  :tSQUOTE => 50,
  :tSCOLON => 51,
  :EOF => 52,
  :tDOT => 53,
  :tQMARK => 54,
  :tSTART_LINE => 55,
  :tPLUS => 56,
  :tMINUS => 57,
  :tSTAR => 58,
  :tDIVIDE => 59,
  :tEXPO => 60,
  :tMODULUS => 61,
  :tASSIGN => 62,
  :tEQ => 63,
  :tLT => 64,
  :tLTEQ => 65,
  :tGT => 66,
  :tGTEQ => 67,
  :tANDOP => 68,
  :tOROP => 69,
  :tBANG => 70,
  :tOP_ASSIGN => 71,
  :tSTRING => 72,
  :tINTEGER => 73,
  :tFLOAT => 74,
  :tSINGLE_CHAR => 75,
  :UMINUS => 76,
  :tNEQ => 77 }

racc_nt_base = 78

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "klass",
  "opt_inheritance",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_7(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_8(val, _values, result)
            result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_9(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_13(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_14(val, _values, result)
            result = TopStatement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_15(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_17(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_20(val, _values, result)
    
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_22(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_23(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_24(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_25(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_26(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_28(val, _values, result)
            result = TopStatement::RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_31(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_32(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_33(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_34(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_35(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_36(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_37(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_38(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_39(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_40(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_41(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_42(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_45(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_46(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_48(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_49(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_50(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_51(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_52(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_53(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_54(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_55(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_64(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_65(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_66(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_67(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_68(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_69(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_70(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_71(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_72(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_73(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_74(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_75(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_77(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_79(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_80(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_81(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_82(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_83(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_84(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_85(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_86(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_87(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_88(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_89(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_90(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_91(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_92(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_94(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_96(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_98(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_99(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_100(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_103(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_104(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_111(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_112(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_114(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_120(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_121(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_122(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_124(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_125(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_127(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_128(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_129(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_130(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_132(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_133(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_134(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_135(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_155(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_158(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_159(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_162(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
