#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 337)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def next_token
  t = @lexer.next_token

  if !t.nil? && @custom_dtypes.has_key?(t[1])
    if t[0] == :tIDENTIFIER && !(@prev_token[0] == :kSTRUCT)
      return [:tCUSTOM_DTYPE, t[1]]
    end
  end

  @prev_token = t
  t
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

def op_assign val # expr, op_assign, expr => expr = expr op expr
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]))
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value])
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value])
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    19,    21,   127,   217,   127,   138,    22,    23,   183,
     3,    35,    36,    37,    25,   142,   117,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    42,    93,    97,
   129,    29,   129,   117,    12,   117,     5,   117,    93,   118,
    74,    41,     6,    75,   119,    92,   184,    12,    95,    74,
    13,   185,    75,     8,    43,    11,    32,    33,    34,    18,
    19,    21,    74,    13,    70,    75,    22,    23,   188,   189,
    35,    36,    37,    25,   133,   134,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    42,   135,   136,   168,
    29,    74,    74,    76,    75,    75,   100,   101,   102,   103,
    41,    98,    99,   100,   101,   102,   103,    98,    99,   100,
   101,   102,   103,    43,    88,    32,    33,    34,    18,    19,
    21,   100,   101,   102,   103,    22,    23,   188,   189,    35,
    36,    37,    25,    89,    91,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    42,    94,    74,   219,    29,
    75,   220,   117,    98,    99,   100,   101,   102,   103,    41,
   104,   106,   107,   108,   109,   110,   111,   120,   117,    93,
    97,   117,    43,   105,    32,    33,    34,    18,    19,    21,
   130,   139,   102,   169,    22,    23,   170,   129,    35,    36,
    37,    25,    76,   117,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    42,   177,   178,   117,    29,   181,
   117,   117,    98,    99,   100,   101,   102,   103,    41,   104,
   106,   107,   108,   109,   110,   111,   117,   117,   102,   102,
   102,    43,   105,    32,    33,    34,    18,    19,    21,   102,
   190,   193,   202,    22,    23,   207,    91,    35,    36,    37,
    25,   117,   117,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    42,   222,    93,   217,    29,   117,   nil,
    98,    99,   100,   101,   102,   103,   nil,    41,   133,   134,
   135,   136,    98,    99,   100,   101,   102,   103,   nil,   nil,
    43,   nil,    32,    33,    34,    18,    19,    21,   nil,   nil,
   nil,   nil,    22,    23,   nil,   nil,    35,    36,    37,    25,
   nil,   nil,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    42,   nil,   nil,   nil,    29,    98,    99,   100,
   101,   102,   103,   nil,   nil,   nil,    41,    98,    99,   100,
   101,   102,   103,    98,    99,   100,   101,   102,   103,    43,
   nil,    32,    33,    34,    18,    19,    21,   nil,   nil,   nil,
   nil,    22,    23,   nil,   nil,    35,    36,    37,    25,   nil,
   nil,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    42,   nil,   nil,   nil,    29,   nil,    35,    36,    37,
   nil,   nil,    35,    36,    37,    41,   nil,   nil,    35,    36,
    37,    98,    99,   100,   101,   102,   103,   nil,    43,   nil,
    32,    33,    34,    42,   nil,   nil,   nil,    80,    42,   nil,
   nil,   nil,    80,   nil,    42,   nil,   -50,    41,    80,   -50,
   -50,   -50,    41,    35,    36,    37,   nil,   nil,    41,   nil,
    43,   nil,    32,    33,    34,    43,   nil,    32,    33,    34,
   nil,    43,   nil,    32,    33,    34,    35,    36,    37,    86,
   nil,   nil,   nil,    80,   nil,    35,    36,    37,   nil,   -50,
   -50,   nil,   -50,    41,    35,    36,    37,   nil,   nil,   nil,
   nil,   nil,    42,   182,   nil,   nil,    80,   nil,    32,    33,
    34,    86,   nil,   nil,   -49,    80,    41,   -49,   -49,   -49,
    42,   nil,   nil,   nil,    80,    41,    35,    36,    37,    43,
   nil,    32,    33,    34,    41,    35,    36,    37,   nil,   nil,
    32,    33,    34,   nil,    35,    36,    37,    43,   nil,    32,
    33,    34,    42,   nil,    93,   nil,    80,   -49,   -49,   nil,
   -49,    42,   nil,   nil,   nil,    80,    41,    35,    36,    37,
    86,    92,   nil,   nil,    80,    41,    35,    36,    37,    43,
   nil,    32,    33,    34,    41,    35,    36,    37,    43,   nil,
    32,    33,    34,    42,   nil,   nil,   nil,    80,   nil,    32,
    33,    34,    42,   nil,   nil,   nil,   145,    41,   nil,   nil,
   nil,    42,   nil,   nil,   nil,    80,    41,   142,   nil,   nil,
    43,   nil,    32,    33,    34,    41,    35,    36,    37,    43,
   nil,    32,    33,    34,    35,    36,    37,   nil,    43,   nil,
    32,    33,    34,   nil,   nil,    35,    36,    37,   nil,   nil,
   nil,   nil,    42,   nil,   nil,   nil,    80,   nil,   nil,   nil,
    42,   nil,   nil,   nil,    80,   nil,    41,    35,    36,    37,
   nil,    42,   nil,   nil,    41,    80,   nil,   nil,   nil,    43,
   nil,    32,    33,    34,   nil,    41,   nil,    43,   nil,    32,
    33,    34,   nil,    42,   nil,   nil,   nil,    80,    43,   nil,
    32,    33,    34,    35,    36,    37,   nil,    41,    35,    36,
    37,    35,    36,    37,    35,    36,    37,   nil,   nil,   nil,
    43,   nil,    32,    33,    34,   nil,   nil,   nil,   nil,    86,
   nil,   nil,   nil,    80,    86,   nil,   nil,    86,    80,   nil,
    86,    80,   nil,    41,    80,   nil,   nil,   nil,    41,   nil,
   nil,    41,   nil,   nil,    41,    35,    36,    37,    32,    33,
    34,   nil,   nil,    32,    33,    34,    32,    33,    34,    32,
    33,    34,   nil,    35,    36,    37,    35,    36,    37,   nil,
   nil,    86,   nil,   nil,   nil,    80,    98,    99,   100,   101,
   102,   103,   nil,   nil,   nil,    41,    35,    36,    37,    86,
   nil,   nil,    86,    80,   nil,   nil,    80,   nil,   nil,   nil,
    32,    33,    34,    41,   nil,   nil,    41,    35,    36,    37,
   nil,   nil,    86,   nil,   nil,   nil,    80,   nil,    32,    33,
    34,    32,    33,    34,   nil,   nil,    41,    35,    36,    37,
    35,    36,    37,    86,   nil,   nil,   nil,    80,   nil,   nil,
   nil,    32,    33,    34,   nil,   nil,   nil,    41,    35,    36,
    37,   nil,   nil,    86,   nil,   nil,    86,    80,   nil,   nil,
    80,   nil,    32,    33,    34,   nil,   nil,    41,   nil,   nil,
    41,    35,    36,    37,    86,   nil,   nil,   nil,    80,   nil,
   nil,   nil,    32,    33,    34,    32,    33,    34,    41,    35,
    36,    37,   nil,   nil,    35,    36,    37,    86,   nil,   nil,
   nil,    80,   nil,    32,    33,    34,   nil,   nil,   nil,   nil,
   nil,    41,    35,    36,    37,    86,   nil,   nil,   nil,    80,
    42,   nil,   nil,   nil,   145,   nil,    32,    33,    34,    41,
    35,    36,    37,   nil,    41,   nil,   nil,   nil,    42,   nil,
   200,   nil,    80,   nil,    32,    33,    34,    43,   nil,    32,
    33,    34,    41,   nil,   nil,   nil,    42,   nil,   nil,   nil,
    80,   nil,    35,    36,    37,    43,   nil,    32,    33,    34,
    41,    35,    36,    37,    35,    36,    37,   nil,   nil,   nil,
    35,    36,    37,    43,   nil,    32,    33,    34,    42,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,    86,   nil,   nil,
    86,    80,    41,   nil,    80,   nil,    42,   nil,   nil,   nil,
    80,    41,   nil,   nil,    41,    43,   nil,    32,    33,    34,
    41,    35,    36,    37,   nil,   nil,    32,    33,    34,    32,
    33,    34,   nil,    43,   nil,    32,    33,    34,   nil,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   nil,    42,   nil,   nil,
   nil,    80,   nil,   nil,   nil,    98,    99,   100,   101,   102,
   103,    41,   104,   106,   107,   108,   109,   110,   111,   nil,
   nil,   nil,   nil,   nil,    43,   105,    32,    33,    34,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,   nil,
   nil,   nil,   nil,   nil,    74,   nil,   nil,    75,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,   nil,   nil,
   nil,   nil,    69,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,   nil,   nil,   nil,   nil,    69,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    98,    99,
   100,   101,   102,   103,    98,    99,   100,   101,   102,   103,
    98,    99,   100,   101,   102,   103 ]

racc_action_check = [
     9,     9,     9,    83,   210,   203,    87,     9,     9,   149,
     1,     9,     9,     9,     9,   210,   149,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,    29,    31,
    83,     9,   203,    87,     8,    83,     2,   203,   170,    66,
    15,     9,     3,    15,    66,    29,   153,   170,    31,    70,
     8,   153,    70,     5,     9,     7,     9,     9,     9,    72,
    72,    72,   122,   170,    14,   122,    72,    72,   175,   175,
    72,    72,    72,    72,   177,   177,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,   178,   178,   137,
    72,    72,   139,    16,    72,   139,   154,   154,   154,   154,
    72,   137,   137,   137,   137,   137,   137,   160,   160,   160,
   160,   160,   160,    72,    25,    72,    72,    72,   126,   126,
   126,   155,   155,   155,   155,   126,   126,   221,   221,   126,
   126,   126,   126,    27,    28,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,    30,   195,   211,   126,
   195,   211,    45,    39,    39,    39,    39,    39,    39,   126,
    39,    39,    39,    39,    39,    39,    39,    68,    77,    80,
    81,    82,   126,    39,   126,   126,   126,   130,   130,   130,
    84,    88,   112,   114,   130,   130,   117,   118,   130,   130,
   130,   130,   123,   125,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   131,   132,   140,   130,   141,
   148,   150,   115,   115,   115,   115,   115,   115,   130,   115,
   115,   115,   115,   115,   115,   115,   151,   152,   156,   157,
   158,   130,   115,   130,   130,   130,   138,   138,   138,   159,
   176,   179,   186,   138,   138,   194,   197,   138,   138,   138,
   138,   201,   212,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   215,   217,   222,   138,   223,   nil,
    85,    85,    85,    85,    85,    85,   nil,   138,    85,    85,
    85,    85,   161,   161,   161,   161,   161,   161,   nil,   nil,
   138,   nil,   138,   138,   138,   189,   189,   189,   nil,   nil,
   nil,   nil,   189,   189,   nil,   nil,   189,   189,   189,   189,
   nil,   nil,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   nil,   nil,   nil,   189,   162,   162,   162,
   162,   162,   162,   nil,   nil,   nil,   189,   163,   163,   163,
   163,   163,   163,   164,   164,   164,   164,   164,   164,   189,
   nil,   189,   189,   189,   213,   213,   213,   nil,   nil,   nil,
   nil,   213,   213,   nil,   nil,   213,   213,   213,   213,   nil,
   nil,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
   213,   213,   nil,   nil,   nil,   213,   nil,    18,    18,    18,
   nil,   nil,    19,    19,    19,   213,   nil,   nil,    21,    21,
    21,   165,   165,   165,   165,   165,   165,   nil,   213,   nil,
   213,   213,   213,    18,   nil,   nil,   nil,    18,    19,   nil,
   nil,   nil,    19,   nil,    21,   nil,   146,    18,    21,   146,
   146,   146,    19,    22,    22,    22,   nil,   nil,    21,   nil,
    18,   nil,    18,    18,    18,    19,   nil,    19,    19,    19,
   nil,    21,   nil,    21,    21,    21,    23,    23,    23,    22,
   nil,   nil,   nil,    22,   nil,    41,    41,    41,   nil,   146,
   146,   nil,   146,    22,    42,    42,    42,   nil,   nil,   nil,
   nil,   nil,    23,   146,   nil,   nil,    23,   nil,    22,    22,
    22,    41,   nil,   nil,   145,    41,    23,   145,   145,   145,
    42,   nil,   nil,   nil,    42,    41,    43,    43,    43,    23,
   nil,    23,    23,    23,    42,    76,    76,    76,   nil,   nil,
    41,    41,    41,   nil,    86,    86,    86,    42,   nil,    42,
    42,    42,    43,   nil,   145,   nil,    43,   145,   145,   nil,
   145,    76,   nil,   nil,   nil,    76,    43,    89,    89,    89,
    86,   145,   nil,   nil,    86,    76,    90,    90,    90,    43,
   nil,    43,    43,    43,    86,    92,    92,    92,    76,   nil,
    76,    76,    76,    89,   nil,   nil,   nil,    89,   nil,    86,
    86,    86,    90,   nil,   nil,   nil,    90,    89,   nil,   nil,
   nil,    92,   nil,   nil,   nil,    92,    90,    90,   nil,   nil,
    89,   nil,    89,    89,    89,    92,    93,    93,    93,    90,
   nil,    90,    90,    90,    94,    94,    94,   nil,    92,   nil,
    92,    92,    92,   nil,   nil,    95,    95,    95,   nil,   nil,
   nil,   nil,    93,   nil,   nil,   nil,    93,   nil,   nil,   nil,
    94,   nil,   nil,   nil,    94,   nil,    93,    97,    97,    97,
   nil,    95,   nil,   nil,    94,    95,   nil,   nil,   nil,    93,
   nil,    93,    93,    93,   nil,    95,   nil,    94,   nil,    94,
    94,    94,   nil,    97,   nil,   nil,   nil,    97,    95,   nil,
    95,    95,    95,    98,    98,    98,   nil,    97,    99,    99,
    99,   100,   100,   100,   101,   101,   101,   nil,   nil,   nil,
    97,   nil,    97,    97,    97,   nil,   nil,   nil,   nil,    98,
   nil,   nil,   nil,    98,    99,   nil,   nil,   100,    99,   nil,
   101,   100,   nil,    98,   101,   nil,   nil,   nil,    99,   nil,
   nil,   100,   nil,   nil,   101,   102,   102,   102,    98,    98,
    98,   nil,   nil,    99,    99,    99,   100,   100,   100,   101,
   101,   101,   nil,   103,   103,   103,   104,   104,   104,   nil,
   nil,   102,   nil,   nil,   nil,   102,   166,   166,   166,   166,
   166,   166,   nil,   nil,   nil,   102,   105,   105,   105,   103,
   nil,   nil,   104,   103,   nil,   nil,   104,   nil,   nil,   nil,
   102,   102,   102,   103,   nil,   nil,   104,   106,   106,   106,
   nil,   nil,   105,   nil,   nil,   nil,   105,   nil,   103,   103,
   103,   104,   104,   104,   nil,   nil,   105,   107,   107,   107,
   108,   108,   108,   106,   nil,   nil,   nil,   106,   nil,   nil,
   nil,   105,   105,   105,   nil,   nil,   nil,   106,   109,   109,
   109,   nil,   nil,   107,   nil,   nil,   108,   107,   nil,   nil,
   108,   nil,   106,   106,   106,   nil,   nil,   107,   nil,   nil,
   108,   110,   110,   110,   109,   nil,   nil,   nil,   109,   nil,
   nil,   nil,   107,   107,   107,   108,   108,   108,   109,   111,
   111,   111,   nil,   nil,   181,   181,   181,   110,   nil,   nil,
   nil,   110,   nil,   109,   109,   109,   nil,   nil,   nil,   nil,
   nil,   110,   182,   182,   182,   111,   nil,   nil,   nil,   111,
   181,   nil,   nil,   nil,   181,   nil,   110,   110,   110,   111,
   185,   185,   185,   nil,   181,   nil,   nil,   nil,   182,   nil,
   182,   nil,   182,   nil,   111,   111,   111,   181,   nil,   181,
   181,   181,   182,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   185,   nil,   188,   188,   188,   182,   nil,   182,   182,   182,
   185,   191,   191,   191,   192,   192,   192,   nil,   nil,   nil,
   200,   200,   200,   185,   nil,   185,   185,   185,   188,   nil,
   nil,   nil,   188,   nil,   nil,   nil,   nil,   191,   nil,   nil,
   192,   191,   188,   nil,   192,   nil,   200,   nil,   nil,   nil,
   200,   191,   nil,   nil,   192,   188,   nil,   188,   188,   188,
   200,   220,   220,   220,   nil,   nil,   191,   191,   191,   192,
   192,   192,   nil,   200,   nil,   200,   200,   200,   nil,   nil,
   nil,   nil,   nil,   113,   nil,   nil,   nil,   220,   nil,   nil,
   nil,   220,   nil,   nil,   nil,   113,   113,   113,   113,   113,
   113,   220,   113,   113,   113,   113,   113,   113,   113,   nil,
   nil,   nil,   nil,   nil,   220,   113,   220,   220,   220,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   nil,
   nil,   nil,   nil,   nil,   209,   nil,   nil,   209,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,   nil,   nil,
   nil,   nil,    11,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   nil,   nil,   nil,   nil,   119,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   167,   167,
   167,   167,   167,   167,   205,   205,   205,   205,   205,   205,
   206,   206,   206,   206,   206,   206 ]

racc_action_pointer = [
   nil,    10,    44,    52,   nil,    18,   nil,    24,    -8,    -4,
   nil,  1147,   nil,   nil,    71,     4,   107,   nil,   442,   447,
   nil,   453,   488,   511,   nil,    89,   nil,    84,    98,    -5,
   116,    -2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   129,
   nil,   520,   529,   561,   nil,   131,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     7,   nil,   152,   nil,
    13,   nil,    65,   nil,   nil,   nil,   570,   147,   nil,   nil,
   156,   159,   150,    -6,   196,   266,   579,    -8,   197,   602,
   611,   nil,   620,   661,   669,   680,   nil,   702,   738,   743,
   746,   749,   790,   808,   811,   831,   852,   872,   875,   893,
   916,   934,   154,  1061,   171,   198,   nil,   171,   171,  1172,
   nil,   nil,    26,   216,   nil,   172,   134,   nil,   nil,   nil,
   203,   200,   201,   nil,   nil,   nil,   nil,    67,   272,    66,
   196,   202,   nil,   nil,   nil,   561,   493,   nil,   199,   -35,
   200,   215,   216,    14,    60,    85,   210,   211,   212,   221,
    73,   278,   333,   343,   349,   417,   782,  1184,   nil,   nil,
     5,   nil,   nil,   nil,   nil,    71,   277,    22,    43,   278,
  1197,   939,   957,   nil,   nil,   975,   279,   nil,  1007,   341,
   nil,  1016,  1019,   nil,   282,   131,   nil,   230,   nil,   nil,
  1025,   240,   nil,    -4,   nil,  1190,  1196,   nil,   nil,  1118,
   -41,   134,   241,   410,   nil,   267,   nil,   272,   nil,   nil,
  1066,   140,   271,   267,   nil,   nil ]

racc_action_default = [
    -3,  -137,    -1,  -137,    -2,  -137,   226,   -68,   -67,    -6,
   -69,  -137,   -65,   -66,  -137,  -130,    -7,    -9,  -137,  -137,
   -12,  -137,  -137,  -137,   -17,  -137,   -19,   -86,   -42,  -100,
   -98,  -104,   -59,   -60,   -61,   -62,   -63,   -64,   -75,   -76,
   -77,  -137,  -137,  -137,   -99,  -137,  -110,  -111,  -112,  -113,
  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,
  -124,  -125,  -126,  -127,  -128,  -129,  -137,   -71,  -137,   -74,
  -130,    -5,  -131,  -132,  -134,  -135,  -137,   -10,   -86,   -98,
  -100,  -104,   -11,  -137,  -137,  -137,  -137,  -137,   -20,  -137,
  -137,   -43,  -137,  -137,  -137,  -137,  -101,  -106,  -137,  -137,
  -137,  -137,  -137,  -137,  -137,  -137,  -137,  -137,  -137,  -137,
  -137,  -137,   -84,  -137,  -137,   -96,   -97,  -137,  -137,  -137,
   -73,    -4,  -131,    -8,  -133,   -14,    -6,   -35,   -36,  -136,
    -6,  -137,  -137,   -31,   -32,   -33,   -34,  -137,    -6,  -130,
   -28,   -41,   -44,   -47,   -48,  -100,   -98,   -51,   -56,  -137,
   -57,   -58,  -107,  -137,   -78,   -79,   -80,   -81,   -82,   -83,
   -87,   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -85,   -95,
   -67,  -102,  -103,   -70,   -72,   -37,  -137,  -137,  -137,  -137,
   -22,  -137,  -137,  -109,  -105,  -137,  -137,   -38,  -137,    -6,
   -15,  -137,  -137,   -16,  -137,  -130,   -23,   -42,   -45,   -46,
   -53,  -108,   -13,  -137,   -40,   -29,   -30,   -18,   -21,  -131,
  -137,  -137,   -54,    -6,   -24,   -25,   -26,   -49,   -50,   -52,
  -137,   -37,  -137,   -55,   -39,   -27 ]

racc_goto_table = [
    30,    14,    27,    31,    90,    68,    72,   124,   126,    71,
   186,   132,   196,     7,   147,   143,   144,   131,    67,     1,
    77,    82,     2,    83,     4,    87,   114,   116,     9,   123,
    84,   194,   195,   215,   173,   141,   211,    10,    66,   153,
   nil,   214,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   224,   124,   nil,   nil,
   nil,   nil,   nil,    30,   121,    27,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,
   nil,   146,    85,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   140,   nil,   nil,   148,   149,   150,   151,   nil,   152,
   nil,   112,   113,   115,   192,   147,   199,   198,   172,   191,
   nil,   nil,   nil,    68,   nil,   nil,   nil,    30,   175,    27,
    31,    30,   176,    27,    31,   171,   174,   nil,   213,    30,
   179,    27,    31,   180,   nil,   216,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   124,   nil,   137,   225,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   146,   210,   197,    31,   nil,   nil,   nil,   nil,
    30,   204,    27,    31,   150,   nil,   209,   201,   nil,   208,
   203,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   218,   212,   197,    30,   221,    27,    31,   nil,   nil,
   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   223,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   205,   206 ]

racc_goto_check = [
    34,     6,    26,    36,    23,    22,    10,    45,    14,     7,
    15,    29,    21,     4,    13,    25,    33,    28,    40,     1,
    12,    12,     2,    12,     3,    12,    42,    42,     5,     9,
    16,    18,    20,    24,    30,    32,    35,    38,    39,    44,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    45,   nil,   nil,
   nil,   nil,   nil,    34,     7,    26,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,    34,    27,   nil,    36,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,    12,    12,    12,    12,   nil,    12,
   nil,    27,    27,    27,    29,    13,    25,    33,    34,    28,
   nil,   nil,   nil,    22,   nil,   nil,   nil,    34,     6,    26,
    36,    34,     6,    26,    36,     4,    40,   nil,    14,    34,
     6,    26,    36,     7,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,    27,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    34,    23,    22,    36,   nil,   nil,   nil,   nil,
    34,     6,    26,    36,    12,   nil,    10,    12,   nil,     7,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,    12,    22,    34,     6,    26,    36,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    27 ]

racc_goto_pointer = [
   nil,    19,    22,    22,     8,    21,    -8,    -6,   nil,   -43,
    -9,   nil,     2,   -76,   -75,  -165,     8,   nil,  -149,   nil,
  -148,  -168,    -6,   -24,  -177,   -75,    -7,    60,   -68,   -74,
   -84,   nil,   -55,   -74,    -9,  -164,    -6,   nil,    30,    27,
     7,   nil,   -16,   nil,   -58,   -65 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,    16,
   122,    17,    45,    20,   nil,   nil,   nil,    24,   nil,    26,
   nil,   nil,    28,   nil,   nil,   nil,    78,    39,   nil,   nil,
   128,   187,   nil,   nil,    79,   nil,    81,    44,   nil,   nil,
   nil,    38,    40,    96,   nil,    73 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 76, :_reduce_1,
  2, 77, :_reduce_2,
  0, 77, :_reduce_3,
  6, 78, :_reduce_4,
  2, 81, :_reduce_5,
  0, 83, :_reduce_6,
  1, 83, :_reduce_7,
  3, 83, :_reduce_8,
  1, 84, :_reduce_9,
  2, 84, :_reduce_10,
  2, 84, :_reduce_11,
  1, 84, :_reduce_12,
  6, 84, :_reduce_13,
  3, 84, :_reduce_14,
  5, 84, :_reduce_15,
  5, 84, :_reduce_16,
  1, 84, :_reduce_17,
  6, 84, :_reduce_18,
  1, 84, :_reduce_19,
  2, 94, :_reduce_20,
  2, 93, :_reduce_21,
  0, 95, :_reduce_22,
  1, 95, :_reduce_23,
  3, 95, :_reduce_24,
  3, 96, :_reduce_25,
  1, 99, :_reduce_26,
  3, 99, :_reduce_27,
  3, 92, :_reduce_28,
  5, 91, :_reduce_29,
  5, 91, :_reduce_30,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  0, 90, :_reduce_37,
  1, 90, :_reduce_38,
  5, 90, :_reduce_39,
  2, 106, :_reduce_40,
  3, 86, :_reduce_41,
  0, 98, :_reduce_42,
  1, 98, :_reduce_43,
  2, 98, :_reduce_44,
  3, 107, :_reduce_45,
  3, 107, :_reduce_46,
  1, 107, :_reduce_47,
  1, 107, :_reduce_48,
  1, 100, :_reduce_49,
  1, 100, :_reduce_50,
  1, 108, :_reduce_none,
  5, 108, :_reduce_52,
  0, 110, :_reduce_53,
  1, 110, :_reduce_54,
  3, 110, :_reduce_55,
  3, 88, :_reduce_56,
  3, 88, :_reduce_57,
  3, 88, :_reduce_58,
  1, 112, :_reduce_59,
  1, 112, :_reduce_60,
  1, 112, :_reduce_61,
  1, 112, :_reduce_62,
  1, 112, :_reduce_63,
  1, 112, :_reduce_64,
  2, 79, :_reduce_65,
  2, 79, :_reduce_66,
  1, 79, :_reduce_67,
  0, 80, :_reduce_68,
  1, 80, :_reduce_none,
  4, 113, :_reduce_70,
  1, 114, :_reduce_71,
  3, 114, :_reduce_72,
  2, 115, :_reduce_73,
  1, 115, :_reduce_74,
  1, 87, :_reduce_75,
  1, 87, :_reduce_76,
  1, 87, :_reduce_77,
  3, 102, :_reduce_78,
  3, 102, :_reduce_79,
  3, 102, :_reduce_80,
  3, 102, :_reduce_81,
  3, 102, :_reduce_82,
  3, 102, :_reduce_83,
  2, 102, :_reduce_84,
  3, 102, :_reduce_85,
  1, 102, :_reduce_86,
  3, 117, :_reduce_87,
  3, 117, :_reduce_88,
  3, 117, :_reduce_89,
  3, 117, :_reduce_90,
  3, 117, :_reduce_91,
  3, 117, :_reduce_92,
  3, 117, :_reduce_93,
  3, 117, :_reduce_94,
  3, 117, :_reduce_95,
  2, 117, :_reduce_96,
  2, 117, :_reduce_97,
  1, 101, :_reduce_98,
  1, 101, :_reduce_99,
  1, 101, :_reduce_100,
  2, 116, :_reduce_101,
  3, 111, :_reduce_102,
  3, 111, :_reduce_103,
  0, 118, :_reduce_104,
  3, 118, :_reduce_105,
  0, 119, :_reduce_106,
  1, 119, :_reduce_107,
  3, 119, :_reduce_108,
  4, 109, :_reduce_109,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_129,
  0, 82, :_reduce_130,
  1, 82, :_reduce_131,
  1, 85, :_reduce_132,
  2, 85, :_reduce_133,
  1, 120, :_reduce_134,
  1, 120, :_reduce_none,
  1, 105, :_reduce_136 ]

racc_reduce_n = 137

racc_shift_n = 226

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kDTYPE_UINT => 21,
  :kDTYPE_LINT => 22,
  :kDTYPE_LLINT => 23,
  :kDTYPE_CHAR => 24,
  :kDTYPE_I8 => 25,
  :kDTYPE_I16 => 26,
  :kDTYPE_I32 => 27,
  :kDTYPE_I64 => 28,
  :kDTYPE_UI8 => 29,
  :kDTYPE_UI16 => 30,
  :kDTYPE_UI32 => 31,
  :kDTYPE_UI64 => 32,
  :kDTYPE_INT => 33,
  :kDTYPE_F32 => 34,
  :kDTYPE_F64 => 35,
  :kDTYPE_LF64 => 36,
  :kDTYPE_ROBJ => 37,
  :kDTYPE_ULINT => 38,
  :kDTYPE_ULLINT => 39,
  :tCUSTOM_DTYPE => 40,
  :tLPAREN => 41,
  :tRPAREN => 42,
  :tLSQUARE => 43,
  :tRSQUARE => 44,
  :tIDENTIFIER => 45,
  :tNL => 46,
  :tCOMMA => 47,
  :tSQUOTE => 48,
  :tSCOLON => 49,
  :EOF => 50,
  :tDOT => 51,
  :tQMARK => 52,
  :tSTART_LINE => 53,
  :tPLUS => 54,
  :tMINUS => 55,
  :tSTAR => 56,
  :tDIVIDE => 57,
  :tEXPO => 58,
  :tMODULUS => 59,
  :tASSIGN => 60,
  :tEQ => 61,
  :tLT => 62,
  :tLTEQ => 63,
  :tGT => 64,
  :tGTEQ => 65,
  :tANDOP => 66,
  :tOROP => 67,
  :tBANG => 68,
  :tOP_ASSIGN => 69,
  :tINTEGER => 70,
  :tFLOAT => 71,
  :tSINGLE_CHAR => 72,
  :UMINUS => 73,
  :tNEQ => 74 }

racc_nt_base = 75

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "methods",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_terms",
  "stmts",
  "stmt",
  "terms",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "var_decl_stmts",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "dtype",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "command_call",
  "expr_cmp",
  "command_opt_args",
  "command_arg_list",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_4(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_7(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_10(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_11(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_12(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_13(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_14(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
            result = Statement::For.new *val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = Statement::While.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_17(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_19(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_20(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_21(val, _values, result)
            declarations = []
        val[0].each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_25(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = { 
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_26(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_28(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_29(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_30(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_37(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_39(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_40(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_41(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_42(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_43(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_44(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_45(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_46(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_47(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_48(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_49(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_50(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_52(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_54(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_55(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_56(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_57(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_58(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_59(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_60(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_61(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_62(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_63(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_64(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_65(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_66(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_68(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_70(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_71(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_72(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_73(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_74(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_75(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_76(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_77(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_78(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_79(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_80(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_81(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_82(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_83(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_84(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_86(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_87(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_88(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_89(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_90(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_91(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_92(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_93(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_94(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_95(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_96(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_97(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_100(val, _values, result)
     result = Expression::Name.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_101(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_102(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_103(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_104(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_105(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_107(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_108(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_109(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_129(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_130(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_131(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_132(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_133(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_134(val, _values, result)
    
    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_136(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
