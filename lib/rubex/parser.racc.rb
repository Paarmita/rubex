#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 589)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'96,97,99,232,242,232,77,100,101,57,78,117,118,119,13,146,87,78,304,18',
'145,121,107,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,128,321,75,61,110,61,26,58,211,180,284,181,120,212,129,283',
'78,275,76,170,171,124,27,170,171,170,171,127,178,116,130,16,96,97,99',
'131,113,114,115,100,101,170,171,117,118,119,13,13,87,29,12,11,17,121',
'107,52,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'128,181,303,180,110,22,22,223,23,23,75,302,120,150,129,59,230,152,78',
'170,171,124,183,174,170,171,76,127,78,116,130,16,96,97,99,131,113,114',
'115,100,101,173,61,117,118,119,13,13,87,170,171,11,17,121,107,63,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128,150',
'152,16,110,152,22,335,22,23,64,23,120,78,129,61,78,22,78,13,23,124,12',
'11,17,22,68,127,23,116,130,16,96,97,99,131,113,114,115,100,101,170,171',
'117,118,119,13,13,87,170,171,11,17,121,107,61,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,128,180,16,181,110,74,187,188',
'189,190,191,192,120,22,129,58,23,22,13,139,23,124,11,17,194,195,61,127',
'22,116,130,23,96,97,99,131,113,114,115,100,101,170,171,117,118,119,13',
'22,87,329,23,149,330,121,107,154,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,128,170,171,157,110,187,188,189,190,191,192',
'172,120,182,129,187,188,189,190,191,192,124,193,194,195,196,197,127',
'213,116,130,61,96,97,99,131,113,114,115,100,101,170,171,117,118,119',
'13,224,87,189,190,191,192,121,107,139,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,128,170,171,181,110,187,188,189,190',
'191,192,174,120,180,129,187,188,189,190,191,192,124,193,194,195,196',
'197,127,230,116,130,234,96,97,99,131,113,114,115,100,101,170,171,117',
'118,119,13,245,87,189,190,191,192,121,107,247,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,128,313,314,250,110,187,188,189',
'190,191,192,251,120,277,129,237,238,239,240,170,171,124,193,194,195',
'196,197,127,191,116,130,61,96,97,99,131,113,114,115,100,101,170,171',
'117,118,119,13,139,87,170,171,313,314,121,107,157,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128,294,295,170,110,117',
'118,119,191,191,191,191,120,305,129,121,309,310,315,318,251,124,139',
'324,117,118,119,127,78,116,130,337,139,,121,131,113,114,115,128,,,,161',
'117,118,119,,,,,120,,129,121,,,,128,,124,,161,117,118,119,127,,116,130',
'120,,129,121,131,113,114,115,128,124,,,161,,,127,,116,130,,120,,129',
'131,113,114,115,168,,124,,161,117,118,119,127,,116,130,120,,129,121',
'131,113,114,115,,,,,117,118,119,,,116,130,,,,121,131,113,114,115,128',
',,,161,117,118,119,,,,,120,,129,121,,,,128,,124,,161,117,118,119,127',
',116,130,120,,129,121,131,113,114,115,128,,,,161,,,127,,116,130,,120',
',129,131,113,114,115,128,,124,,161,117,118,119,127,,116,130,120,,129',
'121,131,113,114,115,,124,,,117,118,119,127,,116,130,,,,121,131,113,114',
'115,168,,,,161,117,118,119,,,,,120,,129,121,,,,168,,,,161,117,118,119',
',,116,130,120,,129,121,131,113,114,115,168,,,,161,,,,,116,130,,120,',
'129,131,113,114,115,128,,,,161,117,118,119,,,116,130,120,,129,121,131',
'113,114,115,,124,,,117,118,119,127,,116,130,,,,121,131,113,114,115,168',
',,,161,117,118,119,,,,,120,,129,121,,,,128,,,,161,117,118,119,,,116',
'130,120,,129,121,131,113,114,115,128,124,,,161,,,127,,116,130,,120,',
'129,131,113,114,115,128,,124,,161,117,118,119,127,,116,130,120,,129',
'121,131,113,114,115,,124,,,117,118,119,127,,116,130,,,,121,131,113,114',
'115,128,,,,161,117,118,119,,,,,120,,129,121,,,,128,,124,,161,117,118',
'119,127,,116,130,120,,129,121,131,113,114,115,128,124,,,161,,,127,,116',
'130,,120,,129,131,113,114,115,128,,124,,161,117,118,119,127,,116,130',
'120,,129,121,131,113,114,115,,124,,,117,118,119,127,,116,130,,,,121',
'131,113,114,115,128,,,,161,117,118,119,,,,,120,,129,121,,,,168,,124',
',161,117,118,119,127,,116,130,120,,129,121,131,113,114,115,168,,,,161',
',,,,116,130,,120,,129,131,113,114,115,168,,,,161,117,118,119,,,116,130',
'120,,129,121,131,113,114,115,,,,,117,118,119,,,116,130,,,,121,131,113',
'114,115,168,,,,161,117,118,119,,,,,120,,129,121,,,,168,,,,161,117,118',
'119,,,116,130,120,,129,121,131,113,114,115,168,,,,161,,,,,116,130,,120',
',129,131,113,114,115,168,,,,161,117,118,119,,,116,130,120,,129,121,131',
'113,114,115,,,,,117,118,119,,,116,130,,,,121,131,113,114,115,168,,,',
'161,117,118,119,,,,,120,,129,121,,,,168,,,,161,117,118,119,,,116,130',
'120,,129,121,131,113,114,115,168,,,,161,,,,,116,130,,120,,129,131,113',
'114,115,168,,,,161,117,118,119,,,116,130,120,,129,121,131,113,114,115',
',,,,117,118,119,,,116,130,,,,121,131,113,114,115,168,,,,161,117,118',
'119,,,,,120,,129,121,,,,168,,,,161,117,118,119,,,116,130,120,,129,121',
'131,113,114,115,168,,,,161,,,,,116,130,,120,,129,131,113,114,115,168',
',,,161,117,118,119,,,116,130,120,,129,121,131,113,114,115,,,,,117,118',
'119,,,116,130,,,,121,131,113,114,115,168,,,,161,117,118,119,,,,,120',
',129,121,,,,168,,,,161,,,,,,116,130,120,,129,,131,113,114,115,128,,',
',161,,,,,116,130,,120,,129,131,113,114,115,,,124,117,118,119,,,127,',
'116,130,,121,,,131,113,114,115,,,117,118,119,,,,,,,,121,,,,,128,,301',
',161,117,118,119,,,,,120,,129,121,,,,128,,124,,161,117,118,119,127,',
'116,130,120,,129,121,131,113,114,115,128,124,,,161,,,127,,116,130,,120',
',129,131,113,114,115,168,,124,,161,117,118,119,127,,116,130,120,,129',
'121,131,113,114,115,,,,,117,118,119,,,116,130,,,,121,131,113,114,115',
'168,,,,161,,16,219,,,,,120,,129,,,,,128,,,13,161,,,11,17,,116,130,120',
',129,,131,113,114,115,,124,,147,16,307,,127,,116,130,,,,,131,113,114',
'115,22,13,,23,,11,17,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,221,,,,,22,,22,23,,23,,,,,13,,87,,,,,,,,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,276,,,,,22,,,23,',
',,187,188,189,190,191,192,,198,200,201,202,203,,,,,,193,194,195,196',
'197,276,187,188,189,190,191,192,199,,,,,187,188,189,190,191,192,193',
'194,195,196,197,,13,,87,,,193,194,195,196,197,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,289,,,,,,,,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,187,188,189,190,191,192',
',198,200,201,202,203,,,,,,193,194,195,196,197,,,,,,,,199,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,,-46,,,,,-46,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,,,,,137,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,,,,,137',
'187,188,189,190,191,192,,,237,238,239,240,,,,,,193,194,195,196,197,187',
'188,189,190,191,192,187,188,189,190,191,192,,,,,,193,194,195,196,197',
',193,194,195,196,197,187,188,189,190,191,192,187,188,189,190,191,192',
',,,,,193,194,195,196,197,,193,194,195,196,197,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,187,188,189,190,191,192,187,188,189,190,191,192,,,,,',
'193,194,195,,,,193,194,195' ]
        racc_action_table = arr = ::Array.new(2261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'73,73,73,165,169,325,65,73,73,25,257,73,73,73,73,87,73,65,257,1,87,73',
'73,11,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,308,63,165,73,325,12,25,134,110,218,110,73,134,73,218,308,205,63',
'169,169,73,13,165,165,325,325,73,110,73,73,20,156,156,156,73,73,73,73',
'156,156,205,205,156,156,156,156,20,156,16,20,20,20,156,156,18,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,247,254,112,156,156,20,143,156,20,247,253,156,91,156,26',
'253,91,143,106,106,156,112,108,254,254,247,156,91,156,156,24,214,214',
'214,156,156,156,156,214,214,108,27,214,214,214,214,24,214,158,158,24',
'24,214,214,28,214,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,281,226,0,214,281,24,331,2,24,29,2,214',
'226,214,56,281,5,331,0,5,214,0,0,0,70,58,214,70,214,214,66,231,231,231',
'214,214,214,214,231,231,164,164,231,231,231,231,66,231,229,229,66,66',
'231,231,59,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,161,141,161,231,62,264,264,264,264,264,264',
'231,79,231,67,79,81,141,77,81,231,141,141,264,264,80,231,93,231,231',
'93,234,234,234,231,231,231,231,234,234,246,246,234,234,234,234,220,234',
'319,220,89,319,234,234,92,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,252,252,94,234,269,269,269',
'269,269,269,107,234,111,234,265,265,265,265,265,265,234,269,269,269',
'269,269,234,136,234,234,138,242,242,242,234,234,234,234,242,242,255',
'255,242,242,242,242,144,242,258,258,258,258,242,242,151,242,242,242',
'242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242',
'242,242,256,256,152,242,270,270,270,270,270,270,159,242,162,242,266',
'266,266,266,266,266,242,270,270,270,270,270,242,163,242,242,166,314',
'314,314,242,242,242,242,314,314,291,291,314,314,314,314,172,314,259',
'259,259,259,314,314,174,314,314,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,314,292,292,175,314,271,271',
'271,271,271,271,176,314,207,314,294,294,295,295,300,300,314,271,271',
'271,271,271,314,208,314,314,211,332,332,332,314,314,314,314,332,332',
'320,320,332,332,332,332,223,332,333,333,336,336,332,332,228,332,332',
'332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332,332',
'332,332,332,235,236,244,332,96,96,96,260,261,262,263,332,280,332,96',
'289,290,293,296,298,332,310,311,97,97,97,332,322,332,332,334,337,,97',
'332,332,332,332,96,,,,96,99,99,99,,,,,96,,96,99,,,,97,,96,,97,100,100',
'100,96,,96,96,97,,97,100,96,96,96,96,99,97,,,99,,,97,,97,97,,99,,99',
'97,97,97,97,100,,99,,100,101,101,101,99,,99,99,100,,100,101,99,99,99',
'99,,,,,123,123,123,,,100,100,,,,123,100,100,100,100,101,,,,101,127,127',
'127,,,,,101,,101,127,,,,123,,101,,123,128,128,128,101,,101,101,123,',
'123,128,101,101,101,101,127,,,,127,,,123,,123,123,,127,,127,123,123',
'123,123,128,,127,,128,129,129,129,127,,127,127,128,,128,129,127,127',
'127,127,,128,,,130,130,130,128,,128,128,,,,130,128,128,128,128,129,',
',,129,131,131,131,,,,,129,,129,131,,,,130,,,,130,157,157,157,,,129,129',
'130,,130,157,129,129,129,129,131,,,,131,,,,,130,130,,131,,131,130,130',
'130,130,157,,,,157,168,168,168,,,131,131,157,,157,168,131,131,131,131',
',157,,,170,170,170,157,,157,157,,,,170,157,157,157,157,168,,,,168,171',
'171,171,,,,,168,,168,171,,,,170,,,,170,173,173,173,,,168,168,170,,170',
'173,168,168,168,168,171,170,,,171,,,170,,170,170,,171,,171,170,170,170',
'170,173,,171,,173,178,178,178,171,,171,171,173,,173,178,171,171,171',
'171,,173,,,180,180,180,173,,173,173,,,,180,173,173,173,173,178,,,,178',
'181,181,181,,,,,178,,178,181,,,,180,,178,,180,182,182,182,178,,178,178',
'180,,180,182,178,178,178,178,181,180,,,181,,,180,,180,180,,181,,181',
'180,180,180,180,182,,181,,182,183,183,183,181,,181,181,182,,182,183',
'181,181,181,181,,182,,,187,187,187,182,,182,182,,,,187,182,182,182,182',
'183,,,,183,188,188,188,,,,,183,,183,188,,,,187,,183,,187,189,189,189',
'183,,183,183,187,,187,189,183,183,183,183,188,,,,188,,,,,187,187,,188',
',188,187,187,187,187,189,,,,189,190,190,190,,,188,188,189,,189,190,188',
'188,188,188,,,,,191,191,191,,,189,189,,,,191,189,189,189,189,190,,,',
'190,192,192,192,,,,,190,,190,192,,,,191,,,,191,193,193,193,,,190,190',
'191,,191,193,190,190,190,190,192,,,,192,,,,,191,191,,192,,192,191,191',
'191,191,193,,,,193,194,194,194,,,192,192,193,,193,194,192,192,192,192',
',,,,195,195,195,,,193,193,,,,195,193,193,193,193,194,,,,194,196,196',
'196,,,,,194,,194,196,,,,195,,,,195,197,197,197,,,194,194,195,,195,197',
'194,194,194,194,196,,,,196,,,,,195,195,,196,,196,195,195,195,195,197',
',,,197,198,198,198,,,196,196,197,,197,198,196,196,196,196,,,,,199,199',
'199,,,197,197,,,,199,197,197,197,197,198,,,,198,200,200,200,,,,,198',
',198,200,,,,199,,,,199,201,201,201,,,198,198,199,,199,201,198,198,198',
'198,200,,,,200,,,,,199,199,,200,,200,199,199,199,199,201,,,,201,202',
'202,202,,,200,200,201,,201,202,200,200,200,200,,,,,203,203,203,,,201',
'201,,,,203,201,201,201,201,202,,,,202,230,230,230,,,,,202,,202,230,',
',,203,,,,203,,,,,,202,202,203,,203,,202,202,202,202,230,,,,230,,,,,203',
'203,,230,,230,203,203,203,203,,,230,251,251,251,,,230,,230,230,,251',
',,230,230,230,230,,,301,301,301,,,,,,,,301,,,,,251,,251,,251,313,313',
'313,,,,,251,,251,313,,,,301,,251,,301,316,316,316,251,,251,251,301,',
'301,316,251,251,251,251,313,301,,,313,,,301,,301,301,,313,,313,301,301',
'301,301,316,,313,,316,317,317,317,313,,313,313,316,,316,317,313,313',
'313,313,,,,,330,330,330,,,316,316,,,,330,316,316,316,316,317,,,,317',
',140,140,,,,,317,,317,,,,,330,,,140,330,,,140,140,,317,317,330,,330',
',317,317,317,317,,330,,88,285,285,,330,,330,330,,,,,330,330,330,330',
'140,285,,140,,285,285,,,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,142,,,,,88,,285,88,,285,,,,,142,,142,,,,,,,,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,206,,,,,142,,,142,,,,206,206,206,206,206,206,,206,206,206,206',
'206,,,,,,206,206,206,206,206,241,272,272,272,272,272,272,206,,,,,241',
'241,241,241,241,241,272,272,272,272,272,,69,,69,,,241,241,241,241,241',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,224,',
',,,,,,,,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,125,125,125,125,125,125,,125,125,125,125,125',
',,,,,125,125,125,125,125,,,,,,,,125,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,,139,,,,,139,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,,74,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,,,,,212,167,167,167,167,167,167,,,167,167,167,167,,,,,,167',
'167,167,167,167,273,273,273,273,273,273,274,274,274,274,274,274,,,,',
',273,273,273,273,273,,274,274,274,274,274,327,327,327,327,327,327,328',
'328,328,328,328,328,,,,,,327,327,327,327,327,,328,328,328,328,328,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,57,57,57',
'57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,267,267,267,267,267,267,268,268,268,268,268,268,,,,,,267',
'267,267,,,,268,268,268' ]
        racc_action_check = arr = ::Array.new(2261, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   200,    19,   153,   nil,   nil,   162,   nil,   nil,   nil,   nil,
   nil,   -30,   -27,    14,   nil,   nil,    70,  2102,   100,   nil,
    74,   nil,   nil,   nil,   151,   -18,   123,   110,   124,   150,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   160,  2123,   172,   200,
  2144,   nil,   232,   -13,   nil,   -47,   228,   221,   nil,  1862,
   170,   nil,   nil,    -4,  1972,   nil,   nil,   246,   nil,   235,
   248,   239,   nil,   nil,   nil,   nil,   nil,   -33,  1727,   272,
   nil,    86,   328,   250,   350,   nil,   574,   593,   nil,   613,
   632,   671,   nil,   nil,   nil,   nil,    67,   346,    86,   nil,
     5,   298,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   690,  2165,  1880,   nil,   710,   729,   768,
   787,   807,   nil,   nil,     3,   nil,   328,   nil,   330,  1944,
  1692,   276,  1773,    76,   332,   nil,   nil,   nil,   nil,   nil,
   nil,   359,   382,   nil,   nil,   nil,    73,   826,    97,   382,
   nil,   228,   394,   403,   166,    -6,   447,  1990,   865,   -10,
   884,   904,   424,   923,   432,   455,   450,   nil,   962,   nil,
   981,  1001,  1020,  1059,   nil,   nil,   nil,  1078,  1098,  1117,
  1156,  1175,  1195,  1214,  1253,  1272,  1292,  1311,  1350,  1369,
  1389,  1408,  1447,  1466,   nil,    12,  1772,   470,   469,   nil,
   nil,   484,  1998,   nil,   150,   nil,   nil,   nil,     5,   nil,
   269,   nil,   nil,   505,  1893,   nil,   148,   nil,   556,   174,
  1486,   227,   nil,   nil,   304,   532,   533,   nil,   nil,   nil,
   nil,  1806,   381,   nil,   513,   nil,   243,    72,   nil,   nil,
   nil,  1542,   280,    83,    72,   320,   357,   -54,   338,   415,
   526,   527,   528,   529,   220,   306,   383,  2173,  2179,   296,
   373,   450,  1795,  2012,  2018,   nil,   nil,   nil,   nil,   nil,
   594,   151,   nil,  2186,   nil,  1729,   nil,   nil,   nil,   547,
   551,   397,   501,   599,   452,   452,   600,   nil,   536,   nil,
   452,  1561,   nil,   nil,   nil,   nil,   nil,   nil,    -3,   nil,
   557,   604,   nil,  1581,   458,   nil,  1600,  1639,   nil,   273,
   474,   nil,   548,   nil,   nil,    -4,   nil,  2040,  2046,   nil,
  1658,   153,   535,   482,   565,   nil,   551,   567,   nil,   nil ]

racc_action_default = [
    -6,  -195,  -188,    -2,    -4,  -195,    -7,    -9,   -10,   -11,
   -12,  -195,  -195,  -195,   -39,   -40,   -51,  -195,  -195,    -1,
  -189,  -190,  -192,  -193,    -5,   -15,  -195,  -195,  -195,  -195,
   -96,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,
  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,   340,    -3,  -191,    -8,  -195,  -195,  -195,  -195,
   -25,  -194,  -116,  -115,   -52,  -195,    -6,   -15,   -16,  -195,
  -195,   -26,   -96,   -54,  -195,  -113,  -114,   -49,   -97,  -195,
  -195,  -195,   -18,   -20,   -21,   -22,   -96,  -195,  -195,   -28,
   -30,  -195,  -195,  -188,   -55,   -57,  -195,  -163,   -60,  -195,
  -195,  -195,   -65,   -66,   -67,   -68,   -69,  -195,  -146,   -96,
  -161,  -154,  -161,  -104,  -105,  -106,  -107,  -108,  -109,  -110,
  -111,  -112,  -122,  -195,  -195,  -127,  -128,  -195,  -195,  -195,
  -195,  -195,  -155,  -157,  -195,  -118,  -195,  -121,  -195,   -96,
  -195,    -6,  -195,  -195,  -195,   -32,   -33,   -24,   -27,   -96,
   -96,   -49,   -91,   -92,   -41,   -53,  -189,  -195,   -58,  -146,
  -154,  -161,  -161,   -59,  -164,  -195,  -195,  -195,  -195,  -195,
  -195,  -195,  -195,  -195,  -195,   -84,   -87,   -88,  -195,  -156,
  -163,  -195,  -195,  -195,  -158,  -123,   -96,  -195,  -195,  -195,
  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,
  -195,  -195,  -195,  -195,  -129,  -195,  -127,  -128,  -142,  -143,
  -144,  -195,  -195,  -120,   -54,   -96,   -45,   -47,  -195,   -13,
  -195,   -17,   -19,   -49,  -195,   -29,  -195,   -90,   -56,   -62,
  -195,   -54,   -78,   -79,   -54,  -195,  -195,   -74,   -75,   -76,
   -77,  -195,   -54,  -124,  -125,   -70,   -71,  -115,  -159,  -160,
   -96,  -195,  -101,  -195,  -195,  -102,  -103,  -195,  -131,  -132,
  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -147,
  -148,  -149,  -150,  -151,  -152,  -130,  -145,  -153,  -117,  -119,
  -195,   -43,   -44,   -96,   -50,  -195,   -23,   -31,   -96,  -195,
  -195,  -165,   -80,  -195,  -195,  -195,  -195,   -85,   -86,   -93,
   -94,   -98,  -162,  -166,  -126,   -42,   -48,   -14,   -34,   -96,
   -49,  -195,   -81,  -195,   -54,   -63,  -195,  -195,   -64,  -195,
   -99,   -96,   -35,   -89,   -61,  -195,   -83,   -72,   -73,   -95,
  -195,   -37,   -54,  -100,  -195,   -38,   -80,   -49,   -82,   -36 ]

racc_goto_table = [
    65,    10,    30,    55,    92,   138,    20,    60,    54,    24,
    90,   108,    54,   111,    62,   231,   177,   217,   112,   236,
   135,    10,   235,   163,    19,    10,    82,    79,   184,    56,
    85,   153,     3,   311,    71,     1,    66,     2,    81,    69,
    70,    89,    67,   144,   287,    72,   334,   176,    28,    73,
   218,   228,    53,   166,    86,   175,   143,   290,   299,   136,
   141,   319,   148,   134,   185,   207,   nil,    10,   nil,   nil,
    84,    80,   nil,    72,    88,   nil,    54,   338,   184,   227,
   nil,   nil,   nil,   140,   nil,   142,   nil,   225,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   nil,   111,   156,   nil,   222,
   nil,   112,   220,    85,   nil,   nil,   253,   nil,   nil,   186,
   nil,   nil,   nil,   nil,   249,   155,   nil,   nil,   214,    55,
   226,   nil,   nil,   nil,   215,   nil,   nil,    86,    54,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    10,    84,    54,   280,   nil,   317,   nil,   316,
   nil,   286,   108,   282,   111,   nil,   257,   297,   279,   112,
   248,   306,   292,   nil,   nil,   293,   153,   nil,   nil,   108,
   nil,   111,   108,   296,   111,   332,   112,   nil,   nil,   112,
   108,   nil,   111,   nil,   nil,   281,   nil,   112,   298,   nil,
   nil,   278,   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   288,
   158,   164,   nil,   165,   nil,   169,   nil,   nil,   nil,   nil,
   167,   153,   nil,   nil,   285,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   323,   nil,
   nil,   204,   205,   nil,   nil,   326,   nil,   nil,   206,   208,
   209,   210,   108,   nil,   111,   nil,   nil,   nil,   308,   112,
   nil,   nil,   nil,   336,    55,   339,   nil,   nil,   215,   nil,
   108,   229,   111,    54,   nil,   nil,   nil,   112,   nil,   322,
   nil,   nil,   nil,   nil,   243,   244,    10,   246,   241,   nil,
   nil,   331,   252,   nil,   164,   254,   255,   256,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   259,   260,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   291,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   300,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   320,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   325,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   327,   328,   nil,   nil,
   nil,   nil,   nil,   nil,   333 ]

racc_goto_check = [
    20,    12,    15,     8,    34,    21,     5,    14,    68,     5,
    25,    48,    68,    56,    32,    43,    54,    35,    59,    51,
    62,    12,    50,    41,     3,    12,    17,     7,    66,    13,
    19,    56,     4,    44,    23,     1,    14,     2,    16,    14,
    22,    24,    15,    26,    27,    15,    28,    25,    31,    33,
    36,    38,     4,    45,    15,    53,    20,    55,    57,    15,
    14,    58,    23,    61,    63,    65,   nil,    12,   nil,   nil,
    12,    13,   nil,    15,     5,   nil,    68,    44,    66,    21,
   nil,   nil,   nil,     5,   nil,     5,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,    56,     5,   nil,    17,
   nil,    59,     7,    19,   nil,   nil,    41,   nil,   nil,    15,
   nil,   nil,   nil,   nil,    56,     3,   nil,   nil,    14,     8,
    20,   nil,   nil,   nil,    15,   nil,   nil,    15,    68,   nil,
    68,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,    12,    12,    68,    34,   nil,    51,   nil,    50,
   nil,    21,    48,    25,    56,   nil,    20,    54,    62,    59,
    32,    35,    34,   nil,   nil,    34,    56,   nil,   nil,    48,
   nil,    56,    48,    34,    56,    43,    59,   nil,   nil,    59,
    48,   nil,    56,   nil,   nil,    20,   nil,    59,    25,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    40,    40,   nil,    40,   nil,    40,   nil,   nil,   nil,   nil,
    49,    56,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,    40,    40,   nil,   nil,    34,   nil,   nil,    49,    49,
    49,    49,    48,   nil,    56,   nil,   nil,   nil,    20,    59,
   nil,   nil,   nil,    34,     8,    21,   nil,   nil,    15,   nil,
    48,    40,    56,    68,   nil,   nil,   nil,    59,   nil,    20,
   nil,   nil,   nil,   nil,    40,    40,    12,    40,    49,   nil,
   nil,    20,    40,   nil,    40,    40,    40,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    49,   nil,   nil,
   nil,   nil,   nil,   nil,    40 ]

racc_goto_pointer = [
   nil,    35,    37,    22,    32,     4,   nil,   -39,   -21,   nil,
   nil,   nil,     1,     4,   -20,   -15,   -31,   -43,   nil,   -39,
   -30,   -72,   -20,   -26,   -31,   -62,   -44,  -180,  -285,   nil,
   nil,    32,   -14,   -13,   -69,  -122,   -89,   nil,  -105,   nil,
   114,   -74,   nil,  -150,  -259,   -47,   nil,   nil,   -62,   120,
  -145,  -148,   nil,   -54,   -93,  -169,   -60,  -193,  -240,   -55,
   nil,   -11,   -54,   -59,   nil,   -63,   -84,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   103,   nil,   233,   109,   nil,   nil,    83,   105,
    91,   nil,   nil,   nil,   nil,   216,   nil,   nil,   nil,    14,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    93,    94,    95,
   106,   nil,    98,   nil,   nil,   nil,   102,   104,   159,   125,
   nil,   nil,   312,   nil,   nil,   151,   160,   nil,   nil,   162,
   132,   nil,   nil,   122,   123,   126,   179,   133,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 93, :_reduce_1,
  1, 94, :_reduce_2,
  3, 94, :_reduce_3,
  1, 96, :_reduce_4,
  2, 96, :_reduce_5,
  0, 99, :_reduce_6,
  1, 99, :_reduce_7,
  3, 99, :_reduce_8,
  1, 100, :_reduce_9,
  1, 100, :_reduce_10,
  1, 100, :_reduce_11,
  1, 100, :_reduce_12,
  7, 102, :_reduce_13,
  9, 103, :_reduce_14,
  0, 105, :_reduce_15,
  2, 105, :_reduce_16,
  7, 98, :_reduce_17,
  1, 108, :_reduce_18,
  3, 108, :_reduce_19,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  4, 110, :_reduce_23,
  6, 104, :_reduce_24,
  0, 114, :_reduce_25,
  1, 114, :_reduce_26,
  3, 114, :_reduce_27,
  2, 115, :_reduce_28,
  3, 116, :_reduce_29,
  1, 116, :_reduce_30,
  4, 111, :_reduce_31,
  1, 118, :_reduce_none,
  1, 118, :_reduce_33,
  2, 119, :_reduce_34,
  3, 119, :_reduce_35,
  7, 119, :_reduce_36,
  0, 120, :_reduce_37,
  1, 120, :_reduce_38,
  1, 101, :_reduce_39,
  1, 101, :_reduce_40,
  6, 121, :_reduce_41,
  8, 122, :_reduce_42,
  2, 127, :_reduce_43,
  2, 127, :_reduce_44,
  1, 127, :_reduce_45,
  0, 128, :_reduce_46,
  1, 128, :_reduce_47,
  3, 128, :_reduce_48,
  0, 113, :_reduce_49,
  3, 113, :_reduce_50,
  0, 123, :_reduce_51,
  2, 123, :_reduce_52,
  2, 126, :_reduce_53,
  0, 129, :_reduce_54,
  1, 129, :_reduce_55,
  3, 129, :_reduce_56,
  1, 130, :_reduce_57,
  2, 130, :_reduce_58,
  2, 130, :_reduce_59,
  1, 130, :_reduce_60,
  6, 130, :_reduce_61,
  3, 130, :_reduce_62,
  5, 130, :_reduce_63,
  5, 130, :_reduce_64,
  1, 130, :_reduce_65,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_69,
  3, 139, :_reduce_70,
  3, 138, :_reduce_71,
  5, 137, :_reduce_72,
  5, 137, :_reduce_73,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  0, 136, :_reduce_80,
  1, 136, :_reduce_81,
  5, 136, :_reduce_82,
  2, 144, :_reduce_83,
  2, 131, :_reduce_84,
  3, 145, :_reduce_85,
  3, 145, :_reduce_86,
  1, 145, :_reduce_87,
  1, 145, :_reduce_88,
  6, 117, :_reduce_89,
  3, 117, :_reduce_90,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 146, :_reduce_93,
  1, 149, :_reduce_none,
  3, 149, :_reduce_95,
  0, 112, :_reduce_96,
  2, 112, :_reduce_97,
  0, 150, :_reduce_98,
  1, 150, :_reduce_99,
  3, 150, :_reduce_100,
  3, 134, :_reduce_101,
  3, 134, :_reduce_102,
  3, 134, :_reduce_103,
  1, 152, :_reduce_104,
  1, 152, :_reduce_105,
  1, 152, :_reduce_106,
  1, 152, :_reduce_107,
  1, 152, :_reduce_108,
  1, 152, :_reduce_109,
  1, 152, :_reduce_110,
  1, 152, :_reduce_111,
  1, 152, :_reduce_112,
  2, 124, :_reduce_113,
  2, 124, :_reduce_114,
  1, 124, :_reduce_115,
  0, 125, :_reduce_116,
  4, 125, :_reduce_117,
  1, 153, :_reduce_118,
  3, 153, :_reduce_119,
  2, 154, :_reduce_120,
  1, 154, :_reduce_121,
  1, 132, :_reduce_122,
  2, 132, :_reduce_123,
  3, 132, :_reduce_124,
  3, 132, :_reduce_125,
  4, 156, :_reduce_126,
  1, 155, :_reduce_127,
  1, 155, :_reduce_128,
  2, 155, :_reduce_129,
  3, 155, :_reduce_130,
  3, 141, :_reduce_131,
  3, 141, :_reduce_132,
  3, 141, :_reduce_133,
  3, 141, :_reduce_134,
  3, 141, :_reduce_135,
  3, 141, :_reduce_136,
  3, 141, :_reduce_137,
  3, 141, :_reduce_138,
  3, 141, :_reduce_139,
  3, 141, :_reduce_140,
  3, 141, :_reduce_141,
  2, 141, :_reduce_142,
  2, 141, :_reduce_143,
  2, 141, :_reduce_144,
  3, 141, :_reduce_145,
  1, 141, :_reduce_146,
  3, 157, :_reduce_147,
  3, 157, :_reduce_148,
  3, 157, :_reduce_149,
  3, 157, :_reduce_150,
  3, 157, :_reduce_151,
  3, 157, :_reduce_152,
  3, 157, :_reduce_153,
  1, 140, :_reduce_154,
  1, 140, :_reduce_155,
  2, 140, :_reduce_156,
  1, 140, :_reduce_none,
  2, 159, :_reduce_158,
  3, 151, :_reduce_159,
  3, 151, :_reduce_160,
  0, 158, :_reduce_161,
  3, 158, :_reduce_162,
  0, 133, :_reduce_163,
  1, 133, :_reduce_164,
  3, 133, :_reduce_165,
  4, 148, :_reduce_166,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_187,
  0, 95, :_reduce_188,
  1, 95, :_reduce_189,
  1, 97, :_reduce_190,
  2, 97, :_reduce_191,
  1, 160, :_reduce_192,
  1, 160, :_reduce_none,
  1, 106, :_reduce_194 ]

racc_reduce_n = 195

racc_shift_n = 340

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :tCUSTOM_DTYPE => 48,
  :tLPAREN => 49,
  :tRPAREN => 50,
  :tLSQUARE => 51,
  :tRSQUARE => 52,
  :tIDENTIFIER => 53,
  :tNL => 54,
  :tCOMMA => 55,
  :tSQUOTE => 56,
  :tSCOLON => 57,
  :EOF => 58,
  :tDOT => 59,
  :tQMARK => 60,
  :tSYMBOL => 61,
  :tPLUS => 62,
  :tMINUS => 63,
  :tSTAR => 64,
  :tDIVIDE => 65,
  :tEXPO => 66,
  :tMODULUS => 67,
  :tASSIGN => 68,
  :tEQ => 69,
  :tLT => 70,
  :tLTEQ => 71,
  :tGT => 72,
  :tGTEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tBANG => 76,
  :tOP_ASSIGN => 77,
  :tSTRING => 78,
  :tBIT_AND => 79,
  :tBIT_OR => 80,
  :tBIT_XOR => 81,
  :tBIT_LSHIFT => 82,
  :tBIT_RSHIFT => 83,
  :tBIT_NOT => 84,
  :tINTEGER => 85,
  :tFLOAT => 86,
  :tSINGLE_CHAR => 87,
  :ADDRESS_OF => 88,
  :TYPECAST => 89,
  :UMINUS => 90,
  :tNEQ => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new val[1], val[3], val[4], val[6]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_23(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_24(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_26(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_28(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_29(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_31(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_33(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_34(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_35(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_36(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_41(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_44(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_45(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_46(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_47(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_50(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_51(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_52(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_55(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_56(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_57(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_58(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_59(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_60(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_61(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_63(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_64(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_69(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_70(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_71(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_72(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_80(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_82(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_83(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_84(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_85(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_87(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_89(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_90(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_93(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_95(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_96(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_97(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_99(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_100(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_101(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_103(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_113(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_116(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_118(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_119(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_120(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_122(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_123(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_126(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_127(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_129(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 480)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_142(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_143(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_144(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_146(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_154(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_156(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_158(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_159(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_160(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_164(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_165(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_166(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_187(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_188(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_189(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_190(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_191(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_194(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
