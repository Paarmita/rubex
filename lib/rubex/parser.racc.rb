#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 730)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'113,114,116,273,61,273,212,117,213,70,139,140,141,13,70,83,93,18,22',
'143,129,23,124,125,159,126,128,25,210,118,94,160,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,69,144,67',
'132,67,292,62,206,102,94,249,142,145,101,26,250,153,370,363,369,27,213',
'284,148,326,199,200,199,200,151,90,138,158,154,212,113,114,116,155,135',
'136,137,117,199,200,139,140,141,13,91,83,199,200,29,143,129,215,124',
'125,159,126,128,22,56,118,23,160,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,152,90,144,16,132,22,199,200',
'23,172,206,177,142,145,336,179,65,153,13,335,91,12,17,94,148,67,375',
'390,397,94,151,205,138,158,154,11,113,114,116,155,135,136,137,117,94',
'94,139,140,141,13,358,83,179,71,22,143,129,23,124,125,159,126,128,199',
'200,118,94,160,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,152,411,144,16,132,22,67,177,23,346,75,179,142',
'145,345,94,346,153,13,199,200,345,17,346,148,94,362,212,345,213,151',
'345,138,158,154,11,113,114,116,155,135,136,137,117,199,200,139,140,141',
'13,22,83,84,23,22,143,129,23,124,125,159,126,128,22,89,118,23,160,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,152,92,144,16,132,62,223,224,225,226,227,228,142,145,199,200,22,153',
'13,23,22,65,17,23,148,230,231,103,365,165,151,364,138,158,154,11,113',
'114,116,155,135,136,137,117,199,200,139,140,141,13,22,83,67,23,22,143',
'129,23,124,125,159,126,128,22,173,118,23,160,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,174,144,176,132',
'223,224,225,226,227,228,181,142,145,199,200,184,153,223,224,225,226',
'227,228,148,225,226,227,228,192,151,192,138,158,154,192,113,114,116',
'155,135,136,137,117,199,200,139,140,141,13,204,83,199,200,214,143,129',
'67,124,125,159,126,128,199,200,118,67,160,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,248,144,251,132',
'225,226,227,228,67,367,253,142,145,381,382,67,153,280,281,282,283,199',
'200,148,199,200,199,200,259,151,165,138,158,154,165,113,114,116,155',
'135,136,137,117,381,382,139,140,141,13,213,83,206,212,275,143,129,290',
'124,125,159,126,128,295,296,118,67,160,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,328,144,227,132,67',
'253,342,184,349,350,351,142,145,199,358,227,153,227,227,227,206,373',
'377,148,383,386,387,391,296,151,393,138,158,154,67,113,114,116,155,135',
'136,137,117,396,94,139,140,141,13,165,83,400,406,206,143,129,416,124',
'125,159,126,128,165,,118,,160,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,152,,144,,132,,,,,,,,142,145,,,',
'153,,,,,,,148,,,,,,151,,138,158,154,,113,114,116,155,135,136,137,117',
',,139,140,141,13,,83,,,,143,129,,124,125,159,126,128,,,118,,160,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'152,,144,,132,22,,,23,,,,142,145,,,,153,,,,,,,148,,,,,,151,,138,158',
'154,,113,114,116,155,135,136,137,117,,,139,140,141,13,,83,,,,143,129',
',124,125,159,126,128,,,118,,160,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,152,,144,,132,22,,,23,,,,142',
'145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,113,114,116,155,135,136',
'137,117,,,139,140,141,13,,83,,,,143,129,,124,125,159,126,128,,,118,',
'160,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,55,152,,144,,132,,,,,,,,142,145,,,,153,,,,,,,148,,,,,,151,,138',
'158,154,,113,114,116,155,135,136,137,117,,,139,140,141,13,,83,,,,143',
'129,,124,125,159,126,128,,,118,,160,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,,144,,132,22,,,23,,,,142',
'145,139,140,141,153,,,,,,143,148,,,,159,,151,,138,158,154,160,,,,155',
'135,136,137,,,,,,,16,,,,,,,16,,139,140,141,152,,144,13,189,,143,17,',
',13,159,142,145,17,,,153,160,,11,,,,148,,,11,,,151,,138,158,154,,,,',
'155,135,136,137,,152,,144,,189,139,140,141,22,,,23,142,145,143,22,,153',
'23,159,,,,,148,,160,,,,151,,138,158,154,,,,,155,135,136,137,,,,,16,374',
'139,140,141,195,,144,,189,16,143,,,,13,159,142,145,17,,,153,160,,13',
',,12,17,,,11,,,,,138,158,154,,,11,,155,135,136,137,,152,,144,,189,139',
'140,141,,,,,142,145,143,22,,153,23,159,,,,,148,22,160,,23,,151,,138',
'158,154,,,,,155,135,136,137,,,,,,,139,140,141,152,,144,,189,,143,,,',
',159,142,145,,,,153,160,,,,,,,,,,,,151,,138,158,154,,,,,155,135,136',
'137,,152,,144,,189,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,160',
',,,151,,138,158,154,,,,,155,135,136,137,,,,,,,139,140,141,152,,144,',
'189,,143,,,,,159,142,145,,,,153,160,,,,,,148,,,,,,151,,138,158,154,',
',,,155,135,136,137,,245,,144,,189,139,140,141,,,,,142,145,143,,,153',
',159,,,,,,,160,,,,,,138,158,154,,,,,155,135,136,137,,,,,,,139,140,141',
'245,,144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,,,,,,,,,138,158,154',
',,,,155,135,136,137,,245,,144,,189,139,140,141,,,,,142,145,143,,,153',
',159,,,,,,,160,,,,,,138,158,154,,,,,155,135,136,137,,,,,,,139,140,141',
'152,,144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,148,,,,,,151,,138',
'158,154,,,,,155,135,136,137,,152,,144,,189,139,140,141,,,,,142,145,143',
',,153,,159,,,,,148,,160,,,,151,,138,158,154,,,,,155,135,136,137,,,,',
',,139,140,141,245,,144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,,,',
',,,,,138,158,154,,,,,155,135,136,137,,152,,144,,189,139,140,141,,,,',
'142,145,143,,,153,,159,,,,,148,,160,,,,151,,138,158,154,,,,,155,135',
'136,137,,,,,,,139,140,141,152,,144,,189,,143,,,,,159,142,145,,,,153',
'160,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,,152,,144,,189',
'139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,160,,,,151,,138,158',
'154,,,,,155,135,136,137,,,,,,,139,140,141,152,,144,,189,,143,,,,,159',
'142,145,,,,153,160,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137',
',152,,144,,189,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,160,',
',,151,,138,158,154,,,,,155,135,136,137,,,,,,,139,140,141,152,,144,,189',
',143,,,,,159,142,145,,,,153,160,,,,,,148,,,,,,151,,138,158,154,,,,,155',
'135,136,137,,152,,144,,189,139,140,141,,,,,142,145,143,,,153,,159,,',
',,148,,160,,,,151,,138,158,154,,,,,155,135,136,137,,,,,,,139,140,141',
'152,,144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,148,,,,,,151,,138',
'158,154,,,,,155,135,136,137,,152,,144,,189,139,140,141,,,,,142,145,143',
',,153,,159,,,,,148,,160,,,,151,,138,158,154,,,,,155,135,136,137,,,,',
',,139,140,141,152,,144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,148',
',,,,,151,,138,158,154,,,,,155,135,136,137,,152,,144,,189,139,140,141',
',,,,142,145,143,,,153,,159,,,,,148,,160,,,,151,,138,158,154,,,,,155',
'135,136,137,,,,,,139,140,141,,,,144,,189,143,,,,,159,,142,145,139,140',
'141,160,,,,,,143,,,,,159,,,,138,158,327,160,,,,,135,136,137,245,,144',
',189,,223,224,225,226,227,228,142,145,,,,153,245,,144,,189,,229,230',
'231,232,233,,142,145,138,158,154,153,,,,155,135,136,137,,,,,139,140',
'141,138,158,154,,,,143,155,135,136,137,159,,,,139,140,141,160,,,,,,143',
',,,,159,,,,,,,160,,,,,,,,245,,144,,189,223,224,225,226,227,228,,142',
'145,,,,153,245,,144,,189,229,230,231,232,233,,,142,145,138,158,154,153',
',,,155,135,136,137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137',
'159,,,,139,140,141,160,,,,,,143,,,,,159,,,,,,,160,,,,,,,,245,,144,,189',
'223,224,225,226,227,228,,142,145,,,,153,245,,144,,189,229,230,231,232',
'233,,,142,145,138,158,154,153,,,,155,135,136,137,,,,,139,140,141,138',
'158,154,,,,143,155,135,136,137,159,,,,139,140,141,160,,,,,,143,,,,,159',
',,,,,,160,,,,,,,,245,,144,,189,223,224,225,226,227,228,,142,145,,,,153',
'245,,144,,189,229,230,231,232,233,,,142,145,138,158,154,153,,,,155,135',
'136,137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137,159,,,,139',
'140,141,160,,,,,,143,,,,,159,,,,,,,160,,,,,,,,245,,144,,189,223,224',
'225,226,227,228,,142,145,,,,153,245,,144,,189,229,230,231,232,233,,',
'142,145,138,158,154,153,,,,155,135,136,137,,,,,139,140,141,138,158,154',
',,,143,155,135,136,137,159,,,,139,140,141,160,,,,,,143,,,,,159,,,,,',
',160,,,,,,,,245,,144,,189,223,224,225,226,227,228,,142,145,,,,153,245',
',144,,189,229,230,231,232,233,,,142,145,138,158,154,153,,,,155,135,136',
'137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137,159,,,,139,140',
'141,160,,,,,,143,,,,,159,,,,,,,160,,,,,,,,245,,144,,189,223,224,225',
'226,227,228,,142,145,,,,153,245,,144,,189,229,230,231,232,233,,,142',
'145,138,158,154,153,,,,155,135,136,137,,,,,139,140,141,138,158,154,',
',,143,155,135,136,137,159,,,,139,140,141,160,,,,,,143,,,,,159,,,,,,',
'160,,,,,,,,245,,144,,189,223,224,225,226,227,228,,142,145,,,,153,245',
',144,,189,229,230,231,232,233,,,142,145,138,158,154,153,,,,155,135,136',
'137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137,159,,,,139,140',
'141,160,,,,,,143,,,,,159,,139,140,141,,,160,,,,143,,,,245,159,144,,189',
',,,160,,,,142,145,,,,153,245,,144,,189,,,,,,,,142,145,138,158,154,153',
'144,,189,155,135,136,137,,,,142,145,,,138,158,154,,,,,155,135,136,137',
',,139,140,141,138,158,,,,,143,,135,136,137,159,223,224,225,226,227,228',
'160,,280,281,282,283,,,,,,,229,230,231,232,233,,,,,,,139,140,141,152',
',144,,189,,143,,,,,159,142,145,,,,153,160,,,,,,148,,,,,,151,,138,158',
'154,,,,,155,135,136,137,,152,,144,,189,139,140,141,,,,,142,145,143,',
',153,,159,,,,,148,,160,,,,151,,138,158,154,,,,,155,135,136,137,,,,139',
'140,141,,,,152,,144,143,189,,,,159,,,,142,145,,160,,153,223,224,225',
'226,227,228,148,,,,,,151,,138,158,154,,229,230,231,155,135,136,137,144',
',189,139,140,141,,,,,142,145,143,,,,,159,,,,,,,160,,,,,,138,158,,,,',
',,135,136,137,,,,,,,139,140,141,152,,144,,189,,143,,,,,159,142,145,',
',,153,160,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,,245,,144',
',189,139,140,141,,,,,142,145,143,,,153,,159,,,139,140,141,,160,,,,,143',
'138,158,154,,159,,,155,135,136,137,160,,,,,,,,,245,,144,,189,223,224',
'225,226,227,228,,142,145,,,,153,,144,,189,,229,230,231,232,233,,142',
'145,170,138,158,154,,,,,155,135,136,137,,,13,,83,,138,158,,,,,,,135',
'136,137,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,13,,83,,,22,,,23,,,,,,,,,,,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,327,,,,,,77,,,,,',
',,,223,224,225,226,227,228,,234,236,237,238,239,264,,,,,,229,230,231',
'232,233,,,,,,,,235,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,327,,,,,,,,,223,224,225,226,227,228,223,224',
'225,226,227,228,,,280,281,282,283,229,230,231,,,,229,230,231,232,233',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,,,,,,22,,,23,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,,-29,,,,,-29,223,224,225,226,227,228,,234,236',
'237,238,239,,,,,,,229,230,231,232,233,,,,,,,,235,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,,,,,164,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
',,,,164,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55' ]
        racc_action_table = arr = ::Array.new(4032, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'88,88,88,193,25,401,132,88,132,28,88,88,88,88,206,88,72,1,2,88,88,2',
'88,88,88,88,88,11,132,88,72,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,88,28,88,193,88,401,206,25,307,83',
'308,161,88,88,83,12,161,88,308,299,307,13,292,198,88,241,193,193,401',
'401,88,292,88,88,88,134,183,183,183,88,88,88,88,183,299,299,183,183',
'183,183,292,183,241,241,16,183,183,134,183,183,183,183,183,5,18,183',
'5,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,69,183,0,183,183,198,198,183',
'99,130,108,183,183,255,108,26,183,0,255,69,0,0,99,183,27,341,356,371',
'108,183,130,183,183,183,0,203,203,203,183,183,183,183,203,341,371,203',
'203,203,203,356,203,266,29,76,203,203,76,203,203,203,203,203,123,123',
'203,266,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,398,203,73,203,203,60',
'337,203,270,62,337,203,203,270,398,287,203,73,186,186,287,73,288,203',
'337,298,189,288,189,203,298,203,203,203,73,258,258,258,203,203,203,203',
'258,269,269,258,258,258,258,85,258,65,85,95,258,258,95,258,258,258,258',
'258,110,68,258,110,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,70,258,169,258',
'74,315,315,315,315,315,315,258,258,271,271,128,258,169,128,260,77,169',
'260,258,315,315,84,303,93,258,303,258,258,258,169,272,272,272,258,258',
'258,258,272,291,291,272,272,272,272,390,272,96,390,391,272,272,391,272',
'272,272,272,272,406,100,272,406,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,104,272,106,272,316,316,316,316,316,316,109,272,272,297,297,111',
'272,317,317,317,317,317,317,272,309,309,309,309,114,272,124,272,272',
'272,126,275,275,275,272,272,272,272,275,300,300,275,275,275,275,129',
'275,301,301,133,275,275,144,275,275,275,275,275,302,302,275,145,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,158,275,163,275,310,310,310,310',
'305,305,164,275,275,347,347,166,275,350,350,351,351,361,361,275,378',
'378,392,392,168,275,172,275,275,275,178,284,284,284,275,275,275,275',
'284,417,417,284,284,284,284,179,284,187,190,194,284,284,204,284,284',
'284,284,284,207,208,284,218,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284',
'243,284,244,284,249,251,264,268,276,278,279,284,284,286,289,311,284',
'312,313,314,334,339,343,284,348,352,355,358,360,284,366,284,284,284',
'367,382,382,382,284,284,284,284,382,369,376,382,382,382,382,377,382',
'379,388,395,382,382,410,382,382,382,382,382,416,,382,,382,382,382,382',
'382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382',
'382,382,382,382,382,382,,382,,382,,,,,,,,382,382,,,,382,,,,,,,382,,',
',,,382,,382,382,382,,407,407,407,382,382,382,382,407,,,407,407,407,407',
',407,,,,407,407,,407,407,407,407,407,,,407,,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,,407,,407,407,,,407,,,,407,407,,,,407,,,,,,,407,,,,',
',407,,407,407,407,,408,408,408,407,407,407,407,408,,,408,408,408,408',
',408,,,,408,408,,408,408,408,408,408,,,408,,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,,408,,408,408,,,408,,,,408,408,,,,408,,,,,,,408,,,,',
',408,,408,408,408,,412,412,412,408,408,408,408,412,,,412,412,412,412',
',412,,,,412,412,,412,412,412,412,412,,,412,,412,412,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,,412,,412,,,,,,,,412,412,,,,412,,,,,,,412,,,,,,412,',
'412,412,412,,413,413,413,412,412,412,412,413,,,413,413,413,413,,413',
',,,413,413,,413,413,413,413,413,,,413,,413,413,413,413,413,413,413,413',
'413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413',
'413,413,,413,,413,413,,,413,,,,413,413,113,113,113,413,,,,,,113,413',
',,,113,,413,,413,413,413,113,,,,413,413,413,413,,,,,,,24,,,,,,,167,',
'116,116,116,113,,113,24,113,,116,24,,,167,116,113,113,167,,,113,116',
',24,,,,113,,,167,,,113,,113,113,113,,,,,113,113,113,113,,116,,116,,116',
'117,117,117,24,,,24,116,116,117,167,,116,167,117,,,,,116,,117,,,,116',
',116,116,116,,,,,116,116,116,116,,,,,340,340,118,118,118,117,,117,,117',
'20,118,,,,340,118,117,117,340,,,117,118,,20,,,20,20,,,340,,,,,117,117',
'117,,,20,,117,117,117,117,,118,,118,,118,147,147,147,,,,,118,118,147',
'340,,118,340,147,,,,,118,20,147,,20,,118,,118,118,118,,,,,118,118,118',
'118,,,,,,,151,151,151,147,,147,,147,,151,,,,,151,147,147,,,,147,151',
',,,,,,,,,,,147,,147,147,147,,,,,147,147,147,147,,151,,151,,151,152,152',
'152,,,,,151,151,152,,,151,,152,,,,,151,,152,,,,151,,151,151,151,,,,',
'151,151,151,151,,,,,,,153,153,153,152,,152,,152,,153,,,,,153,152,152',
',,,152,153,,,,,,152,,,,,,152,,152,152,152,,,,,152,152,152,152,,153,',
'153,,153,154,154,154,,,,,153,153,154,,,153,,154,,,,,,,154,,,,,,153,153',
'153,,,,,153,153,153,153,,,,,,,155,155,155,154,,154,,154,,155,,,,,155',
'154,154,,,,154,155,,,,,,,,,,,,,,154,154,154,,,,,154,154,154,154,,155',
',155,,155,184,184,184,,,,,155,155,184,,,155,,184,,,,,,,184,,,,,,155',
'155,155,,,,,155,155,155,155,,,,,,,191,191,191,184,,184,,184,,191,,,',
',191,184,184,,,,184,191,,,,,,184,,,,,,184,,184,184,184,,,,,184,184,184',
'184,,191,,191,,191,195,195,195,,,,,191,191,195,,,191,,195,,,,,191,,195',
',,,191,,191,191,191,,,,,191,191,191,191,,,,,,,199,199,199,195,,195,',
'195,,199,,,,,199,195,195,,,,195,199,,,,,,,,,,,,,,195,195,195,,,,,195',
'195,195,195,,199,,199,,199,200,200,200,,,,,199,199,200,,,199,,200,,',
',,199,,200,,,,199,,199,199,199,,,,,199,199,199,199,,,,,,,201,201,201',
'200,,200,,200,,201,,,,,201,200,200,,,,200,201,,,,,,200,,,,,,200,,200',
'200,200,,,,,200,200,200,200,,201,,201,,201,202,202,202,,,,,201,201,202',
',,201,,202,,,,,201,,202,,,,201,,201,201,201,,,,,201,201,201,201,,,,',
',,205,205,205,202,,202,,202,,205,,,,,205,202,202,,,,202,205,,,,,,202',
',,,,,202,,202,202,202,,,,,202,202,202,202,,205,,205,,205,210,210,210',
',,,,205,205,210,,,205,,210,,,,,205,,210,,,,205,,205,205,205,,,,,205',
'205,205,205,,,,,,,212,212,212,210,,210,,210,,212,,,,,212,210,210,,,',
'210,212,,,,,,210,,,,,,210,,210,210,210,,,,,210,210,210,210,,212,,212',
',212,213,213,213,,,,,212,212,213,,,212,,213,,,,,212,,213,,,,212,,212',
'212,212,,,,,212,212,212,212,,,,,,,214,214,214,213,,213,,213,,214,,,',
',214,213,213,,,,213,214,,,,,,213,,,,,,213,,213,213,213,,,,,213,213,213',
'213,,214,,214,,214,215,215,215,,,,,214,214,215,,,214,,215,,,,,214,,215',
',,,214,,214,214,214,,,,,214,214,214,214,,,,,,,217,217,217,215,,215,',
'215,,217,,,,,217,215,215,,,,215,217,,,,,,215,,,,,,215,,215,215,215,',
',,,215,215,215,215,,217,,217,,217,220,220,220,,,,,217,217,220,,,217',
',220,,,,,217,,220,,,,217,,217,217,217,,,,,217,217,217,217,,,,,,223,223',
'223,,,,220,,220,223,,,,,223,,220,220,224,224,224,223,,,,,,224,,,,,224',
',,,220,220,329,224,,,,,220,220,220,223,,223,,223,,329,329,329,329,329',
'329,223,223,,,,223,224,,224,,224,,329,329,329,329,329,,224,224,223,223',
'223,224,,,,223,223,223,223,,,,,225,225,225,224,224,224,,,,225,224,224',
'224,224,225,,,,226,226,226,225,,,,,,226,,,,,226,,,,,,,226,,,,,,,,225',
',225,,225,320,320,320,320,320,320,,225,225,,,,225,226,,226,,226,320',
'320,320,320,320,,,226,226,225,225,225,226,,,,225,225,225,225,,,,,227',
'227,227,226,226,226,,,,227,226,226,226,226,227,,,,228,228,228,227,,',
',,,228,,,,,228,,,,,,,228,,,,,,,,227,,227,,227,321,321,321,321,321,321',
',227,227,,,,227,228,,228,,228,321,321,321,321,321,,,228,228,227,227',
'227,228,,,,227,227,227,227,,,,,229,229,229,228,228,228,,,,229,228,228',
'228,228,229,,,,230,230,230,229,,,,,,230,,,,,230,,,,,,,230,,,,,,,,229',
',229,,229,322,322,322,322,322,322,,229,229,,,,229,230,,230,,230,322',
'322,322,322,322,,,230,230,229,229,229,230,,,,229,229,229,229,,,,,231',
'231,231,230,230,230,,,,231,230,230,230,230,231,,,,232,232,232,231,,',
',,,232,,,,,232,,,,,,,232,,,,,,,,231,,231,,231,323,323,323,323,323,323',
',231,231,,,,231,232,,232,,232,323,323,323,323,323,,,232,232,231,231',
'231,232,,,,231,231,231,231,,,,,233,233,233,232,232,232,,,,233,232,232',
'232,232,233,,,,234,234,234,233,,,,,,234,,,,,234,,,,,,,234,,,,,,,,233',
',233,,233,324,324,324,324,324,324,,233,233,,,,233,234,,234,,234,324',
'324,324,324,324,,,234,234,233,233,233,234,,,,233,233,233,233,,,,,235',
'235,235,234,234,234,,,,235,234,234,234,234,235,,,,236,236,236,235,,',
',,,236,,,,,236,,,,,,,236,,,,,,,,235,,235,,235,325,325,325,325,325,325',
',235,235,,,,235,236,,236,,236,325,325,325,325,325,,,236,236,235,235',
'235,236,,,,235,235,235,235,,,,,237,237,237,236,236,236,,,,237,236,236',
'236,236,237,,,,238,238,238,237,,,,,,238,,,,,238,,,,,,,238,,,,,,,,237',
',237,,237,403,403,403,403,403,403,,237,237,,,,237,238,,238,,238,403',
'403,403,403,403,,,238,238,237,237,237,238,,,,237,237,237,237,,,,,239',
'239,239,238,238,238,,,,239,238,238,238,238,239,,,,245,245,245,239,,',
',,,245,,,,,245,,253,253,253,,,245,,,,253,,,,239,253,239,,239,,,,253',
',,,239,239,,,,239,245,,245,,245,,,,,,,,245,245,239,239,239,245,253,',
'253,239,239,239,239,,,,253,253,,,245,245,245,,,,,245,245,245,245,,,296',
'296,296,253,253,,,,,296,,253,253,253,296,197,197,197,197,197,197,296',
',197,197,197,197,,,,,,,197,197,197,197,197,,,,,,,345,345,345,296,,296',
',296,,345,,,,,345,296,296,,,,296,345,,,,,,296,,,,,,296,,296,296,296',
',,,,296,296,296,296,,345,,345,,345,364,364,364,,,,,345,345,364,,,345',
',364,,,,,345,,364,,,,345,,345,345,345,,,,,345,345,345,345,,,,368,368',
'368,,,,364,,364,368,364,,,,368,,,,364,364,,368,,364,318,318,318,318',
'318,318,364,,,,,,364,,364,364,364,,318,318,318,364,364,364,364,368,',
'368,381,381,381,,,,,368,368,381,,,,,381,,,,,,,381,,,,,,368,368,,,,,',
',368,368,368,,,,,,,384,384,384,381,,381,,381,,384,,,,,384,381,381,,',
',381,384,,,,,,381,,,,,,381,,381,381,381,,,,,381,381,381,381,,384,,384',
',384,385,385,385,,,,,384,384,385,,,384,,385,,,394,394,394,,385,,,,,394',
'384,384,384,,394,,,384,384,384,384,394,,,,,,,,,385,,385,,385,404,404',
'404,404,404,404,,385,385,,,,385,,394,,394,,404,404,404,404,404,,394',
'394,97,385,385,385,,,,,385,385,385,385,,,97,,97,,394,394,,,,,,,394,394',
'394,,,,,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97',
'97,97,97,97,97,63,,63,,,97,,,97,,,,,,,,,,,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,242,,,,,,63,,,,,,,,',
'242,242,242,242,242,242,,242,242,242,242,242,173,,,,,,242,242,242,242',
'242,,,,,,,,242,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,277,,,,,,,,,319,319,319',
'319,319,319,277,277,277,277,277,277,,,277,277,277,277,319,319,319,,',
',277,277,277,277,277,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,,,,,,105,,,105,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,,165,,,,,165,149,149,149,149,149,149,,149',
'149,149,149,149,,,,,,,149,149,149,149,149,,,,,,,,149,89,89,89,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,,,,,89,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,,,,,250,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,61,61,61,61,61,61,61,61,61',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,335,335,335,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335' ]
        racc_action_check = arr = ::Array.new(4032, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   151,    17,   -48,   nil,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   -38,   -21,    13,   nil,   nil,    89,  3846,   121,   nil,
  1240,   nil,   nil,   nil,  1127,   -21,   101,   109,    -7,   132,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   183,  3871,   188,  3555,   nil,   219,  3896,   nil,   246,    79,
   265,   nil,   -49,   244,   256,   nil,   138,   292,   nil,   nil,
   nil,   nil,   nil,     6,   270,   227,   nil,   nil,    -4,  3786,
   nil,   nil,   nil,   304,   nil,   231,   322,  3511,   nil,    94,
   317,   nil,   nil,   nil,   427,  3689,   365,   nil,   100,   437,
   240,   439,   nil,  1080,   397,   nil,  1124,  1176,  1220,   nil,
   nil,   nil,   nil,   124,   399,   nil,   403,   nil,   286,   462,
    89,   nil,   -55,   400,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   420,   429,   nil,  1272,  3921,  3714,
   nil,  1316,  1368,  1412,  1464,  1508,   nil,   nil,   462,   nil,
   nil,     6,   nil,   460,   450,  3723,   472,  1134,   548,   337,
   nil,   nil,   492,  3626,   nil,   nil,   nil,   nil,   496,   509,
   nil,   nil,   nil,    89,  1560,   nil,   173,   503,   nil,   209,
   514,  1604,   nil,    -6,   563,  1656,   nil,  3089,    67,  1700,
  1752,  1796,  1848,   182,   514,  1892,    -2,   518,   503,   nil,
  1944,   nil,  1988,  2040,  2084,  2136,   nil,  2180,   522,   nil,
  2232,   nil,   nil,  2275,  2293,  2369,  2387,  2463,  2481,  2557,
  2575,  2651,  2669,  2745,  2763,  2839,  2857,  2933,  2951,  3027,
   nil,    20,  3554,   554,   537,  3045,   nil,   nil,  3946,   554,
  3816,   538,   nil,  3061,   nil,   102,   nil,   nil,   275,   nil,
   290,   nil,   nil,   nil,   557,   nil,   137,   nil,   617,   198,
   190,   261,   368,   nil,   nil,   461,   562,  3625,   560,   561,
   nil,   nil,   nil,   nil,   554,   nil,   540,   197,   204,   599,
   nil,   291,    16,   nil,   nil,   nil,  3137,   354,   207,    12,
   384,   392,   403,   300,   nil,   465,   nil,    -6,   -12,   375,
   448,   550,   552,   553,   554,   265,   357,   370,  3235,  3619,
  2358,  2452,  2546,  2640,  2734,  2828,   nil,   nil,   nil,  2265,
   nil,   nil,   nil,   nil,   565,  3971,   nil,   189,   nil,   634,
  1230,   115,   nil,   576,   nil,  3181,   nil,   529,   637,   nil,
   455,   455,   638,   nil,   nil,   639,   169,   nil,   578,   nil,
   561,   455,   nil,   nil,  3233,   nil,   571,   584,  3274,   572,
   nil,   116,   nil,   nil,   nil,   nil,   581,   604,   458,   664,
   nil,  3326,   647,   nil,  3370,  3422,   nil,   nil,   636,   nil,
   320,   324,   460,   nil,  3439,   598,   nil,   nil,   179,   nil,
   nil,    -4,   nil,  2922,  3411,   nil,   333,   740,   833,   nil,
   610,   nil,   926,  1019,   nil,   nil,   617,   559,   nil,   nil,
   nil ]

racc_action_default = [
    -6,  -241,  -230,    -2,    -4,  -241,    -7,    -9,   -10,   -11,
   -12,  -241,  -241,  -241,   -49,   -50,   -56,  -241,  -241,    -1,
  -231,  -232,  -234,  -235,    -5,   -15,   -20,  -241,  -241,  -241,
  -115,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -207,
  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,  -217,
  -218,  -219,  -220,  -221,  -222,  -223,   421,    -3,  -233,    -8,
  -241,  -241,  -241,   -22,   -18,  -241,   -35,  -240,  -143,  -141,
  -241,   -57,  -241,    -6,   -15,   -16,  -241,   -20,   -23,   -25,
   -26,   -27,  -115,  -241,  -241,  -230,   -36,  -115,   -59,  -241,
  -139,  -140,  -142,   -32,  -116,  -230,  -241,  -241,   -19,  -241,
  -241,   -42,   -43,   -21,  -241,  -231,   -38,   -40,  -241,  -241,
  -230,   -60,   -62,  -224,  -226,   -65,  -241,  -241,  -241,   -70,
   -71,   -72,   -73,   -74,  -226,   -76,  -226,   -78,  -241,  -241,
  -175,  -115,  -193,  -183,  -193,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -236,  -236,  -151,  -241,  -241,  -156,
  -157,  -241,  -241,  -241,  -241,  -241,  -184,  -186,  -241,  -188,
  -189,  -241,  -145,  -241,  -149,  -115,  -241,  -231,  -241,    -6,
   -17,   -24,   -32,  -241,   -34,   -37,  -115,  -115,   -32,  -112,
  -113,   -51,   -58,  -231,  -241,   -63,  -225,  -175,  -183,  -193,
  -193,  -195,  -227,  -241,  -241,  -241,   -92,  -241,  -241,  -241,
  -241,  -195,  -195,   -59,  -241,  -241,  -241,  -105,  -108,  -109,
  -241,  -185,  -195,  -241,  -241,  -241,  -190,  -117,  -237,  -238,
  -134,  -152,  -115,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -158,  -241,  -156,  -157,  -171,  -241,  -172,  -173,  -241,  -241,
  -241,  -149,  -148,  -241,   -30,  -241,  -115,   -55,   -59,   -13,
  -241,   -28,   -41,  -115,  -241,   -39,  -241,  -111,   -61,   -67,
  -228,  -196,   -59,   -99,  -100,   -59,  -241,  -241,  -241,  -241,
   -95,   -96,   -97,   -98,   -59,  -153,  -154,  -228,  -228,   -81,
   -89,   -90,  -141,  -191,  -192,  -115,  -241,  -120,  -241,  -241,
  -121,  -122,  -118,  -241,  -239,  -236,  -135,  -241,  -241,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -176,  -177,  -178,  -179,  -180,  -181,  -159,  -174,  -182,  -241,
  -115,  -144,  -146,  -147,  -150,  -115,   -33,   -53,   -54,  -241,
  -241,   -44,  -115,  -241,   -64,  -241,  -229,  -101,  -241,   -91,
  -241,  -241,  -241,   -75,   -77,  -241,   -85,   -82,  -241,  -106,
  -107,  -114,  -194,  -198,  -241,  -132,  -241,  -236,  -241,  -241,
  -155,  -241,   -31,   -52,   -14,  -115,   -45,   -32,  -197,  -241,
  -102,  -241,   -59,   -68,  -241,  -241,   -69,   -79,   -87,   -83,
  -241,  -241,  -119,  -133,  -241,  -137,  -138,  -187,   -47,  -110,
   -66,  -241,  -104,   -93,   -94,   -80,  -241,   -59,   -59,  -136,
  -241,   -48,   -59,   -59,   -86,   -84,   -32,  -101,   -88,   -46,
  -103 ]

racc_goto_table = [
    20,   272,    66,    24,    58,    72,    10,   109,    58,   162,
   217,   220,   166,    59,   130,   306,   209,    68,    30,    19,
    95,   107,   254,   196,   252,   379,    10,   357,   216,   133,
    10,    64,    78,    86,    81,    73,    60,   344,     3,     1,
   270,     2,    63,    76,   255,    85,   106,   100,   134,   180,
   287,   288,   262,   410,   353,   354,    28,    99,    57,    88,
   268,   298,    74,   191,    82,   208,   171,    87,    81,    80,
   185,   169,   175,   201,    97,   202,   194,   355,   356,    10,
   388,    58,    98,   105,   216,    96,   405,   384,   385,    58,
   163,   261,   207,   167,   389,   420,   343,   267,    82,   303,
   305,   276,   104,    80,   368,   161,    87,   221,   183,   130,
   265,   333,   168,   243,   nil,   nil,   260,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   133,   nil,   203,   182,   nil,   130,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   nil,   134,   133,   nil,   307,   294,   nil,   222,
   nil,    58,   266,   nil,   nil,   nil,    59,   nil,   nil,   nil,
   nil,   nil,   nil,   134,   nil,   nil,   256,    58,   274,   nil,
   332,   366,   nil,    10,   263,    10,   nil,   339,   nil,   334,
   359,   nil,   nil,   186,   130,   nil,   193,    58,   198,   409,
   338,   347,   372,   304,   348,   293,   nil,   308,   130,   133,
   nil,   130,   nil,   352,   nil,   nil,   nil,   180,   nil,   412,
   130,   nil,   nil,   133,   nil,   nil,   133,   nil,   134,   nil,
   nil,   240,   241,   nil,   331,   133,   nil,   nil,   nil,   360,
   nil,   337,   134,   394,   nil,   134,   nil,   nil,   341,   nil,
   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,   330,
   nil,   163,   nil,   nil,   269,   nil,   nil,   nil,   340,   nil,
   nil,   271,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   285,
   286,   271,   271,   nil,   nil,   291,   nil,   nil,   180,   nil,
   297,   nil,   271,   299,   300,   301,   nil,   302,   nil,   nil,
   nil,   nil,   nil,   nil,   395,   nil,   399,   nil,   nil,   nil,
   nil,   402,   nil,   nil,   nil,   371,   nil,   nil,   130,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   376,   nil,   nil,
   307,   nil,   nil,   133,    58,   nil,   414,   415,   nil,    59,
   nil,   417,   418,   130,   130,   419,   256,   nil,   130,   130,
   nil,   nil,   134,   nil,   nil,   nil,    10,   197,   133,   133,
   398,   nil,   nil,   133,   133,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   361,   134,   134,   nil,
   nil,   nil,   134,   134,   nil,   nil,   274,   nil,   nil,   nil,
   nil,   nil,   242,   244,   246,   247,   nil,   nil,   407,   408,
   nil,    58,    58,   nil,   nil,   nil,   nil,    58,   nil,   nil,
   nil,   nil,   nil,   nil,   413,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   378,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   277,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   392,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   401,   nil,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   nil,   nil,   nil,   nil,   nil,   329,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   403,   404 ]

racc_goto_check = [
     5,    48,    14,     5,    84,    22,    12,    38,    84,    77,
    72,    72,    23,     8,    59,    74,    66,    36,    15,     3,
     7,    29,    25,    60,    78,    49,    12,    58,    82,    68,
    12,    18,    19,    27,    21,    14,    13,    45,     4,     1,
    44,     2,    16,    17,    24,    26,    28,    30,    70,    68,
    44,    44,    31,    32,    45,    45,    35,    22,     4,    37,
    40,    44,    15,    43,    15,    29,    19,    15,    21,    12,
    42,    14,    27,    43,     5,    43,    50,    54,    55,    12,
    56,    84,    18,     5,    82,    13,    57,    62,    63,    84,
    15,    23,    65,     5,    58,    49,    67,    23,    15,    69,
    73,    60,     3,    12,    75,    76,    15,    79,     5,    59,
    29,    78,     3,    81,   nil,   nil,     7,   nil,   nil,   nil,
   nil,   nil,    38,   nil,    68,   nil,     5,     3,   nil,    59,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14,   nil,    70,    68,   nil,    59,    68,   nil,    15,
   nil,    84,    22,   nil,   nil,   nil,     8,   nil,   nil,   nil,
   nil,   nil,   nil,    70,   nil,   nil,    15,    84,    14,   nil,
    77,    72,   nil,    12,    15,    12,   nil,    38,   nil,    59,
    66,   nil,   nil,    47,    59,   nil,    47,    84,    47,    74,
    29,    38,    25,    14,    38,    36,   nil,    22,    59,    68,
   nil,    59,   nil,    38,   nil,   nil,   nil,    68,   nil,    48,
    59,   nil,   nil,    68,   nil,   nil,    68,   nil,    70,   nil,
   nil,    47,    47,   nil,    14,    68,   nil,   nil,   nil,    29,
   nil,    22,    70,    72,   nil,    70,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,   nil,    15,
   nil,    15,   nil,   nil,    47,   nil,   nil,   nil,     5,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    47,    47,    47,   nil,   nil,    47,   nil,   nil,    68,   nil,
    47,   nil,    47,    47,    47,    47,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,    59,   nil,    23,   nil,   nil,   nil,
   nil,    38,   nil,   nil,   nil,    22,   nil,   nil,    59,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
    59,   nil,   nil,    68,    84,   nil,    38,    38,   nil,     8,
   nil,    38,    38,    59,    59,    23,    15,   nil,    59,    59,
   nil,   nil,    70,   nil,   nil,   nil,    12,    61,    68,    68,
    22,   nil,   nil,    68,    68,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    70,    70,   nil,
   nil,   nil,    70,    70,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,    61,    61,    61,    61,   nil,   nil,     5,     5,
   nil,    84,    84,   nil,   nil,   nil,   nil,    84,   nil,   nil,
   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    39,    41,    17,    38,    -2,   nil,   -53,   -11,   nil,
   nil,   nil,     6,    11,   -25,     1,    16,   -20,     5,   -31,
   nil,   -29,   -25,   -81,  -121,  -143,   -21,   -33,   -41,   -66,
   -36,  -121,  -345,   nil,   nil,    40,   -11,    -9,   -81,   nil,
  -123,   nil,   -43,   -51,  -151,  -233,   nil,    70,  -192,  -322,
   -41,   nil,   nil,   nil,  -212,  -211,  -276,  -302,  -262,   -74,
   -94,   230,  -263,  -263,   nil,   -39,  -115,  -170,   -59,  -118,
   -40,   nil,  -134,  -120,  -205,  -203,    16,   -80,  -140,   -40,
   nil,   -39,  -106,   nil,   -16,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   120,   nil,   219,   131,   nil,   nil,   nil,   nil,
    79,   122,   108,   nil,   nil,   nil,   nil,   nil,   nil,   257,
   nil,   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   110,
   111,   112,   nil,   nil,   nil,   nil,   115,   123,   nil,   nil,
   nil,   119,   121,   127,   nil,   nil,   nil,   nil,   nil,   187,
   nil,   149,   278,   279,   380,   nil,   nil,   178,   188,   nil,
   190,   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,
   147,   150,   211,   157,    21,   218 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 109, :_reduce_1,
  1, 110, :_reduce_2,
  3, 110, :_reduce_3,
  1, 112, :_reduce_4,
  2, 112, :_reduce_5,
  0, 115, :_reduce_6,
  1, 115, :_reduce_7,
  3, 115, :_reduce_8,
  1, 116, :_reduce_9,
  1, 116, :_reduce_10,
  1, 116, :_reduce_11,
  1, 116, :_reduce_12,
  7, 118, :_reduce_13,
  9, 119, :_reduce_14,
  0, 121, :_reduce_15,
  2, 121, :_reduce_16,
  6, 114, :_reduce_17,
  1, 124, :_reduce_18,
  3, 124, :_reduce_19,
  0, 126, :_reduce_20,
  3, 126, :_reduce_21,
  0, 125, :_reduce_22,
  1, 125, :_reduce_23,
  3, 125, :_reduce_24,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  4, 128, :_reduce_28,
  0, 132, :_reduce_29,
  1, 132, :_reduce_30,
  3, 132, :_reduce_31,
  0, 131, :_reduce_32,
  3, 131, :_reduce_33,
  6, 120, :_reduce_34,
  0, 134, :_reduce_35,
  1, 134, :_reduce_36,
  3, 134, :_reduce_37,
  2, 135, :_reduce_38,
  3, 136, :_reduce_39,
  1, 136, :_reduce_40,
  4, 129, :_reduce_41,
  1, 138, :_reduce_none,
  1, 138, :_reduce_43,
  2, 139, :_reduce_44,
  3, 139, :_reduce_45,
  7, 139, :_reduce_46,
  0, 140, :_reduce_47,
  1, 140, :_reduce_48,
  1, 117, :_reduce_49,
  1, 117, :_reduce_50,
  6, 141, :_reduce_51,
  8, 142, :_reduce_52,
  2, 133, :_reduce_53,
  2, 133, :_reduce_54,
  1, 133, :_reduce_55,
  0, 143, :_reduce_56,
  2, 143, :_reduce_57,
  2, 146, :_reduce_58,
  0, 147, :_reduce_59,
  1, 147, :_reduce_60,
  3, 147, :_reduce_61,
  1, 148, :_reduce_62,
  2, 148, :_reduce_63,
  4, 148, :_reduce_64,
  1, 148, :_reduce_65,
  6, 148, :_reduce_66,
  3, 148, :_reduce_67,
  5, 148, :_reduce_68,
  5, 148, :_reduce_69,
  1, 148, :_reduce_70,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_74,
  4, 148, :_reduce_75,
  1, 148, :_reduce_76,
  4, 148, :_reduce_77,
  1, 148, :_reduce_none,
  5, 161, :_reduce_79,
  3, 162, :_reduce_80,
  0, 163, :_reduce_81,
  1, 163, :_reduce_82,
  2, 163, :_reduce_83,
  4, 166, :_reduce_84,
  0, 164, :_reduce_85,
  3, 164, :_reduce_86,
  0, 165, :_reduce_87,
  3, 165, :_reduce_88,
  3, 160, :_reduce_89,
  3, 159, :_reduce_90,
  3, 158, :_reduce_91,
  1, 158, :_reduce_none,
  5, 168, :_reduce_93,
  5, 168, :_reduce_94,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  0, 157, :_reduce_101,
  1, 157, :_reduce_102,
  5, 157, :_reduce_103,
  2, 172, :_reduce_104,
  2, 149, :_reduce_105,
  3, 173, :_reduce_106,
  3, 173, :_reduce_107,
  1, 173, :_reduce_108,
  1, 173, :_reduce_109,
  6, 137, :_reduce_110,
  3, 137, :_reduce_111,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  3, 174, :_reduce_114,
  0, 130, :_reduce_115,
  2, 130, :_reduce_116,
  0, 177, :_reduce_117,
  1, 177, :_reduce_118,
  3, 177, :_reduce_119,
  3, 154, :_reduce_120,
  3, 154, :_reduce_121,
  3, 154, :_reduce_122,
  1, 179, :_reduce_123,
  1, 179, :_reduce_124,
  1, 179, :_reduce_125,
  1, 179, :_reduce_126,
  1, 179, :_reduce_127,
  1, 179, :_reduce_128,
  1, 179, :_reduce_129,
  1, 179, :_reduce_130,
  1, 179, :_reduce_131,
  4, 179, :_reduce_132,
  5, 179, :_reduce_133,
  0, 181, :_reduce_134,
  1, 181, :_reduce_135,
  4, 181, :_reduce_136,
  3, 182, :_reduce_137,
  2, 183, :_reduce_none,
  2, 144, :_reduce_139,
  2, 144, :_reduce_140,
  1, 144, :_reduce_141,
  2, 144, :_reduce_142,
  0, 145, :_reduce_143,
  4, 145, :_reduce_144,
  1, 184, :_reduce_145,
  3, 184, :_reduce_146,
  3, 185, :_reduce_147,
  2, 185, :_reduce_148,
  0, 186, :_reduce_149,
  2, 186, :_reduce_150,
  1, 155, :_reduce_151,
  2, 155, :_reduce_152,
  3, 155, :_reduce_153,
  3, 155, :_reduce_154,
  4, 188, :_reduce_155,
  1, 187, :_reduce_156,
  1, 187, :_reduce_157,
  2, 187, :_reduce_158,
  3, 187, :_reduce_159,
  3, 169, :_reduce_160,
  3, 169, :_reduce_161,
  3, 169, :_reduce_162,
  3, 169, :_reduce_163,
  3, 169, :_reduce_164,
  3, 169, :_reduce_165,
  3, 169, :_reduce_166,
  3, 169, :_reduce_167,
  3, 169, :_reduce_168,
  3, 169, :_reduce_169,
  3, 169, :_reduce_170,
  2, 169, :_reduce_171,
  2, 169, :_reduce_172,
  2, 169, :_reduce_173,
  3, 169, :_reduce_174,
  1, 169, :_reduce_175,
  3, 189, :_reduce_176,
  3, 189, :_reduce_177,
  3, 189, :_reduce_178,
  3, 189, :_reduce_179,
  3, 189, :_reduce_180,
  3, 189, :_reduce_181,
  3, 189, :_reduce_182,
  1, 167, :_reduce_183,
  1, 167, :_reduce_184,
  2, 167, :_reduce_185,
  1, 167, :_reduce_none,
  5, 167, :_reduce_187,
  1, 167, :_reduce_188,
  1, 167, :_reduce_189,
  2, 191, :_reduce_190,
  3, 178, :_reduce_191,
  3, 178, :_reduce_192,
  0, 190, :_reduce_193,
  3, 190, :_reduce_194,
  0, 152, :_reduce_195,
  1, 152, :_reduce_196,
  3, 152, :_reduce_197,
  4, 176, :_reduce_198,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_223,
  0, 150, :_reduce_224,
  1, 150, :_reduce_none,
  0, 151, :_reduce_226,
  1, 151, :_reduce_none,
  0, 153, :_reduce_228,
  1, 153, :_reduce_none,
  0, 111, :_reduce_230,
  1, 111, :_reduce_231,
  1, 113, :_reduce_232,
  2, 113, :_reduce_233,
  1, 192, :_reduce_234,
  1, 192, :_reduce_none,
  0, 180, :_reduce_236,
  1, 180, :_reduce_none,
  1, 193, :_reduce_none,
  2, 193, :_reduce_none,
  1, 122, :_reduce_240 ]

racc_reduce_n = 241

racc_shift_n = 421

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDATA_VAR => 35,
  :kDTYPE_UINT => 36,
  :kDTYPE_LINT => 37,
  :kDTYPE_LLINT => 38,
  :kDTYPE_CHAR => 39,
  :kDTYPE_I8 => 40,
  :kDTYPE_I16 => 41,
  :kDTYPE_I32 => 42,
  :kDTYPE_I64 => 43,
  :kDTYPE_UI8 => 44,
  :kDTYPE_UI16 => 45,
  :kDTYPE_UI32 => 46,
  :kDTYPE_UI64 => 47,
  :kDTYPE_INT => 48,
  :kDTYPE_F32 => 49,
  :kDTYPE_F64 => 50,
  :kDTYPE_LF64 => 51,
  :kDTYPE_ROBJ => 52,
  :kDTYPE_ULINT => 53,
  :kDTYPE_ULLINT => 54,
  :kDTYPE_VOID => 55,
  :kDTYPE_SIZE_T => 56,
  :kDTYPE_RB_STR => 57,
  :kDTYPE_UCHAR => 58,
  :kDTYPE_BOOL => 59,
  :tCUSTOM_DTYPE => 60,
  :tLPAREN => 61,
  :tRPAREN => 62,
  :tLSQUARE => 63,
  :tRSQUARE => 64,
  :tIDENTIFIER => 65,
  :tNL => 66,
  :tCOMMA => 67,
  :tSQUOTE => 68,
  :tSCOLON => 69,
  :EOF => 70,
  :tDOT => 71,
  :tQMARK => 72,
  :tSYMBOL => 73,
  :tLBRACE => 74,
  :tRBRACE => 75,
  :tCOLON => 76,
  :tPLUS => 77,
  :tMINUS => 78,
  :tSTAR => 79,
  :tDIVIDE => 80,
  :tEXPO => 81,
  :tMODULUS => 82,
  :tASSIGN => 83,
  :tEQ => 84,
  :tLT => 85,
  :tLTEQ => 86,
  :tGT => 87,
  :tGTEQ => 88,
  :tANDOP => 89,
  :tOROP => 90,
  :tBANG => 91,
  :tOP_ASSIGN => 92,
  :tSTRING => 93,
  :kSIZEOF => 94,
  :tBIT_AND => 95,
  :tBIT_OR => 96,
  :tBIT_XOR => 97,
  :tBIT_LSHIFT => 98,
  :tBIT_RSHIFT => 99,
  :tBIT_NOT => 100,
  :tINTEGER => 101,
  :tFLOAT => 102,
  :tSINGLE_CHAR => 103,
  :ADDRESS_OF => 104,
  :TYPECAST => 105,
  :UMINUS => 106,
  :tNEQ => 107 }

racc_nt_base = 108

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDATA_VAR",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "opt_compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_20(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_30(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_31(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_46(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_84(val, _values, result)
            err = Expression::Name.new(val[1]) 
        result = Statement::BeginBlock::Rescue.new err, nil, val[3] || [], location 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2] || [], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty?
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_145(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_146(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_160(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_168(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_169(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_170(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_176(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_177(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_178(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_179(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_180(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_181(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_185(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_187(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_188(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_189(val, _values, result)
            result = Expression::ElementRef.new('data',
          Expression::Literal::Int.new('0'))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_190(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_191(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_192(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 662)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 663)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 666)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 667)
  def _reduce_196(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 668)
  def _reduce_197(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_198(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_223(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'parser.racc', 691)
  def _reduce_226(val, _values, result)
    
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 695)
  def _reduce_228(val, _values, result)
    
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'parser.racc', 699)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 700)
  def _reduce_231(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 704)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 707)
  def _reduce_234(val, _values, result)
    
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_236(val, _values, result)
    
    result
  end
.,.,

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'parser.racc', 719)
  def _reduce_240(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
