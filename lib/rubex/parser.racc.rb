#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 577)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'96,97,99,227,237,227,77,100,101,57,143,117,118,119,13,142,87,78,206',
'167,168,121,107,207,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,125,314,177,61,110,61,75,58,278,177,296,178,120,277,126',
'225,78,271,18,167,168,180,76,167,168,167,168,124,175,116,127,16,96,97',
'99,128,113,114,115,100,101,167,168,117,118,119,13,13,87,25,12,11,17',
'121,107,26,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,125,178,297,171,110,22,22,147,23,23,75,149,120,147,126,22,22,149',
'23,23,22,170,78,23,167,168,76,124,78,116,127,16,96,97,99,128,113,114',
'115,100,101,167,168,117,118,119,13,13,87,167,168,11,17,121,107,27,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,125,16,218',
'16,110,149,22,328,22,23,29,23,120,78,126,52,78,13,78,13,12,11,17,11',
'17,22,59,124,23,116,127,16,96,97,99,128,113,114,115,100,101,167,168',
'117,118,119,13,13,87,167,168,11,17,121,107,61,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,125,177,63,178,110,182,183,184',
'185,186,187,64,120,61,126,182,183,184,185,186,187,68,188,189,190,191',
'192,124,22,116,127,23,96,97,99,128,113,114,115,100,101,167,168,117,118',
'119,13,22,87,322,23,61,323,121,107,74,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,125,167,168,58,110,182,183,184,185',
'186,187,136,120,61,126,182,183,184,185,186,187,146,188,189,190,191,192',
'124,151,116,127,154,96,97,99,128,113,114,115,100,101,167,168,117,118',
'119,13,169,87,184,185,186,187,121,107,179,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,125,167,168,208,110,182,183,184',
'185,186,187,61,120,219,126,184,185,186,187,306,307,136,188,189,190,191',
'192,124,178,116,127,171,96,97,99,128,113,114,115,100,101,232,233,117',
'118,119,13,177,87,234,235,167,168,121,107,225,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,125,167,168,229,110,182,183,184',
'185,186,187,240,120,242,126,167,168,306,307,245,246,270,188,189,190',
'191,192,124,186,116,127,61,96,97,99,128,113,114,115,100,101,136,154',
'117,118,119,13,288,87,289,167,186,186,121,107,186,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,125,186,298,302,110,117',
'118,119,303,308,311,246,120,136,126,121,317,78,330,136,,,,,117,118,119',
'124,,116,127,,,,121,128,113,114,115,125,,,,158,117,118,119,,,,,120,',
'126,121,,,,125,,,,158,117,118,119,124,,116,127,120,,126,121,128,113',
'114,115,125,,,,158,,,124,,116,127,,120,,126,128,113,114,115,165,,,,158',
'117,118,119,124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119',
',,116,127,,,,121,128,113,114,115,125,,,,158,117,118,119,,,,,120,,126',
'121,,,,125,,,,158,117,118,119,124,,116,127,120,,126,121,128,113,114',
'115,125,,,,158,,,124,,116,127,,120,,126,128,113,114,115,165,,,,158,117',
'118,119,124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119,,',
'116,127,,,,121,128,113,114,115,165,,,,158,117,118,119,,,,,120,,126,121',
',,,165,,,,158,117,118,119,,,116,127,120,,126,121,128,113,114,115,125',
',,,158,,,,,116,127,,120,,126,128,113,114,115,165,,,,158,117,118,119',
'124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119,,,116,127',
',,,121,128,113,114,115,125,,,,158,117,118,119,,,,,120,,126,121,,,,125',
',,,158,117,118,119,124,,116,127,120,,126,121,128,113,114,115,125,,,',
'158,,,124,,116,127,,120,,126,128,113,114,115,125,,,,158,117,118,119',
'124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119,124,,116,127',
',,,121,128,113,114,115,125,,,,158,117,118,119,,,,,120,,126,121,,,,125',
',,,158,117,118,119,124,,116,127,120,,126,121,128,113,114,115,125,,,',
'158,,,124,,116,127,,120,,126,128,113,114,115,125,,,,158,117,118,119',
'124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119,124,,116,127',
',,,121,128,113,114,115,165,,,,158,117,118,119,,,,,120,,126,121,,,,165',
',,,158,117,118,119,,,116,127,120,,126,121,128,113,114,115,165,,,,158',
',,,,116,127,,120,,126,128,113,114,115,165,,,,158,117,118,119,,,116,127',
'120,,126,121,128,113,114,115,,,,,117,118,119,,,116,127,,,,121,128,113',
'114,115,165,,,,158,117,118,119,,,,,120,,126,121,,,,165,,,,158,117,118',
'119,,,116,127,120,,126,121,128,113,114,115,165,,,,158,,,,,116,127,,120',
',126,128,113,114,115,165,,,,158,117,118,119,,,116,127,120,,126,121,128',
'113,114,115,,,,,117,118,119,,,116,127,,,,121,128,113,114,115,165,,,',
'158,117,118,119,,,,,120,,126,121,,,,165,,,,158,117,118,119,,,116,127',
'120,,126,121,128,113,114,115,165,,,,158,,,,,116,127,,120,,126,128,113',
'114,115,165,,,,158,117,118,119,,,116,127,120,,126,121,128,113,114,115',
',,,,117,118,119,,,116,127,,,,121,128,113,114,115,165,,,,158,117,118',
'119,,,,,120,,126,121,,,,165,,,,158,117,118,119,,,116,127,120,,126,121',
'128,113,114,115,165,,,,158,,,,,116,127,,120,,126,128,113,114,115,165',
',,,158,117,118,119,,,116,127,120,,126,121,128,113,114,115,,,,,117,118',
'119,,,116,127,,,,121,128,113,114,115,165,,,,158,117,118,119,,,,,120',
',126,121,,,,125,,,,158,117,118,119,,,116,127,120,,126,121,128,113,114',
'115,125,,295,,158,,,124,,116,127,,120,,126,128,113,114,115,125,,,,158',
'117,118,119,124,,116,127,120,,126,121,128,113,114,115,,,,,117,118,119',
'124,,116,127,,,,121,128,113,114,115,125,,,,158,117,118,119,,,,,120,',
'126,121,,,,165,,,,158,117,118,119,124,,116,127,120,,126,121,128,113',
'114,115,165,,,,158,,16,214,,116,127,,120,,126,128,113,114,115,125,,',
'13,158,16,300,11,17,,116,127,120,,126,,128,113,114,115,,13,,,,11,17',
'124,,116,127,,,,,128,113,114,115,22,144,,23,182,183,184,185,186,187',
',,,,,,,,22,,,23,189,190,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,216,,,,,22,,,23,,,,,,,13,,87,,,,,,,,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,269,,,,,22,,,23,',
',,182,183,184,185,186,187,,193,195,196,197,198,,,,,,188,189,190,191',
'192,269,,,,,,194,,,,,,182,183,184,185,186,187,,,,,,,13,,87,,,188,189',
'190,191,192,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,283,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,182,183,184,185,186,187,,193,195,196,197,198,,,,,,188,189',
'190,191,192,,,,,,,194,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,,-46,,,,,-46,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,,,,,134,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,,,,,134,182,183,184,185,186,187,,,232,233,234',
'235,,,,,,188,189,190,191,192,182,183,184,185,186,187,182,183,184,185',
'186,187,,,,,,188,189,190,191,192,,188,189,190,191,192,182,183,184,185',
'186,187,182,183,184,185,186,187,,,,,,188,189,190,191,192,,188,189,190',
'191,192,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,182,183,184,185',
'186,187,182,183,184,185,186,187,,,,,,188,189,190,,,,188,189,190' ]
        racc_action_table = arr = ::Array.new(2200, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'73,73,73,162,166,318,65,73,73,25,87,73,73,73,73,87,73,65,131,106,106',
'73,73,131,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,301,112,162,73,318,63,25,213,110,248,110,73,213,73,248,301,202',
'1,166,166,112,63,162,162,318,318,73,110,73,73,20,153,153,153,73,73,73',
'73,153,153,202,202,153,153,153,153,20,153,11,20,20,20,153,153,12,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,153,242,249,108,153,153,20,91,153,20,242,91,153,275,153',
'2,5,275,2,5,70,108,91,70,249,249,242,153,275,153,153,24,209,209,209',
'153,153,153,153,209,209,155,155,209,209,209,209,24,209,161,161,24,24',
'209,209,13,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,0,140,66,209,221,24,324,79,24,16,79,209',
'140,209,18,221,0,324,66,0,0,0,66,66,81,26,209,81,209,209,138,226,226',
'226,209,209,209,209,226,226,224,224,226,226,226,226,138,226,241,241',
'138,138,226,226,27,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,158,28,158,226,263,263,263,263,263',
'263,29,226,56,226,259,259,259,259,259,259,58,263,263,263,263,263,226',
'93,226,226,93,229,229,229,226,226,226,226,229,229,247,247,229,229,229',
'229,215,229,312,215,59,312,229,229,62,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,250,250,67,229',
'264,264,264,264,264,264,77,229,80,229,260,260,260,260,260,260,89,264',
'264,264,264,264,229,92,229,229,94,237,237,237,229,229,229,229,237,237',
'251,251,237,237,237,237,107,237,252,252,252,252,237,237,111,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,285,285,133,237,265,265,265,265,265,265,135,237,141,237',
'253,253,253,253,286,286,148,265,265,265,265,265,237,149,237,237,156',
'307,307,307,237,237,237,237,307,307,288,288,307,307,307,307,159,307',
'289,289,294,294,307,307,160,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,313,313,163,307,266',
'266,266,266,266,266,169,307,171,307,326,326,329,329,172,173,201,266',
'266,266,266,266,307,203,307,307,206,325,325,325,307,307,307,307,325',
'325,218,223,325,325,325,325,230,325,231,239,254,255,325,325,256,325',
'325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,257,274,283,325,96,96,96,284,287,290,292,325,303,325',
'96,304,315,327,330,,,,,97,97,97,325,,325,325,,,,97,325,325,325,325,96',
',,,96,99,99,99,,,,,96,,96,99,,,,97,,,,97,100,100,100,96,,96,96,97,,97',
'100,96,96,96,96,99,,,,99,,,97,,97,97,,99,,99,97,97,97,97,100,,,,100',
'101,101,101,99,,99,99,100,,100,101,99,99,99,99,,,,,124,124,124,,,100',
'100,,,,124,100,100,100,100,101,,,,101,125,125,125,,,,,101,,101,125,',
',,124,,,,124,126,126,126,101,,101,101,124,,124,126,101,101,101,101,125',
',,,125,,,124,,124,124,,125,,125,124,124,124,124,126,,,,126,127,127,127',
'125,,125,125,126,,126,127,125,125,125,125,,,,,128,128,128,,,126,126',
',,,128,126,126,126,126,127,,,,127,154,154,154,,,,,127,,127,154,,,,128',
',,,128,165,165,165,,,127,127,128,,128,165,127,127,127,127,154,,,,154',
',,,,128,128,,154,,154,128,128,128,128,165,,,,165,167,167,167,154,,154',
'154,165,,165,167,154,154,154,154,,,,,168,168,168,,,165,165,,,,168,165',
'165,165,165,167,,,,167,170,170,170,,,,,167,,167,170,,,,168,,,,168,175',
'175,175,167,,167,167,168,,168,175,167,167,167,167,170,,,,170,,,168,',
'168,168,,170,,170,168,168,168,168,175,,,,175,177,177,177,170,,170,170',
'175,,175,177,170,170,170,170,,,,,178,178,178,175,,175,175,,,,178,175',
'175,175,175,177,,,,177,179,179,179,,,,,177,,177,179,,,,178,,,,178,180',
'180,180,177,,177,177,178,,178,180,177,177,177,177,179,,,,179,,,178,',
'178,178,,179,,179,178,178,178,178,180,,,,180,182,182,182,179,,179,179',
'180,,180,182,179,179,179,179,,,,,183,183,183,180,,180,180,,,,183,180',
'180,180,180,182,,,,182,184,184,184,,,,,182,,182,184,,,,183,,,,183,185',
'185,185,,,182,182,183,,183,185,182,182,182,182,184,,,,184,,,,,183,183',
',184,,184,183,183,183,183,185,,,,185,186,186,186,,,184,184,185,,185',
'186,184,184,184,184,,,,,187,187,187,,,185,185,,,,187,185,185,185,185',
'186,,,,186,188,188,188,,,,,186,,186,188,,,,187,,,,187,189,189,189,,',
'186,186,187,,187,189,186,186,186,186,188,,,,188,,,,,187,187,,188,,188',
'187,187,187,187,189,,,,189,190,190,190,,,188,188,189,,189,190,188,188',
'188,188,,,,,191,191,191,,,189,189,,,,191,189,189,189,189,190,,,,190',
'192,192,192,,,,,190,,190,192,,,,191,,,,191,193,193,193,,,190,190,191',
',191,193,190,190,190,190,192,,,,192,,,,,191,191,,192,,192,191,191,191',
'191,193,,,,193,194,194,194,,,192,192,193,,193,194,192,192,192,192,,',
',,195,195,195,,,193,193,,,,195,193,193,193,193,194,,,,194,196,196,196',
',,,,194,,194,196,,,,195,,,,195,197,197,197,,,194,194,195,,195,197,194',
'194,194,194,196,,,,196,,,,,195,195,,196,,196,195,195,195,195,197,,,',
'197,198,198,198,,,196,196,197,,197,198,196,196,196,196,,,,,225,225,225',
',,197,197,,,,225,197,197,197,197,198,,,,198,246,246,246,,,,,198,,198',
'246,,,,225,,,,225,295,295,295,,,198,198,225,,225,295,198,198,198,198',
'246,,246,,246,,,225,,225,225,,246,,246,225,225,225,225,295,,,,295,306',
'306,306,246,,246,246,295,,295,306,246,246,246,246,,,,,309,309,309,295',
',295,295,,,,309,295,295,295,295,306,,,,306,310,310,310,,,,,306,,306',
'310,,,,309,,,,309,323,323,323,306,,306,306,309,,309,323,306,306,306',
'306,310,,,,310,,137,137,,309,309,,310,,310,309,309,309,309,323,,,137',
'323,279,279,137,137,,310,310,323,,323,,310,310,310,310,,279,,,,279,279',
'323,,323,323,,,,,323,323,323,323,137,88,,137,258,258,258,258,258,258',
',,,,,,,,279,,,279,258,258,,,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,139,,,,,88,,,88,,,,,,,139,,139,,,,,,,,139,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,200,,,,,139,,,139,,,,200,200,200,200,200,200,,200,200,200,200,200',
',,,,,200,200,200,200,200,236,,,,,,200,,,,,,236,236,236,236,236,236,',
',,,,,69,,69,,,236,236,236,236,236,69,69,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,219,,,,,,,,,,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,122,122,122',
'122,122,122,,122,122,122,122,122,,,,,,122,122,122,122,122,,,,,,,122',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,,136,,,,,136,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,,,,,74,207,207,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,,,,,207,164,164,164,164',
'164,164,,,164,164,164,164,,,,,,164,164,164,164,164,267,267,267,267,267',
'267,268,268,268,268,268,268,,,,,,267,267,267,267,267,,268,268,268,268',
'268,320,320,320,320,320,320,321,321,321,321,321,321,,,,,,320,320,320',
'320,320,,321,321,321,321,321,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57',
'57,57,57,57,57,57,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,261,261,261,261,261,261,262,262,262,262',
'262,262,,,,,,261,261,261,,,,262,262,262' ]
        racc_action_check = arr = ::Array.new(2200, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   198,    63,    83,   nil,   nil,    84,   nil,   nil,   nil,   nil,
   nil,    41,    22,   124,   nil,   nil,   185,  2062,   214,   nil,
    74,   nil,   nil,   nil,   151,   -18,   211,   200,   225,   228,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   235,  2083,   244,   273,
  2104,   nil,   282,    -9,   nil,   -47,   200,   286,   nil,  1823,
    88,   nil,   nil,    -4,  1932,   nil,   nil,   315,   nil,   153,
   312,   170,   nil,   nil,   nil,   nil,   nil,   -38,  1688,   319,
   nil,    80,   378,   250,   378,   nil,   574,   593,   nil,   613,
   632,   671,   nil,   nil,   nil,   nil,   -55,   382,    66,   nil,
     5,   340,    -2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1841,   nil,   690,   710,   729,   768,   787,   nil,
   nil,   -32,   nil,   380,   nil,   387,  1904,  1636,   228,  1734,
   148,   375,   nil,   nil,   nil,   nil,   nil,   nil,   402,   407,
   nil,   nil,   nil,    73,   807,    89,   402,   nil,   228,   428,
   430,    97,    -6,   496,  1950,   826,   -10,   865,   884,   465,
   904,   467,   471,   459,   nil,   923,   nil,   962,   981,  1001,
  1020,   nil,  1059,  1078,  1098,  1117,  1156,  1175,  1195,  1214,
  1253,  1272,  1292,  1311,  1350,  1369,  1389,  1408,  1447,   nil,
  1733,   478,    12,   469,   nil,   nil,   484,  1958,   nil,   150,
   nil,   nil,   nil,     3,   nil,   269,   nil,   nil,   499,  1854,
   nil,   151,   nil,   543,   166,  1466,   227,   nil,   nil,   304,
   501,   503,   nil,   nil,   nil,   nil,  1767,   381,   nil,   483,
   nil,   174,    72,   nil,   nil,   nil,  1486,   243,     5,    72,
   280,   320,   338,   381,   492,   493,   496,   519,  1632,   229,
   306,  2112,  2118,   219,   296,   373,   450,  1972,  1978,   nil,
   nil,   nil,   nil,   nil,   583,    86,   nil,  2125,   nil,  1654,
   nil,   nil,   nil,   534,   542,   357,   442,   590,   401,   407,
   591,   nil,   527,   nil,   407,  1505,   nil,   nil,   nil,   nil,
   nil,    -3,   nil,   548,   597,   nil,  1544,   458,   nil,  1563,
  1583,   nil,   273,   434,   nil,   537,   nil,   nil,    -4,   nil,
  2000,  2006,   nil,  1602,   153,   535,   448,   552,   nil,   517,
   554,   nil,   nil ]

racc_action_default = [
    -6,  -192,  -185,    -2,    -4,  -192,    -7,    -9,   -10,   -11,
   -12,  -192,  -192,  -192,   -39,   -40,   -51,  -192,  -192,    -1,
  -186,  -187,  -189,  -190,    -5,   -15,  -192,  -192,  -192,  -192,
   -96,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,
  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,   333,    -3,  -188,    -8,  -192,  -192,  -192,  -192,
   -25,  -191,  -116,  -115,   -52,  -192,    -6,   -15,   -16,  -192,
  -192,   -26,   -96,   -54,  -192,  -113,  -114,   -49,   -97,  -192,
  -192,  -192,   -18,   -20,   -21,   -22,   -96,  -192,  -192,   -28,
   -30,  -192,  -192,  -185,   -55,   -57,  -192,  -160,   -60,  -192,
  -192,  -192,   -65,   -66,   -67,   -68,   -69,  -192,  -143,   -96,
  -158,  -151,  -158,  -104,  -105,  -106,  -107,  -108,  -109,  -110,
  -111,  -112,  -122,  -123,  -192,  -192,  -192,  -192,  -192,  -152,
  -154,  -192,  -118,  -192,  -121,  -192,   -96,  -192,    -6,  -192,
  -192,  -192,   -32,   -33,   -24,   -27,   -96,   -96,   -49,   -91,
   -92,   -41,   -53,  -186,  -192,   -58,  -143,  -151,  -158,  -158,
   -59,  -161,  -192,  -192,  -192,  -192,  -192,  -192,  -192,  -192,
  -192,  -192,   -84,   -87,   -88,  -192,  -153,  -160,  -192,  -192,
  -192,  -155,  -192,  -192,  -192,  -192,  -192,  -192,  -192,  -192,
  -192,  -192,  -192,  -192,  -192,  -192,  -192,  -192,  -192,  -126,
  -122,  -123,  -192,  -139,  -140,  -141,  -192,  -192,  -120,   -54,
   -96,   -45,   -47,  -192,   -13,  -192,   -17,   -19,   -49,  -192,
   -29,  -192,   -90,   -56,   -62,  -192,   -54,   -78,   -79,   -54,
  -192,  -192,   -74,   -75,   -76,   -77,  -192,   -54,  -124,  -125,
   -70,   -71,  -115,  -156,  -157,   -96,  -192,  -101,  -192,  -192,
  -102,  -103,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,
  -136,  -137,  -138,  -144,  -145,  -146,  -147,  -148,  -149,  -142,
  -150,  -127,  -117,  -119,  -192,   -43,   -44,   -96,   -50,  -192,
   -23,   -31,   -96,  -192,  -192,  -162,   -80,  -192,  -192,  -192,
  -192,   -85,   -86,   -93,   -94,   -98,  -159,  -163,   -42,   -48,
   -14,   -34,   -96,   -49,  -192,   -81,  -192,   -54,   -63,  -192,
  -192,   -64,  -192,   -99,   -96,   -35,   -89,   -61,  -192,   -83,
   -72,   -73,   -95,  -192,   -37,   -54,  -100,  -192,   -38,   -80,
   -49,   -82,   -36 ]

racc_goto_table = [
    65,    10,    30,    55,   135,    60,    90,    92,    54,   226,
   212,   108,    54,   111,   174,    62,    19,   112,   230,    20,
   160,    10,    24,   132,    82,    10,   304,   231,     3,    79,
   181,   150,    85,    71,    66,     1,    56,    69,     2,    81,
    70,    89,    67,   173,   141,    72,   281,   327,    53,    28,
    73,   213,   223,   163,    86,   172,   140,   284,   138,   133,
   293,   145,   312,   131,   201,   nil,   nil,    10,   nil,   331,
    84,   nil,   nil,    72,   nil,   222,    54,   181,    80,   nil,
   220,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,   nil,
   nil,   108,   nil,   111,   217,   nil,   137,   112,   139,   nil,
   248,   215,    85,   nil,   nil,   nil,   nil,   152,   nil,   nil,
   153,   244,   nil,   209,   nil,   nil,    55,   221,   nil,   nil,
   nil,   210,   nil,   nil,    86,    54,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,
    84,    54,   309,   274,   276,   280,   nil,   108,   nil,   111,
   291,   299,   310,   112,   155,   161,   273,   162,   243,   166,
   286,   150,   nil,   287,   108,   325,   111,   108,   nil,   111,
   112,   290,   nil,   112,   nil,   108,   nil,   111,   nil,   292,
   275,   112,   199,   202,   272,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   133,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   224,   nil,   nil,   150,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   238,   239,   nil,   241,   nil,
   316,   nil,   279,   247,   nil,   161,   249,   250,   251,   nil,
   nil,   319,   nil,   nil,   nil,   108,   nil,   111,   164,   nil,
   nil,   112,   301,   nil,   nil,   nil,   nil,   332,    55,   329,
   nil,   nil,   210,   108,   nil,   111,   nil,    54,   nil,   112,
   nil,   nil,   315,   200,   203,   204,   205,   nil,   nil,   nil,
    10,   nil,   nil,   285,   324,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   294,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   236,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,   267,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   313,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   318,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   320,   321 ]

racc_goto_check = [
    20,    12,    15,     8,    21,    14,    25,    34,    66,    43,
    35,    48,    66,    56,    54,    32,     3,    59,    50,     5,
    41,    12,     5,    62,    17,    12,    44,    51,     4,     7,
    64,    56,    19,    23,    14,     1,    13,    14,     2,    16,
    22,    24,    15,    25,    26,    15,    27,    28,     4,    31,
    33,    36,    38,    45,    15,    53,    20,    55,    14,    15,
    57,    23,    58,    61,    63,   nil,   nil,    12,   nil,    44,
    12,   nil,   nil,    15,   nil,    21,    66,    64,    13,   nil,
    25,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,    48,   nil,    56,    17,   nil,     5,    59,     5,   nil,
    41,     7,    19,   nil,   nil,   nil,   nil,     3,   nil,   nil,
     5,    56,   nil,    14,   nil,   nil,     8,    20,   nil,   nil,
   nil,    15,   nil,   nil,    15,    66,   nil,    66,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,    12,
    12,    66,    50,    34,    25,    21,   nil,    48,   nil,    56,
    54,    35,    51,    59,    40,    40,    62,    40,    32,    40,
    34,    56,   nil,    34,    48,    43,    56,    48,   nil,    56,
    59,    34,   nil,    59,   nil,    48,   nil,    56,   nil,    25,
    20,    59,    40,    40,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,    40,   nil,    40,   nil,
    21,   nil,     5,    40,   nil,    40,    40,    40,    40,   nil,
   nil,    34,   nil,   nil,   nil,    48,   nil,    56,    49,   nil,
   nil,    59,    20,   nil,   nil,   nil,   nil,    21,     8,    34,
   nil,   nil,    15,    48,   nil,    56,   nil,    66,   nil,    59,
   nil,   nil,    20,    49,    49,    49,    49,   nil,   nil,   nil,
    12,   nil,   nil,    40,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,    49 ]

racc_goto_pointer = [
   nil,    35,    38,    14,    28,    17,   nil,   -37,   -21,   nil,
   nil,   nil,     1,    11,   -22,   -15,   -30,   -45,   nil,   -37,
   -30,   -73,   -20,   -27,   -31,   -66,   -43,  -173,  -277,   nil,
   nil,    33,   -13,   -12,   -66,  -126,   -85,   nil,  -101,   nil,
    58,   -77,   nil,  -153,  -260,   -47,   nil,   nil,   -62,   148,
  -146,  -137,   nil,   -54,   -95,  -164,   -60,  -186,  -233,   -56,
   nil,   -11,   -51,   -61,   -82,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   103,   nil,   228,   109,   nil,   nil,    83,   105,
    91,   nil,   nil,   nil,   nil,   211,   nil,   nil,   nil,    14,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    93,    94,    95,
   106,   nil,    98,   nil,   nil,   nil,   102,   104,   156,   122,
   nil,   nil,   305,   nil,   nil,   148,   157,   nil,   nil,   159,
   129,   nil,   nil,   123,   176,   130,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 92, :_reduce_1,
  1, 93, :_reduce_2,
  3, 93, :_reduce_3,
  1, 95, :_reduce_4,
  2, 95, :_reduce_5,
  0, 98, :_reduce_6,
  1, 98, :_reduce_7,
  3, 98, :_reduce_8,
  1, 99, :_reduce_9,
  1, 99, :_reduce_10,
  1, 99, :_reduce_11,
  1, 99, :_reduce_12,
  7, 101, :_reduce_13,
  9, 102, :_reduce_14,
  0, 104, :_reduce_15,
  2, 104, :_reduce_16,
  7, 97, :_reduce_17,
  1, 107, :_reduce_18,
  3, 107, :_reduce_19,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  4, 109, :_reduce_23,
  6, 103, :_reduce_24,
  0, 113, :_reduce_25,
  1, 113, :_reduce_26,
  3, 113, :_reduce_27,
  2, 114, :_reduce_28,
  3, 115, :_reduce_29,
  1, 115, :_reduce_30,
  4, 110, :_reduce_31,
  1, 117, :_reduce_none,
  1, 117, :_reduce_33,
  2, 118, :_reduce_34,
  3, 118, :_reduce_35,
  7, 118, :_reduce_36,
  0, 119, :_reduce_37,
  1, 119, :_reduce_38,
  1, 100, :_reduce_39,
  1, 100, :_reduce_40,
  6, 120, :_reduce_41,
  8, 121, :_reduce_42,
  2, 126, :_reduce_43,
  2, 126, :_reduce_44,
  1, 126, :_reduce_45,
  0, 127, :_reduce_46,
  1, 127, :_reduce_47,
  3, 127, :_reduce_48,
  0, 112, :_reduce_49,
  3, 112, :_reduce_50,
  0, 122, :_reduce_51,
  2, 122, :_reduce_52,
  2, 125, :_reduce_53,
  0, 128, :_reduce_54,
  1, 128, :_reduce_55,
  3, 128, :_reduce_56,
  1, 129, :_reduce_57,
  2, 129, :_reduce_58,
  2, 129, :_reduce_59,
  1, 129, :_reduce_60,
  6, 129, :_reduce_61,
  3, 129, :_reduce_62,
  5, 129, :_reduce_63,
  5, 129, :_reduce_64,
  1, 129, :_reduce_65,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_69,
  3, 138, :_reduce_70,
  3, 137, :_reduce_71,
  5, 136, :_reduce_72,
  5, 136, :_reduce_73,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  0, 135, :_reduce_80,
  1, 135, :_reduce_81,
  5, 135, :_reduce_82,
  2, 143, :_reduce_83,
  2, 130, :_reduce_84,
  3, 144, :_reduce_85,
  3, 144, :_reduce_86,
  1, 144, :_reduce_87,
  1, 144, :_reduce_88,
  6, 116, :_reduce_89,
  3, 116, :_reduce_90,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 145, :_reduce_93,
  1, 148, :_reduce_none,
  3, 148, :_reduce_95,
  0, 111, :_reduce_96,
  2, 111, :_reduce_97,
  0, 149, :_reduce_98,
  1, 149, :_reduce_99,
  3, 149, :_reduce_100,
  3, 133, :_reduce_101,
  3, 133, :_reduce_102,
  3, 133, :_reduce_103,
  1, 151, :_reduce_104,
  1, 151, :_reduce_105,
  1, 151, :_reduce_106,
  1, 151, :_reduce_107,
  1, 151, :_reduce_108,
  1, 151, :_reduce_109,
  1, 151, :_reduce_110,
  1, 151, :_reduce_111,
  1, 151, :_reduce_112,
  2, 123, :_reduce_113,
  2, 123, :_reduce_114,
  1, 123, :_reduce_115,
  0, 124, :_reduce_116,
  4, 124, :_reduce_117,
  1, 152, :_reduce_118,
  3, 152, :_reduce_119,
  2, 153, :_reduce_120,
  1, 153, :_reduce_121,
  1, 131, :_reduce_122,
  1, 131, :_reduce_123,
  3, 131, :_reduce_124,
  3, 131, :_reduce_125,
  2, 131, :_reduce_126,
  3, 131, :_reduce_127,
  3, 140, :_reduce_128,
  3, 140, :_reduce_129,
  3, 140, :_reduce_130,
  3, 140, :_reduce_131,
  3, 140, :_reduce_132,
  3, 140, :_reduce_133,
  3, 140, :_reduce_134,
  3, 140, :_reduce_135,
  3, 140, :_reduce_136,
  3, 140, :_reduce_137,
  3, 140, :_reduce_138,
  2, 140, :_reduce_139,
  2, 140, :_reduce_140,
  2, 140, :_reduce_141,
  3, 140, :_reduce_142,
  1, 140, :_reduce_143,
  3, 154, :_reduce_144,
  3, 154, :_reduce_145,
  3, 154, :_reduce_146,
  3, 154, :_reduce_147,
  3, 154, :_reduce_148,
  3, 154, :_reduce_149,
  3, 154, :_reduce_150,
  1, 139, :_reduce_151,
  1, 139, :_reduce_152,
  2, 139, :_reduce_153,
  1, 139, :_reduce_none,
  2, 156, :_reduce_155,
  3, 150, :_reduce_156,
  3, 150, :_reduce_157,
  0, 155, :_reduce_158,
  3, 155, :_reduce_159,
  0, 132, :_reduce_160,
  1, 132, :_reduce_161,
  3, 132, :_reduce_162,
  4, 147, :_reduce_163,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_184,
  0, 94, :_reduce_185,
  1, 94, :_reduce_186,
  1, 96, :_reduce_187,
  2, 96, :_reduce_188,
  1, 157, :_reduce_189,
  1, 157, :_reduce_none,
  1, 105, :_reduce_191 ]

racc_reduce_n = 192

racc_shift_n = 333

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :tCUSTOM_DTYPE => 48,
  :tLPAREN => 49,
  :tRPAREN => 50,
  :tLSQUARE => 51,
  :tRSQUARE => 52,
  :tIDENTIFIER => 53,
  :tNL => 54,
  :tCOMMA => 55,
  :tSQUOTE => 56,
  :tSCOLON => 57,
  :EOF => 58,
  :tDOT => 59,
  :tQMARK => 60,
  :tSYMBOL => 61,
  :tPLUS => 62,
  :tMINUS => 63,
  :tSTAR => 64,
  :tDIVIDE => 65,
  :tEXPO => 66,
  :tMODULUS => 67,
  :tASSIGN => 68,
  :tEQ => 69,
  :tLT => 70,
  :tLTEQ => 71,
  :tGT => 72,
  :tGTEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tBANG => 76,
  :tOP_ASSIGN => 77,
  :tSTRING => 78,
  :tBIT_AND => 79,
  :tBIT_OR => 80,
  :tBIT_XOR => 81,
  :tBIT_LSHIFT => 82,
  :tBIT_RSHIFT => 83,
  :tBIT_NOT => 84,
  :tINTEGER => 85,
  :tFLOAT => 86,
  :tSINGLE_CHAR => 87,
  :ADDRESS_OF => 88,
  :UMINUS => 89,
  :tNEQ => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new val[1], val[3], val[4], val[6]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_23(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_26(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_29(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_31(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_33(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_34(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_35(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_36(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_37(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_41(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_42(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_43(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_44(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_45(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_46(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_47(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_48(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_50(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_51(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_52(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_53(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_55(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_56(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_57(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_58(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_59(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_60(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_61(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_62(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_63(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_64(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_69(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_70(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_71(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_72(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_80(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_82(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_83(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_85(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_87(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_89(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_90(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_93(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_95(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_96(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_97(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_99(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_100(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_101(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_103(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_113(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_116(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_118(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 435)
  def _reduce_119(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_120(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_122(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_126(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_127(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 480)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_139(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_140(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_141(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_153(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_155(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_156(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_157(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_161(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_162(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_163(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_184(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_188(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_189(val, _values, result)
    
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_191(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
