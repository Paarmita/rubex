#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 435)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,    46,    48,   169,   179,   169,   188,    49,    50,    13,
   108,    65,    66,    67,    52,   107,    40,   185,    20,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    71,
   135,    12,    37,    58,    37,   156,   233,    12,   133,    17,
   157,   167,    18,    70,   234,    21,   134,   131,   126,   127,
    10,     9,   126,   127,   126,   127,    72,     9,    64,    61,
    62,    63,    45,    46,    48,   137,   126,   127,   271,    49,
    50,   126,   127,    65,    66,    67,    52,    17,    40,   185,
    18,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    71,   135,    12,    17,    58,    17,    18,    34,    18,
   134,    34,   135,    17,   254,    70,    18,    23,    12,   255,
   133,    24,    17,     9,    35,    18,    29,    35,    72,   131,
    64,    61,    62,    63,    45,    46,    48,    10,     9,    30,
    17,    49,    50,    18,    33,    65,    66,    67,    52,    17,
    40,    37,    18,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    71,    38,    12,   216,    58,   126,   127,
   139,   140,   141,   142,   143,   144,    37,    70,   174,   175,
   176,   177,   109,    17,   274,     9,    18,   275,   112,   134,
    72,   135,    64,    61,    62,    63,    45,    46,    48,   133,
   126,   127,   125,    49,    50,   126,   127,    65,    66,    67,
    52,    17,    40,   128,    18,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    71,   126,   127,   212,    58,
   139,   140,   141,   142,   143,   144,   126,   127,   130,    70,
   139,   140,   141,   142,   143,   144,   136,   145,   147,   148,
   149,   150,    72,   158,    64,    61,    62,    63,    45,    46,
    48,   146,   126,   127,   161,    49,    50,   126,   127,    65,
    66,    67,    52,   162,    40,   126,   127,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    71,   244,   245,
   130,    58,   139,   140,   141,   142,   143,   144,   174,   175,
   164,    70,   139,   140,   141,   142,   143,   144,   134,   145,
   147,   148,   149,   150,    72,   167,    64,    61,    62,    63,
    45,    46,    48,   146,   176,   177,   171,    49,    50,   126,
   127,    65,    66,    67,    52,   180,    40,   244,   245,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    71,
   126,   127,   193,    58,   139,   140,   141,   142,   143,   144,
   143,   213,    37,    70,   139,   140,   141,   142,   143,   144,
   219,   145,   147,   148,   149,   150,    72,   220,    64,    61,
    62,    63,    45,    46,    48,   146,   185,   112,   227,    49,
    50,   228,    37,    65,    66,    67,    52,   126,    40,   231,
   232,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    71,   137,   143,   143,    58,    65,    66,    67,   212,
   143,   143,    65,    66,    67,    70,   241,   246,    65,    66,
    67,   139,   140,   141,   142,   143,   144,   249,    72,   188,
    64,    61,    62,    63,    71,   256,   130,   259,   116,   264,
    71,   276,   135,   271,   116,   nil,    71,   nil,    70,   nil,
   116,    65,    66,    67,    70,   nil,   nil,    65,    66,    67,
    70,    72,   nil,    64,    61,    62,    63,    72,   nil,    64,
    61,    62,    63,    72,   nil,    64,    61,    62,    63,   123,
   nil,   nil,   nil,   116,   nil,    71,   nil,   nil,   nil,   116,
    65,    66,    67,    70,   nil,   nil,    65,    66,    67,    70,
   nil,   nil,    65,    66,    67,   nil,   nil,   nil,    64,    61,
    62,    63,    72,   nil,    64,    61,    62,    63,   123,   nil,
   nil,   nil,   116,   nil,    71,   nil,   nil,   nil,   116,   nil,
    71,   nil,    70,   nil,   116,    65,    66,    67,    70,   nil,
    65,    66,    67,   nil,    70,   nil,   nil,    64,    61,    62,
    63,    72,   nil,    64,    61,    62,    63,    72,   nil,    64,
    61,    62,    63,    71,   nil,   nil,   nil,   116,   123,   nil,
   nil,   nil,   116,    65,    66,    67,   nil,    70,   nil,    65,
    66,    67,    70,   nil,   nil,    65,    66,    67,   nil,   nil,
    72,   nil,    64,    61,    62,    63,   nil,    64,    61,    62,
    63,    71,   nil,   nil,   nil,   116,   nil,    71,   nil,   nil,
   nil,   116,   nil,    71,   nil,    70,   nil,   116,    65,    66,
    67,    70,   nil,   nil,    65,    66,    67,    70,    72,   nil,
    64,    61,    62,    63,    72,   nil,    64,    61,    62,    63,
    72,   nil,    64,    61,    62,    63,    71,   nil,   nil,   nil,
   116,   nil,    71,   nil,   nil,   nil,   116,    65,    66,    67,
    70,   nil,   nil,    65,    66,    67,    70,   nil,   nil,    65,
    66,    67,   nil,    72,   nil,    64,    61,    62,    63,    72,
   nil,    64,    61,    62,    63,    71,   nil,   nil,   nil,   116,
   nil,    71,   nil,   nil,   nil,   116,   nil,    71,   nil,    70,
   nil,   116,    65,    66,    67,    70,   nil,    65,    66,    67,
   nil,    70,    72,   nil,    64,    61,    62,    63,    72,   nil,
    64,    61,    62,    63,    72,   nil,    64,    61,    62,    63,
   123,   nil,   nil,   nil,   116,   123,   nil,   nil,   nil,   116,
    65,    66,    67,   nil,    70,    65,    66,    67,   nil,    70,
   nil,    65,    66,    67,   141,   142,   143,   144,   nil,    64,
    61,    62,    63,   nil,    64,    61,    62,    63,   123,   nil,
   nil,   nil,   116,   123,   nil,   nil,   nil,   116,   nil,   123,
   nil,   nil,    70,   116,    65,    66,    67,    70,   nil,    65,
    66,    67,   nil,    70,   nil,   nil,   nil,    64,    61,    62,
    63,   nil,    64,    61,    62,    63,   nil,   nil,    64,    61,
    62,    63,   123,   nil,   nil,   nil,   116,   123,   nil,   nil,
   nil,   116,    65,    66,    67,   nil,    70,    65,    66,    67,
   nil,    70,   nil,    65,    66,    67,   141,   142,   143,   144,
   nil,    64,    61,    62,    63,   nil,    64,    61,    62,    63,
   123,   nil,   nil,   nil,   116,   123,   nil,   nil,   nil,   116,
   nil,   123,   nil,   nil,    70,   116,    65,    66,    67,    70,
   nil,    65,    66,    67,   nil,    70,   nil,   nil,   nil,    64,
    61,    62,    63,   nil,    64,    61,    62,    63,   nil,   nil,
    64,    61,    62,    63,   123,   nil,   nil,   nil,   116,   123,
   nil,   nil,   nil,   116,    65,    66,    67,   nil,    70,   nil,
    65,    66,    67,    70,   nil,   nil,    65,    66,    67,   nil,
   nil,   nil,   nil,    64,    61,    62,    63,   nil,    64,    61,
    62,    63,    71,   nil,   nil,   nil,   116,   nil,    71,   nil,
   253,   nil,   116,   nil,    71,   nil,    70,   nil,   116,    65,
    66,    67,    70,   nil,    65,    66,    67,   nil,    70,    72,
   nil,    64,    61,    62,    63,    72,   nil,    64,    61,    62,
    63,    72,   nil,    64,    61,    62,    63,   123,   nil,   nil,
   nil,   116,   123,   nil,   nil,   nil,   116,    65,    66,    67,
   nil,    70,   nil,    65,    66,    67,    70,   139,   140,   141,
   142,   143,   144,   nil,   nil,   nil,    64,    61,    62,    63,
   nil,    64,    61,    62,    63,    71,   nil,   nil,   nil,   116,
   nil,    71,   nil,   nil,   nil,   116,   nil,   nil,   nil,    70,
   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,   217,
   nil,   nil,    72,   nil,    64,    61,    62,    63,    72,   nil,
    64,    61,    62,    63,   103,   nil,    40,   nil,   nil,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,   nil,
   nil,   nil,   nil,   nil,    17,   nil,   nil,    18,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   nil,    18,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,   103,   nil,    40,
   nil,    98,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,   223,   nil,   nil,   nil,    98,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,   139,   140,   141,
   142,   143,   144,   139,   140,   141,   142,   143,   144,   139,
   140,   141,   142,   143,   144,   139,   140,   141,   142,   143,
   144 ]

racc_action_check = [
    31,    31,    31,   120,   124,   260,   129,    31,    31,     1,
    40,    31,    31,    31,    31,    40,    31,   129,     9,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
   188,    15,   120,    31,   260,    95,   196,    36,   188,     2,
    95,   196,     2,    31,   197,    10,    60,   188,   124,   124,
    15,    15,   120,   120,   260,   260,    31,    36,    31,    31,
    31,    31,   111,   111,   111,    60,   197,   197,   258,   111,
   111,    55,    55,   111,   111,   111,   111,    15,   111,   258,
    15,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   193,    19,     5,   111,   111,     5,    23,   111,
    58,   193,    58,    42,   235,   111,    42,    12,     0,   235,
    58,    13,    99,    19,    23,    99,    20,   193,   111,    58,
   111,   111,   111,   111,   168,   168,   168,     0,     0,    21,
   100,   168,   168,   100,    22,   168,   168,   168,   168,    19,
   168,    28,    19,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,    29,   159,   159,   168,   113,   113,
   122,   122,   122,   122,   122,   122,    30,   168,   122,   122,
   122,   122,    41,   238,   265,   159,   238,   265,    43,   116,
   168,   116,   168,   168,   168,   168,   171,   171,   171,   116,
   119,   119,    52,   171,   171,   166,   166,   171,   171,   171,
   171,   159,   171,    56,   159,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   183,   183,   152,   171,
   206,   206,   206,   206,   206,   206,   192,   192,    57,   171,
   152,   152,   152,   152,   152,   152,    59,   152,   152,   152,
   152,   152,   171,    97,   171,   171,   171,   171,   179,   179,
   179,   152,   198,   198,   102,   179,   179,   199,   199,   179,
   179,   179,   179,   103,   179,   224,   224,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   225,   225,
   105,   179,   207,   207,   207,   207,   207,   207,   227,   227,
   106,   179,    68,    68,    68,    68,    68,    68,   117,    68,
    68,    68,    68,    68,   179,   118,   179,   179,   179,   179,
   245,   245,   245,    68,   228,   228,   121,   245,   245,   266,
   266,   245,   245,   245,   245,   125,   245,   277,   277,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
   278,   278,   133,   245,   208,   208,   208,   208,   208,   208,
   151,   153,   156,   245,   154,   154,   154,   154,   154,   154,
   161,   154,   154,   154,   154,   154,   245,   162,   245,   245,
   245,   245,   273,   273,   273,   154,   163,   165,   172,   273,
   273,   173,   180,   273,   273,   273,   273,   182,   273,   184,
   189,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   191,   202,   203,   273,    45,    45,    45,   178,
   204,   205,    46,    46,    46,   273,   223,   226,    48,    48,
    48,   178,   178,   178,   178,   178,   178,   229,   273,   231,
   273,   273,   273,   273,    45,   237,   240,   242,    45,   250,
    46,   269,   271,   276,    46,   nil,    48,   nil,    45,   nil,
    48,    49,    49,    49,    46,   nil,   nil,    50,    50,    50,
    48,    45,   nil,    45,    45,    45,    45,    46,   nil,    46,
    46,    46,    46,    48,   nil,    48,    48,    48,    48,    49,
   nil,   nil,   nil,    49,   nil,    50,   nil,   nil,   nil,    50,
    70,    70,    70,    49,   nil,   nil,    71,    71,    71,    50,
   nil,   nil,    72,    72,    72,   nil,   nil,   nil,    49,    49,
    49,    49,    50,   nil,    50,    50,    50,    50,    70,   nil,
   nil,   nil,    70,   nil,    71,   nil,   nil,   nil,    71,   nil,
    72,   nil,    70,   nil,    72,   112,   112,   112,    71,   nil,
   123,   123,   123,   nil,    72,   nil,   nil,    70,    70,    70,
    70,    71,   nil,    71,    71,    71,    71,    72,   nil,    72,
    72,    72,    72,   112,   nil,   nil,   nil,   112,   123,   nil,
   nil,   nil,   123,   126,   126,   126,   nil,   112,   nil,   127,
   127,   127,   123,   nil,   nil,   128,   128,   128,   nil,   nil,
   112,   nil,   112,   112,   112,   112,   nil,   123,   123,   123,
   123,   126,   nil,   nil,   nil,   126,   nil,   127,   nil,   nil,
   nil,   127,   nil,   128,   nil,   126,   nil,   128,   131,   131,
   131,   127,   nil,   nil,   134,   134,   134,   128,   126,   nil,
   126,   126,   126,   126,   127,   nil,   127,   127,   127,   127,
   128,   nil,   128,   128,   128,   128,   131,   nil,   nil,   nil,
   131,   nil,   134,   nil,   nil,   nil,   134,   135,   135,   135,
   131,   nil,   nil,   136,   136,   136,   134,   nil,   nil,   137,
   137,   137,   nil,   131,   nil,   131,   131,   131,   131,   134,
   nil,   134,   134,   134,   134,   135,   nil,   nil,   nil,   135,
   nil,   136,   nil,   nil,   nil,   136,   nil,   137,   nil,   135,
   nil,   137,   139,   139,   139,   136,   nil,   140,   140,   140,
   nil,   137,   135,   nil,   135,   135,   135,   135,   136,   nil,
   136,   136,   136,   136,   137,   nil,   137,   137,   137,   137,
   139,   nil,   nil,   nil,   139,   140,   nil,   nil,   nil,   140,
   141,   141,   141,   nil,   139,   142,   142,   142,   nil,   140,
   nil,   143,   143,   143,   200,   200,   200,   200,   nil,   139,
   139,   139,   139,   nil,   140,   140,   140,   140,   141,   nil,
   nil,   nil,   141,   142,   nil,   nil,   nil,   142,   nil,   143,
   nil,   nil,   141,   143,   144,   144,   144,   142,   nil,   145,
   145,   145,   nil,   143,   nil,   nil,   nil,   141,   141,   141,
   141,   nil,   142,   142,   142,   142,   nil,   nil,   143,   143,
   143,   143,   144,   nil,   nil,   nil,   144,   145,   nil,   nil,
   nil,   145,   146,   146,   146,   nil,   144,   147,   147,   147,
   nil,   145,   nil,   148,   148,   148,   201,   201,   201,   201,
   nil,   144,   144,   144,   144,   nil,   145,   145,   145,   145,
   146,   nil,   nil,   nil,   146,   147,   nil,   nil,   nil,   147,
   nil,   148,   nil,   nil,   146,   148,   149,   149,   149,   147,
   nil,   150,   150,   150,   nil,   148,   nil,   nil,   nil,   146,
   146,   146,   146,   nil,   147,   147,   147,   147,   nil,   nil,
   148,   148,   148,   148,   149,   nil,   nil,   nil,   149,   150,
   nil,   nil,   nil,   150,   167,   167,   167,   nil,   149,   nil,
   232,   232,   232,   150,   nil,   nil,   244,   244,   244,   nil,
   nil,   nil,   nil,   149,   149,   149,   149,   nil,   150,   150,
   150,   150,   167,   nil,   nil,   nil,   167,   nil,   232,   nil,
   232,   nil,   232,   nil,   244,   nil,   167,   nil,   244,   247,
   247,   247,   232,   nil,   248,   248,   248,   nil,   244,   167,
   nil,   167,   167,   167,   167,   232,   nil,   232,   232,   232,
   232,   244,   nil,   244,   244,   244,   244,   247,   nil,   nil,
   nil,   247,   248,   nil,   nil,   nil,   248,   253,   253,   253,
   nil,   247,   nil,   275,   275,   275,   248,   209,   209,   209,
   209,   209,   209,   nil,   nil,   nil,   247,   247,   247,   247,
   nil,   248,   248,   248,   248,   253,   nil,   nil,   nil,   253,
   nil,   275,   nil,   nil,   nil,   275,   nil,   nil,   nil,   253,
   nil,   nil,   nil,   nil,   nil,   275,   nil,   nil,   nil,   160,
   nil,   nil,   253,   nil,   253,   253,   253,   253,   275,   nil,
   275,   275,   275,   275,   160,   nil,   160,   nil,   nil,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   nil,
   nil,   nil,   nil,   nil,   160,   nil,   nil,   160,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   257,   nil,   nil,
   nil,   nil,   nil,   257,   nil,   nil,   257,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    33,    39,   nil,    39,
   nil,    33,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   164,   nil,   nil,   nil,   157,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
   219,   219,   219,   219,   219,   219,   219,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
   220,   220,   220,   220,   220,   220,   220,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
   255,   255,   255,   255,   255,   255,   255,   210,   210,   210,
   210,   210,   210,   211,   211,   211,   211,   211,   211,   262,
   262,   262,   262,   262,   262,   263,   263,   263,   263,   263,
   263 ]

racc_action_pointer = [
   126,     9,     1,   nil,   nil,    66,   nil,   nil,   nil,   -29,
   -17,   nil,    80,   131,   nil,    39,   nil,   nil,   nil,   111,
    72,   135,   111,    64,   nil,   nil,   nil,   nil,   113,   137,
   148,    -4,   nil,  1164,   nil,   nil,    45,   nil,   nil,  1189,
   -32,   199,    75,   202,   nil,   461,   467,   nil,   473,   506,
   512,   nil,   175,   nil,   nil,    13,   162,   210,    77,   214,
    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   286,   nil,
   545,   551,   557,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     1,   nil,   236,   nil,    84,
   102,   nil,   247,   256,   nil,   272,   278,   nil,   nil,   nil,
   nil,    68,   590,   120,   nil,   nil,   166,   305,   306,   152,
    -6,   352,   134,   595,   -10,   361,   628,   634,   640,   -41,
   nil,   673,   nil,   355,   679,   712,   718,   724,   nil,   757,
   762,   795,   800,   806,   839,   844,   877,   882,   888,   921,
   926,   350,   214,   367,   358,   nil,   364,  1209,   nil,   183,
  1106,   377,   413,   378,  1234,   431,   157,   959,   140,   nil,
   nil,   212,   391,   394,   nil,   nil,   nil,   nil,   435,   284,
   394,   nil,   379,   188,   400,   nil,   nil,   nil,    -5,   388,
   nil,   410,   198,    67,   nil,   nil,     2,     8,   224,   229,
   766,   848,   413,   414,   420,   421,   204,   276,   348,  1011,
  1301,  1307,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1254,
  1274,   nil,   nil,   439,   237,   321,   484,   274,   298,   494,
  1294,   452,   965,   nil,   nil,    80,   nil,   502,   155,   nil,
   448,   nil,   504,   nil,   971,   356,   nil,  1004,  1009,   nil,
   506,   nil,   nil,  1042,   nil,  1314,   nil,  1135,    31,   nil,
    -4,   nil,  1313,  1319,   nil,   158,   301,   nil,   nil,   462,
   nil,   467,   nil,   428,   nil,  1048,   466,   370,   332,   nil,
   nil ]

racc_action_default = [
    -6,  -166,  -159,    -2,    -4,  -166,    -7,    -9,   -10,  -166,
  -166,   -29,  -166,  -166,    -1,  -160,  -161,  -163,  -164,    -5,
   -12,  -166,   -97,   -96,   281,    -3,  -162,    -8,  -166,  -166,
  -166,   -32,   -98,  -166,   -94,   -95,    -6,  -165,   -13,  -166,
  -166,  -166,  -159,   -33,   -35,  -166,  -135,   -38,  -166,  -166,
  -166,   -43,  -166,   -45,   -46,   -47,  -116,   -70,  -133,  -126,
  -133,   -87,   -88,   -89,   -90,   -91,   -92,   -93,  -104,  -105,
  -166,  -166,  -166,  -127,  -129,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,
  -154,  -155,  -156,  -157,  -158,  -166,  -100,  -166,  -103,  -166,
  -166,   -15,  -166,  -166,   -19,   -70,  -166,   -22,   -23,   -30,
   -31,  -160,  -166,   -36,  -116,  -126,  -133,  -133,   -37,  -136,
  -166,  -166,  -166,  -166,  -166,   -48,  -166,  -166,  -166,  -166,
   -71,  -166,  -128,  -166,  -135,  -166,  -166,  -166,  -130,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -114,  -166,  -166,  -124,  -125,  -166,  -166,  -102,  -166,
  -166,  -166,  -166,   -20,  -166,   -34,   -40,  -166,   -32,   -63,
   -64,   -32,  -166,  -166,   -59,   -60,   -61,   -62,  -166,   -32,
  -166,  -106,  -107,   -56,   -69,   -72,   -75,   -76,   -77,   -78,
   -79,  -166,   -84,   -96,  -131,  -132,  -166,  -166,   -85,   -86,
  -108,  -109,  -110,  -111,  -112,  -113,  -117,  -118,  -119,  -120,
  -121,  -122,  -115,  -123,   -99,  -101,   -11,   -14,   -16,   -26,
   -50,   -21,   -24,  -166,  -137,   -65,  -166,  -166,  -166,  -166,
   -50,  -166,  -166,  -134,  -138,  -166,   -27,  -166,  -166,   -51,
   -70,   -25,  -166,   -66,  -166,   -32,   -41,  -166,  -166,   -42,
  -166,   -73,   -74,   -81,   -17,  -166,   -18,   -49,  -166,   -39,
  -166,   -68,   -57,   -58,   -44,  -166,   -82,   -28,   -52,   -53,
   -54,   -77,   -78,   -32,   -80,  -166,  -166,   -65,   -83,   -55,
   -67 ]

racc_goto_table = [
    59,    41,    56,   129,    27,   168,    60,    26,    96,   173,
    15,    26,   101,    19,   104,    22,   190,   187,   172,   138,
   242,   118,    14,   236,   237,    36,     3,    39,   153,   155,
     1,    97,     2,    99,   250,    28,   100,   105,   235,   113,
   119,    25,   120,   106,   124,   221,    31,   165,   121,   268,
   111,   163,   269,   184,   186,   265,    32,    95,   nil,   267,
   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   280,   122,   nil,   nil,   138,   nil,   nil,   nil,
    59,   nil,    56,   nil,   nil,   nil,    60,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   151,   152,   154,   nil,   189,   nil,
   nil,   nil,   195,    26,   191,   nil,   166,   159,   160,   196,
   nil,   nil,   nil,   nil,   nil,   248,   nil,   nil,   190,   251,
   181,   182,   183,   247,   nil,   192,   nil,   nil,   119,   197,
   198,   199,   215,   218,   nil,   104,   194,    59,   225,    56,
    59,   226,    56,    60,    27,   273,    60,   178,    59,   229,
    56,    26,    26,   214,    60,    97,   252,   nil,   105,   nil,
   nil,   224,   222,   200,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   nil,   nil,   230,   nil,   nil,
   nil,   nil,   nil,   270,   nil,   nil,   258,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   189,   279,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,   261,    56,   105,   240,   nil,
    60,   nil,   nil,   nil,   nil,   nil,   198,   272,   240,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   260,   nil,
   nil,   nil,    59,   277,    56,   272,   257,   266,    60,    26,
   nil,   nil,   nil,   105,   nil,   240,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   278,
   nil,   262,   263 ]

racc_goto_check = [
    49,    26,    42,    20,     8,    33,    51,    59,    55,    45,
     5,    59,    14,     5,    18,    24,    32,    48,    44,    57,
    34,    31,     3,    15,    17,    12,     4,    12,    56,    56,
     1,    19,     2,     7,    17,    11,    13,    19,    16,    30,
    30,     4,    30,    21,    30,    22,    25,    28,    35,    39,
     5,    20,    40,    47,    41,    50,    53,    54,   nil,    15,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    34,    43,   nil,   nil,    57,   nil,   nil,   nil,
    49,   nil,    42,   nil,   nil,   nil,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    43,    43,   nil,    49,   nil,
   nil,   nil,    49,    59,    51,   nil,    30,     5,     5,    31,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,    32,    48,
    30,    30,    30,    44,   nil,    30,   nil,   nil,    30,    30,
    30,    30,    55,    14,   nil,    18,    24,    49,    26,    42,
    49,    26,    42,    51,     8,    33,    51,    43,    49,    26,
    42,    59,    59,    12,    51,    19,    41,   nil,    19,   nil,
   nil,    30,    19,    43,    43,    43,    43,    43,    43,    43,
    43,    43,    43,    43,    43,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,    41,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    41,   nil,   nil,   nil,   nil,    51,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,    26,    42,    19,    19,   nil,
    51,   nil,   nil,   nil,   nil,   nil,    30,    49,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,    49,    26,    42,    49,     5,    30,    51,    59,
   nil,   nil,   nil,    19,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,    43,    43 ]

racc_goto_pointer = [
   nil,    30,    32,    20,    26,     8,   nil,    -3,   -15,   nil,
   nil,    15,    -3,    -3,   -27,  -196,  -181,  -196,   -25,    -2,
   -54,     3,  -119,   nil,     3,    24,   -30,   nil,   -64,   nil,
    -6,   -25,  -113,  -115,  -205,    -1,   nil,   nil,   nil,  -208,
  -206,   -75,   -29,    24,  -104,  -113,   nil,   -76,  -112,   -31,
  -198,   -25,   nil,    34,    24,   -25,   -43,   -41,   nil,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   nil,   170,   nil,   nil,   102,   nil,   nil,    54,    57,
   nil,   nil,   nil,    11,   nil,   nil,   nil,    42,    43,    44,
    55,   nil,    47,   nil,   nil,   nil,    51,    53,   238,   239,
   nil,   nil,   114,    68,   nil,   nil,   243,   nil,   nil,   115,
   nil,   117,    73,   nil,   nil,   nil,    69,   132,    74,    16 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 79, :_reduce_1,
  1, 80, :_reduce_2,
  3, 80, :_reduce_3,
  1, 82, :_reduce_4,
  2, 82, :_reduce_5,
  0, 85, :_reduce_6,
  1, 85, :_reduce_7,
  3, 85, :_reduce_8,
  1, 86, :_reduce_9,
  1, 86, :_reduce_10,
  7, 88, :_reduce_11,
  0, 89, :_reduce_12,
  2, 89, :_reduce_13,
  7, 84, :_reduce_14,
  1, 91, :_reduce_15,
  3, 91, :_reduce_16,
  5, 92, :_reduce_17,
  5, 92, :_reduce_18,
  1, 92, :_reduce_none,
  2, 93, :_reduce_20,
  4, 96, :_reduce_21,
  1, 99, :_reduce_none,
  1, 99, :_reduce_23,
  1, 100, :_reduce_none,
  2, 100, :_reduce_25,
  0, 94, :_reduce_26,
  1, 94, :_reduce_27,
  3, 94, :_reduce_28,
  1, 87, :_reduce_29,
  5, 101, :_reduce_30,
  2, 104, :_reduce_31,
  0, 105, :_reduce_32,
  1, 105, :_reduce_33,
  3, 105, :_reduce_34,
  1, 106, :_reduce_35,
  2, 106, :_reduce_36,
  2, 106, :_reduce_37,
  1, 106, :_reduce_38,
  6, 106, :_reduce_39,
  3, 106, :_reduce_40,
  5, 106, :_reduce_41,
  5, 106, :_reduce_42,
  1, 106, :_reduce_43,
  6, 106, :_reduce_44,
  1, 106, :_reduce_45,
  1, 106, :_reduce_none,
  1, 106, :_reduce_47,
  2, 115, :_reduce_48,
  2, 95, :_reduce_49,
  0, 116, :_reduce_50,
  1, 116, :_reduce_51,
  3, 116, :_reduce_52,
  3, 117, :_reduce_53,
  1, 118, :_reduce_54,
  3, 118, :_reduce_55,
  3, 114, :_reduce_56,
  5, 113, :_reduce_57,
  5, 113, :_reduce_58,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  0, 112, :_reduce_65,
  1, 112, :_reduce_66,
  5, 112, :_reduce_67,
  2, 124, :_reduce_68,
  3, 107, :_reduce_69,
  0, 98, :_reduce_70,
  1, 98, :_reduce_71,
  2, 98, :_reduce_72,
  3, 125, :_reduce_73,
  3, 125, :_reduce_74,
  1, 125, :_reduce_75,
  1, 125, :_reduce_76,
  1, 119, :_reduce_77,
  1, 119, :_reduce_78,
  1, 126, :_reduce_none,
  5, 126, :_reduce_80,
  0, 128, :_reduce_81,
  1, 128, :_reduce_82,
  3, 128, :_reduce_83,
  3, 110, :_reduce_84,
  3, 110, :_reduce_85,
  3, 110, :_reduce_86,
  1, 130, :_reduce_87,
  1, 130, :_reduce_88,
  1, 130, :_reduce_89,
  1, 130, :_reduce_90,
  1, 130, :_reduce_91,
  1, 130, :_reduce_92,
  1, 130, :_reduce_93,
  2, 102, :_reduce_94,
  2, 102, :_reduce_95,
  1, 102, :_reduce_96,
  0, 103, :_reduce_97,
  1, 103, :_reduce_none,
  4, 131, :_reduce_99,
  1, 132, :_reduce_100,
  3, 132, :_reduce_101,
  2, 133, :_reduce_102,
  1, 133, :_reduce_103,
  1, 108, :_reduce_104,
  1, 108, :_reduce_105,
  3, 108, :_reduce_106,
  3, 108, :_reduce_107,
  3, 121, :_reduce_108,
  3, 121, :_reduce_109,
  3, 121, :_reduce_110,
  3, 121, :_reduce_111,
  3, 121, :_reduce_112,
  3, 121, :_reduce_113,
  2, 121, :_reduce_114,
  3, 121, :_reduce_115,
  1, 121, :_reduce_116,
  3, 134, :_reduce_117,
  3, 134, :_reduce_118,
  3, 134, :_reduce_119,
  3, 134, :_reduce_120,
  3, 134, :_reduce_121,
  3, 134, :_reduce_122,
  3, 134, :_reduce_123,
  2, 134, :_reduce_124,
  2, 134, :_reduce_125,
  1, 120, :_reduce_126,
  1, 120, :_reduce_127,
  2, 120, :_reduce_128,
  1, 120, :_reduce_none,
  2, 136, :_reduce_130,
  3, 129, :_reduce_131,
  3, 129, :_reduce_132,
  0, 135, :_reduce_133,
  3, 135, :_reduce_134,
  0, 109, :_reduce_135,
  1, 109, :_reduce_136,
  3, 109, :_reduce_137,
  4, 127, :_reduce_138,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_158,
  0, 81, :_reduce_159,
  1, 81, :_reduce_160,
  1, 83, :_reduce_161,
  2, 83, :_reduce_162,
  1, 137, :_reduce_163,
  1, 137, :_reduce_none,
  1, 90, :_reduce_165 ]

racc_reduce_n = 166

racc_shift_n = 281

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kDTYPE_UINT => 23,
  :kDTYPE_LINT => 24,
  :kDTYPE_LLINT => 25,
  :kDTYPE_CHAR => 26,
  :kDTYPE_I8 => 27,
  :kDTYPE_I16 => 28,
  :kDTYPE_I32 => 29,
  :kDTYPE_I64 => 30,
  :kDTYPE_UI8 => 31,
  :kDTYPE_UI16 => 32,
  :kDTYPE_UI32 => 33,
  :kDTYPE_UI64 => 34,
  :kDTYPE_INT => 35,
  :kDTYPE_F32 => 36,
  :kDTYPE_F64 => 37,
  :kDTYPE_LF64 => 38,
  :kDTYPE_ROBJ => 39,
  :kDTYPE_ULINT => 40,
  :kDTYPE_ULLINT => 41,
  :tCUSTOM_DTYPE => 42,
  :tLPAREN => 43,
  :tRPAREN => 44,
  :tLSQUARE => 45,
  :tRSQUARE => 46,
  :tIDENTIFIER => 47,
  :tNL => 48,
  :tCOMMA => 49,
  :tSQUOTE => 50,
  :tSCOLON => 51,
  :EOF => 52,
  :tDOT => 53,
  :tQMARK => 54,
  :tSTART_LINE => 55,
  :tPLUS => 56,
  :tMINUS => 57,
  :tSTAR => 58,
  :tDIVIDE => 59,
  :tEXPO => 60,
  :tMODULUS => 61,
  :tASSIGN => 62,
  :tEQ => 63,
  :tLT => 64,
  :tLTEQ => 65,
  :tGT => 66,
  :tGTEQ => 67,
  :tANDOP => 68,
  :tOROP => 69,
  :tBANG => 70,
  :tOP_ASSIGN => 71,
  :tSTRING => 72,
  :tINTEGER => 73,
  :tFLOAT => 74,
  :tSINGLE_CHAR => 75,
  :UMINUS => 76,
  :tNEQ => 77 }

racc_nt_base = 78

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_7(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_11(val, _values, result)
            result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_14(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_15(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_16(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_20(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_25(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_30(val, _values, result)
            result = TopStatement::RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_33(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_34(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_35(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_36(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_37(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_38(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_39(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_40(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_41(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_42(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_47(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_48(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_49(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_50(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_51(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_52(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_53(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_54(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_55(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_56(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_57(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_58(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_67(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_68(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_69(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_70(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_71(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_72(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_73(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_74(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_75(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_76(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_77(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_78(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_80(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_82(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_84(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_85(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_86(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_87(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_88(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_89(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_90(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_91(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_92(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_93(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_94(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_95(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_97(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_99(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_100(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_101(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_102(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_103(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_104(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_105(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_113(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_114(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_115(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_116(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_124(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_125(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_126(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_127(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_128(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_130(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_131(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_132(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_133(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_134(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_135(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_136(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_137(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_138(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_158(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_159(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_162(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_165(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
