#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 670)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'109,110,112,264,275,264,60,113,114,199,73,133,134,135,13,93,68,73,193',
'194,355,137,123,356,120,121,153,122,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,146,72,138,70,126,70,61,331,282',
'205,83,206,136,139,242,82,147,22,316,243,23,193,194,142,93,193,194,193',
'194,145,203,132,152,148,16,109,110,112,149,129,130,131,113,114,193,194',
'133,134,135,13,13,68,18,12,11,17,137,123,25,120,121,153,122,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,146,206',
'138,205,126,22,22,199,23,23,89,26,136,139,377,22,147,326,23,27,349,336',
'325,142,208,29,335,198,90,145,93,132,152,148,16,109,110,112,149,129',
'130,131,113,114,193,194,133,134,135,13,13,68,55,336,11,17,137,123,335',
'120,121,153,122,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,146,16,138,336,126,92,22,89,335,23,171,171,136,139',
'173,173,147,13,93,348,12,11,17,142,335,90,70,93,93,145,74,132,152,148',
'16,109,110,112,149,129,130,131,113,114,70,98,133,134,135,13,13,68,193',
'194,11,17,137,123,93,120,121,153,122,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,146,16,138,78,126,173,22,379',
'22,23,88,23,136,139,193,194,147,13,93,91,93,11,17,142,22,22,61,23,23',
'145,99,132,152,148,16,109,110,112,149,129,130,131,113,114,193,194,133',
'134,135,13,13,68,193,194,11,17,137,123,158,120,121,153,122,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,146,205',
'138,206,126,70,216,217,218,219,220,221,136,139,193,194,147,216,217,218',
'219,220,221,142,222,223,224,225,226,145,158,132,152,148,168,109,110',
'112,149,129,130,131,113,114,193,194,133,134,135,13,22,68,22,23,170,23',
'137,123,175,120,121,153,122,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,146,178,138,186,126,186,216,217,218,219',
'220,221,136,139,193,194,147,216,217,218,219,220,221,142,222,223,224',
'225,226,145,186,132,152,148,197,109,110,112,149,129,130,131,113,114',
'193,194,133,134,135,13,351,68,207,350,70,353,137,123,70,120,121,153',
'122,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,146,70,138,241,126,244,216,217,218,219,220,221,136,139,366,367',
'147,218,219,220,221,271,272,142,222,223,224,225,226,145,246,132,152',
'148,70,109,110,112,149,129,130,131,113,114,273,274,133,134,135,13,252',
'68,218,219,220,221,137,123,255,120,121,153,122,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,146,158,138,206,126',
'133,134,135,193,194,193,194,136,139,199,137,147,193,194,205,153,366',
'367,142,266,280,285,286,70,145,318,132,152,148,220,70,246,178,149,129',
'130,131,339,340,16,360,146,341,138,193,183,133,134,135,220,220,220,220',
'136,139,13,137,147,199,11,17,153,359,93,142,362,368,371,286,373,145',
'70,132,152,148,376,158,381,199,149,129,130,131,387,158,,,146,,138,,183',
'133,134,135,,,,22,136,139,23,137,147,,,,153,,,142,,,,,,145,,132,152',
'148,,,,,149,129,130,131,,,,,189,,138,,183,133,134,135,,,,,136,139,,137',
'147,,,,153,,,216,217,218,219,220,221,,,132,152,148,,,,,149,129,130,131',
'223,224,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,142',
',,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133,134',
'135,,,,,136,139,,137,147,,,,153,,,,,,,,,145,,132,152,148,,,,,149,129',
'130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,',
'142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133',
'134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,',
'149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,',
',,153,,,,216,217,218,219,220,221,,132,152,148,,,,,149,129,130,131,222',
'223,224,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,216',
'217,218,219,220,221,,132,152,148,,,,,149,129,130,131,222,223,224,,238',
',138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152',
'148,,,,,149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137',
'147,,,,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,',
'138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132',
'152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139',
',137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,146,,138',
',183,133,134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132,152',
'148,,,,,149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137',
'147,,,,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,',
'138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132',
'152,148,,,,,149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136,139',
',137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,',
'146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145',
',132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136',
'139,,137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131',
',,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,142,,,,',
',145,,132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133,134,135',
',,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,,149,129',
'130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,',
'142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133',
'134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,',
'149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,',
',,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,,,138,,183',
'133,134,135,,,,,136,139,,137,,,,,153,,,,,,,,,,,132,152,,,,,,,129,130',
'131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,',
',,,,132,152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,',
',,136,139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131',
',,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,',
'132,152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136',
'139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,238',
',138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152',
'148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137',
'147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,238,,138,,183',
'133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149',
'129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153',
',,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134',
'135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130',
'131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,',
',,,,132,152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,',
',,136,139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131',
',,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,',
'132,152,148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136',
'139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,238',
',138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152',
'148,,,,,149,129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137',
'147,,,,153,,,,,,,,,,,132,152,148,,,,,149,129,130,131,,,,,238,,138,,183',
'133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,,,,,132,152,148,,,,,149',
'129,130,131,,,,,238,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153',
',,,,,,133,134,135,,132,152,148,,,,137,149,129,130,131,153,,,,238,,138',
',183,133,134,135,,,,,136,139,,137,147,,,,153,,,,138,,183,133,134,135',
',132,152,148,136,139,,137,149,129,130,131,153,,,,,,138,,183,,,132,152',
',,,136,139,,129,130,131,,,,,146,,138,,183,133,134,135,,132,152,,136',
'139,,137,147,129,130,131,153,,,142,,,,,,145,,132,152,148,,,,,149,129',
'130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,,,,153,,',
'142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,146,,138,,183,133',
'134,135,,,,,136,139,,137,147,,,,153,,,142,,,,,,145,,132,152,148,,,,',
'149,129,130,131,,,,,146,,138,,183,133,134,135,,,,,136,139,,137,147,',
',,153,,,142,,,,,,145,,132,152,148,,,,,149,129,130,131,,,,,238,,138,',
'183,133,134,135,,,,,136,139,,137,147,,,,153,,,,,,,133,134,135,,132,152',
'148,,,,137,149,129,130,131,153,,,,238,,138,,183,,,,,,,,136,139,,,147',
',,,,,,,138,,183,,,,,132,152,148,136,139,,,149,129,130,131,96,,,,216',
'217,218,219,220,221,,132,152,,,13,,68,,129,130,131,222,223,224,225,226',
',,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,317,,,,,22,,,23,,,,,,216,217,218,219,220,221,,227,229,230,231',
'232,,,,,,,222,223,224,225,226,13,,68,,,,,228,,,,,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,167,,,,,,,,,,',
',,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,317,,,,,,,,,,,,317,,216,217,218,219,220,221,,,271,272,273,274',
'216,217,218,219,220,221,222,223,224,225,226,,,,,,,,222,223,224,225,226',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,,,,,,22,,,23,216,217,218,219,220,221,,227,229,230,231,232,,,,,,,222',
'223,224,225,226,,,,,,,,228,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,,-26,,,,,-26,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,157,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,157,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,216,217,218,219,220,221,,,271,272,273,274,216,217,218',
'219,220,221,222,223,224,225,226,216,217,218,219,220,221,,222,223,224',
'225,226,216,217,218,219,220,221,222,223,224,225,226,216,217,218,219',
'220,221,,222,223,224,225,226,,,,,,,222,223,224,225,226' ]
        racc_action_table = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'87,87,87,187,192,382,25,87,87,297,28,87,87,87,87,298,87,199,119,119',
'297,87,87,298,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,28,87,187,87,382,25,254,199,126,68',
'126,87,87,154,68,87,2,234,154,2,192,192,87,254,187,187,382,382,87,126',
'87,87,87,20,177,177,177,87,87,87,87,177,177,234,234,177,177,177,177',
'20,177,1,20,20,20,177,177,11,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,282,177,128,177,177,20,124,177,20,282,12,177,177,357,5,177,248',
'5,13,289,261,248,177,128,16,261,124,282,177,357,177,177,177,24,251,251',
'251,177,177,177,177,251,251,289,289,251,251,251,251,24,251,18,278,24',
'24,251,251,278,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,0,251,279',
'251,75,24,72,279,24,104,327,251,251,104,327,251,0,75,288,0,0,0,251,288',
'72,27,104,327,251,29,251,251,251,160,263,263,263,251,251,251,251,263',
'263,59,80,263,263,263,263,160,263,180,180,160,160,263,263,80,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,76,263,61,263,257,160,361,62',
'160,71,62,263,263,260,260,263,76,257,73,361,76,76,263,84,94,77,84,94',
'263,81,263,263,263,162,266,266,266,263,263,263,263,266,266,262,262,266',
'266,266,266,162,266,281,281,162,162,266,266,92,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,183,266,183,266,95,310,310,310,310,310,310,266',
'266,287,287,266,306,306,306,306,306,306,266,310,310,310,310,310,266',
'98,266,266,266,100,275,275,275,266,266,266,266,275,275,290,290,275,275',
'275,275,106,275,253,106,102,253,275,275,105,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,107,275,110,275,120,311,311,311,311,311,311',
'275,275,291,291,275,307,307,307,307,307,307,275,311,311,311,311,311',
'275,122,275,275,275,123,367,367,367,275,275,275,275,367,367,292,292',
'367,367,367,367,293,367,127,293,295,295,367,367,138,367,367,367,367',
'367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367',
'367,367,367,367,367,367,367,367,139,367,152,367,156,312,312,312,312',
'312,312,367,367,337,337,367,299,299,299,299,340,340,367,312,312,312',
'312,312,367,157,367,367,367,159,388,388,388,367,367,367,367,388,388',
'341,341,388,388,388,388,161,388,300,300,300,300,388,388,167,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,172,388,173,388,109,109,109',
'347,347,363,363,388,388,181,109,388,372,372,184,109,390,390,388,188',
'197,200,201,211,388,236,388,388,388,237,242,244,259,388,388,388,388',
'267,269,330,330,109,270,109,277,109,112,112,112,301,302,303,304,109',
'109,330,112,109,324,330,330,112,329,332,109,333,338,342,346,352,109',
'353,109,109,109,355,362,364,375,109,109,109,109,378,387,,,112,,112,',
'112,113,113,113,,,,330,112,112,330,113,112,,,,113,,,112,,,,,,112,,112',
'112,112,,,,,112,112,112,112,,,,,113,,113,,113,114,114,114,,,,,113,113',
',114,113,,,,114,,,305,305,305,305,305,305,,,113,113,113,,,,,113,113',
'113,113,305,305,,,114,,114,,114,141,141,141,,,,,114,114,,141,114,,,',
'141,,,114,,,,,,114,,114,114,114,,,,,114,114,114,114,,,,,141,,141,,141',
'145,145,145,,,,,141,141,,145,141,,,,145,,,,,,,,,141,,141,141,141,,,',
',141,141,141,141,,,,,145,,145,,145,146,146,146,,,,,145,145,,146,145',
',,,146,,,145,,,,,,145,,145,145,145,,,,,145,145,145,145,,,,,146,,146',
',146,147,147,147,,,,,146,146,,147,146,,,,147,,,146,,,,,,146,,146,146',
'146,,,,,146,146,146,146,,,,,147,,147,,147,148,148,148,,,,,147,147,,148',
'147,,,,148,,,,308,308,308,308,308,308,,147,147,147,,,,,147,147,147,147',
'308,308,308,,148,,148,,148,149,149,149,,,,,148,148,,149,148,,,,149,',
',,309,309,309,309,309,309,,148,148,148,,,,,148,148,148,148,309,309,309',
',149,,149,,149,178,178,178,,,,,149,149,,178,149,,,,178,,,,,,,,,,,149',
'149,149,,,,,149,149,149,149,,,,,178,,178,,178,185,185,185,,,,,178,178',
',185,178,,,,185,,,178,,,,,,178,,178,178,178,,,,,178,178,178,178,,,,',
'185,,185,,185,189,189,189,,,,,185,185,,189,185,,,,189,,,185,,,,,,185',
',185,185,185,,,,,185,185,185,185,,,,,189,,189,,189,193,193,193,,,,,189',
'189,,193,189,,,,193,,,,,,,,,,,189,189,189,,,,,189,189,189,189,,,,,193',
',193,,193,194,194,194,,,,,193,193,,194,193,,,,194,,,193,,,,,,193,,193',
'193,193,,,,,193,193,193,193,,,,,194,,194,,194,195,195,195,,,,,194,194',
',195,194,,,,195,,,194,,,,,,194,,194,194,194,,,,,194,194,194,194,,,,',
'195,,195,,195,196,196,196,,,,,195,195,,196,195,,,,196,,,195,,,,,,195',
',195,195,195,,,,,195,195,195,195,,,,,196,,196,,196,198,198,198,,,,,196',
'196,,198,196,,,,198,,,196,,,,,,196,,196,196,196,,,,,196,196,196,196',
',,,,198,,198,,198,203,203,203,,,,,198,198,,203,198,,,,203,,,198,,,,',
',198,,198,198,198,,,,,198,198,198,198,,,,,203,,203,,203,205,205,205',
',,,,203,203,,205,203,,,,205,,,203,,,,,,203,,203,203,203,,,,,203,203',
'203,203,,,,,205,,205,,205,206,206,206,,,,,205,205,,206,205,,,,206,,',
'205,,,,,,205,,205,205,205,,,,,205,205,205,205,,,,,206,,206,,206,207',
'207,207,,,,,206,206,,207,206,,,,207,,,206,,,,,,206,,206,206,206,,,,',
'206,206,206,206,,,,,207,,207,,207,208,208,208,,,,,207,207,,208,207,',
',,208,,,207,,,,,,207,,207,207,207,,,,,207,207,207,207,,,,,208,,208,',
'208,210,210,210,,,,,208,208,,210,208,,,,210,,,208,,,,,,208,,208,208',
'208,,,,,208,208,208,208,,,,,210,,210,,210,213,213,213,,,,,210,210,,213',
'210,,,,213,,,210,,,,,,210,,210,210,210,,,,,210,210,210,210,,,,,,,213',
',213,216,216,216,,,,,213,213,,216,,,,,216,,,,,,,,,,,213,213,,,,,,,213',
'213,213,,,,,216,,216,,216,217,217,217,,,,,216,216,,217,216,,,,217,,',
',,,,,,,,216,216,216,,,,,216,216,216,216,,,,,217,,217,,217,218,218,218',
',,,,217,217,,218,217,,,,218,,,,,,,,,,,217,217,217,,,,,217,217,217,217',
',,,,218,,218,,218,219,219,219,,,,,218,218,,219,218,,,,219,,,,,,,,,,',
'218,218,218,,,,,218,218,218,218,,,,,219,,219,,219,220,220,220,,,,,219',
'219,,220,219,,,,220,,,,,,,,,,,219,219,219,,,,,219,219,219,219,,,,,220',
',220,,220,221,221,221,,,,,220,220,,221,220,,,,221,,,,,,,,,,,220,220',
'220,,,,,220,220,220,220,,,,,221,,221,,221,222,222,222,,,,,221,221,,222',
'221,,,,222,,,,,,,,,,,221,221,221,,,,,221,221,221,221,,,,,222,,222,,222',
'223,223,223,,,,,222,222,,223,222,,,,223,,,,,,,,,,,222,222,222,,,,,222',
'222,222,222,,,,,223,,223,,223,224,224,224,,,,,223,223,,224,223,,,,224',
',,,,,,,,,,223,223,223,,,,,223,223,223,223,,,,,224,,224,,224,225,225',
'225,,,,,224,224,,225,224,,,,225,,,,,,,,,,,224,224,224,,,,,224,224,224',
'224,,,,,225,,225,,225,226,226,226,,,,,225,225,,226,225,,,,226,,,,,,',
',,,,225,225,225,,,,,225,225,225,225,,,,,226,,226,,226,227,227,227,,',
',,226,226,,227,226,,,,227,,,,,,,,,,,226,226,226,,,,,226,226,226,226',
',,,,227,,227,,227,228,228,228,,,,,227,227,,228,227,,,,228,,,,,,,,,,',
'227,227,227,,,,,227,227,227,227,,,,,228,,228,,228,229,229,229,,,,,228',
'228,,229,228,,,,229,,,,,,,,,,,228,228,228,,,,,228,228,228,228,,,,,229',
',229,,229,230,230,230,,,,,229,229,,230,229,,,,230,,,,,,,,,,,229,229',
'229,,,,,229,229,229,229,,,,,230,,230,,230,231,231,231,,,,,230,230,,231',
'230,,,,231,,,,,,,,,,,230,230,230,,,,,230,230,230,230,,,,,231,,231,,231',
'232,232,232,,,,,231,231,,232,231,,,,232,,,,,,,,,,,231,231,231,,,,,231',
'231,231,231,,,,,232,,232,,232,238,238,238,,,,,232,232,,238,232,,,,238',
',,,,,,246,246,246,,232,232,232,,,,246,232,232,232,232,246,,,,238,,238',
',238,354,354,354,,,,,238,238,,354,238,,,,354,,,,246,,246,286,286,286',
',238,238,238,246,246,,286,238,238,238,238,286,,,,,,354,,354,,,246,246',
',,,354,354,,246,246,246,,,,,286,,286,,286,335,335,335,,354,354,,286',
'286,,335,286,354,354,354,335,,,286,,,,,,286,,286,286,286,,,,,286,286',
'286,286,,,,,335,,335,,335,350,350,350,,,,,335,335,,350,335,,,,350,,',
'335,,,,,,335,,335,335,335,,,,,335,335,335,335,,,,,350,,350,,350,366',
'366,366,,,,,350,350,,366,350,,,,366,,,350,,,,,,350,,350,350,350,,,,',
'350,350,350,350,,,,,366,,366,,366,369,369,369,,,,,366,366,,369,366,',
',,369,,,366,,,,,,366,,366,366,366,,,,,366,366,366,366,,,,,369,,369,',
'369,370,370,370,,,,,369,369,,370,369,,,,370,,,,,,,374,374,374,,369,369',
'369,,,,374,369,369,369,369,374,,,,370,,370,,370,,,,,,,,370,370,,,370',
',,,,,,,374,,374,,,,,370,370,370,374,374,,,370,370,370,370,79,,,,313',
'313,313,313,313,313,,374,374,,,79,,79,,374,374,374,313,313,313,313,313',
',,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
'79,79,235,,,,,79,,,79,,,,,,235,235,235,235,235,235,,235,235,235,235',
'235,,,,,,,235,235,235,235,235,26,,26,,,,,235,,,,,,,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,99,,,,,,,,,,,',
',,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99',
'99,99,268,,,,,,,,,,,,319,,268,268,268,268,268,268,,,268,268,268,268',
'319,319,319,319,319,319,268,268,268,268,268,,,,,,,,319,319,319,319,319',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,101,101,,,,,,101,,,101,143,143,143,143,143,143,',
'143,143,143,143,143,,,,,,,143,143,143,143,143,,,,,,,,143,158,158,158',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158',
'158,158,158,158,,158,,,,,158,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,,,,,88,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
',,,,243,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241',
'241,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325,325',
'325,325,325,325,325,325,325,325,191,191,191,191,191,191,,,191,191,191',
'191,314,314,314,314,314,314,191,191,191,191,191,315,315,315,315,315',
'315,,314,314,314,314,314,384,384,384,384,384,384,315,315,315,315,315',
'385,385,385,385,385,385,,384,384,384,384,384,,,,,,,385,385,385,385,385' ]
        racc_action_check = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   225,   104,     8,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   nil,    50,    63,    98,   nil,   nil,   140,  3315,   191,   nil,
    84,   nil,   nil,   nil,   171,   -21,  3051,   191,    -7,   190,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,
  3339,   256,   260,   nil,   nil,   nil,   nil,   nil,     7,  3363,
   nil,   267,   166,   265,   nil,   171,   312,   260,   nil,  2976,
   211,   266,   nil,   nil,   276,   nil,   nil,    -4,  3257,   nil,
   nil,   nil,   315,   nil,   277,   344,   nil,   nil,   374,  3089,
   431,  3162,   392,   nil,   180,   455,   389,   482,   nil,   651,
   434,   nil,   697,   743,   789,   nil,   nil,   nil,   nil,   -65,
   436,   nil,   461,   503,    80,   nil,     5,   462,    86,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   484,   514,
   nil,   835,  3387,  3156,   nil,   881,   927,   973,  1019,  1065,
   nil,   nil,   521,   nil,     9,   nil,   519,   527,  3226,   547,
   258,   621,   345,   nil,   nil,   nil,   nil,   572,   nil,   nil,
   nil,   nil,   606,   606,   nil,   nil,   nil,    83,  1111,   nil,
   195,   609,   nil,   345,   624,  1157,   nil,    -6,   671,  1203,
   nil,  3420,   -10,  1249,  1295,  1341,  1387,   626,  1433,     0,
   625,   611,   nil,  1479,   nil,  1525,  1571,  1617,  1663,   nil,
  1709,   628,   nil,  1755,   nil,   nil,  1801,  1847,  1893,  1939,
  1985,  2031,  2077,  2123,  2169,  2215,  2261,  2307,  2353,  2399,
  2445,  2491,  2537,   nil,    13,  2975,   634,   620,  2583,   nil,
   nil,  3411,   635,  3286,   620,   nil,  2605,   nil,    99,   nil,
   nil,   170,   nil,   391,     3,   nil,   nil,   258,   nil,   692,
   244,   103,   274,   257,   nil,   nil,   344,   646,  3088,   644,
   648,   nil,   nil,   nil,   nil,   431,   nil,   627,   135,   172,
   nil,   282,    82,   nil,   nil,   nil,  2651,   331,   188,   100,
   361,   418,   448,   478,   nil,   480,   nil,   -57,   -58,   518,
   553,   640,   641,   642,   643,   751,   346,   433,   982,  1028,
   335,   422,   509,  2912,  3432,  3443,   nil,   nil,   nil,  3100,
   nil,   nil,   nil,   nil,   658,  3435,   nil,   181,   nil,   725,
   703,   nil,   656,   674,   nil,  2697,   nil,   581,   729,   nil,
   516,   537,   730,   nil,   nil,   nil,   657,   586,   nil,   nil,
  2743,   nil,   665,   676,  2629,   660,   nil,    96,   nil,   nil,
   nil,   260,   686,   588,   740,   nil,  2789,   518,   nil,  2835,
  2881,   nil,   595,   nil,  2903,   678,   nil,   nil,   692,   nil,
   nil,   nil,    -4,   nil,  3455,  3466,   nil,   694,   605,   nil,
   675,   nil ]

racc_action_default = [
    -6,  -225,  -214,    -2,    -4,  -225,    -7,    -9,   -10,   -11,
   -12,  -225,  -225,  -225,   -46,   -47,   -53,  -225,  -225,    -1,
  -215,  -216,  -218,  -219,    -5,   -15,   -19,  -225,  -225,  -225,
  -101,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,   392,    -3,  -217,    -8,  -225,
  -225,  -225,  -225,   -20,   -22,   -23,   -24,  -101,  -225,   -32,
  -224,  -129,  -127,  -225,   -54,  -225,    -6,   -15,   -16,  -225,
  -225,  -225,   -39,   -40,  -214,   -33,  -101,   -56,  -225,  -125,
  -126,  -128,   -29,  -102,  -214,  -225,   -17,   -21,   -29,  -225,
  -225,  -215,   -35,   -37,  -225,  -225,  -214,   -57,   -59,  -208,
  -210,   -62,  -225,  -225,  -225,   -67,   -68,   -69,   -70,   -71,
  -210,   -73,  -210,  -225,  -161,  -101,  -178,  -169,  -178,  -109,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -220,  -220,
  -137,  -225,  -225,  -142,  -143,  -225,  -225,  -225,  -225,  -225,
  -170,  -172,  -225,  -174,  -225,  -131,  -225,  -135,  -101,  -225,
  -215,  -225,    -6,   -18,   -25,   -38,  -101,  -225,   -31,   -34,
  -101,  -101,   -29,   -98,   -99,   -48,   -55,  -215,  -225,   -60,
  -209,  -161,  -169,  -178,  -178,  -180,  -211,  -225,  -225,  -225,
   -78,  -225,  -225,  -225,  -225,  -180,  -180,  -225,  -225,  -225,
   -91,   -94,   -95,  -225,  -171,  -180,  -225,  -225,  -225,  -175,
  -103,  -221,  -222,  -120,  -138,  -101,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -144,  -225,  -142,  -143,  -157,  -225,  -158,
  -159,  -225,  -225,  -225,  -135,  -134,  -225,   -27,  -225,  -101,
   -52,   -56,   -13,  -225,   -41,  -101,   -36,  -225,   -97,   -58,
   -64,  -212,  -181,   -56,   -85,   -86,   -56,  -225,  -225,  -225,
  -225,   -81,   -82,   -83,   -84,   -56,  -139,  -140,  -212,  -212,
   -75,   -76,  -127,  -176,  -177,  -101,  -225,  -106,  -225,  -225,
  -107,  -108,  -104,  -225,  -223,  -220,  -121,  -225,  -225,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -162,  -163,  -164,  -165,  -166,  -167,  -145,  -160,  -168,  -225,
  -101,  -130,  -132,  -133,  -136,  -101,   -30,   -50,   -51,  -225,
  -225,  -101,   -42,  -225,   -61,  -225,  -213,   -87,  -225,   -77,
  -225,  -225,  -225,   -72,   -74,   -92,   -93,  -100,  -179,  -183,
  -225,  -118,  -225,  -220,  -225,  -225,  -141,  -225,   -28,   -49,
   -14,   -44,   -29,  -182,  -225,   -88,  -225,   -56,   -65,  -225,
  -225,   -66,  -105,  -119,  -225,  -123,  -124,  -173,  -225,   -45,
   -96,   -63,  -225,   -90,   -79,   -80,  -122,   -29,   -56,   -43,
   -87,   -89 ]

racc_goto_table = [
    69,    10,    57,    30,    58,    75,    57,   105,   159,   263,
   103,   247,    67,   124,   164,   296,   190,   127,   128,   202,
    71,    10,   245,   209,    59,    10,   180,    65,    94,   187,
   155,   192,    76,    63,   174,    85,    66,   364,     3,   334,
   185,     1,    80,   210,   213,     2,    77,    62,   163,   201,
   195,    19,   196,   248,    84,    86,   343,   344,    56,   102,
    81,    57,   233,   234,   165,    67,    20,   169,   162,    24,
   378,   261,    28,    87,   156,   259,    95,    10,   179,   209,
    65,   278,   279,    57,   188,   166,    97,    86,   258,    66,
   391,   288,   267,   369,   256,   260,   370,   200,   333,   293,
   295,   354,   262,   124,   154,   214,   236,   127,   128,   323,
   276,   277,   262,   262,   253,   281,   nil,   nil,   nil,   nil,
   287,   nil,   262,   289,   290,   291,    79,   292,   215,   284,
   nil,   191,   251,   100,   nil,   nil,   nil,   nil,   nil,   297,
    58,   254,    57,   161,   249,   nil,   257,   nil,   101,   nil,
   nil,   nil,   nil,   nil,   nil,   176,   nil,   nil,   160,    57,
   265,    10,   nil,    10,   235,   237,   239,   240,   nil,   nil,
   177,   329,   324,   328,   nil,   nil,   386,   124,   358,   345,
   nil,   127,   128,   337,   294,   322,   338,   174,   nil,   124,
   298,   283,   124,   127,   128,   342,   127,   128,   nil,   nil,
   352,   124,   nil,   347,   388,   127,   128,   268,   nil,   346,
   nil,   nil,   nil,   nil,   nil,   321,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   327,   nil,   nil,   320,   nil,   156,
   332,   nil,   nil,   nil,   299,   300,   301,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   nil,   363,   nil,   nil,   nil,   319,   174,   374,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   372,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,
   375,   nil,   nil,   382,   nil,   nil,   nil,   383,   nil,   nil,
   nil,   nil,   nil,   124,   nil,   357,   nil,   127,   128,   nil,
   297,   nil,   nil,   389,   nil,   nil,   361,   nil,   390,   nil,
    58,   249,    57,   nil,   124,   nil,   nil,   330,   127,   128,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   265,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,   385 ]

racc_goto_check = [
    14,    12,    77,    15,     8,    21,    77,    37,    22,    47,
    28,    24,    15,    52,    22,    67,    53,    61,    63,    59,
    35,    12,    71,    75,    13,    12,    46,    12,     7,    46,
    70,    46,    14,    18,    61,    26,    20,    48,     4,    44,
    42,     1,    21,    65,    65,     2,    15,    16,    17,    28,
    42,     3,    42,    23,    25,    15,    44,    44,     4,    27,
    29,    77,    46,    46,    30,    15,     5,    26,    14,     5,
    31,    43,    34,    36,    15,    39,    13,    12,    41,    75,
    12,    43,    43,    77,    49,    15,    18,    15,    22,    20,
    48,    43,    53,    55,    28,    46,    56,    58,    60,    62,
    66,    68,    46,    52,    69,    72,    74,    61,    63,    71,
    46,    46,    46,    46,     7,    46,   nil,   nil,   nil,   nil,
    46,   nil,    46,    46,    46,    46,     5,    46,    15,    61,
   nil,    54,    14,     3,   nil,   nil,   nil,   nil,   nil,    52,
     8,    21,    77,     3,    15,   nil,    21,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,     5,    77,
    14,    12,   nil,    12,    54,    54,    54,    54,   nil,   nil,
     5,    37,    52,    28,   nil,   nil,    67,    52,    24,    59,
   nil,    61,    63,    37,    14,    70,    37,    61,   nil,    52,
    21,    35,    52,    61,    63,    37,    61,    63,   nil,   nil,
    65,    52,   nil,    46,    47,    61,    63,    54,   nil,    28,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,    15,   nil,    15,
    21,   nil,   nil,   nil,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,   nil,    46,   nil,   nil,   nil,    54,    61,    65,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
    52,   nil,   nil,    46,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,   nil,    52,   nil,    21,   nil,    61,    63,   nil,
    52,   nil,   nil,    22,   nil,   nil,    21,   nil,    37,   nil,
     8,    15,    77,   nil,    52,   nil,   nil,     5,    61,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,    54 ]

racc_goto_pointer = [
   nil,    41,    45,    49,    38,    64,   nil,   -48,   -20,   nil,
   nil,   nil,     1,    -1,   -27,   -14,    21,   -48,     7,   nil,
    10,   -25,   -84,  -105,  -147,   -15,   -34,   -27,   -76,    -8,
   -35,  -291,   nil,   nil,    56,    -8,     2,   -80,   nil,  -102,
   nil,   -31,   -70,  -114,  -222,   nil,   -83,  -178,  -300,   -29,
   nil,   nil,   -74,   -97,    18,  -247,  -245,   nil,   -28,  -106,
  -159,   -70,  -111,   -69,   nil,   -95,  -113,  -198,  -196,    16,
   -58,  -135,   -36,   nil,   -40,  -105,   nil,   -18,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   116,   nil,   212,   125,   nil,   nil,   nil,    64,
   118,   104,   nil,   nil,   nil,   nil,   nil,   nil,   250,   nil,
   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   106,   107,
   108,   nil,   nil,   nil,   nil,   111,   119,   nil,   nil,   nil,
   115,   117,   181,   nil,   143,   269,   270,   365,   nil,   nil,
   172,   182,   nil,   184,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   140,   141,   144,   204,   151,    21,   211 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 103, :_reduce_1,
  1, 104, :_reduce_2,
  3, 104, :_reduce_3,
  1, 106, :_reduce_4,
  2, 106, :_reduce_5,
  0, 109, :_reduce_6,
  1, 109, :_reduce_7,
  3, 109, :_reduce_8,
  1, 110, :_reduce_9,
  1, 110, :_reduce_10,
  1, 110, :_reduce_11,
  1, 110, :_reduce_12,
  7, 112, :_reduce_13,
  9, 113, :_reduce_14,
  0, 115, :_reduce_15,
  2, 115, :_reduce_16,
  0, 119, :_reduce_17,
  6, 108, :_reduce_18,
  0, 118, :_reduce_19,
  1, 118, :_reduce_20,
  3, 118, :_reduce_21,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 121, :_reduce_25,
  0, 125, :_reduce_26,
  1, 125, :_reduce_27,
  3, 125, :_reduce_28,
  0, 124, :_reduce_29,
  3, 124, :_reduce_30,
  6, 114, :_reduce_31,
  0, 127, :_reduce_32,
  1, 127, :_reduce_33,
  3, 127, :_reduce_34,
  2, 128, :_reduce_35,
  3, 129, :_reduce_36,
  1, 129, :_reduce_37,
  4, 122, :_reduce_38,
  1, 131, :_reduce_none,
  1, 131, :_reduce_40,
  2, 132, :_reduce_41,
  3, 132, :_reduce_42,
  7, 132, :_reduce_43,
  0, 133, :_reduce_44,
  1, 133, :_reduce_45,
  1, 111, :_reduce_46,
  1, 111, :_reduce_47,
  6, 134, :_reduce_48,
  8, 135, :_reduce_49,
  2, 126, :_reduce_50,
  2, 126, :_reduce_51,
  1, 126, :_reduce_52,
  0, 136, :_reduce_53,
  2, 136, :_reduce_54,
  2, 139, :_reduce_55,
  0, 140, :_reduce_56,
  1, 140, :_reduce_57,
  3, 140, :_reduce_58,
  1, 141, :_reduce_59,
  2, 141, :_reduce_60,
  4, 141, :_reduce_61,
  1, 141, :_reduce_62,
  6, 141, :_reduce_63,
  3, 141, :_reduce_64,
  5, 141, :_reduce_65,
  5, 141, :_reduce_66,
  1, 141, :_reduce_67,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_71,
  4, 141, :_reduce_72,
  1, 141, :_reduce_73,
  4, 141, :_reduce_74,
  3, 153, :_reduce_75,
  3, 152, :_reduce_76,
  3, 151, :_reduce_77,
  1, 151, :_reduce_none,
  5, 155, :_reduce_79,
  5, 155, :_reduce_80,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 150, :_reduce_87,
  1, 150, :_reduce_88,
  5, 150, :_reduce_89,
  2, 159, :_reduce_90,
  2, 142, :_reduce_91,
  3, 160, :_reduce_92,
  3, 160, :_reduce_93,
  1, 160, :_reduce_94,
  1, 160, :_reduce_95,
  6, 130, :_reduce_96,
  3, 130, :_reduce_97,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_100,
  0, 123, :_reduce_101,
  2, 123, :_reduce_102,
  0, 164, :_reduce_103,
  1, 164, :_reduce_104,
  3, 164, :_reduce_105,
  3, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 147, :_reduce_108,
  1, 166, :_reduce_109,
  1, 166, :_reduce_110,
  1, 166, :_reduce_111,
  1, 166, :_reduce_112,
  1, 166, :_reduce_113,
  1, 166, :_reduce_114,
  1, 166, :_reduce_115,
  1, 166, :_reduce_116,
  1, 166, :_reduce_117,
  4, 166, :_reduce_118,
  5, 166, :_reduce_119,
  0, 168, :_reduce_120,
  1, 168, :_reduce_121,
  4, 168, :_reduce_122,
  3, 169, :_reduce_123,
  2, 170, :_reduce_none,
  2, 137, :_reduce_125,
  2, 137, :_reduce_126,
  1, 137, :_reduce_127,
  2, 137, :_reduce_128,
  0, 138, :_reduce_129,
  4, 138, :_reduce_130,
  1, 171, :_reduce_131,
  3, 171, :_reduce_132,
  3, 172, :_reduce_133,
  2, 172, :_reduce_134,
  0, 173, :_reduce_135,
  2, 173, :_reduce_136,
  1, 148, :_reduce_137,
  2, 148, :_reduce_138,
  3, 148, :_reduce_139,
  3, 148, :_reduce_140,
  4, 175, :_reduce_141,
  1, 174, :_reduce_142,
  1, 174, :_reduce_143,
  2, 174, :_reduce_144,
  3, 174, :_reduce_145,
  3, 156, :_reduce_146,
  3, 156, :_reduce_147,
  3, 156, :_reduce_148,
  3, 156, :_reduce_149,
  3, 156, :_reduce_150,
  3, 156, :_reduce_151,
  3, 156, :_reduce_152,
  3, 156, :_reduce_153,
  3, 156, :_reduce_154,
  3, 156, :_reduce_155,
  3, 156, :_reduce_156,
  2, 156, :_reduce_157,
  2, 156, :_reduce_158,
  2, 156, :_reduce_159,
  3, 156, :_reduce_160,
  1, 156, :_reduce_161,
  3, 176, :_reduce_162,
  3, 176, :_reduce_163,
  3, 176, :_reduce_164,
  3, 176, :_reduce_165,
  3, 176, :_reduce_166,
  3, 176, :_reduce_167,
  3, 176, :_reduce_168,
  1, 154, :_reduce_169,
  1, 154, :_reduce_170,
  2, 154, :_reduce_171,
  1, 154, :_reduce_none,
  5, 154, :_reduce_173,
  1, 154, :_reduce_174,
  2, 178, :_reduce_175,
  3, 165, :_reduce_176,
  3, 165, :_reduce_177,
  0, 177, :_reduce_178,
  3, 177, :_reduce_179,
  0, 145, :_reduce_180,
  1, 145, :_reduce_181,
  3, 145, :_reduce_182,
  4, 163, :_reduce_183,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_207,
  0, 143, :_reduce_208,
  1, 143, :_reduce_none,
  0, 144, :_reduce_210,
  1, 144, :_reduce_none,
  0, 146, :_reduce_212,
  1, 146, :_reduce_none,
  0, 105, :_reduce_214,
  1, 105, :_reduce_215,
  1, 107, :_reduce_216,
  2, 107, :_reduce_217,
  1, 179, :_reduce_218,
  1, 179, :_reduce_none,
  0, 167, :_reduce_220,
  1, 167, :_reduce_none,
  1, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 116, :_reduce_224 ]

racc_reduce_n = 225

racc_shift_n = 392

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kBLOCK_GIVEN => 30,
  :kYIELD => 31,
  :kDTYPE_UINT => 32,
  :kDTYPE_LINT => 33,
  :kDTYPE_LLINT => 34,
  :kDTYPE_CHAR => 35,
  :kDTYPE_I8 => 36,
  :kDTYPE_I16 => 37,
  :kDTYPE_I32 => 38,
  :kDTYPE_I64 => 39,
  :kDTYPE_UI8 => 40,
  :kDTYPE_UI16 => 41,
  :kDTYPE_UI32 => 42,
  :kDTYPE_UI64 => 43,
  :kDTYPE_INT => 44,
  :kDTYPE_F32 => 45,
  :kDTYPE_F64 => 46,
  :kDTYPE_LF64 => 47,
  :kDTYPE_ROBJ => 48,
  :kDTYPE_ULINT => 49,
  :kDTYPE_ULLINT => 50,
  :kDTYPE_VOID => 51,
  :kDTYPE_SIZE_T => 52,
  :kDTYPE_RB_STR => 53,
  :kDTYPE_UCHAR => 54,
  :tCUSTOM_DTYPE => 55,
  :tLPAREN => 56,
  :tRPAREN => 57,
  :tLSQUARE => 58,
  :tRSQUARE => 59,
  :tIDENTIFIER => 60,
  :tNL => 61,
  :tCOMMA => 62,
  :tSQUOTE => 63,
  :tSCOLON => 64,
  :EOF => 65,
  :tDOT => 66,
  :tQMARK => 67,
  :tSYMBOL => 68,
  :tLBRACE => 69,
  :tRBRACE => 70,
  :tPLUS => 71,
  :tMINUS => 72,
  :tSTAR => 73,
  :tDIVIDE => 74,
  :tEXPO => 75,
  :tMODULUS => 76,
  :tASSIGN => 77,
  :tEQ => 78,
  :tLT => 79,
  :tLTEQ => 80,
  :tGT => 81,
  :tGTEQ => 82,
  :tANDOP => 83,
  :tOROP => 84,
  :tBANG => 85,
  :tOP_ASSIGN => 86,
  :tSTRING => 87,
  :kSIZEOF => 88,
  :tBIT_AND => 89,
  :tBIT_OR => 90,
  :tBIT_XOR => 91,
  :tBIT_LSHIFT => 92,
  :tBIT_RSHIFT => 93,
  :tBIT_NOT => 94,
  :tINTEGER => 95,
  :tFLOAT => 96,
  :tSINGLE_CHAR => 97,
  :ADDRESS_OF => 98,
  :TYPECAST => 99,
  :UMINUS => 100,
  :tNEQ => 101 }

racc_nt_base = 102

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "@1",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_18(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_19(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_25(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_27(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_28(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_29(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_30(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_31(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_33(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_35(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_36(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_37(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_38(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_41(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_42(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_43(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_44(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_48(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_49(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_50(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_51(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_52(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_53(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_54(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_56(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_57(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_58(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_59(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_60(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_61(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_62(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_63(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_64(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_65(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_66(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_71(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_72(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_73(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_74(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_75(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_76(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_77(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_79(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_80(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_88(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_89(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_90(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_91(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_92(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_93(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_96(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_97(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_100(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_101(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_102(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_103(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_104(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_105(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_106(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_107(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_108(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_119(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_122(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_123(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_126(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_127(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_128(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_129(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_130(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_131(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_132(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_133(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_134(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_135(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_137(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_138(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_141(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_144(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_157(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_158(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_159(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_168(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_170(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_171(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_173(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_174(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_175(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_176(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_177(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_178(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_180(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_181(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_182(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_183(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_207(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_208(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_210(val, _values, result)
    
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_212(val, _values, result)
    
    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_215(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 644)
  def _reduce_217(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_218(val, _values, result)
    
    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_220(val, _values, result)
    
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_224(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
