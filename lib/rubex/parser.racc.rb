#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 643)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'102,103,105,249,259,249,60,106,107,184,67,123,124,125,13,83,92,67,180',
'181,333,127,113,334,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,136,66,128,64,116,64,61,356,264,190,156,191',
'126,129,226,155,137,22,298,227,23,180,181,132,83,180,181,180,181,135',
'188,122,142,138,16,102,103,105,139,119,120,121,106,107,180,181,123,124',
'125,13,13,92,18,12,11,17,127,113,25,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,136,191,128,190,116,22,22,184',
'23,23,79,26,126,129,355,22,137,307,23,27,327,326,306,132,193,29,247',
'183,80,135,83,122,142,138,16,102,103,105,139,119,120,121,106,107,180',
'181,123,124,125,13,13,92,180,181,11,17,127,113,55,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,136,16,128,62',
'116,82,22,79,64,23,160,160,126,129,162,162,137,13,83,68,12,11,17,132',
'190,80,191,83,83,135,64,122,142,138,16,102,103,105,139,119,120,121,106',
'107,72,240,123,124,125,13,13,92,180,181,11,17,127,113,83,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,136,16,128',
'64,116,162,22,368,22,23,78,23,126,129,180,181,137,13,83,81,83,11,17',
'132,22,22,61,23,23,135,147,122,142,138,16,102,103,105,139,119,120,121',
'106,107,180,181,123,124,125,13,13,92,180,181,11,17,127,113,64,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,136',
'157,128,159,116,164,201,202,203,204,205,206,126,129,180,181,137,201',
'202,203,204,205,206,132,207,208,209,210,211,135,167,122,142,138,182',
'102,103,105,139,119,120,121,106,107,180,181,123,124,125,13,22,92,22',
'23,192,23,127,113,64,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,136,64,128,225,116,228,201,202,203,204,205,206',
'126,129,180,181,137,201,202,203,204,205,206,132,207,208,209,210,211',
'135,230,122,142,138,64,102,103,105,139,119,120,121,106,107,64,331,123',
'124,125,13,329,92,236,328,180,181,127,113,241,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,136,147,128,191,116',
'184,201,202,203,204,205,206,126,129,344,345,137,203,204,205,206,254',
'255,132,207,208,209,210,211,135,190,122,142,138,247,102,103,105,139',
'119,120,121,106,107,256,257,123,124,125,13,251,92,203,204,205,206,127',
'113,262,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,136,267,128,268,116,123,124,125,180,181,180,181,126,129',
'64,127,137,201,202,203,204,205,206,132,344,345,300,205,64,135,230,122',
'142,138,147,167,208,209,139,119,120,121,136,320,128,321,171,123,124',
'125,180,205,205,205,126,129,205,127,137,201,202,203,204,205,206,132',
'184,337,340,341,346,135,349,122,142,138,268,207,208,209,139,119,120',
'121,136,351,128,64,171,123,124,125,354,147,359,184,126,129,83,127,137',
'201,202,203,204,205,206,132,370,147,,,,135,,122,142,138,,207,208,209',
'139,119,120,121,136,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,',
',132,,,,,,135,,122,142,138,,,,,139,119,120,121,178,,128,,171,123,124',
'125,16,338,,,126,129,,127,137,,,,,,,,13,,,,11,17,,122,142,138,,,,,139',
'119,120,121,136,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,22,,132',
'23,,,,,135,,122,142,138,,,,,139,119,120,121,136,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,,,,,,,135,,122,142,138,,,,,139,119,120,121',
'136,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,132,,,,,,135,,122',
'142,138,,,,,139,119,120,121,136,,128,,171,123,124,125,,,,,126,129,,127',
'137,,,,,,,132,,,,,,135,,122,142,138,,,,,139,119,120,121,178,,128,,171',
'123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119',
'120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,',
',122,142,138,,,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129',
',127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,136,,128,,171',
'123,124,125,,,,,126,129,,127,137,,,,,,,132,,,,,,135,,122,142,138,,,',
',139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,,,,',
',,,,,,,,,,122,142,138,,,,,139,119,120,121,136,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,132,,,,,,135,,122,142,138,,,,,139,119,120',
'121,136,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,132,,,,,,135',
',122,142,138,,,,,139,119,120,121,136,,128,,171,123,124,125,,,,,126,129',
',127,137,,,,,,,132,,,,,,135,,122,142,138,,,,,139,119,120,121,136,,128',
',171,123,124,125,,,,,126,129,,127,137,,,,,,,132,,,,,,135,,122,142,138',
',,,,139,119,120,121,136,,128,,171,123,124,125,,,,,126,129,,127,137,',
',,,,,132,,,,,,135,,122,142,138,,,,,139,119,120,121,136,,128,,171,123',
'124,125,,,,,126,129,,127,137,,,,,,,132,,,,,,135,,122,142,138,,,,,139',
'119,120,121,136,,128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,132',
',,,,,135,,122,142,138,,,,,139,119,120,121,136,,128,,171,123,124,125',
',,,,126,129,,127,137,,123,124,125,,,132,,,,,127,135,,122,142,138,,,',
',139,119,120,121,136,,128,,171,,,,,123,124,125,126,129,,128,137,171',
',127,,,,132,,126,129,,,135,,122,142,138,,,,,139,119,120,121,,,122,142',
'178,,128,,171,,119,120,121,123,124,125,126,129,,,137,,,127,,,,,,,,,',
',,122,142,138,,,,,139,119,120,121,,,,,178,,128,,171,123,124,125,,,,',
'126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178,',
'128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138',
',,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,',
',,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178',
',128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138',
',,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,',
',,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178',
',128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138',
',,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,',
',,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178',
',128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138',
',,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,',
',,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178,,128,,171,123,124,125',
',,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138,,,,,139,119,120,121,178',
',128,,171,123,124,125,,,,,126,129,,127,137,,,,,,,,,,,,,,,122,142,138',
',,,,139,119,120,121,178,,128,,171,123,124,125,,,,,126,129,,127,137,',
'123,124,125,,,,,,,,127,,,122,142,138,,,,,139,119,120,121,178,,128,,171',
',,,,123,124,125,126,129,,128,137,171,,127,,,,,,126,129,,,,,122,142,138',
',,,,139,119,120,121,,,122,142,136,,128,,171,,119,120,121,123,124,125',
'126,129,,,137,,,127,,,,132,,,,,,135,,122,142,138,,,,,139,119,120,121',
',,,,136,,128,,171,123,124,125,,,,,126,129,,127,137,,123,124,125,,,132',
',,,,127,135,,122,142,138,,,,,139,119,120,121,136,,128,,171,,,,,123,124',
'125,126,129,,128,137,171,,127,,,,132,,126,129,,,135,,122,142,138,,,',
',139,119,120,121,,,122,142,136,,128,,171,,119,120,121,123,124,125,126',
'129,,,137,,,127,,,,132,,,,,,135,,122,142,138,,,,,139,119,120,121,,,',
',178,,128,,171,123,124,125,,,,,126,129,,127,137,,123,124,125,,,,,,,',
'127,,,122,142,138,,,,,139,119,120,121,178,,128,,171,,,,,,,,126,129,',
'128,137,171,,,,,,,,126,129,,,,,122,142,138,238,,,,139,119,120,121,,',
'122,142,,,,13,,92,119,120,121,,,,,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,299,,,,,22,,,23,,,,,,201,202,203',
'204,205,206,,212,214,215,216,217,,,,,,299,207,208,209,210,211,,,,,,',
',213,201,202,203,204,205,206,,,,,,,,13,,92,,,207,208,209,210,211,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'315,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,,,,,,22,,,23,201,202,203,204,205,206,,212,214,215',
'216,217,,,,,,,207,208,209,210,211,,,,,,,,213,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,-25,,,,,-25,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,146',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,,,,,146,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,201,202,203,204,205,206,,,254,255,256',
'257,201,202,203,204,205,206,207,208,209,210,211,201,202,203,204,205',
'206,,207,208,209,210,211,201,202,203,204,205,206,207,208,209,210,211',
'201,202,203,204,205,206,,207,208,209,210,211,201,202,203,204,205,206',
'207,208,209,210,211,,,,,,,,207,208,209,210,211' ]
        racc_action_table = arr = ::Array.new(3130, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'77,77,77,175,179,360,25,77,77,279,28,77,77,77,77,280,77,184,112,112',
'279,77,77,280,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,28,77,175,77,360,25,339,184,116,92,116,77,77,143',
'92,77,2,219,143,2,179,179,77,339,175,175,360,360,77,116,77,77,77,20',
'166,166,166,77,77,77,77,166,166,219,219,166,166,166,166,20,166,1,20',
'20,20,166,166,11,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,264,166,118,166,166',
'20,114,166,20,264,12,166,166,335,5,166,232,5,13,271,270,232,166,118',
'16,270,114,264,166,335,166,166,166,24,235,235,235,166,166,166,166,235',
'235,271,271,235,235,235,235,24,235,168,168,24,24,235,235,18,235,235',
'235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235',
'235,235,235,235,235,235,0,235,26,235,69,24,66,27,24,97,308,235,235,97',
'308,235,0,69,29,0,0,0,235,171,66,171,97,308,235,59,235,235,235,149,248',
'248,248,235,235,235,235,248,248,61,153,248,248,248,248,149,248,174,174',
'149,149,248,248,153,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,70,248,62,248,243',
'149,365,74,149,65,74,248,248,246,246,248,70,243,67,365,70,70,248,84',
'86,71,84,86,248,82,248,248,248,151,251,251,251,248,248,248,248,251,251',
'263,263,251,251,251,251,151,251,269,269,151,151,251,251,85,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,93,251,95,251,98,292,292,292,292,292,292,251,251',
'272,272,251,288,288,288,288,288,288,251,292,292,292,292,292,251,100',
'251,251,251,113,259,259,259,251,251,251,251,259,259,273,273,259,259',
'259,259,99,259,237,99,117,237,259,259,128,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,129,259,142,259,145,293,293,293,293,293,293,259,259,274,274,259',
'289,289,289,289,289,289,259,293,293,293,293,293,259,146,259,259,259',
'148,345,345,345,259,259,259,259,345,345,277,277,345,345,345,345,275',
'345,150,275,317,317,345,345,154,345,345,345,345,345,345,345,345,345',
'345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,345,161',
'345,162,345,169,294,294,294,294,294,294,345,345,318,318,345,281,281',
'281,281,320,320,345,294,294,294,294,294,345,172,345,345,345,173,366',
'366,366,345,345,345,345,366,366,321,321,366,366,366,366,176,366,282',
'282,282,282,366,366,182,366,366,366,366,366,366,366,366,366,366,366',
'366,366,366,366,366,366,366,366,366,366,366,366,366,366,185,366,186',
'366,102,102,102,325,325,350,350,366,366,196,102,366,287,287,287,287',
'287,287,366,369,369,221,222,226,366,228,366,366,366,240,245,287,287',
'366,366,366,366,102,252,102,253,102,103,103,103,261,283,284,285,102',
'102,286,103,102,290,290,290,290,290,290,102,305,310,315,316,319,102',
'322,102,102,102,324,290,290,290,102,102,102,102,103,330,103,331,103',
'105,105,105,333,341,342,353,103,103,357,105,103,291,291,291,291,291',
'291,103,367,370,,,,103,,103,103,103,,291,291,291,103,103,103,103,105',
',105,,105,106,106,106,,,,,105,105,,106,105,,,,,,,105,,,,,,105,,105,105',
'105,,,,,105,105,105,105,106,,106,,106,107,107,107,311,311,,,106,106',
',107,106,,,,,,,,311,,,,311,311,,106,106,106,,,,,106,106,106,106,107',
',107,,107,131,131,131,,,,,107,107,,131,107,,,,,311,,107,311,,,,,107',
',107,107,107,,,,,107,107,107,107,131,,131,,131,135,135,135,,,,,131,131',
',135,131,,,,,,,,,,,,,131,,131,131,131,,,,,131,131,131,131,135,,135,',
'135,136,136,136,,,,,135,135,,136,135,,,,,,,135,,,,,,135,,135,135,135',
',,,,135,135,135,135,136,,136,,136,137,137,137,,,,,136,136,,137,136,',
',,,,,136,,,,,,136,,136,136,136,,,,,136,136,136,136,137,,137,,137,138',
'138,138,,,,,137,137,,138,137,,,,,,,,,,,,,,,137,137,137,,,,,137,137,137',
'137,138,,138,,138,139,139,139,,,,,138,138,,139,138,,,,,,,,,,,,,,,138',
'138,138,,,,,138,138,138,138,139,,139,,139,167,167,167,,,,,139,139,,167',
'139,,,,,,,,,,,,,,,139,139,139,,,,,139,139,139,139,167,,167,,167,178',
'178,178,,,,,167,167,,178,167,,,,,,,167,,,,,,167,,167,167,167,,,,,167',
'167,167,167,178,,178,,178,180,180,180,,,,,178,178,,180,178,,,,,,,,,',
',,,,,178,178,178,,,,,178,178,178,178,180,,180,,180,181,181,181,,,,,180',
'180,,181,180,,,,,,,180,,,,,,180,,180,180,180,,,,,180,180,180,180,181',
',181,,181,183,183,183,,,,,181,181,,183,181,,,,,,,181,,,,,,181,,181,181',
'181,,,,,181,181,181,181,183,,183,,183,188,188,188,,,,,183,183,,188,183',
',,,,,,183,,,,,,183,,183,183,183,,,,,183,183,183,183,188,,188,,188,190',
'190,190,,,,,188,188,,190,188,,,,,,,188,,,,,,188,,188,188,188,,,,,188',
'188,188,188,190,,190,,190,191,191,191,,,,,190,190,,191,190,,,,,,,190',
',,,,,190,,190,190,190,,,,,190,190,190,190,191,,191,,191,192,192,192',
',,,,191,191,,192,191,,,,,,,191,,,,,,191,,191,191,191,,,,,191,191,191',
'191,192,,192,,192,193,193,193,,,,,192,192,,193,192,,,,,,,192,,,,,,192',
',192,192,192,,,,,192,192,192,192,193,,193,,193,195,195,195,,,,,193,193',
',195,193,,198,198,198,,,193,,,,,198,193,,193,193,193,,,,,193,193,193',
'193,195,,195,,195,,,,,201,201,201,195,195,,198,195,198,,201,,,,195,',
'198,198,,,195,,195,195,195,,,,,195,195,195,195,,,198,198,201,,201,,201',
',198,198,198,202,202,202,201,201,,,201,,,202,,,,,,,,,,,,201,201,201',
',,,,201,201,201,201,,,,,202,,202,,202,203,203,203,,,,,202,202,,203,202',
',,,,,,,,,,,,,,202,202,202,,,,,202,202,202,202,203,,203,,203,204,204',
'204,,,,,203,203,,204,203,,,,,,,,,,,,,,,203,203,203,,,,,203,203,203,203',
'204,,204,,204,205,205,205,,,,,204,204,,205,204,,,,,,,,,,,,,,,204,204',
'204,,,,,204,204,204,204,205,,205,,205,206,206,206,,,,,205,205,,206,205',
',,,,,,,,,,,,,,205,205,205,,,,,205,205,205,205,206,,206,,206,207,207',
'207,,,,,206,206,,207,206,,,,,,,,,,,,,,,206,206,206,,,,,206,206,206,206',
'207,,207,,207,208,208,208,,,,,207,207,,208,207,,,,,,,,,,,,,,,207,207',
'207,,,,,207,207,207,207,208,,208,,208,209,209,209,,,,,208,208,,209,208',
',,,,,,,,,,,,,,208,208,208,,,,,208,208,208,208,209,,209,,209,210,210',
'210,,,,,209,209,,210,209,,,,,,,,,,,,,,,209,209,209,,,,,209,209,209,209',
'210,,210,,210,211,211,211,,,,,210,210,,211,210,,,,,,,,,,,,,,,210,210',
'210,,,,,210,210,210,210,211,,211,,211,212,212,212,,,,,211,211,,212,211',
',,,,,,,,,,,,,,211,211,211,,,,,211,211,211,211,212,,212,,212,213,213',
'213,,,,,212,212,,213,212,,,,,,,,,,,,,,,212,212,212,,,,,212,212,212,212',
'213,,213,,213,214,214,214,,,,,213,213,,214,213,,,,,,,,,,,,,,,213,213',
'213,,,,,213,213,213,213,214,,214,,214,215,215,215,,,,,214,214,,215,214',
',,,,,,,,,,,,,,214,214,214,,,,,214,214,214,214,215,,215,,215,216,216',
'216,,,,,215,215,,216,215,,,,,,,,,,,,,,,215,215,215,,,,,215,215,215,215',
'216,,216,,216,217,217,217,,,,,216,216,,217,216,,230,230,230,,,,,,,,230',
',,216,216,216,,,,,216,216,216,216,217,,217,,217,,,,,247,247,247,217',
'217,,230,217,230,,247,,,,,,230,230,,,,,217,217,217,,,,,217,217,217,217',
',,230,230,247,,247,,247,,230,230,230,268,268,268,247,247,,,247,,,268',
',,,247,,,,,,247,,247,247,247,,,,,247,247,247,247,,,,,268,,268,,268,328',
'328,328,,,,,268,268,,328,268,,332,332,332,,,268,,,,,332,268,,268,268',
'268,,,,,268,268,268,268,328,,328,,328,,,,,344,344,344,328,328,,332,328',
'332,,344,,,,328,,332,332,,,328,,328,328,328,,,,,328,328,328,328,,,332',
'332,344,,344,,344,,332,332,332,347,347,347,344,344,,,344,,,347,,,,344',
',,,,,344,,344,344,344,,,,,344,344,344,344,,,,,347,,347,,347,348,348',
'348,,,,,347,347,,348,347,,352,352,352,,,,,,,,352,,,347,347,347,,,,,347',
'347,347,347,348,,348,,348,,,,,,,,348,348,,352,348,352,,,,,,,,352,352',
',,,,348,348,348,152,,,,348,348,348,348,,,352,352,,,,152,,152,352,352',
'352,,,,,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152',
'152,152,152,152,152,152,152,152,152,220,,,,,152,,,152,,,,,,220,220,220',
'220,220,220,,220,220,220,220,220,,,,,,258,220,220,220,220,220,,,,,,',
',220,258,258,258,258,258,258,,,,,,,,73,,73,,,258,258,258,258,258,73',
'73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'241,,,,,,,,,,241,241,241,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,94,94,94,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,94,94,94,94,94,94,94,,,,,,94,,,94,133,133,133,133',
'133,133,,133,133,133,133,133,,,,,,,133,133,133,133,133,,,,,,,,133,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,,147,,,,,147,78,78,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,,,,,78,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,,,,,227,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,177,177,177,177,177,177,,,177,177',
'177,177,295,295,295,295,295,295,177,177,177,177,177,296,296,296,296',
'296,296,,295,295,295,295,295,297,297,297,297,297,297,296,296,296,296',
'296,362,362,362,362,362,362,,297,297,297,297,297,363,363,363,363,363',
'363,362,362,362,362,362,,,,,,,,363,363,363,363,363' ]
        racc_action_check = arr = ::Array.new(3130, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   213,   100,     8,   nil,   nil,    89,   nil,   nil,   nil,   nil,
   nil,    50,    59,    94,   nil,   nil,   132,  2877,   189,   nil,
    80,   nil,   nil,   nil,   163,   -21,   203,   165,    -7,   171,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   187,
  2901,   202,   243,  2925,   nil,   255,   158,   253,   nil,   163,
   296,   248,   nil,  2666,   248,   nil,   nil,    -4,  2819,   nil,
   nil,   nil,   275,   nil,   264,   298,   265,   nil,   nil,   nil,
   nil,   nil,     7,   378,  2724,   325,   nil,   172,   382,   373,
   404,   nil,   619,   661,   nil,   703,   745,   787,   nil,   nil,
   nil,   nil,   -61,   396,    76,   nil,     5,   361,    82,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   381,   407,
   nil,   829,  2949,  2718,   nil,   871,   913,   955,   997,  1039,
   nil,   nil,   414,     9,   nil,   412,   420,  2788,   440,   246,
   512,   329,  2574,   203,   448,   nil,   nil,   nil,   nil,   nil,
   nil,   495,   495,   nil,   nil,   nil,    79,  1081,   104,   489,
   nil,   186,   524,   522,   187,    -6,   582,  2982,  1123,   -10,
  1165,  1207,   548,  1249,     0,   572,   559,   nil,  1291,   nil,
  1333,  1375,  1417,  1459,   nil,  1501,   586,   nil,  1514,   nil,
   nil,  1547,  1593,  1635,  1677,  1719,  1761,  1803,  1845,  1887,
  1929,  1971,  2013,  2055,  2097,  2139,  2181,  2223,   nil,    13,
  2573,   602,   585,   nil,   nil,  2973,   600,  2848,   586,   nil,
  2236,   nil,    95,   nil,   nil,   162,   nil,   375,   nil,   nil,
   611,  2700,   nil,   246,   nil,   658,   232,  2269,   245,   nil,
   nil,   328,   616,   618,   nil,   nil,   nil,   nil,  2604,   411,
   nil,   600,   nil,   262,    78,   nil,   nil,   nil,  2315,   270,
    99,    96,   315,   345,   398,   458,   nil,   450,   nil,   -53,
   -54,   494,   529,   609,   610,   611,   614,   579,   330,   413,
   621,   663,   319,   402,   485,  2994,  3005,  3017,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   633,  2997,   nil,   173,   nil,
   693,   803,   nil,   nil,   nil,   641,   645,   438,   553,   696,
   492,   513,   698,   nil,   632,   558,   nil,   nil,  2357,   nil,
   648,   659,  2370,   644,   nil,    92,   nil,   nil,   nil,     3,
   nil,   670,   720,   nil,  2403,   494,   nil,  2449,  2491,   nil,
   560,   nil,  2504,   662,   nil,   nil,   nil,   658,   nil,   nil,
    -4,   nil,  3028,  3040,   nil,   248,   577,   684,   nil,   646,
   686,   nil,   nil ]

racc_action_default = [
    -6,  -212,  -201,    -2,    -4,  -212,    -7,    -9,   -10,   -11,
   -12,  -212,  -212,  -212,   -45,   -46,   -52,  -212,  -212,    -1,
  -202,  -203,  -205,  -206,    -5,   -15,   -18,  -212,  -212,  -212,
   -95,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,
  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,   373,    -3,  -204,    -8,  -212,
  -212,  -212,  -212,   -31,  -211,  -123,  -121,  -212,   -53,  -212,
    -6,   -15,   -16,  -212,  -201,   -32,   -95,   -55,  -212,  -119,
  -120,  -122,   -28,   -96,  -201,  -212,  -212,   -19,   -21,   -22,
   -23,   -95,  -212,  -212,  -202,   -34,   -36,  -212,  -212,  -201,
   -56,   -58,  -212,  -173,   -61,  -212,  -212,  -212,   -66,   -67,
   -68,   -69,   -70,  -212,  -155,   -95,  -171,  -163,  -171,  -103,
  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -207,  -207,
  -131,  -212,  -212,  -136,  -137,  -212,  -212,  -212,  -212,  -212,
  -164,  -166,  -212,  -212,  -125,  -212,  -129,   -95,  -212,  -202,
  -212,    -6,  -212,  -212,  -212,   -38,   -39,   -30,   -33,   -95,
   -95,   -28,   -92,   -93,   -47,   -54,  -202,  -212,   -59,  -155,
  -163,  -171,  -171,   -60,  -174,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,   -85,   -88,   -89,  -212,  -165,
  -173,  -212,  -212,  -212,  -168,   -97,  -208,  -209,  -114,  -132,
   -95,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,
  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -212,  -138,  -212,
  -136,  -137,  -151,  -152,  -153,  -212,  -212,  -212,  -129,  -128,
  -212,   -26,  -212,   -95,   -51,   -55,   -13,  -212,   -17,   -20,
   -28,  -212,   -35,  -212,   -91,   -57,   -63,  -212,   -55,   -79,
   -80,   -55,  -212,  -212,   -75,   -76,   -77,   -78,  -212,   -55,
  -133,  -134,   -71,   -72,  -121,  -169,  -170,   -95,  -212,  -100,
  -212,  -212,  -101,  -102,   -98,  -212,  -210,  -207,  -115,  -212,
  -212,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -156,  -157,  -158,  -159,  -160,  -161,  -139,  -154,
  -162,   -95,  -124,  -126,  -127,  -130,   -95,   -29,   -49,   -50,
  -212,  -212,   -24,   -37,   -95,  -212,  -212,  -175,   -81,  -212,
  -212,  -212,  -212,   -86,   -87,   -94,  -172,  -176,  -212,  -112,
  -212,  -207,  -212,  -212,  -135,  -212,   -27,   -48,   -14,   -40,
   -95,   -28,  -212,   -82,  -212,   -55,   -64,  -212,  -212,   -65,
   -99,  -113,  -212,  -117,  -118,  -167,   -95,   -41,   -90,   -62,
  -212,   -84,   -73,   -74,  -116,   -43,   -55,  -212,   -44,   -81,
   -28,   -83,   -42 ]

racc_goto_table = [
    63,    69,    10,    57,    30,    58,    98,    57,   114,    65,
   117,   248,   118,   278,   148,   253,    20,   252,   342,    24,
   173,   187,    10,    19,   229,    87,    10,    84,   231,   144,
   163,    90,    70,   194,    59,    73,   195,   198,     1,    75,
     2,     3,    86,   232,    96,    74,    95,    71,   154,   313,
    76,   367,    28,    77,   245,   176,   185,   316,   151,   275,
    91,    56,   153,   277,   332,   145,   143,   199,   221,   371,
   158,   nil,    10,   nil,   nil,    89,   nil,    57,   nil,   nil,
    85,    76,   nil,   186,   nil,   nil,   nil,   194,    94,   nil,
   nil,   nil,   nil,   244,   nil,    93,   nil,   114,   149,   117,
   152,   118,   nil,   nil,   239,   150,   304,   270,   237,   nil,
    90,   nil,   nil,   166,   nil,   nil,   nil,   266,   nil,   200,
   165,   235,   nil,   nil,   nil,   nil,   nil,   242,   nil,   279,
    58,   243,    57,   nil,   233,    57,   nil,   nil,   nil,    91,
   nil,   168,   174,   nil,   175,   nil,   179,   nil,   250,    57,
   nil,    10,   nil,    10,    89,   nil,   nil,   nil,   nil,   348,
   347,   305,   nil,   nil,   310,   265,   114,   364,   117,   276,
   118,   280,   312,   323,   218,   219,   163,   318,   303,   114,
   319,   117,   114,   118,   117,   330,   118,   336,   322,   nil,
   114,   nil,   117,   nil,   118,   nil,   366,   nil,   nil,   302,
   nil,   309,   nil,   nil,   308,   nil,   246,   nil,   nil,   nil,
   nil,   nil,   301,   nil,   145,   nil,   nil,   nil,   nil,   260,
   261,   nil,   263,   nil,   nil,   nil,   nil,   269,   314,   174,
   271,   272,   273,   nil,   274,   324,   nil,   nil,   nil,   352,
   nil,   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   311,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   335,   358,   361,   nil,   114,   nil,   117,   nil,
   118,   nil,   nil,   279,   nil,   339,   317,   nil,   nil,   177,
   nil,   nil,    58,   233,    57,   369,   nil,   114,   nil,   117,
   nil,   118,   372,   nil,   nil,   nil,   nil,   325,   nil,   nil,
   nil,   357,   nil,    10,   nil,   nil,   nil,   nil,   nil,   220,
   222,   223,   224,   nil,   nil,   nil,   nil,   365,   nil,   nil,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   258,   nil,   nil,   nil,   nil,   nil,   350,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   360,   281,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   362,   363 ]

racc_goto_check = [
    14,    20,    12,    72,    15,     8,    36,    72,    48,    34,
    56,    43,    58,    62,    21,    51,     5,    50,    44,     5,
    41,    54,    12,     3,    66,    17,    12,     7,    23,    65,
    56,    19,    14,    70,    13,    14,    60,    60,     1,    25,
     2,     4,    16,    22,    27,    24,    26,    15,    28,    29,
    15,    30,    33,    35,    38,    45,    53,    55,    14,    57,
    15,     4,    20,    61,    63,    15,    64,    67,    69,    44,
    25,   nil,    12,   nil,   nil,    12,   nil,    72,   nil,   nil,
    13,    15,   nil,    27,   nil,   nil,   nil,    70,     5,   nil,
   nil,   nil,   nil,    21,   nil,     3,   nil,    48,     5,    56,
     5,    58,   nil,   nil,    17,     3,    66,    41,     7,   nil,
    19,   nil,   nil,     5,   nil,   nil,   nil,    56,   nil,    15,
     3,    14,   nil,   nil,   nil,   nil,   nil,    27,   nil,    48,
     8,    20,    72,   nil,    15,    72,   nil,   nil,   nil,    15,
   nil,    40,    40,   nil,    40,   nil,    40,   nil,    14,    72,
   nil,    12,   nil,    12,    12,   nil,   nil,   nil,   nil,    51,
    50,    48,   nil,   nil,    36,    34,    48,    62,    56,    14,
    58,    20,    21,    54,    40,    40,    56,    36,    65,    48,
    36,    56,    48,    58,    56,    60,    58,    23,    36,   nil,
    48,   nil,    56,   nil,    58,   nil,    43,   nil,   nil,    14,
   nil,    27,   nil,   nil,    20,   nil,    40,   nil,   nil,   nil,
   nil,   nil,    15,   nil,    15,   nil,   nil,   nil,   nil,    40,
    40,   nil,    40,   nil,   nil,   nil,   nil,    40,    15,    40,
    40,    40,    40,   nil,    40,    27,   nil,   nil,   nil,    60,
   nil,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    20,    21,    36,   nil,    48,   nil,    56,   nil,
    58,   nil,   nil,    48,   nil,    20,    40,   nil,   nil,    49,
   nil,   nil,     8,    15,    72,    36,   nil,    48,   nil,    56,
   nil,    58,    21,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,    20,   nil,    12,   nil,   nil,   nil,   nil,   nil,    49,
    49,    49,    49,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    49 ]

racc_goto_pointer = [
   nil,    38,    40,    21,    41,    14,   nil,   -43,   -19,   nil,
   nil,   nil,     2,     9,   -27,   -13,   -31,   -48,   nil,   -42,
   -29,   -68,  -104,  -119,   -18,   -24,   -30,   -32,   -44,  -192,
  -314,   nil,   nil,    36,   -19,   -12,   -71,   nil,  -112,   nil,
    39,   -83,   nil,  -164,  -300,   -51,   nil,   nil,   -69,   183,
  -160,  -162,   nil,   -59,   -94,  -186,   -67,  -136,   -65,   nil,
   -92,  -135,  -185,  -215,   -12,   -49,  -122,   -64,   nil,   -68,
   -85,   nil,   -17,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   109,   nil,   197,   115,   nil,   nil,    88,   111,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   234,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    99,   100,   101,
   112,   nil,   104,   nil,   nil,   nil,   108,   110,   169,   133,
   nil,   nil,   343,   nil,   nil,   161,   170,   nil,   172,   140,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,   131,   134,
   189,   141,    21,   196 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 99, :_reduce_1,
  1, 100, :_reduce_2,
  3, 100, :_reduce_3,
  1, 102, :_reduce_4,
  2, 102, :_reduce_5,
  0, 105, :_reduce_6,
  1, 105, :_reduce_7,
  3, 105, :_reduce_8,
  1, 106, :_reduce_9,
  1, 106, :_reduce_10,
  1, 106, :_reduce_11,
  1, 106, :_reduce_12,
  7, 108, :_reduce_13,
  9, 109, :_reduce_14,
  0, 111, :_reduce_15,
  2, 111, :_reduce_16,
  7, 104, :_reduce_17,
  2, 104, :_reduce_18,
  1, 114, :_reduce_19,
  3, 114, :_reduce_20,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  4, 116, :_reduce_24,
  0, 120, :_reduce_25,
  1, 120, :_reduce_26,
  3, 120, :_reduce_27,
  0, 119, :_reduce_28,
  3, 119, :_reduce_29,
  6, 110, :_reduce_30,
  0, 122, :_reduce_31,
  1, 122, :_reduce_32,
  3, 122, :_reduce_33,
  2, 123, :_reduce_34,
  3, 124, :_reduce_35,
  1, 124, :_reduce_36,
  4, 117, :_reduce_37,
  1, 126, :_reduce_none,
  1, 126, :_reduce_39,
  2, 127, :_reduce_40,
  3, 127, :_reduce_41,
  7, 127, :_reduce_42,
  0, 128, :_reduce_43,
  1, 128, :_reduce_44,
  1, 107, :_reduce_45,
  1, 107, :_reduce_46,
  6, 129, :_reduce_47,
  8, 130, :_reduce_48,
  2, 121, :_reduce_49,
  2, 121, :_reduce_50,
  1, 121, :_reduce_51,
  0, 131, :_reduce_52,
  2, 131, :_reduce_53,
  2, 134, :_reduce_54,
  0, 135, :_reduce_55,
  1, 135, :_reduce_56,
  3, 135, :_reduce_57,
  1, 136, :_reduce_58,
  2, 136, :_reduce_59,
  2, 136, :_reduce_60,
  1, 136, :_reduce_61,
  6, 136, :_reduce_62,
  3, 136, :_reduce_63,
  5, 136, :_reduce_64,
  5, 136, :_reduce_65,
  1, 136, :_reduce_66,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_70,
  3, 145, :_reduce_71,
  3, 144, :_reduce_72,
  5, 143, :_reduce_73,
  5, 143, :_reduce_74,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 142, :_reduce_81,
  1, 142, :_reduce_82,
  5, 142, :_reduce_83,
  2, 150, :_reduce_84,
  2, 137, :_reduce_85,
  3, 151, :_reduce_86,
  3, 151, :_reduce_87,
  1, 151, :_reduce_88,
  1, 151, :_reduce_89,
  6, 125, :_reduce_90,
  3, 125, :_reduce_91,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 152, :_reduce_94,
  0, 118, :_reduce_95,
  2, 118, :_reduce_96,
  0, 155, :_reduce_97,
  1, 155, :_reduce_98,
  3, 155, :_reduce_99,
  3, 140, :_reduce_100,
  3, 140, :_reduce_101,
  3, 140, :_reduce_102,
  1, 157, :_reduce_103,
  1, 157, :_reduce_104,
  1, 157, :_reduce_105,
  1, 157, :_reduce_106,
  1, 157, :_reduce_107,
  1, 157, :_reduce_108,
  1, 157, :_reduce_109,
  1, 157, :_reduce_110,
  1, 157, :_reduce_111,
  4, 157, :_reduce_112,
  5, 157, :_reduce_113,
  0, 159, :_reduce_114,
  1, 159, :_reduce_115,
  4, 159, :_reduce_116,
  3, 160, :_reduce_117,
  2, 161, :_reduce_none,
  2, 132, :_reduce_119,
  2, 132, :_reduce_120,
  1, 132, :_reduce_121,
  2, 132, :_reduce_122,
  0, 133, :_reduce_123,
  4, 133, :_reduce_124,
  1, 162, :_reduce_125,
  3, 162, :_reduce_126,
  3, 163, :_reduce_127,
  2, 163, :_reduce_128,
  0, 164, :_reduce_129,
  2, 164, :_reduce_130,
  1, 138, :_reduce_131,
  2, 138, :_reduce_132,
  3, 138, :_reduce_133,
  3, 138, :_reduce_134,
  4, 166, :_reduce_135,
  1, 165, :_reduce_136,
  1, 165, :_reduce_137,
  2, 165, :_reduce_138,
  3, 165, :_reduce_139,
  3, 147, :_reduce_140,
  3, 147, :_reduce_141,
  3, 147, :_reduce_142,
  3, 147, :_reduce_143,
  3, 147, :_reduce_144,
  3, 147, :_reduce_145,
  3, 147, :_reduce_146,
  3, 147, :_reduce_147,
  3, 147, :_reduce_148,
  3, 147, :_reduce_149,
  3, 147, :_reduce_150,
  2, 147, :_reduce_151,
  2, 147, :_reduce_152,
  2, 147, :_reduce_153,
  3, 147, :_reduce_154,
  1, 147, :_reduce_155,
  3, 167, :_reduce_156,
  3, 167, :_reduce_157,
  3, 167, :_reduce_158,
  3, 167, :_reduce_159,
  3, 167, :_reduce_160,
  3, 167, :_reduce_161,
  3, 167, :_reduce_162,
  1, 146, :_reduce_163,
  1, 146, :_reduce_164,
  2, 146, :_reduce_165,
  1, 146, :_reduce_none,
  5, 146, :_reduce_167,
  2, 169, :_reduce_168,
  3, 156, :_reduce_169,
  3, 156, :_reduce_170,
  0, 168, :_reduce_171,
  3, 168, :_reduce_172,
  0, 139, :_reduce_173,
  1, 139, :_reduce_174,
  3, 139, :_reduce_175,
  4, 154, :_reduce_176,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_200,
  0, 101, :_reduce_201,
  1, 101, :_reduce_202,
  1, 103, :_reduce_203,
  2, 103, :_reduce_204,
  1, 170, :_reduce_205,
  1, 170, :_reduce_none,
  0, 158, :_reduce_207,
  1, 158, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_none,
  1, 112, :_reduce_211 ]

racc_reduce_n = 212

racc_shift_n = 373

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :kDTYPE_SIZE_T => 48,
  :kDTYPE_RB_STR => 49,
  :kDTYPE_UCHAR => 50,
  :tCUSTOM_DTYPE => 51,
  :tLPAREN => 52,
  :tRPAREN => 53,
  :tLSQUARE => 54,
  :tRSQUARE => 55,
  :tIDENTIFIER => 56,
  :tNL => 57,
  :tCOMMA => 58,
  :tSQUOTE => 59,
  :tSCOLON => 60,
  :EOF => 61,
  :tDOT => 62,
  :tQMARK => 63,
  :tSYMBOL => 64,
  :tLBRACE => 65,
  :tRBRACE => 66,
  :tPLUS => 67,
  :tMINUS => 68,
  :tSTAR => 69,
  :tDIVIDE => 70,
  :tEXPO => 71,
  :tMODULUS => 72,
  :tASSIGN => 73,
  :tEQ => 74,
  :tLT => 75,
  :tLTEQ => 76,
  :tGT => 77,
  :tGTEQ => 78,
  :tANDOP => 79,
  :tOROP => 80,
  :tBANG => 81,
  :tOP_ASSIGN => 82,
  :tSTRING => 83,
  :kSIZEOF => 84,
  :tBIT_AND => 85,
  :tBIT_OR => 86,
  :tBIT_XOR => 87,
  :tBIT_LSHIFT => 88,
  :tBIT_RSHIFT => 89,
  :tBIT_NOT => 90,
  :tINTEGER => 91,
  :tFLOAT => 92,
  :tSINGLE_CHAR => 93,
  :ADDRESS_OF => 94,
  :TYPECAST => 95,
  :UMINUS => 96,
  :tNEQ => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_94(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_95(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_96(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_97(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_98(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_99(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_100(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_101(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_102(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 435)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_114(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_116(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_117(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_119(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_120(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_121(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_122(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_123(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_124(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_125(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_126(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_127(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_128(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_129(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_131(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_132(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_135(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_136(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_137(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_138(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_151(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_152(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_153(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_157(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_158(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_159(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_160(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_165(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_167(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_168(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_169(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_170(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 587)
  def _reduce_171(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_172(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_173(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_174(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_175(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_176(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_200(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_201(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_202(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_203(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_204(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_205(val, _values, result)
    
    result
  end
.,.,

# reduce 206 omitted

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_207(val, _values, result)
    
    result
  end
.,.,

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_211(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
