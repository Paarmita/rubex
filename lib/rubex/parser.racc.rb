#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 434)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    45,    46,    48,   168,   178,   102,   185,    49,    50,    13,
   101,    64,    65,    66,    52,   168,    40,   182,   233,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,   132,
   147,   148,    37,    57,   132,   270,   136,   131,    34,   132,
   232,   137,   130,    20,    37,   166,   182,   130,   147,   148,
    12,   128,   147,   148,    35,    45,    46,    48,    63,    60,
    61,    62,    49,    50,   147,   148,    64,    65,    66,    52,
     9,    40,   147,   148,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    12,   221,   131,    21,    57,    17,
    34,   253,    18,   147,   148,    23,   254,   149,   150,   151,
   152,   153,   154,    10,     9,   134,    35,    24,    12,    29,
    45,    46,    48,    63,    60,    61,    62,    49,    50,   147,
   148,    64,    65,    66,    52,    30,    40,    10,     9,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,   131,
    33,   132,    17,    57,    17,    18,    37,    18,    38,   130,
   149,   150,   151,   152,   153,   154,    17,    37,   128,    18,
    12,    17,   147,   148,    18,    45,    46,    48,    63,    60,
    61,    62,    49,    50,   147,   148,    64,    65,    66,    52,
     9,    40,   147,   148,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    17,   103,    17,    18,    57,    18,
   149,   150,   151,   152,   153,   154,   147,   148,   173,   174,
   175,   176,   147,   148,    17,    12,   199,    18,   243,   244,
    45,    46,    48,    63,    60,    61,    62,    49,    50,   173,
   174,    64,    65,    66,    52,     9,    40,   175,   176,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,   106,
    97,    17,    40,    57,    18,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    45,    46,    48,    63,    60,
    61,    62,    49,    50,   147,   148,    64,    65,    66,    52,
    17,    40,   124,    18,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,   273,   125,   221,   274,    57,   149,
   150,   151,   152,   153,   154,   243,   244,   127,   149,   150,
   151,   152,   153,   154,   133,   155,   157,   158,   159,   160,
    45,    46,    48,    63,    60,    61,    62,    49,    50,   156,
   138,    64,    65,    66,    52,   141,    40,   147,   148,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,   151,
   152,   153,   154,    57,    64,    65,    66,   142,   127,   144,
    64,    65,    66,   131,   166,   170,    64,    65,    66,   149,
   150,   151,   152,   153,   154,   179,   190,    37,    63,    60,
    61,    62,   111,   202,   203,   182,   115,   106,   111,   153,
   222,   226,   115,   227,   111,    37,   110,   230,   115,    64,
    65,    66,   110,   231,   134,    64,    65,    66,   110,   113,
   240,    63,    60,    61,    62,   113,   147,    63,    60,    61,
    62,   113,   153,    63,    60,    61,    62,   122,   153,   153,
   153,   115,   245,   111,   248,   185,   255,   115,    64,    65,
    66,   110,   127,    64,    65,    66,   258,   110,   263,    64,
    65,    66,   151,   152,   153,   154,    63,    60,    61,    62,
   113,   275,    63,    60,    61,    62,   111,   132,   270,   nil,
   115,   122,   nil,   nil,   nil,   115,   nil,   111,   nil,   nil,
   110,   115,    64,    65,    66,   110,   nil,    64,    65,    66,
   nil,   110,   nil,   113,   nil,    63,    60,    61,    62,   nil,
    63,    60,    61,    62,   113,   nil,    63,    60,    61,    62,
   111,   nil,   nil,   nil,   115,   122,   nil,   nil,   nil,   115,
    64,    65,    66,   nil,   110,   nil,    64,    65,    66,   110,
   nil,   nil,    64,    65,    66,   nil,   nil,   113,   nil,    63,
    60,    61,    62,   nil,    63,    60,    61,    62,   111,   nil,
   nil,   nil,   115,   nil,   111,   nil,   nil,   nil,   115,   nil,
   111,   nil,   110,   nil,   115,    64,    65,    66,   110,   nil,
   nil,    64,    65,    66,   110,   113,   nil,    63,    60,    61,
    62,   113,   nil,    63,    60,    61,    62,   113,   nil,    63,
    60,    61,    62,   111,   nil,   nil,   nil,   115,   nil,   111,
   nil,   nil,   nil,   115,    64,    65,    66,   110,   nil,   nil,
    64,    65,    66,   110,   nil,   nil,    64,    65,    66,   nil,
   113,   nil,    63,    60,    61,    62,   113,   nil,    63,    60,
    61,    62,   111,   nil,   nil,   nil,   115,   nil,   111,   nil,
   nil,   nil,   115,   nil,   111,   nil,   110,   nil,   115,    64,
    65,    66,   110,   nil,    64,    65,    66,   nil,   110,   113,
   nil,    63,    60,    61,    62,   113,   nil,    63,    60,    61,
    62,   113,   nil,    63,    60,    61,    62,   122,   nil,   nil,
   nil,   115,   122,   nil,   nil,   nil,   115,    64,    65,    66,
   nil,   110,    64,    65,    66,   nil,   110,   nil,    64,    65,
    66,   nil,   nil,   nil,   nil,   nil,    63,    60,    61,    62,
   nil,    63,    60,    61,    62,   122,   nil,   nil,   nil,   115,
   122,   nil,   nil,   nil,   115,   nil,   122,   nil,   nil,   110,
   115,    64,    65,    66,   110,   nil,    64,    65,    66,   nil,
   110,   nil,   nil,   nil,    63,    60,    61,    62,   nil,    63,
    60,    61,    62,   nil,   nil,    63,    60,    61,    62,   122,
   nil,   nil,   nil,   115,   122,   nil,   nil,   nil,   115,    64,
    65,    66,   nil,   110,    64,    65,    66,   nil,   110,   nil,
    64,    65,    66,   nil,   nil,   nil,   nil,   nil,    63,    60,
    61,    62,   nil,    63,    60,    61,    62,   122,   nil,   nil,
   nil,   115,   122,   nil,   nil,   nil,   115,   nil,   122,   nil,
   nil,   110,   115,    64,    65,    66,   110,   nil,    64,    65,
    66,   nil,   110,   nil,   nil,   nil,    63,    60,    61,    62,
   nil,    63,    60,    61,    62,   nil,   nil,    63,    60,    61,
    62,   122,   nil,   nil,   nil,   115,   122,   nil,   nil,   nil,
   115,    64,    65,    66,   nil,   110,   nil,    64,    65,    66,
   110,   nil,   nil,    64,    65,    66,   nil,   nil,   nil,   nil,
    63,    60,    61,    62,   nil,    63,    60,    61,    62,   111,
   nil,   nil,   nil,   115,   nil,   111,   nil,   252,   nil,   115,
   nil,   111,   nil,   110,   nil,   115,    64,    65,    66,   110,
   nil,    64,    65,    66,   nil,   110,   113,   nil,    63,    60,
    61,    62,   113,   nil,    63,    60,    61,    62,   113,   nil,
    63,    60,    61,    62,   122,   nil,   nil,   nil,   115,   122,
   nil,   nil,   nil,   115,    64,    65,    66,   nil,   110,   nil,
    64,    65,    66,   110,   149,   150,   151,   152,   153,   154,
   nil,   nil,   nil,    63,    60,    61,    62,   nil,    63,    60,
    61,    62,   111,   nil,   nil,   nil,   115,   nil,   111,   nil,
   nil,   nil,   115,   nil,   nil,   nil,   110,   nil,   nil,   nil,
   nil,   nil,   110,   nil,   nil,   nil,   200,   nil,   nil,   113,
   nil,    63,    60,    61,    62,   113,   nil,    63,    60,    61,
    62,    97,   nil,    40,   nil,   nil,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,    18,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,    18,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,   nil,   nil,   nil,   nil,    92,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,   206,
   nil,   nil,   nil,    92,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,   149,   150,   151,   152,   153,   154,
   nil,   155,   157,   158,   159,   160,   nil,   nil,   nil,   149,
   150,   151,   152,   153,   154,   156,   155,   157,   158,   159,
   160,   149,   150,   151,   152,   153,   154,   nil,   nil,   nil,
   156,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,   149,   150,   151,   152,   153,   154,   149,   150,   151,
   152,   153,   154,   149,   150,   151,   152,   153,   154 ]

racc_action_check = [
    31,    31,    31,   119,   123,    40,   126,    31,    31,     1,
    40,    31,    31,    31,    31,   259,    31,   126,   194,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    31,    31,    31,    31,    31,    31,   190,
   194,   194,   119,    31,   185,   257,    89,   115,   190,   115,
   193,    89,   185,     9,   259,   193,   257,   115,   123,   123,
    36,   185,   119,   119,   190,   105,   105,   105,    31,    31,
    31,    31,   105,   105,   259,   259,   105,   105,   105,   105,
    36,   105,   107,   107,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,     0,   177,    59,    10,   105,   105,
    23,   234,   105,   118,   118,    12,   234,   177,   177,   177,
   177,   177,   177,     0,     0,    59,    23,    13,    15,    20,
   167,   167,   167,   105,   105,   105,   105,   167,   167,   146,
   146,   167,   167,   167,   167,    21,   167,    15,    15,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,    57,
    22,    57,     2,   167,    15,     2,    28,    15,    29,    57,
   215,   215,   215,   215,   215,   215,     5,    30,    57,     5,
    19,    42,   180,   180,    42,   170,   170,   170,   167,   167,
   167,   167,   170,   170,   189,   189,   170,   170,   170,   170,
    19,   170,   195,   195,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,    93,    41,    19,    93,   170,    19,
   121,   121,   121,   121,   121,   121,   196,   196,   121,   121,
   121,   121,   223,   223,    94,   139,   139,    94,   224,   224,
   178,   178,   178,   170,   170,   170,   170,   178,   178,   226,
   226,   178,   178,   178,   178,   139,   178,   227,   227,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,    43,
    39,   139,    39,   178,   139,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,   244,   244,   244,   178,   178,
   178,   178,   244,   244,   265,   265,   244,   244,   244,   244,
   237,   244,    52,   237,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   264,    55,   162,   264,   244,   216,
   216,   216,   216,   216,   216,   276,   276,    56,   162,   162,
   162,   162,   162,   162,    58,   162,   162,   162,   162,   162,
   272,   272,   272,   244,   244,   244,   244,   272,   272,   162,
    91,   272,   272,   272,   272,    96,   272,   277,   277,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   209,
   209,   209,   209,   272,    45,    45,    45,    97,    99,   100,
    46,    46,    46,   116,   117,   120,    48,    48,    48,   217,
   217,   217,   217,   217,   217,   124,   130,   136,   272,   272,
   272,   272,    45,   141,   142,   143,    45,   145,    46,   161,
   163,   171,    46,   172,    48,   179,    45,   181,    48,    49,
    49,    49,    46,   186,   188,    50,    50,    50,    48,    45,
   206,    45,    45,    45,    45,    46,   208,    46,    46,    46,
    46,    48,   211,    48,    48,    48,    48,    49,   212,   213,
   214,    49,   225,    50,   228,   230,   236,    50,   106,   106,
   106,    49,   239,   110,   110,   110,   241,    50,   249,   111,
   111,   111,   210,   210,   210,   210,    49,    49,    49,    49,
    50,   268,    50,    50,    50,    50,   106,   270,   275,   nil,
   106,   110,   nil,   nil,   nil,   110,   nil,   111,   nil,   nil,
   106,   111,   113,   113,   113,   110,   nil,   122,   122,   122,
   nil,   111,   nil,   106,   nil,   106,   106,   106,   106,   nil,
   110,   110,   110,   110,   111,   nil,   111,   111,   111,   111,
   113,   nil,   nil,   nil,   113,   122,   nil,   nil,   nil,   122,
   125,   125,   125,   nil,   113,   nil,   128,   128,   128,   122,
   nil,   nil,   131,   131,   131,   nil,   nil,   113,   nil,   113,
   113,   113,   113,   nil,   122,   122,   122,   122,   125,   nil,
   nil,   nil,   125,   nil,   128,   nil,   nil,   nil,   128,   nil,
   131,   nil,   125,   nil,   131,   132,   132,   132,   128,   nil,
   nil,   133,   133,   133,   131,   125,   nil,   125,   125,   125,
   125,   128,   nil,   128,   128,   128,   128,   131,   nil,   131,
   131,   131,   131,   132,   nil,   nil,   nil,   132,   nil,   133,
   nil,   nil,   nil,   133,   134,   134,   134,   132,   nil,   nil,
   147,   147,   147,   133,   nil,   nil,   148,   148,   148,   nil,
   132,   nil,   132,   132,   132,   132,   133,   nil,   133,   133,
   133,   133,   134,   nil,   nil,   nil,   134,   nil,   147,   nil,
   nil,   nil,   147,   nil,   148,   nil,   134,   nil,   148,   149,
   149,   149,   147,   nil,   150,   150,   150,   nil,   148,   134,
   nil,   134,   134,   134,   134,   147,   nil,   147,   147,   147,
   147,   148,   nil,   148,   148,   148,   148,   149,   nil,   nil,
   nil,   149,   150,   nil,   nil,   nil,   150,   151,   151,   151,
   nil,   149,   152,   152,   152,   nil,   150,   nil,   153,   153,
   153,   nil,   nil,   nil,   nil,   nil,   149,   149,   149,   149,
   nil,   150,   150,   150,   150,   151,   nil,   nil,   nil,   151,
   152,   nil,   nil,   nil,   152,   nil,   153,   nil,   nil,   151,
   153,   154,   154,   154,   152,   nil,   155,   155,   155,   nil,
   153,   nil,   nil,   nil,   151,   151,   151,   151,   nil,   152,
   152,   152,   152,   nil,   nil,   153,   153,   153,   153,   154,
   nil,   nil,   nil,   154,   155,   nil,   nil,   nil,   155,   156,
   156,   156,   nil,   154,   157,   157,   157,   nil,   155,   nil,
   158,   158,   158,   nil,   nil,   nil,   nil,   nil,   154,   154,
   154,   154,   nil,   155,   155,   155,   155,   156,   nil,   nil,
   nil,   156,   157,   nil,   nil,   nil,   157,   nil,   158,   nil,
   nil,   156,   158,   159,   159,   159,   157,   nil,   160,   160,
   160,   nil,   158,   nil,   nil,   nil,   156,   156,   156,   156,
   nil,   157,   157,   157,   157,   nil,   nil,   158,   158,   158,
   158,   159,   nil,   nil,   nil,   159,   160,   nil,   nil,   nil,
   160,   166,   166,   166,   nil,   159,   nil,   231,   231,   231,
   160,   nil,   nil,   243,   243,   243,   nil,   nil,   nil,   nil,
   159,   159,   159,   159,   nil,   160,   160,   160,   160,   166,
   nil,   nil,   nil,   166,   nil,   231,   nil,   231,   nil,   231,
   nil,   243,   nil,   166,   nil,   243,   246,   246,   246,   231,
   nil,   247,   247,   247,   nil,   243,   166,   nil,   166,   166,
   166,   166,   231,   nil,   231,   231,   231,   231,   243,   nil,
   243,   243,   243,   243,   246,   nil,   nil,   nil,   246,   247,
   nil,   nil,   nil,   247,   252,   252,   252,   nil,   246,   nil,
   274,   274,   274,   247,   218,   218,   218,   218,   218,   218,
   nil,   nil,   nil,   246,   246,   246,   246,   nil,   247,   247,
   247,   247,   252,   nil,   nil,   nil,   252,   nil,   274,   nil,
   nil,   nil,   274,   nil,   nil,   nil,   252,   nil,   nil,   nil,
   nil,   nil,   274,   nil,   nil,   nil,   140,   nil,   nil,   252,
   nil,   252,   252,   252,   252,   274,   nil,   274,   274,   274,
   274,   140,   nil,   140,   nil,   nil,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   nil,   nil,   nil,   nil,
   nil,   140,   nil,   nil,   140,   256,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   nil,   nil,   nil,   nil,   nil,
   256,   nil,   nil,   256,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    33,   nil,   nil,   nil,   nil,    33,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   144,
   nil,   nil,   nil,   137,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   108,   108,   108,   108,   108,   108,
   nil,   108,   108,   108,   108,   108,   nil,   nil,   nil,   164,
   164,   164,   164,   164,   164,   108,   164,   164,   164,   164,
   164,   219,   219,   219,   219,   219,   219,   nil,   nil,   nil,
   164,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   229,   229,   229,   229,
   229,   254,   254,   254,   254,   254,   254,   254,   254,   254,
   254,   254,   254,   254,   254,   254,   254,   254,   254,   254,
   254,   220,   220,   220,   220,   220,   220,   261,   261,   261,
   261,   261,   261,   262,   262,   262,   262,   262,   262 ]

racc_action_pointer = [
   102,     9,   124,   nil,   nil,   138,   nil,   nil,   nil,     6,
    35,   nil,    68,   127,   nil,   126,   nil,   nil,   nil,   188,
    65,   131,   127,    56,   nil,   nil,   nil,   nil,   128,   131,
   139,    -4,   nil,  1121,   nil,   nil,    58,   nil,   nil,   282,
   -37,   232,   143,   293,   nil,   419,   425,   nil,   431,   464,
   470,   nil,   295,   nil,   nil,   294,   319,   126,   322,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   353,   nil,   186,   206,   nil,   358,   390,   nil,   380,
   377,   nil,   nil,   nil,   nil,    61,   503,    14,  1158,   nil,
   508,   514,   nil,   547,   nil,     4,   400,   395,    45,    -6,
   431,   184,   552,   -10,   441,   585,   -41,   nil,   591,   nil,
   409,   597,   630,   636,   669,   nil,   409,  1146,   nil,   253,
  1063,   420,   450,   407,  1171,   461,    71,   675,   681,   714,
   719,   752,   757,   763,   796,   801,   834,   839,   845,   878,
   883,   409,   322,   426,  1173,   nil,   916,   126,   nil,   nil,
   191,   424,   426,   nil,   nil,   nil,   nil,    61,   256,   427,
   124,   428,   nil,   nil,   nil,    -1,   421,   nil,   422,   136,
    -6,   nil,   nil,     6,   -28,   144,   178,   nil,   nil,   nil,
   nil,   nil,  1228,  1248,   nil,   nil,   443,   nil,   428,   371,
   474,   442,   448,   449,   450,   124,   313,   393,   968,  1185,
  1275,   nil,   nil,   184,   251,   509,   205,   211,   511,  1268,
   468,   922,   nil,   nil,    67,   nil,   513,   292,   nil,   464,
   nil,   523,   nil,   928,   321,   nil,   961,   966,   nil,   525,
   nil,   nil,   999,   nil,  1288,   nil,  1092,    -2,   nil,     6,
   nil,  1281,  1287,   nil,   318,   266,   nil,   nil,   492,   nil,
   502,   nil,   386,   nil,  1005,   501,   368,   339,   nil,   nil ]

racc_action_default = [
    -6,  -165,  -158,    -2,    -4,  -165,    -7,    -9,   -10,  -165,
  -165,   -29,  -165,  -165,    -1,  -159,  -160,  -162,  -163,    -5,
   -12,  -165,   -96,   -95,   280,    -3,  -161,    -8,  -165,  -165,
  -165,   -32,   -97,  -165,   -93,   -94,    -6,  -164,   -13,  -165,
  -165,  -165,  -158,   -33,   -35,  -165,  -134,   -38,  -165,  -165,
  -165,   -43,  -165,   -45,   -46,  -165,   -69,  -132,  -125,  -132,
   -86,   -87,   -88,   -89,   -90,   -91,   -92,  -126,  -128,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -165,
   -99,  -165,  -102,  -165,  -165,   -15,  -165,  -165,   -19,   -69,
  -165,   -22,   -23,   -30,   -31,  -159,  -165,   -36,  -103,  -104,
  -165,  -165,  -115,  -165,  -125,  -132,  -132,   -37,  -135,  -165,
  -165,  -165,  -165,  -165,   -47,  -165,  -165,   -70,  -165,  -127,
  -165,  -134,  -165,  -165,  -165,  -129,  -165,  -165,  -101,  -165,
  -165,  -165,  -165,   -20,  -165,   -34,   -40,  -165,  -165,  -165,
  -165,  -165,  -165,  -165,  -165,  -165,  -165,  -165,  -165,  -165,
  -165,  -113,  -165,  -165,  -123,  -124,  -165,   -32,   -62,   -63,
   -32,  -165,  -165,   -58,   -59,   -60,   -61,  -165,   -32,  -165,
   -55,   -68,   -71,   -74,   -75,   -76,   -77,   -78,  -165,   -83,
   -95,  -130,  -131,  -165,  -165,   -84,   -85,   -98,  -100,   -11,
   -14,   -16,   -26,   -49,   -21,   -24,  -165,  -105,  -106,  -107,
  -108,  -109,  -110,  -111,  -112,  -116,  -117,  -118,  -119,  -120,
  -121,  -114,  -122,  -136,   -64,  -165,  -165,  -165,  -165,   -49,
  -165,  -165,  -133,  -137,  -165,   -27,  -165,  -165,   -50,   -69,
   -25,  -165,   -65,  -165,   -32,   -41,  -165,  -165,   -42,  -165,
   -72,   -73,   -80,   -17,  -165,   -18,   -48,  -165,   -39,  -165,
   -67,   -56,   -57,   -44,  -165,   -81,   -28,   -51,   -52,   -53,
   -76,   -77,   -32,   -79,  -165,  -165,   -64,   -82,   -54,   -66 ]

racc_goto_table = [
    58,    41,    55,   126,    26,    22,    59,    36,    26,    39,
    27,    15,   187,    95,    19,   167,   172,   184,   135,   171,
   117,   183,    90,    14,   236,   235,    98,   241,     3,   163,
   107,   165,     1,   119,     2,   123,    93,    28,    94,    91,
   234,   100,   204,    25,    31,    99,   143,   145,   120,   267,
   249,   105,   268,   181,   264,    32,    89,   nil,   nil,   nil,
   nil,   nil,   nil,   104,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    58,   135,    55,   266,   nil,   279,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   146,   nil,   nil,    26,   186,   nil,   nil,   nil,   192,
   nil,   188,   139,   140,   nil,   193,   nil,   nil,   nil,   nil,
   180,   nil,   nil,   189,   201,   197,   187,   194,   195,   196,
   nil,   250,   247,   191,   246,   251,   198,    98,    26,    26,
    27,   nil,   207,   208,   nil,   nil,    58,   224,    55,    58,
   225,    55,    59,    91,   nil,    59,    99,    58,   228,    55,
   205,   223,   269,    59,   nil,   272,   nil,   nil,   229,   nil,
   nil,   nil,   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,
   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   257,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   nil,   nil,   nil,   nil,   nil,   188,   nil,   nil,    99,   239,
   nil,   nil,   nil,    58,   260,    55,   195,   nil,   nil,    59,
   nil,   nil,   nil,   nil,   161,   162,   271,   164,   259,   nil,
   nil,   nil,   nil,   nil,   nil,   239,   177,   265,   nil,   nil,
   nil,    58,   276,    55,   271,    26,   256,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   277,
    99,   nil,   239,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   218,   219,   220,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   261,   262 ]

racc_goto_check = [
    49,    26,    42,    20,    59,    24,    51,    12,    59,    12,
     8,     5,    32,    14,     5,    33,    45,    48,    57,    44,
    31,    41,    55,     3,    17,    15,    18,    34,     4,    56,
    30,    56,     1,    30,     2,    30,     7,    11,    13,    19,
    16,    21,    22,     4,    25,    19,    20,    28,    35,    39,
    17,     5,    40,    47,    50,    53,    54,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,    57,    42,    15,   nil,    34,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    30,   nil,   nil,    59,    49,   nil,   nil,   nil,    49,
   nil,    51,     5,     5,   nil,    31,   nil,   nil,   nil,   nil,
    30,   nil,   nil,    30,    14,    12,    32,    30,    30,    30,
   nil,    48,    45,    24,    44,    41,    55,    18,    59,    59,
     8,   nil,    30,    30,   nil,   nil,    49,    26,    42,    49,
    26,    42,    51,    19,   nil,    51,    19,    49,    26,    42,
    19,    30,    41,    51,   nil,    33,   nil,   nil,    12,   nil,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,    19,    19,
   nil,   nil,   nil,    49,    26,    42,    30,   nil,   nil,    51,
   nil,   nil,   nil,   nil,    43,    43,    49,    43,    30,   nil,
   nil,   nil,   nil,   nil,   nil,    19,    43,    30,   nil,   nil,
   nil,    49,    26,    42,    49,    59,     5,    51,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
    19,   nil,    19,    43,    43,    43,    43,    43,    43,    43,
    43,    43,    43,    43,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    43 ]

racc_goto_pointer = [
   nil,    32,    34,    21,    28,     9,   nil,     0,    -9,   nil,
   nil,    17,   -21,    -1,   -26,  -177,  -162,  -179,   -13,     6,
   -53,     1,  -102,   nil,    -7,    22,   -30,   nil,   -58,   nil,
   -15,   -26,  -114,  -104,  -197,    -1,   nil,   nil,   nil,  -207,
  -205,  -105,   -29,   114,  -102,  -105,   nil,   -73,  -109,   -31,
  -198,   -25,   nil,    33,    23,   -11,   -82,   -41,   nil,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   nil,   169,   nil,   nil,    96,   nil,   nil,    54,    56,
   nil,   nil,   nil,    11,   nil,   nil,   nil,    42,    43,    44,
   118,   nil,    47,   nil,   nil,   nil,    51,    53,   237,   238,
   nil,   nil,   112,   108,   nil,   nil,   242,   nil,   nil,   114,
   nil,   116,    67,   nil,   nil,   nil,   109,   129,    68,    16 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 79, :_reduce_1,
  1, 80, :_reduce_2,
  3, 80, :_reduce_3,
  1, 82, :_reduce_4,
  2, 82, :_reduce_5,
  0, 85, :_reduce_6,
  1, 85, :_reduce_7,
  3, 85, :_reduce_8,
  1, 86, :_reduce_9,
  1, 86, :_reduce_10,
  7, 88, :_reduce_11,
  0, 89, :_reduce_12,
  2, 89, :_reduce_13,
  7, 84, :_reduce_14,
  1, 91, :_reduce_15,
  3, 91, :_reduce_16,
  5, 92, :_reduce_17,
  5, 92, :_reduce_18,
  1, 92, :_reduce_none,
  2, 93, :_reduce_20,
  4, 96, :_reduce_21,
  1, 99, :_reduce_none,
  1, 99, :_reduce_23,
  1, 100, :_reduce_none,
  2, 100, :_reduce_25,
  0, 94, :_reduce_26,
  1, 94, :_reduce_27,
  3, 94, :_reduce_28,
  1, 87, :_reduce_29,
  5, 101, :_reduce_30,
  2, 104, :_reduce_31,
  0, 105, :_reduce_32,
  1, 105, :_reduce_33,
  3, 105, :_reduce_34,
  1, 106, :_reduce_35,
  2, 106, :_reduce_36,
  2, 106, :_reduce_37,
  1, 106, :_reduce_38,
  6, 106, :_reduce_39,
  3, 106, :_reduce_40,
  5, 106, :_reduce_41,
  5, 106, :_reduce_42,
  1, 106, :_reduce_43,
  6, 106, :_reduce_44,
  1, 106, :_reduce_45,
  1, 106, :_reduce_none,
  2, 115, :_reduce_47,
  2, 95, :_reduce_48,
  0, 116, :_reduce_49,
  1, 116, :_reduce_50,
  3, 116, :_reduce_51,
  3, 117, :_reduce_52,
  1, 118, :_reduce_53,
  3, 118, :_reduce_54,
  3, 114, :_reduce_55,
  5, 113, :_reduce_56,
  5, 113, :_reduce_57,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  0, 112, :_reduce_64,
  1, 112, :_reduce_65,
  5, 112, :_reduce_66,
  2, 124, :_reduce_67,
  3, 107, :_reduce_68,
  0, 98, :_reduce_69,
  1, 98, :_reduce_70,
  2, 98, :_reduce_71,
  3, 125, :_reduce_72,
  3, 125, :_reduce_73,
  1, 125, :_reduce_74,
  1, 125, :_reduce_75,
  1, 119, :_reduce_76,
  1, 119, :_reduce_77,
  1, 126, :_reduce_none,
  5, 126, :_reduce_79,
  0, 128, :_reduce_80,
  1, 128, :_reduce_81,
  3, 128, :_reduce_82,
  3, 110, :_reduce_83,
  3, 110, :_reduce_84,
  3, 110, :_reduce_85,
  1, 130, :_reduce_86,
  1, 130, :_reduce_87,
  1, 130, :_reduce_88,
  1, 130, :_reduce_89,
  1, 130, :_reduce_90,
  1, 130, :_reduce_91,
  1, 130, :_reduce_92,
  2, 102, :_reduce_93,
  2, 102, :_reduce_94,
  1, 102, :_reduce_95,
  0, 103, :_reduce_96,
  1, 103, :_reduce_none,
  4, 131, :_reduce_98,
  1, 132, :_reduce_99,
  3, 132, :_reduce_100,
  2, 133, :_reduce_101,
  1, 133, :_reduce_102,
  1, 108, :_reduce_103,
  1, 108, :_reduce_104,
  3, 108, :_reduce_105,
  3, 108, :_reduce_106,
  3, 121, :_reduce_107,
  3, 121, :_reduce_108,
  3, 121, :_reduce_109,
  3, 121, :_reduce_110,
  3, 121, :_reduce_111,
  3, 121, :_reduce_112,
  2, 121, :_reduce_113,
  3, 121, :_reduce_114,
  1, 121, :_reduce_115,
  3, 134, :_reduce_116,
  3, 134, :_reduce_117,
  3, 134, :_reduce_118,
  3, 134, :_reduce_119,
  3, 134, :_reduce_120,
  3, 134, :_reduce_121,
  3, 134, :_reduce_122,
  2, 134, :_reduce_123,
  2, 134, :_reduce_124,
  1, 120, :_reduce_125,
  1, 120, :_reduce_126,
  2, 120, :_reduce_127,
  1, 120, :_reduce_none,
  2, 136, :_reduce_129,
  3, 129, :_reduce_130,
  3, 129, :_reduce_131,
  0, 135, :_reduce_132,
  3, 135, :_reduce_133,
  0, 109, :_reduce_134,
  1, 109, :_reduce_135,
  3, 109, :_reduce_136,
  4, 127, :_reduce_137,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_157,
  0, 81, :_reduce_158,
  1, 81, :_reduce_159,
  1, 83, :_reduce_160,
  2, 83, :_reduce_161,
  1, 137, :_reduce_162,
  1, 137, :_reduce_none,
  1, 90, :_reduce_164 ]

racc_reduce_n = 165

racc_shift_n = 280

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kDTYPE_UINT => 23,
  :kDTYPE_LINT => 24,
  :kDTYPE_LLINT => 25,
  :kDTYPE_CHAR => 26,
  :kDTYPE_I8 => 27,
  :kDTYPE_I16 => 28,
  :kDTYPE_I32 => 29,
  :kDTYPE_I64 => 30,
  :kDTYPE_UI8 => 31,
  :kDTYPE_UI16 => 32,
  :kDTYPE_UI32 => 33,
  :kDTYPE_UI64 => 34,
  :kDTYPE_INT => 35,
  :kDTYPE_F32 => 36,
  :kDTYPE_F64 => 37,
  :kDTYPE_LF64 => 38,
  :kDTYPE_ROBJ => 39,
  :kDTYPE_ULINT => 40,
  :kDTYPE_ULLINT => 41,
  :tCUSTOM_DTYPE => 42,
  :tLPAREN => 43,
  :tRPAREN => 44,
  :tLSQUARE => 45,
  :tRSQUARE => 46,
  :tIDENTIFIER => 47,
  :tNL => 48,
  :tCOMMA => 49,
  :tSQUOTE => 50,
  :tSCOLON => 51,
  :EOF => 52,
  :tDOT => 53,
  :tQMARK => 54,
  :tSTART_LINE => 55,
  :tPLUS => 56,
  :tMINUS => 57,
  :tSTAR => 58,
  :tDIVIDE => 59,
  :tEXPO => 60,
  :tMODULUS => 61,
  :tASSIGN => 62,
  :tEQ => 63,
  :tLT => 64,
  :tLTEQ => 65,
  :tGT => 66,
  :tGTEQ => 67,
  :tANDOP => 68,
  :tOROP => 69,
  :tBANG => 70,
  :tOP_ASSIGN => 71,
  :tSTRING => 72,
  :tINTEGER => 73,
  :tFLOAT => 74,
  :tSINGLE_CHAR => 75,
  :UMINUS => 76,
  :tNEQ => 77 }

racc_nt_base = 78

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_7(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_11(val, _values, result)
            result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_14(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_15(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_16(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_20(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_25(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_30(val, _values, result)
            result = TopStatement::RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_31(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_33(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_34(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_35(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_36(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_37(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_38(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_39(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_40(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_41(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_42(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_44(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_47(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_48(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_50(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_51(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_52(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_53(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_54(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_55(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_56(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_57(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_67(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_68(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_69(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_70(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_71(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_72(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_73(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_74(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_75(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_76(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_77(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_79(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_80(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_81(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_83(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_84(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_85(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_86(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_87(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_88(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_89(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_90(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_91(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_92(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_93(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_94(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_96(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_98(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_99(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_100(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_101(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_102(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_103(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_104(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_113(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_114(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_122(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_123(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_124(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_125(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_126(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_127(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_129(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_130(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_131(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_132(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_133(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_135(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_137(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_157(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_158(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_159(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_162(val, _values, result)
    
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_164(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
