#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 247)

def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
  @yydebug = true
end

def next_token
  @lexer.next_token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,    17,    19,   110,    82,     3,   110,    20,    21,    83,
    51,   156,   157,    52,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,   116,   117,    80,   112,    23,    51,   112,
     5,    52,    16,    17,    19,    51,   118,   119,    52,    20,
    21,    79,    51,   156,   157,    52,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    16,    17,    19,   169,    23,
     6,   170,    20,    21,    92,    93,    94,    95,     8,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    16,    17,
    19,    11,    23,    47,    53,    20,    21,    92,    93,    94,
    95,    76,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    16,    17,    19,    81,    23,    84,    80,    20,    21,
   113,   121,   122,   123,   112,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    16,    17,    19,    53,    23,    94,
   144,    20,    21,   147,   148,    76,   153,    94,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    16,    17,    19,
    94,    23,    94,    94,    20,    21,   158,   161,   164,   nil,
   nil,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
   143,    80,   nil,   nil,    23,    90,    91,    92,    93,    94,
    95,    90,    91,    92,    93,    94,    95,    79,    96,    98,
    99,   100,   101,   102,   103,    61,   nil,   nil,   nil,    66,
    97,    61,   nil,   nil,   nil,    66,    61,   nil,    60,   nil,
    66,   nil,    71,   nil,    60,   nil,    66,   nil,   nil,    60,
   nil,    63,    55,    56,    57,    60,   nil,    63,    55,    56,
    57,   nil,    63,    55,    56,    57,   nil,   nil,    61,    55,
    56,    57,    66,    61,   nil,   nil,    71,    66,   nil,   nil,
    66,    60,   nil,   nil,   nil,   nil,    60,   nil,   nil,    60,
   nil,   nil,   nil,   nil,    63,    55,    56,    57,   nil,    63,
    55,    56,    57,    55,    56,    57,    61,   nil,   nil,   nil,
    66,    61,   nil,   nil,    71,    66,   nil,   nil,    66,    60,
   nil,   nil,   nil,   nil,    60,   nil,   nil,    60,   nil,   nil,
   nil,   nil,    63,    55,    56,    57,   nil,    63,    55,    56,
    57,    55,    56,    57,    61,   nil,   nil,   nil,    66,    61,
   nil,   nil,   nil,    66,    61,   nil,   nil,    60,    66,   nil,
   nil,    71,    60,   nil,   nil,    66,   nil,    60,   nil,   nil,
    63,    55,    56,    57,    60,    63,    55,    56,    57,   nil,
    63,    55,    56,    57,   nil,   nil,   nil,    71,    55,    56,
    57,    66,    71,   nil,   nil,    71,    66,   nil,    71,    66,
    60,   nil,    66,   nil,   nil,    60,   nil,   nil,    60,   nil,
   nil,    60,   nil,   nil,    55,    56,    57,   nil,   nil,    55,
    56,    57,    55,    56,    57,    55,    56,    57,    71,   nil,
   nil,    71,    66,   nil,    71,    66,   nil,   nil,    66,    71,
   nil,    60,   nil,    66,    60,   nil,   nil,    60,   nil,   nil,
   nil,   nil,    60,   nil,   nil,    55,    56,    57,    55,    56,
    57,    55,    56,    57,   nil,    71,    55,    56,    57,    66,
    71,   nil,   nil,    71,    66,   nil,    71,    66,    60,   nil,
    66,   nil,   nil,    60,   nil,   nil,    60,   nil,   nil,    60,
   nil,   nil,    55,    56,    57,   nil,   nil,    55,    56,    57,
    55,    56,    57,    55,    56,    57,    71,   nil,   nil,   nil,
    66,    61,   nil,   152,   nil,    66,    61,   nil,   nil,    60,
    66,   nil,   nil,    61,    60,   nil,   nil,    66,    71,    60,
   nil,   nil,    66,    55,    56,    57,    60,    63,    55,    56,
    57,    60,    63,    55,    56,    57,   nil,   nil,   nil,    63,
    55,    56,    57,   nil,    71,    55,    56,    57,    66,    61,
   nil,   nil,   143,    66,   nil,   nil,   nil,    60,   nil,   nil,
   nil,   nil,    60,    90,    91,    92,    93,    94,    95,   nil,
   nil,    55,    56,    57,   nil,    63,    55,    56,    57,    90,
    91,    92,    93,    94,    95,   nil,    96,    98,    99,   100,
   101,   102,   103,   nil,   nil,   nil,   nil,   nil,    97,    90,
    91,    92,    93,    94,    95,   nil,    96,    98,    99,   100,
   101,   102,   103,   nil,   nil,   nil,   nil,   nil,    97,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    90,    91,    92,
    93,    94,    95,   nil,   nil,   116,   117,   118,   119,    90,
    91,    92,    93,    94,    95,    90,    91,    92,    93,    94,
    95,    90,    91,    92,    93,    94,    95,    90,    91,    92,
    93,    94,    95,    90,    91,    92,    93,    94,    95,    90,
    91,    92,    93,    94,    95,    90,    91,    92,    93,    94,
    95,    90,    91,    92,    93,    94,    95,    90,    91,    92,
    93,    94,    95 ]

racc_action_check = [
    49,    49,    49,    68,    44,     1,   165,    49,    49,    44,
    13,   145,   145,    13,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,   147,   147,    23,    68,    49,    49,   165,
     2,    49,     9,     9,     9,    47,   148,   148,    47,     9,
     9,    23,    86,   173,   173,    86,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,   109,   109,   109,   162,     9,
     3,   162,   109,   109,   129,   129,   129,   129,     5,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   109,   113,   113,
   113,     7,   109,    12,    14,   113,   113,   130,   130,   130,
   130,    22,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   121,   121,   121,    24,   113,    46,    66,   121,   121,
    69,    72,    73,    77,    82,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   157,   157,   157,    87,   121,   104,
   106,   157,   157,   114,   115,   122,   125,   131,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   171,   171,   171,
   132,   157,   133,   134,   171,   171,   146,   149,   154,   nil,
   nil,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   105,    76,   nil,   nil,   171,   135,   135,   135,   135,   135,
   135,   105,   105,   105,   105,   105,   105,    76,   105,   105,
   105,   105,   105,   105,   105,    16,   nil,   nil,   nil,    16,
   105,    17,   nil,   nil,   nil,    17,    19,   nil,    16,   nil,
    19,   nil,    20,   nil,    17,   nil,    20,   nil,   nil,    19,
   nil,    16,    16,    16,    16,    20,   nil,    17,    17,    17,
    17,   nil,    19,    19,    19,    19,   nil,   nil,    21,    20,
    20,    20,    21,    53,   nil,   nil,    60,    53,   nil,   nil,
    60,    21,   nil,   nil,   nil,   nil,    53,   nil,   nil,    60,
   nil,   nil,   nil,   nil,    21,    21,    21,    21,   nil,    53,
    53,    53,    53,    60,    60,    60,    61,   nil,   nil,   nil,
    61,    63,   nil,   nil,    71,    63,   nil,   nil,    71,    61,
   nil,   nil,   nil,   nil,    63,   nil,   nil,    71,   nil,   nil,
   nil,   nil,    61,    61,    61,    61,   nil,    63,    63,    63,
    63,    71,    71,    71,    79,   nil,   nil,   nil,    79,    80,
   nil,   nil,   nil,    80,    81,   nil,   nil,    79,    81,   nil,
   nil,    90,    80,   nil,   nil,    90,   nil,    81,   nil,   nil,
    79,    79,    79,    79,    90,    80,    80,    80,    80,   nil,
    81,    81,    81,    81,   nil,   nil,   nil,    91,    90,    90,
    90,    91,    92,   nil,   nil,    93,    92,   nil,    94,    93,
    91,   nil,    94,   nil,   nil,    92,   nil,   nil,    93,   nil,
   nil,    94,   nil,   nil,    91,    91,    91,   nil,   nil,    92,
    92,    92,    93,    93,    93,    94,    94,    94,    95,   nil,
   nil,    96,    95,   nil,    97,    96,   nil,   nil,    97,    98,
   nil,    95,   nil,    98,    96,   nil,   nil,    97,   nil,   nil,
   nil,   nil,    98,   nil,   nil,    95,    95,    95,    96,    96,
    96,    97,    97,    97,   nil,    99,    98,    98,    98,    99,
   100,   nil,   nil,   101,   100,   nil,   102,   101,    99,   nil,
   102,   nil,   nil,   100,   nil,   nil,   101,   nil,   nil,   102,
   nil,   nil,    99,    99,    99,   nil,   nil,   100,   100,   100,
   101,   101,   101,   102,   102,   102,   103,   nil,   nil,   nil,
   103,   123,   nil,   123,   nil,   123,   152,   nil,   nil,   103,
   152,   nil,   nil,   156,   123,   nil,   nil,   156,   159,   152,
   nil,   nil,   159,   103,   103,   103,   156,   123,   123,   123,
   123,   159,   152,   152,   152,   152,   nil,   nil,   nil,   156,
   156,   156,   156,   nil,   160,   159,   159,   159,   160,   170,
   nil,   nil,   120,   170,   nil,   nil,   nil,   160,   nil,   nil,
   nil,   nil,   170,   120,   120,   120,   120,   120,   120,   nil,
   nil,   160,   160,   160,   nil,   170,   170,   170,   170,    58,
    58,    58,    58,    58,    58,   nil,    58,    58,    58,    58,
    58,    58,    58,   nil,   nil,   nil,   nil,   nil,    58,   107,
   107,   107,   107,   107,   107,   nil,   107,   107,   107,   107,
   107,   107,   107,   nil,   nil,   nil,   nil,   nil,   107,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    70,    70,    70,
    70,    70,    70,   nil,   nil,    70,    70,    70,    70,   136,
   136,   136,   136,   136,   136,   137,   137,   137,   137,   137,
   137,   138,   138,   138,   138,   138,   138,   139,   139,   139,
   139,   139,   139,   140,   140,   140,   140,   140,   140,   141,
   141,   141,   141,   141,   141,   142,   142,   142,   142,   142,
   142,   167,   167,   167,   167,   167,   167,   168,   168,   168,
   168,   168,   168 ]

racc_action_pointer = [
   nil,     5,    38,    80,   nil,    47,   nil,    74,   nil,    38,
   nil,   651,   110,   -32,   108,   nil,   228,   234,   nil,   239,
   245,   271,    80,    -4,    89,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -34,   nil,   105,     3,   nil,    -4,
   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,   580,   nil,
   279,   309,   nil,   314,   nil,   nil,   108,   nil,    -6,   136,
   658,   317,   137,   109,   nil,   nil,   202,    98,   nil,   347,
   352,   357,   112,   670,   nil,   nil,    10,   171,   nil,   nil,
   364,   390,   395,   398,   401,   431,   434,   437,   442,   468,
   473,   476,   479,   509,   126,   202,   142,   600,   nil,    71,
   nil,   nil,   nil,   104,   142,   143,   nil,   nil,   nil,   nil,
   564,   137,   144,   514,   nil,   146,   nil,   nil,   nil,    33,
    66,   134,   157,   159,   160,   196,   670,   676,   682,   688,
   694,   700,   706,   nil,   nil,     4,   213,   -24,   -13,   214,
   nil,   nil,   519,   nil,   215,   nil,   526,   170,   nil,   531,
   557,   nil,    38,   nil,   nil,    -3,   nil,   712,   718,   nil,
   562,   203,   nil,    46,   nil ]

racc_action_default = [
    -3,  -105,    -1,  -105,    -2,  -105,   175,   -47,   -46,    -6,
   -48,  -105,  -105,   -98,    -7,    -9,  -105,  -105,   -12,  -105,
  -105,  -105,  -105,  -105,  -105,   -79,   -80,   -81,   -82,   -83,
   -84,   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -93,
   -94,   -95,   -96,   -97,  -105,   -51,  -105,   -98,    -5,   -99,
  -100,  -102,  -103,  -105,   -10,   -43,   -44,   -45,   -53,   -54,
  -105,  -105,   -63,  -105,   -75,   -76,   -77,   -11,  -105,  -105,
  -105,  -105,  -105,   -29,   -32,   -33,   -34,   -35,   -36,  -105,
  -105,  -105,  -105,  -105,   -52,    -4,   -99,    -8,  -101,   -14,
  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,  -105,
  -105,  -105,  -105,  -105,   -61,  -105,  -105,   -73,   -74,    -6,
   -23,   -24,  -104,    -6,  -105,  -105,   -19,   -20,   -21,   -22,
  -105,    -6,  -105,  -105,   -41,  -105,   -42,   -49,   -50,   -55,
   -56,   -57,   -58,   -59,   -60,   -64,   -65,   -66,   -67,   -68,
   -69,   -70,   -71,   -62,   -72,   -25,  -105,  -105,  -105,  -105,
   -30,   -31,   -38,   -78,  -105,   -26,  -105,    -6,   -15,  -105,
  -105,   -16,  -105,   -39,   -13,  -105,   -28,   -17,   -18,   -37,
  -105,    -6,   -40,   -25,   -27 ]

racc_goto_table = [
    12,    24,    54,    67,    70,    68,    78,    72,    75,    74,
   109,   115,    88,   114,    77,   154,    46,    48,    49,    45,
   106,     1,   108,     2,     4,     7,     9,    87,    69,   127,
    73,   162,    10,    44,   nil,   nil,   nil,   nil,   nil,    89,
   nil,    24,   nil,   174,   104,   105,   nil,   107,   nil,    88,
   nil,    85,    86,   nil,   nil,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   124,   125,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,    46,   160,
   159,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,    24,   nil,   nil,   146,    24,    78,   171,   150,   151,
   nil,   nil,   149,    24,    77,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   163,   nil,
   nil,   nil,   165,   167,   168,   nil,   nil,   nil,   166,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   172,   nil,   nil,   nil,
   nil,   nil,   173,    24 ]

racc_goto_check = [
     6,    26,    12,    12,    17,    12,    13,    12,    24,    25,
    14,    19,    34,    18,    26,    15,    22,     7,    10,    31,
    32,     1,    32,     2,     3,     4,     5,     9,    16,    20,
    23,    27,    29,    30,   nil,   nil,   nil,   nil,   nil,    12,
   nil,    26,   nil,    15,    17,    17,   nil,    17,   nil,    34,
   nil,     7,    10,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    17,    17,    17,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,    17,    22,    19,
    18,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     6,    26,   nil,   nil,     6,    26,    13,    14,    24,    25,
   nil,   nil,     6,    26,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,    12,    17,    17,   nil,   nil,   nil,     6,    26,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,
   nil,   nil,     6,    26 ]

racc_goto_pointer = [
   nil,    21,    23,    22,    20,    19,    -9,     4,   nil,   -22,
     5,   nil,   -14,   -16,   -58,  -130,     8,   -16,   -57,   -59,
   -53,   nil,     5,     8,   -14,   -13,    -8,  -121,   nil,    25,
    22,     8,   -41,   nil,   -37 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    14,
   nil,    15,   126,    18,   nil,   nil,   nil,    58,   nil,   nil,
   111,   155,    22,   nil,   nil,   nil,    64,   nil,    65,   nil,
   nil,   nil,    59,    62,    50 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_1,
  2, 71, :_reduce_2,
  0, 71, :_reduce_3,
  6, 72, :_reduce_4,
  2, 75, :_reduce_5,
  0, 77, :_reduce_6,
  1, 77, :_reduce_7,
  3, 77, :_reduce_8,
  1, 78, :_reduce_9,
  2, 78, :_reduce_10,
  2, 78, :_reduce_11,
  1, 78, :_reduce_12,
  6, 78, :_reduce_13,
  3, 78, :_reduce_14,
  5, 78, :_reduce_15,
  5, 78, :_reduce_16,
  5, 85, :_reduce_17,
  5, 85, :_reduce_18,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  0, 84, :_reduce_25,
  1, 84, :_reduce_26,
  5, 84, :_reduce_27,
  2, 90, :_reduce_28,
  2, 80, :_reduce_29,
  3, 92, :_reduce_30,
  3, 92, :_reduce_31,
  1, 92, :_reduce_32,
  1, 92, :_reduce_33,
  1, 94, :_reduce_34,
  1, 94, :_reduce_35,
  1, 93, :_reduce_none,
  5, 93, :_reduce_37,
  0, 96, :_reduce_38,
  1, 96, :_reduce_39,
  3, 96, :_reduce_40,
  3, 82, :_reduce_41,
  3, 82, :_reduce_42,
  1, 97, :_reduce_43,
  1, 97, :_reduce_44,
  1, 97, :_reduce_45,
  1, 73, :_reduce_46,
  0, 74, :_reduce_47,
  1, 74, :_reduce_none,
  4, 98, :_reduce_49,
  3, 99, :_reduce_50,
  1, 99, :_reduce_51,
  2, 100, :_reduce_52,
  1, 81, :_reduce_53,
  1, 81, :_reduce_54,
  3, 86, :_reduce_55,
  3, 86, :_reduce_56,
  3, 86, :_reduce_57,
  3, 86, :_reduce_58,
  3, 86, :_reduce_59,
  3, 86, :_reduce_60,
  2, 86, :_reduce_61,
  3, 86, :_reduce_62,
  1, 86, :_reduce_63,
  3, 101, :_reduce_64,
  3, 101, :_reduce_65,
  3, 101, :_reduce_66,
  3, 101, :_reduce_67,
  3, 101, :_reduce_68,
  3, 101, :_reduce_69,
  3, 101, :_reduce_70,
  3, 101, :_reduce_71,
  3, 101, :_reduce_72,
  2, 101, :_reduce_73,
  2, 101, :_reduce_74,
  1, 102, :_reduce_75,
  1, 102, :_reduce_76,
  1, 102, :_reduce_77,
  4, 95, :_reduce_78,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_97,
  0, 76, :_reduce_98,
  1, 76, :_reduce_99,
  1, 79, :_reduce_100,
  2, 79, :_reduce_101,
  1, 103, :_reduce_102,
  1, 103, :_reduce_none,
  1, 89, :_reduce_104 ]

racc_reduce_n = 105

racc_shift_n = 175

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kDTYPE_UINT => 18,
  :kDTYPE_LINT => 19,
  :kDTYPE_LLINT => 20,
  :kDTYPE_CHAR => 21,
  :kDTYPE_I8 => 22,
  :kDTYPE_I16 => 23,
  :kDTYPE_I32 => 24,
  :kDTYPE_I64 => 25,
  :kDTYPE_UI8 => 26,
  :kDTYPE_UI16 => 27,
  :kDTYPE_UI32 => 28,
  :kDTYPE_UI64 => 29,
  :kDTYPE_INT => 30,
  :kDTYPE_F32 => 31,
  :kDTYPE_F64 => 32,
  :kDTYPE_LF64 => 33,
  :kDTYPE_ROBJ => 34,
  :kDTYPE_ULINT => 35,
  :kDTYPE_ULLINT => 36,
  :tLPAREN => 37,
  :tRPAREN => 38,
  :tLSQUARE => 39,
  :tRSQUARE => 40,
  :tIDENTIFIER => 41,
  :tNL => 42,
  :tCOMMA => 43,
  :tSQUOTE => 44,
  :tSCOLON => 45,
  :EOF => 46,
  :tDOT => 47,
  :tQMARK => 48,
  :tPLUS => 49,
  :tMINUS => 50,
  :tMULTIPLY => 51,
  :tDIVIDE => 52,
  :tEXPO => 53,
  :tMODULUS => 54,
  :tASSIGN => 55,
  :tEQ => 56,
  :tLT => 57,
  :tLTEQ => 58,
  :tGT => 59,
  :tGTEQ => 60,
  :tANDOP => 61,
  :tOROP => 62,
  :tBANG => 63,
  :tINTEGER => 64,
  :tFLOAT => 65,
  :tSINGLE_CHAR => 66,
  :UMINUS => 67,
  :tNEQ => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tPLUS",
  "tMINUS",
  "tMULTIPLY",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "methods",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_terms",
  "stmts",
  "stmt",
  "terms",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "dtype",
  "decl_or_init",
  "var_init",
  "normal_decl",
  "array_ref",
  "array_list",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "atomic_value",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_4(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_7(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          if di[:name].is_a? Expression::ArrayRef
            var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
          else
            var = Statement::VarDecl.new(dtype, di[:name], di[:value])
          end
          variables << var
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_10(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_11(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_12(val, _values, result)
          match = val[0]
      result = Statement::Assign.new match[:name], match[:value]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_13(val, _values, result)
          result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_14(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_15(val, _values, result)
          result = Statement::For.new *val[1], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_16(val, _values, result)
     result = Statement::While.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_17(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_18(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_25(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_26(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_27(val, _values, result)
          result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_28(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_29(val, _values, result)
            result = {
          dtype: val[0],
          decl_or_init: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_31(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_32(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_33(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_34(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_35(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_37(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_39(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_40(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_41(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_42(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_43(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_44(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_45(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_46(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_49(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_50(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_51(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_52(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_55(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_56(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_57(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_58(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_59(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_60(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_61(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_62(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_64(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_65(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_66(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_67(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_68(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_69(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_70(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_71(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_72(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_73(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_74(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_75(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_76(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_77(val, _values, result)
     result = Expression::Name.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_78(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_97(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_100(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_104(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
