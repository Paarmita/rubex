#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 569)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'92,93,95,221,231,221,74,96,97,212,138,113,114,115,12,137,83,75,162,163',
'75,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,121,306,172,59,106,59,72,144,201,172,272,173,116,202,122,271,75',
'265,75,162,163,175,73,162,163,162,163,120,170,112,123,15,92,93,95,124',
'109,110,111,96,97,162,163,113,114,115,12,12,83,17,11,10,16,117,103,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,173',
'290,166,106,21,21,142,22,22,72,144,116,142,122,289,21,144,24,22,219',
'165,75,25,162,163,73,120,75,112,123,15,92,93,95,124,109,110,111,96,97',
'162,163,113,114,115,12,12,83,162,163,10,16,117,103,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,15,320,15,106,21,21',
'21,22,22,22,26,116,75,122,21,28,12,22,12,11,10,16,10,16,21,51,120,22',
'112,123,56,92,93,95,124,109,110,111,96,97,162,163,113,114,115,12,21',
'83,314,22,57,315,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,121,172,59,173,106,177,178,179,180,181,182,61,116',
'62,122,177,178,179,180,181,182,59,183,184,185,186,187,120,65,112,123',
'59,92,93,95,124,109,110,111,96,97,162,163,113,114,115,12,71,83,179,180',
'181,182,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,121,162,163,132,106,177,178,179,180,181,182,141,116,146,122',
'177,178,179,180,181,182,149,183,184,185,186,187,120,164,112,123,174',
'92,93,95,124,109,110,111,96,97,162,163,113,114,115,12,203,83,179,180',
'181,182,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,121,162,163,59,106,177,178,179,180,181,182,213,116,132,122',
'162,163,298,299,226,227,173,183,184,185,186,187,120,166,112,123,172',
'92,93,95,124,109,110,111,96,97,228,229,113,114,115,12,219,83,162,163',
'162,163,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,121,162,163,223,106,177,178,179,180,181,182,234,116,236,122',
'298,299,239,240,264,181,59,183,184,185,186,187,120,132,112,123,149,92',
'93,95,124,109,110,111,96,97,281,282,113,114,115,12,162,83,181,181,181',
'181,117,103,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,121,291,294,295,106,300,113,114,115,303,240,132,116,309,122,75',
'117,322,132,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153,,113',
'114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110,111',
'121,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,',
'124,109,110,111,121,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120',
',112,123,,,,,124,109,110,111,160,,,,153,,113,114,115,,,,116,,122,,117',
',,,,,177,178,179,180,181,182,,112,123,,,,,124,109,110,111,121,184,185',
',153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109',
'110,111,121,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112',
'123,,,,,124,109,110,111,121,,,,153,,113,114,115,,,,116,,122,,117,,,',
',,,,,,,120,,112,123,,,,,124,109,110,111,160,,,,153,,113,114,115,,,,116',
',122,,117,113,114,115,,,,,,,,117,,112,123,,,,,124,109,110,111,160,,',
',153,,113,114,115,,,160,116,,122,153,117,113,114,115,,,,116,,122,,117',
',112,123,,,,,124,109,110,111,121,112,123,,153,,,124,109,110,111,160',
'116,,122,153,,,113,114,115,,,116,,122,,120,117,112,123,,,,,124,109,110',
'111,,112,123,,,,,124,109,110,111,,121,,,,153,,113,114,115,,,,116,,122',
',117,,,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153,,113,114',
'115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110,111,121',
',,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124',
'109,110,111,121,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,',
'112,123,,,,,124,109,110,111,121,,,,153,,113,114,115,,,,116,,122,,117',
',,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153,,113,114,115,',
',,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153',
',113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110',
'111,121,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123',
',,,,124,109,110,111,160,,,,153,,113,114,115,,,,116,,122,,117,113,114',
'115,,,,,,,,117,,112,123,,,,,124,109,110,111,160,,,,153,,113,114,115',
',,160,116,,122,153,117,113,114,115,,,,116,,122,,117,,112,123,,,,,124',
'109,110,111,160,112,123,,153,,,124,109,110,111,160,116,,122,153,,113',
'114,115,,,,116,,122,,117,,112,123,,,,,124,109,110,111,,112,123,,,,,124',
'109,110,111,160,,,,153,,113,114,115,,,,116,,122,,117,113,114,115,,,',
',,,,117,,112,123,,,,,124,109,110,111,160,,,,153,,113,114,115,,,160,116',
',122,153,117,113,114,115,,,,116,,122,,117,,112,123,,,,,124,109,110,111',
'160,112,123,,153,,,124,109,110,111,160,116,,122,153,,113,114,115,,,',
'116,,122,,117,,112,123,,,,,124,109,110,111,,112,123,,,,,124,109,110',
'111,160,,,,153,,113,114,115,,,,116,,122,,117,113,114,115,,,,,,,,117',
',112,123,,,,,124,109,110,111,160,,,,153,,113,114,115,,,160,116,,122',
'153,117,113,114,115,,,,116,,122,,117,,112,123,,,,,124,109,110,111,160',
'112,123,,153,,,124,109,110,111,160,116,,122,153,,113,114,115,,,,116',
',122,,117,,112,123,,,,,124,109,110,111,,112,123,,,,,124,109,110,111',
'160,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,177,178,179,180,181,182',
'112,123,,,,,124,109,110,111,160,183,184,185,153,,113,114,115,,,,116',
',122,,117,,,,,,,177,178,179,180,181,182,112,123,,,,,124,109,110,111',
'121,183,184,185,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112',
'123,,,,,124,109,110,111,121,,288,,153,,113,114,115,,,,116,,122,,117',
',,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153,,113,114,115,',
',,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110,111,121,,,,153',
',113,114,115,,,,116,,122,,117,,,,,,,,,,,120,,112,123,,,,,124,109,110',
'111,160,,,,153,,113,114,115,,,,116,,122,,117,,,,,,,,,,,,,112,123,,,',
',124,109,110,111,160,15,209,,153,,113,114,115,,,,116,,122,,117,12,,',
',10,16,,,,,,,112,123,,263,,,124,109,110,111,121,,,,153,177,178,179,180',
'181,182,,116,21,122,139,22,,,,,,183,184,185,186,187,120,,112,123,,,',
',124,109,110,111,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,210,,,,,21,,,22,,,,,,,12,,83,,,,,,,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,263,,,,,21,,,22,,,,177,178',
'179,180,181,182,,188,190,191,192,193,,,,,,183,184,185,186,187,12,,83',
',,,189,,,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,276,,,,,,,,,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,177,178,179,180,181,182,,188,190,191,192,193,,,,,,183,184,185',
'186,187,,,,,,,189,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,,-44,,,,,-44,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,,,,,130,30,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,,,,,130,177,178,179,180,181,182,,,226,227,228,229',
',,,,,183,184,185,186,187,177,178,179,180,181,182,177,178,179,180,181',
'182,,,,,,183,184,185,186,187,,183,184,185,186,187,177,178,179,180,181',
'182,177,178,179,180,181,182,,,,,,183,184,185,186,187,,183,184,185,186',
'187,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50' ]
        racc_action_table = arr = ::Array.new(2474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,70,70,157,161,310,63,70,70,135,83,70,70,70,70,83,70,63,102,102,135',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,293,108,157,70,310,61,215,127,106,208,106,70,127,70,208,293,197,215',
'161,161,108,61,157,157,310,310,70,106,70,70,19,148,148,148,70,70,70',
'70,148,148,197,197,148,148,148,148,19,148,1,19,19,19,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,236,243,104,148,148,19,87,148,19,236,87,148,269,148,242',
'2,269,10,2,242,104,87,11,243,243,236,148,269,148,148,23,204,204,204',
'148,148,148,148,204,204,150,150,204,204,204,204,23,204,156,156,23,23',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,0,316,64,204,5,23,67,5,23,67,12,204,316',
'204,76,15,0,76,64,0,0,0,64,64,77,17,204,77,204,204,24,220,220,220,204',
'204,204,204,220,220,218,218,220,220,220,220,89,220,304,89,25,304,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,153,26,153,220,257,257,257,257,257,257,27,220',
'28,220,253,253,253,253,253,253,55,257,257,257,257,257,220,56,220,220',
'57,223,223,223,220,220,220,220,223,223,235,235,223,223,223,223,60,223',
'246,246,246,246,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,241,241,74,223,258,258,258',
'258,258,258,85,223,88,223,254,254,254,254,254,254,90,258,258,258,258',
'258,223,103,223,223,107,231,231,231,223,223,223,223,231,231,244,244',
'231,231,231,231,129,231,247,247,247,247,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'245,245,131,231,259,259,259,259,259,259,136,231,143,231,278,278,279',
'279,281,281,144,259,259,259,259,259,231,151,231,231,154,299,299,299',
'231,231,231,231,299,299,282,282,299,299,299,299,155,299,287,287,305',
'305,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,318,318,158,299,260,260,260,260,260',
'260,164,299,166,299,321,321,167,168,196,198,201,260,260,260,260,260',
'299,212,299,299,217,317,317,317,299,299,299,299,317,317,224,225,317',
'317,317,317,233,317,248,249,250,251,317,317,317,317,317,317,317,317',
'317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,268',
'276,277,317,280,92,92,92,283,285,295,317,296,317,307,92,319,322,,,,',
',,,,317,,317,317,,,,,317,317,317,317,92,,,,92,,93,93,93,,,,92,,92,,93',
',,,,,,,,,,92,,92,92,,,,,92,92,92,92,93,,,,93,,95,95,95,,,,93,,93,,95',
',,,,,,,,,,93,,93,93,,,,,93,93,93,93,95,,,,95,,96,96,96,,,,95,,95,,96',
',,,,,,,,,,95,,95,95,,,,,95,95,95,95,96,,,,96,,97,97,97,,,,96,,96,,97',
',,,,,252,252,252,252,252,252,,96,96,,,,,96,96,96,96,97,252,252,,97,',
'120,120,120,,,,97,,97,,120,,,,,,,,,,,97,,97,97,,,,,97,97,97,97,120,',
',,120,,121,121,121,,,,120,,120,,121,,,,,,,,,,,120,,120,120,,,,,120,120',
'120,120,121,,,,121,,122,122,122,,,,121,,121,,122,,,,,,,,,,,121,,121',
'121,,,,,121,121,121,121,122,,,,122,,123,123,123,,,,122,,122,,123,124',
'124,124,,,,,,,,124,,122,122,,,,,122,122,122,122,123,,,,123,,149,149',
'149,,,124,123,,123,124,149,160,160,160,,,,124,,124,,160,,123,123,,,',
',123,123,123,123,149,124,124,,149,,,124,124,124,124,160,149,,149,160',
',,162,162,162,,,160,,160,,149,162,149,149,,,,,149,149,149,149,,160,160',
',,,,160,160,160,160,,162,,,,162,,163,163,163,,,,162,,162,,163,,,,,,',
',,,,162,,162,162,,,,,162,162,162,162,163,,,,163,,165,165,165,,,,163',
',163,,165,,,,,,,,,,,163,,163,163,,,,,163,163,163,163,165,,,,165,,170',
'170,170,,,,165,,165,,170,,,,,,,,,,,165,,165,165,,,,,165,165,165,165',
'170,,,,170,,172,172,172,,,,170,,170,,172,,,,,,,,,,,170,,170,170,,,,',
'170,170,170,170,172,,,,172,,173,173,173,,,,172,,172,,173,,,,,,,,,,,172',
',172,172,,,,,172,172,172,172,173,,,,173,,174,174,174,,,,173,,173,,174',
',,,,,,,,,,173,,173,173,,,,,173,173,173,173,174,,,,174,,175,175,175,',
',,174,,174,,175,,,,,,,,,,,174,,174,174,,,,,174,174,174,174,175,,,,175',
',177,177,177,,,,175,,175,,177,,,,,,,,,,,175,,175,175,,,,,175,175,175',
'175,177,,,,177,,178,178,178,,,,177,,177,,178,179,179,179,,,,,,,,179',
',177,177,,,,,177,177,177,177,178,,,,178,,180,180,180,,,179,178,,178',
'179,180,181,181,181,,,,179,,179,,181,,178,178,,,,,178,178,178,178,180',
'179,179,,180,,,179,179,179,179,181,180,,180,181,,182,182,182,,,,181',
',181,,182,,180,180,,,,,180,180,180,180,,181,181,,,,,181,181,181,181',
'182,,,,182,,183,183,183,,,,182,,182,,183,184,184,184,,,,,,,,184,,182',
'182,,,,,182,182,182,182,183,,,,183,,185,185,185,,,184,183,,183,184,185',
'186,186,186,,,,184,,184,,186,,183,183,,,,,183,183,183,183,185,184,184',
',185,,,184,184,184,184,186,185,,185,186,,187,187,187,,,,186,,186,,187',
',185,185,,,,,185,185,185,185,,186,186,,,,,186,186,186,186,187,,,,187',
',188,188,188,,,,187,,187,,188,189,189,189,,,,,,,,189,,187,187,,,,,187',
'187,187,187,188,,,,188,,190,190,190,,,189,188,,188,189,190,191,191,191',
',,,189,,189,,191,,188,188,,,,,188,188,188,188,190,189,189,,190,,,189',
'189,189,189,191,190,,190,191,,192,192,192,,,,191,,191,,192,,190,190',
',,,,190,190,190,190,,191,191,,,,,191,191,191,191,192,,,,192,,193,193',
'193,,,,192,,192,,193,,,,,,,255,255,255,255,255,255,192,192,,,,,192,192',
'192,192,193,255,255,255,193,,219,219,219,,,,193,,193,,219,,,,,,,256',
'256,256,256,256,256,193,193,,,,,193,193,193,193,219,256,256,256,219',
',240,240,240,,,,219,,219,,240,,,,,,,,,,,219,,219,219,,,,,219,219,219',
'219,240,,240,,240,,288,288,288,,,,240,,240,,288,,,,,,,,,,,240,,240,240',
',,,,240,240,240,240,288,,,,288,,298,298,298,,,,288,,288,,298,,,,,,,',
',,,288,,288,288,,,,,288,288,288,288,298,,,,298,,301,301,301,,,,298,',
'298,,301,,,,,,,,,,,298,,298,298,,,,,298,298,298,298,301,,,,301,,302',
'302,302,,,,301,,301,,302,,,,,,,,,,,,,301,301,,,,,301,301,301,301,302',
'133,133,,302,,315,315,315,,,,302,,302,,315,133,,,,133,133,,,,,,,302',
'302,,230,,,302,302,302,302,315,,,,315,230,230,230,230,230,230,,315,133',
'315,84,133,,,,,,230,230,230,230,230,315,,315,315,,,,,315,315,315,315',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,134,',
',,,84,,,84,,,,,,,134,,134,,,,,,,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,195,,,,,134,,,134,,',
',195,195,195,195,195,195,,195,195,195,195,195,,,,,,195,195,195,195,195',
'66,,66,,,,195,,,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,213,,,,,,,,,213,213,213,213,213,213,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,118,118,118,118,118,118,,118,118',
'118,118,118,,,,,,118,118,118,118,118,,,,,,,118,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,,132,,,',
',132,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
',,,,71,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,,,,,202,159,159,159,159,159,159,,,159,159,159,159',
',,,,,159,159,159,159,159,261,261,261,261,261,261,262,262,262,262,262',
'262,,,,,,261,261,261,261,261,,262,262,262,262,262,312,312,312,312,312',
'312,313,313,313,313,313,313,,,,,,312,312,312,312,312,,313,313,313,313',
'313,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58',
'58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271' ]
        racc_action_check = arr = ::Array.new(2474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   195,    93,    83,   nil,   nil,   148,   nil,   nil,   nil,   nil,
    86,    66,   155,   nil,   nil,   188,  2384,   222,   nil,    73,
   nil,   nil,   nil,   149,   158,   233,   221,   231,   227,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   240,   248,   250,  2405,   nil,
   271,    -9,   nil,   -46,   197,   nil,  2146,   150,   nil,   nil,
    -4,  2254,   nil,   nil,   303,   nil,   158,   168,   nil,   nil,
   nil,   nil,   nil,   -37,  2037,   305,   nil,    79,   358,   190,
   363,   nil,   567,   606,   nil,   645,   684,   723,   nil,   nil,
   nil,   nil,   -55,   358,    65,   nil,     5,   312,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2163,   nil,
   762,   801,   840,   879,   890,   nil,   nil,     3,   nil,   343,
   nil,   374,  2226,  1985,  2082,   -43,   368,   nil,   nil,   nil,
   nil,   nil,   nil,   389,   395,   nil,   nil,   nil,    72,   918,
    88,   394,   nil,   225,   407,   417,    96,    -6,   489,  2272,
   929,   -10,   969,  1008,   459,  1047,   461,   463,   451,   nil,
  1086,   nil,  1125,  1164,  1203,  1242,   nil,  1281,  1320,  1331,
  1359,  1370,  1409,  1448,  1459,  1487,  1498,  1537,  1576,  1587,
  1615,  1626,  1665,  1704,   nil,  2081,   470,    12,   455,   nil,
   nil,   468,  2280,   nil,   148,   nil,   nil,   nil,     5,   nil,
   nil,   nil,   480,  2176,   nil,    -1,   nil,   525,   164,  1743,
   224,   nil,   nil,   300,   489,   490,   nil,   nil,   nil,   nil,
  1969,   376,   nil,   474,   nil,   240,    71,   nil,   nil,   nil,
  1782,   276,    86,    71,   316,   352,   258,   334,   484,   485,
   486,   487,   693,   226,   302,  1675,  1714,   216,   292,   368,
   444,  2294,  2300,   nil,   nil,   nil,   nil,   nil,   574,    85,
   nil,  2426,   nil,   nil,   nil,   nil,   526,   530,   366,   434,
   578,   374,   394,   582,   nil,   519,   nil,   400,  1821,   nil,
   nil,   nil,   nil,    -3,   nil,   539,   586,   nil,  1860,   452,
   nil,  1899,  1938,   nil,   194,   402,   nil,   528,   nil,   nil,
    -4,   nil,  2322,  2328,   nil,  1977,   146,   528,   428,   544,
   nil,   508,   546,   nil,   nil ]

racc_action_default = [
    -6,  -190,  -183,    -2,    -4,  -190,    -7,    -9,   -10,   -11,
  -190,  -190,  -190,   -37,   -38,   -49,  -190,  -190,    -1,  -184,
  -185,  -187,  -188,    -5,   -13,  -190,  -190,  -190,  -190,   -94,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,   325,    -3,  -186,    -8,  -190,  -190,  -190,   -23,  -189,
  -114,  -113,   -50,  -190,    -6,   -14,  -190,  -190,   -24,   -94,
   -52,  -190,  -111,  -112,   -47,   -95,  -190,  -190,   -16,   -18,
   -19,   -20,   -94,  -190,  -190,   -26,   -28,  -190,  -190,  -183,
   -53,   -55,  -190,  -158,   -58,  -190,  -190,  -190,   -63,   -64,
   -65,   -66,   -67,  -190,  -141,   -94,  -156,  -149,  -156,  -102,
  -103,  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -120,  -121,
  -190,  -190,  -190,  -190,  -190,  -150,  -152,  -190,  -116,  -190,
  -119,  -190,   -94,  -190,  -190,  -190,  -190,   -30,   -31,   -22,
   -25,   -94,   -94,   -47,   -89,   -90,   -39,   -51,  -184,  -190,
   -56,  -141,  -149,  -156,  -156,   -57,  -159,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,   -82,   -85,   -86,
  -190,  -151,  -158,  -190,  -190,  -190,  -153,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -124,  -120,  -121,  -190,  -137,  -138,
  -139,  -190,  -190,  -118,   -52,   -94,   -43,   -45,  -190,   -12,
   -15,   -17,   -47,  -190,   -27,  -190,   -88,   -54,   -60,  -190,
   -52,   -76,   -77,   -52,  -190,  -190,   -72,   -73,   -74,   -75,
  -190,   -52,  -122,  -123,   -68,   -69,  -113,  -154,  -155,   -94,
  -190,   -99,  -190,  -190,  -100,  -101,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -142,  -143,  -144,
  -145,  -146,  -147,  -140,  -148,  -125,  -115,  -117,  -190,   -41,
   -42,   -94,   -48,   -21,   -29,   -94,  -190,  -190,  -160,   -78,
  -190,  -190,  -190,  -190,   -83,   -84,   -91,   -92,   -96,  -157,
  -161,   -40,   -46,   -32,   -94,   -47,  -190,   -79,  -190,   -52,
   -61,  -190,  -190,   -62,  -190,   -97,   -94,   -33,   -87,   -59,
  -190,   -81,   -70,   -71,   -93,  -190,   -35,   -52,   -98,  -190,
   -36,   -78,   -47,   -80,   -34 ]

racc_goto_table = [
    63,    29,   131,    58,    88,   104,   220,    60,     9,   207,
   108,   107,   128,   224,    86,   169,    54,    18,   155,   176,
   150,   156,    53,   157,    78,   161,    53,     9,   145,   225,
     1,     9,    64,   296,    66,    68,     3,    81,     2,    76,
    55,    19,    77,    69,    23,    67,    85,   136,   194,   197,
   168,    82,   274,   135,   319,    52,   129,    27,    70,   208,
   217,   140,   158,   167,   277,   176,   286,   304,   127,    69,
   196,   216,     9,   nil,    80,   323,   nil,   218,   nil,   nil,
   nil,   nil,   nil,   104,   nil,   nil,   214,    53,   108,   107,
   232,   233,   211,   235,   nil,   nil,   nil,   242,   241,   nil,
   156,   243,   244,   245,   147,    81,    84,   238,   204,   nil,
   nil,   nil,   nil,   215,   nil,   133,   134,   205,   nil,    82,
   nil,   nil,   nil,   nil,   nil,   nil,    54,   nil,   148,   nil,
   nil,   nil,   nil,   nil,   nil,   301,    53,    53,   268,   104,
   273,     9,    80,   267,   108,   107,   237,   278,   292,   284,
   270,    53,   302,   nil,   279,   104,   145,   280,   104,   317,
   108,   107,   nil,   108,   107,   283,   104,   nil,   287,   nil,
   nil,   108,   107,   nil,   nil,   nil,   269,   nil,   266,   nil,
   nil,   nil,   nil,   nil,   285,   nil,   nil,   129,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   275,   nil,
   nil,   nil,   159,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   145,   nil,   nil,   nil,   nil,   nil,   305,   nil,   nil,   nil,
   nil,   nil,   nil,   308,   nil,   nil,   310,   195,   198,   199,
   200,   nil,   nil,   311,   104,   nil,   nil,   nil,   nil,   108,
   107,   nil,   nil,   318,   nil,   nil,   293,   nil,   nil,   nil,
   324,   321,   104,   nil,   nil,   nil,   205,   108,   107,   nil,
   nil,   nil,   nil,   nil,   nil,   307,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   316,   nil,   nil,
   nil,   nil,   nil,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   312,   313 ]

racc_goto_check = [
    19,    18,    20,    13,    33,    47,    42,    31,    11,    34,
    58,    55,    61,    49,    24,    53,     8,     3,    40,    63,
    39,    39,    65,    39,    15,    39,    65,    11,    55,    50,
     1,    11,    13,    43,    13,    22,     4,    17,     2,     7,
    12,     5,    14,    18,     5,    21,    23,    25,    39,    39,
    24,    18,    26,    19,    27,     4,    18,    30,    32,    35,
    37,    22,    44,    52,    54,    63,    56,    57,    60,    18,
    62,    20,    11,   nil,    11,    43,   nil,    39,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    24,    65,    58,    55,
    39,    39,    15,    39,   nil,   nil,   nil,    40,    39,   nil,
    39,    39,    39,    39,     3,    17,     5,    55,    13,   nil,
   nil,   nil,   nil,    19,   nil,     5,     5,    18,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    49,    65,    65,    33,    47,
    20,    11,    11,    61,    58,    55,    31,    39,    34,    53,
    24,    65,    50,   nil,    33,    47,    55,    33,    47,    42,
    58,    55,   nil,    58,    55,    33,    47,   nil,    39,   nil,
   nil,    58,    55,   nil,   nil,   nil,    19,   nil,    13,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    55,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,    39,    48,    48,    48,
    48,   nil,   nil,    33,    47,   nil,   nil,   nil,   nil,    58,
    55,   nil,   nil,    39,   nil,   nil,    19,   nil,   nil,   nil,
    20,    33,    47,   nil,   nil,   nil,    18,    58,    55,   nil,
   nil,   nil,   nil,   nil,   nil,    19,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    48 ]

racc_goto_pointer = [
   nil,    30,    38,    15,    36,    39,   nil,   -25,    -7,   nil,
   nil,     8,    16,   -23,   -24,   -42,   nil,   -29,   -15,   -29,
   -72,   -13,   -23,   -23,   -55,   -36,  -161,  -262,   nil,   nil,
    42,   -20,    -2,   -66,  -123,   -73,   nil,   -88,   nil,   -72,
   -75,   nil,  -151,  -246,   -34,   nil,   nil,   -65,   106,  -146,
  -130,   nil,   -42,   -90,  -151,   -59,  -174,  -221,   -60,   nil,
    -3,   -59,   -51,   -89,   nil,     3 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,    99,   nil,   222,   nil,   nil,    79,   101,   105,    87,
   nil,   nil,   nil,   nil,   206,   nil,   nil,   nil,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,    89,    90,    91,   102,
   nil,    94,   nil,   nil,   nil,    98,   100,   151,   118,   nil,
   nil,   297,   nil,   nil,   143,   152,   nil,   nil,   154,   125,
   nil,   nil,   119,   171,   126,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 91, :_reduce_1,
  1, 92, :_reduce_2,
  3, 92, :_reduce_3,
  1, 94, :_reduce_4,
  2, 94, :_reduce_5,
  0, 97, :_reduce_6,
  1, 97, :_reduce_7,
  3, 97, :_reduce_8,
  1, 98, :_reduce_9,
  1, 98, :_reduce_10,
  1, 98, :_reduce_11,
  7, 100, :_reduce_12,
  0, 102, :_reduce_13,
  2, 102, :_reduce_14,
  7, 96, :_reduce_15,
  1, 104, :_reduce_16,
  3, 104, :_reduce_17,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  4, 106, :_reduce_21,
  6, 101, :_reduce_22,
  0, 111, :_reduce_23,
  1, 111, :_reduce_24,
  3, 111, :_reduce_25,
  2, 112, :_reduce_26,
  3, 113, :_reduce_27,
  1, 113, :_reduce_28,
  4, 107, :_reduce_29,
  1, 115, :_reduce_none,
  1, 115, :_reduce_31,
  2, 116, :_reduce_32,
  3, 116, :_reduce_33,
  7, 116, :_reduce_34,
  0, 117, :_reduce_35,
  1, 117, :_reduce_36,
  1, 99, :_reduce_37,
  1, 99, :_reduce_38,
  6, 118, :_reduce_39,
  8, 119, :_reduce_40,
  2, 124, :_reduce_41,
  2, 124, :_reduce_42,
  1, 124, :_reduce_43,
  0, 125, :_reduce_44,
  1, 125, :_reduce_45,
  3, 125, :_reduce_46,
  0, 110, :_reduce_47,
  3, 110, :_reduce_48,
  0, 120, :_reduce_49,
  2, 120, :_reduce_50,
  2, 123, :_reduce_51,
  0, 126, :_reduce_52,
  1, 126, :_reduce_53,
  3, 126, :_reduce_54,
  1, 127, :_reduce_55,
  2, 127, :_reduce_56,
  2, 127, :_reduce_57,
  1, 127, :_reduce_58,
  6, 127, :_reduce_59,
  3, 127, :_reduce_60,
  5, 127, :_reduce_61,
  5, 127, :_reduce_62,
  1, 127, :_reduce_63,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_67,
  3, 136, :_reduce_68,
  3, 135, :_reduce_69,
  5, 134, :_reduce_70,
  5, 134, :_reduce_71,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  0, 133, :_reduce_78,
  1, 133, :_reduce_79,
  5, 133, :_reduce_80,
  2, 141, :_reduce_81,
  2, 128, :_reduce_82,
  3, 142, :_reduce_83,
  3, 142, :_reduce_84,
  1, 142, :_reduce_85,
  1, 142, :_reduce_86,
  6, 114, :_reduce_87,
  3, 114, :_reduce_88,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 143, :_reduce_91,
  1, 146, :_reduce_none,
  3, 146, :_reduce_93,
  0, 109, :_reduce_94,
  2, 109, :_reduce_95,
  0, 147, :_reduce_96,
  1, 147, :_reduce_97,
  3, 147, :_reduce_98,
  3, 131, :_reduce_99,
  3, 131, :_reduce_100,
  3, 131, :_reduce_101,
  1, 149, :_reduce_102,
  1, 149, :_reduce_103,
  1, 149, :_reduce_104,
  1, 149, :_reduce_105,
  1, 149, :_reduce_106,
  1, 149, :_reduce_107,
  1, 149, :_reduce_108,
  1, 149, :_reduce_109,
  1, 149, :_reduce_110,
  2, 121, :_reduce_111,
  2, 121, :_reduce_112,
  1, 121, :_reduce_113,
  0, 122, :_reduce_114,
  4, 122, :_reduce_115,
  1, 150, :_reduce_116,
  3, 150, :_reduce_117,
  2, 151, :_reduce_118,
  1, 151, :_reduce_119,
  1, 129, :_reduce_120,
  1, 129, :_reduce_121,
  3, 129, :_reduce_122,
  3, 129, :_reduce_123,
  2, 129, :_reduce_124,
  3, 129, :_reduce_125,
  3, 138, :_reduce_126,
  3, 138, :_reduce_127,
  3, 138, :_reduce_128,
  3, 138, :_reduce_129,
  3, 138, :_reduce_130,
  3, 138, :_reduce_131,
  3, 138, :_reduce_132,
  3, 138, :_reduce_133,
  3, 138, :_reduce_134,
  3, 138, :_reduce_135,
  3, 138, :_reduce_136,
  2, 138, :_reduce_137,
  2, 138, :_reduce_138,
  2, 138, :_reduce_139,
  3, 138, :_reduce_140,
  1, 138, :_reduce_141,
  3, 152, :_reduce_142,
  3, 152, :_reduce_143,
  3, 152, :_reduce_144,
  3, 152, :_reduce_145,
  3, 152, :_reduce_146,
  3, 152, :_reduce_147,
  3, 152, :_reduce_148,
  1, 137, :_reduce_149,
  1, 137, :_reduce_150,
  2, 137, :_reduce_151,
  1, 137, :_reduce_none,
  2, 154, :_reduce_153,
  3, 148, :_reduce_154,
  3, 148, :_reduce_155,
  0, 153, :_reduce_156,
  3, 153, :_reduce_157,
  0, 130, :_reduce_158,
  1, 130, :_reduce_159,
  3, 130, :_reduce_160,
  4, 145, :_reduce_161,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_182,
  0, 93, :_reduce_183,
  1, 93, :_reduce_184,
  1, 95, :_reduce_185,
  2, 95, :_reduce_186,
  1, 155, :_reduce_187,
  1, 155, :_reduce_none,
  1, 103, :_reduce_189 ]

racc_reduce_n = 190

racc_shift_n = 325

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kDTYPE_UINT => 27,
  :kDTYPE_LINT => 28,
  :kDTYPE_LLINT => 29,
  :kDTYPE_CHAR => 30,
  :kDTYPE_I8 => 31,
  :kDTYPE_I16 => 32,
  :kDTYPE_I32 => 33,
  :kDTYPE_I64 => 34,
  :kDTYPE_UI8 => 35,
  :kDTYPE_UI16 => 36,
  :kDTYPE_UI32 => 37,
  :kDTYPE_UI64 => 38,
  :kDTYPE_INT => 39,
  :kDTYPE_F32 => 40,
  :kDTYPE_F64 => 41,
  :kDTYPE_LF64 => 42,
  :kDTYPE_ROBJ => 43,
  :kDTYPE_ULINT => 44,
  :kDTYPE_ULLINT => 45,
  :kDTYPE_VOID => 46,
  :tCUSTOM_DTYPE => 47,
  :tLPAREN => 48,
  :tRPAREN => 49,
  :tLSQUARE => 50,
  :tRSQUARE => 51,
  :tIDENTIFIER => 52,
  :tNL => 53,
  :tCOMMA => 54,
  :tSQUOTE => 55,
  :tSCOLON => 56,
  :EOF => 57,
  :tDOT => 58,
  :tQMARK => 59,
  :tSYMBOL => 60,
  :tPLUS => 61,
  :tMINUS => 62,
  :tSTAR => 63,
  :tDIVIDE => 64,
  :tEXPO => 65,
  :tMODULUS => 66,
  :tASSIGN => 67,
  :tEQ => 68,
  :tLT => 69,
  :tLTEQ => 70,
  :tGT => 71,
  :tGTEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tBANG => 75,
  :tOP_ASSIGN => 76,
  :tSTRING => 77,
  :tBIT_AND => 78,
  :tBIT_OR => 79,
  :tBIT_XOR => 80,
  :tBIT_LSHIFT => 81,
  :tBIT_RSHIFT => 82,
  :tBIT_NOT => 83,
  :tINTEGER => 84,
  :tFLOAT => 85,
  :tSINGLE_CHAR => 86,
  :ADDRESS_OF => 87,
  :UMINUS => 88,
  :tNEQ => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "dtype",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_22(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_23(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_25(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_26(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_29(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_31(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_32(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_33(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_34(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_39(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_40(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_41(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_42(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_43(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_44(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_45(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_46(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_48(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_49(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_50(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_52(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_53(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_54(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_55(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_56(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_57(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_58(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_59(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_60(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_61(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_67(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_68(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_69(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_71(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_79(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_80(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_81(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_82(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_86(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_87(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_88(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_91(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_93(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_94(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_95(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_96(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_97(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_98(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_100(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_101(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_111(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_112(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_113(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_114(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_115(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_116(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_117(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_118(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_119(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_121(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_124(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_138(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_139(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_141(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_148(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_151(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_153(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_154(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_155(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_159(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_160(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_161(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_182(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_189(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
