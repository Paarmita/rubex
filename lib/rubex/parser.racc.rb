#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 671)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'110,111,113,265,276,265,61,114,115,200,74,134,135,136,13,94,69,74,194',
'195,356,138,124,357,121,122,154,123,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,147,73,139,71,127,71,62,332',
'283,206,84,207,137,140,243,83,148,22,317,244,23,194,195,143,94,194,195',
'194,195,146,204,133,153,149,16,110,111,113,150,130,131,132,114,115,194',
'195,134,135,136,13,13,69,18,12,11,17,138,124,25,121,122,154,123,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'147,207,139,206,127,22,22,200,23,23,90,26,137,140,378,22,148,327,23',
'27,350,337,326,143,209,29,336,199,91,146,94,133,153,149,16,110,111,113',
'150,130,131,132,114,115,194,195,134,135,136,13,13,69,56,337,11,17,138',
'124,336,121,122,154,123,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,147,16,139,337,127,93,22,90,336,23,172',
'172,137,140,174,174,148,13,94,349,12,11,17,143,336,91,71,94,94,146,75',
'133,153,149,16,110,111,113,150,130,131,132,114,115,71,99,134,135,136',
'13,13,69,194,195,11,17,138,124,94,121,122,154,123,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,147,16,139',
'79,127,174,22,380,22,23,89,23,137,140,194,195,148,13,94,92,94,11,17',
'143,22,22,62,23,23,146,100,133,153,149,16,110,111,113,150,130,131,132',
'114,115,194,195,134,135,136,13,13,69,194,195,11,17,138,124,159,121,122',
'154,123,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,147,206,139,207,127,71,217,218,219,220,221,222,137,140',
'194,195,148,217,218,219,220,221,222,143,223,224,225,226,227,146,159',
'133,153,149,169,110,111,113,150,130,131,132,114,115,194,195,134,135',
'136,13,22,69,22,23,171,23,138,124,176,121,122,154,123,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,147,179',
'139,187,127,187,217,218,219,220,221,222,137,140,194,195,148,217,218',
'219,220,221,222,143,223,224,225,226,227,146,187,133,153,149,198,110',
'111,113,150,130,131,132,114,115,194,195,134,135,136,13,352,69,208,351',
'71,354,138,124,71,121,122,154,123,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,147,71,139,242,127,245,217,218',
'219,220,221,222,137,140,367,368,148,219,220,221,222,272,273,143,223',
'224,225,226,227,146,247,133,153,149,71,110,111,113,150,130,131,132,114',
'115,274,275,134,135,136,13,253,69,219,220,221,222,138,124,256,121,122',
'154,123,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,147,159,139,207,127,134,135,136,194,195,194,195,137,140',
'200,138,148,194,195,206,154,367,368,143,267,281,286,287,71,146,319,133',
'153,149,221,71,247,179,150,130,131,132,340,341,342,16,361,147,194,139',
'221,184,134,135,136,221,221,221,200,137,140,13,138,148,360,11,17,154',
'94,363,143,369,372,287,374,71,146,377,133,153,149,159,382,200,388,150',
'130,131,132,159,,,,,147,,139,,184,134,135,136,,,,22,137,140,23,138,148',
',,,154,,,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,190,,139',
',184,134,135,136,,,318,,137,140,,138,148,,,,154,,,,217,218,219,220,221',
'222,,133,153,149,,,,,150,130,131,132,223,224,225,226,227,147,,139,,184',
'134,135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149',
',,,,150,130,131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138',
'148,,,,154,,,217,218,219,220,221,222,146,,133,153,149,,,,,150,130,131',
'132,224,225,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134',
'135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,',
'150,130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148',
',,,154,,,,217,218,219,220,221,222,,133,153,149,,,,,150,130,131,132,223',
'224,225,226,227,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,,217,218,219,220,221,222,,133,153,149,,,,,150,130,131,132,223,224',
'225,226,227,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,',
',217,218,219,220,221,222,,133,153,149,,,,,150,130,131,132,223,224,225',
'226,227,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,143',
',,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134,135',
'136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,,150',
'130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,,217,218,219,220,221,222,,133,153,149,,,,,150,130,131,132,223,224',
'225,226,227,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,',
'143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134',
'135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,',
'150,130,131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148',
',,,154,,,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139',
',184,134,135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153',
'149,,,,,150,130,131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,',
'138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,',
'147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146',
',133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134,135,136,,,,',
'137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,,150,130,131',
'132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,143',
',,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134,135',
'136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,,150',
'130,131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134',
'135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,',
'150,130,131,132,,,,,,,,139,,184,134,135,136,,,,,137,140,,138,,,,,154',
',,,217,218,219,220,221,222,,133,153,,,,,,,130,131,132,223,224,225,226',
'227,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,217,218',
'219,220,221,222,,133,153,149,,,,,150,130,131,132,223,224,225,,,239,',
'139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,217,218,219,220',
'221,222,,133,153,149,,,,,150,130,131,132,223,224,225,,,239,,139,,184',
'134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150',
'130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,,,,,,,,,133,153,149,,,,,150,130,131,132,,,,,,239,,139,,184,134,135',
'136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150,130,131',
'132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,',
',,,,,133,153,149,,,,,150,130,131,132,,,,,,239,,139,,184,134,135,136',
',,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150,130,131,132',
',,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,',
',133,153,149,,,,,150,130,131,132,,,,,,239,,139,,184,134,135,136,,,,',
'137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150,130,131,132,,',
',,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133',
'153,149,,,,,150,130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140',
',138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150,130,131,132,,,,,,239,',
'139,,184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149',
',,,,150,130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138',
'148,,,,154,,,,,,,,,,,133,153,149,,,,,150,130,131,132,,,,,,239,,139,',
'184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,',
',,150,130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148',
',,,154,,,,,,,,,,,133,153,149,,,,,150,130,131,132,,,,,,239,,139,,184',
'134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,,,,,133,153,149,,,,,150',
'130,131,132,,,,,,239,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154',
',,,,,,134,135,136,,133,153,149,,,,138,150,130,131,132,154,,,,,239,,139',
',184,134,135,136,,,,,137,140,,138,148,,,,154,,,,139,,184,134,135,136',
',133,153,149,137,140,,138,150,130,131,132,154,,,,,,,139,,184,,133,153',
',,,,137,140,130,131,132,,,,,,147,,139,,184,134,135,136,,133,153,,137',
'140,,138,148,130,131,132,154,,,143,,,,,,146,,133,153,149,,,,,150,130',
'131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148,,,,154,',
',143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,147,,139,,184,134',
'135,136,,,,,137,140,,138,148,,,,154,,,143,,,,,,146,,133,153,149,,,,',
'150,130,131,132,,,,,,147,,139,,184,134,135,136,,,,,137,140,,138,148',
',,,154,,,143,,,,,,146,,133,153,149,,,,,150,130,131,132,,,,,,239,,139',
',184,134,135,136,,,,,137,140,,138,148,,,,154,,,,,,,134,135,136,,133',
'153,149,,,,138,150,130,131,132,154,,,,,239,,139,,184,,,,,,,,137,140',
',,148,,,,,,,,139,,184,,,,,133,153,149,137,140,,,150,130,131,132,97,',
',,,,,,,,,133,153,,,13,,69,,130,131,132,,,,,,,,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,318,,,,,22,,,23,',
',,,,217,218,219,220,221,222,,228,230,231,232,233,,,,,,,223,224,225,226',
'227,13,,69,,,,,229,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,168,,,,,,,,,,,,,,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,318,,,,,,,,,,',
',,,217,218,219,220,221,222,,,272,273,274,275,,,,,,,223,224,225,226,227',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,,,,,,22,,,23,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,,-26,,,,,-26,217,218,219,220,221,222,,228,230',
'231,232,233,,,,,,,223,224,225,226,227,,,,,,,,229,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,,,,,158,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
',,,,158,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,217,218,219,220,221,222',
',,272,273,274,275,,,,,,,223,224,225,226,227' ]
        racc_action_table = arr = ::Array.new(3572, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'88,88,88,188,193,383,25,88,88,298,28,88,88,88,88,299,88,200,120,120',
'298,88,88,299,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,28,88,188,88,383,25,255,200,127',
'69,127,88,88,155,69,88,2,235,155,2,193,193,88,255,188,188,383,383,88',
'127,88,88,88,20,178,178,178,88,88,88,88,178,178,235,235,178,178,178',
'178,20,178,1,20,20,20,178,178,11,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,283,178,129,178,178,20,125,178,20,283,12,178,178,358',
'5,178,249,5,13,290,262,249,178,129,16,262,125,283,178,358,178,178,178',
'24,252,252,252,178,178,178,178,252,252,290,290,252,252,252,252,24,252',
'18,279,24,24,252,252,279,252,252,252,252,252,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,0,252,280,252,76,24,73,280,24,105,328,252,252,105,328,252,0',
'76,289,0,0,0,252,289,73,27,105,328,252,29,252,252,252,161,264,264,264',
'252,252,252,252,264,264,60,81,264,264,264,264,161,264,181,181,161,161',
'264,264,81,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,77,264,62',
'264,258,161,362,63,161,72,63,264,264,261,261,264,77,258,74,362,77,77',
'264,85,95,78,85,95,264,82,264,264,264,163,267,267,267,264,264,264,264',
'267,267,263,263,267,267,267,267,163,267,282,282,163,163,267,267,93,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,184,267,184,267,96,311',
'311,311,311,311,311,267,267,288,288,267,307,307,307,307,307,307,267',
'311,311,311,311,311,267,99,267,267,267,101,276,276,276,267,267,267,267',
'276,276,291,291,276,276,276,276,107,276,254,107,103,254,276,276,106',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,108,276,111,276',
'121,312,312,312,312,312,312,276,276,292,292,276,308,308,308,308,308',
'308,276,312,312,312,312,312,276,123,276,276,276,124,368,368,368,276',
'276,276,276,368,368,293,293,368,368,368,368,294,368,128,294,296,296',
'368,368,139,368,368,368,368,368,368,368,368,368,368,368,368,368,368',
'368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,368,140',
'368,153,368,157,313,313,313,313,313,313,368,368,338,338,368,300,300',
'300,300,341,341,368,313,313,313,313,313,368,158,368,368,368,160,389',
'389,389,368,368,368,368,389,389,342,342,389,389,389,389,162,389,301',
'301,301,301,389,389,168,389,389,389,389,389,389,389,389,389,389,389',
'389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389,389',
'389,389,173,389,174,389,110,110,110,348,348,364,364,389,389,182,110',
'389,373,373,185,110,391,391,389,189,198,201,202,212,389,237,389,389',
'389,238,243,245,260,389,389,389,389,268,270,271,331,331,110,278,110',
'302,110,113,113,113,303,304,305,325,110,110,331,113,110,330,331,331',
'113,333,334,110,339,343,347,353,354,110,356,110,110,110,363,365,376',
'379,110,110,110,110,388,,,,,113,,113,,113,114,114,114,,,,331,113,113',
'331,114,113,,,,114,,,113,,,,,,113,,113,113,113,,,,,113,113,113,113,',
',,,,114,,114,,114,115,115,115,,,320,,114,114,,115,114,,,,115,,,,320',
'320,320,320,320,320,,114,114,114,,,,,114,114,114,114,320,320,320,320',
'320,115,,115,,115,142,142,142,,,,,115,115,,142,115,,,,142,,,115,,,,',
',115,,115,115,115,,,,,115,115,115,115,,,,,,142,,142,,142,146,146,146',
',,,,142,142,,146,142,,,,146,,,306,306,306,306,306,306,142,,142,142,142',
',,,,142,142,142,142,306,306,,,,146,,146,,146,147,147,147,,,,,146,146',
',147,146,,,,147,,,146,,,,,,146,,146,146,146,,,,,146,146,146,146,,,,',
',147,,147,,147,148,148,148,,,,,147,147,,148,147,,,,148,,,147,,,,,,147',
',147,147,147,,,,,147,147,147,147,,,,,,148,,148,,148,149,149,149,,,,',
'148,148,,149,148,,,,149,,,,314,314,314,314,314,314,,148,148,148,,,,',
'148,148,148,148,314,314,314,314,314,149,,149,,149,150,150,150,,,,,149',
'149,,150,149,,,,150,,,,315,315,315,315,315,315,,149,149,149,,,,,149',
'149,149,149,315,315,315,315,315,150,,150,,150,179,179,179,,,,,150,150',
',179,150,,,,179,,,,316,316,316,316,316,316,,150,150,150,,,,,150,150',
'150,150,316,316,316,316,316,179,,179,,179,186,186,186,,,,,179,179,,186',
'179,,,,186,,,179,,,,,,179,,179,179,179,,,,,179,179,179,179,,,,,,186',
',186,,186,190,190,190,,,,,186,186,,190,186,,,,190,,,186,,,,,,186,,186',
'186,186,,,,,186,186,186,186,,,,,,190,,190,,190,194,194,194,,,,,190,190',
',194,190,,,,194,,,,385,385,385,385,385,385,,190,190,190,,,,,190,190',
'190,190,385,385,385,385,385,194,,194,,194,195,195,195,,,,,194,194,,195',
'194,,,,195,,,194,,,,,,194,,194,194,194,,,,,194,194,194,194,,,,,,195',
',195,,195,196,196,196,,,,,195,195,,196,195,,,,196,,,195,,,,,,195,,195',
'195,195,,,,,195,195,195,195,,,,,,196,,196,,196,197,197,197,,,,,196,196',
',197,196,,,,197,,,196,,,,,,196,,196,196,196,,,,,196,196,196,196,,,,',
',197,,197,,197,199,199,199,,,,,197,197,,199,197,,,,199,,,197,,,,,,197',
',197,197,197,,,,,197,197,197,197,,,,,,199,,199,,199,204,204,204,,,,',
'199,199,,204,199,,,,204,,,199,,,,,,199,,199,199,199,,,,,199,199,199',
'199,,,,,,204,,204,,204,206,206,206,,,,,204,204,,206,204,,,,206,,,204',
',,,,,204,,204,204,204,,,,,204,204,204,204,,,,,,206,,206,,206,207,207',
'207,,,,,206,206,,207,206,,,,207,,,206,,,,,,206,,206,206,206,,,,,206',
'206,206,206,,,,,,207,,207,,207,208,208,208,,,,,207,207,,208,207,,,,208',
',,207,,,,,,207,,207,207,207,,,,,207,207,207,207,,,,,,208,,208,,208,209',
'209,209,,,,,208,208,,209,208,,,,209,,,208,,,,,,208,,208,208,208,,,,',
'208,208,208,208,,,,,,209,,209,,209,211,211,211,,,,,209,209,,211,209',
',,,211,,,209,,,,,,209,,209,209,209,,,,,209,209,209,209,,,,,,211,,211',
',211,214,214,214,,,,,211,211,,214,211,,,,214,,,211,,,,,,211,,211,211',
'211,,,,,211,211,211,211,,,,,,,,214,,214,217,217,217,,,,,214,214,,217',
',,,,217,,,,386,386,386,386,386,386,,214,214,,,,,,,214,214,214,386,386',
'386,386,386,217,,217,,217,218,218,218,,,,,217,217,,218,217,,,,218,,',
',309,309,309,309,309,309,,217,217,217,,,,,217,217,217,217,309,309,309',
',,218,,218,,218,219,219,219,,,,,218,218,,219,218,,,,219,,,,310,310,310',
'310,310,310,,218,218,218,,,,,218,218,218,218,310,310,310,,,219,,219',
',219,220,220,220,,,,,219,219,,220,219,,,,220,,,,,,,,,,,219,219,219,',
',,,219,219,219,219,,,,,,220,,220,,220,221,221,221,,,,,220,220,,221,220',
',,,221,,,,,,,,,,,220,220,220,,,,,220,220,220,220,,,,,,221,,221,,221',
'222,222,222,,,,,221,221,,222,221,,,,222,,,,,,,,,,,221,221,221,,,,,221',
'221,221,221,,,,,,222,,222,,222,223,223,223,,,,,222,222,,223,222,,,,223',
',,,,,,,,,,222,222,222,,,,,222,222,222,222,,,,,,223,,223,,223,224,224',
'224,,,,,223,223,,224,223,,,,224,,,,,,,,,,,223,223,223,,,,,223,223,223',
'223,,,,,,224,,224,,224,225,225,225,,,,,224,224,,225,224,,,,225,,,,,',
',,,,,224,224,224,,,,,224,224,224,224,,,,,,225,,225,,225,226,226,226',
',,,,225,225,,226,225,,,,226,,,,,,,,,,,225,225,225,,,,,225,225,225,225',
',,,,,226,,226,,226,227,227,227,,,,,226,226,,227,226,,,,227,,,,,,,,,',
',226,226,226,,,,,226,226,226,226,,,,,,227,,227,,227,228,228,228,,,,',
'227,227,,228,227,,,,228,,,,,,,,,,,227,227,227,,,,,227,227,227,227,,',
',,,228,,228,,228,229,229,229,,,,,228,228,,229,228,,,,229,,,,,,,,,,,228',
'228,228,,,,,228,228,228,228,,,,,,229,,229,,229,230,230,230,,,,,229,229',
',230,229,,,,230,,,,,,,,,,,229,229,229,,,,,229,229,229,229,,,,,,230,',
'230,,230,231,231,231,,,,,230,230,,231,230,,,,231,,,,,,,,,,,230,230,230',
',,,,230,230,230,230,,,,,,231,,231,,231,232,232,232,,,,,231,231,,232',
'231,,,,232,,,,,,,,,,,231,231,231,,,,,231,231,231,231,,,,,,232,,232,',
'232,233,233,233,,,,,232,232,,233,232,,,,233,,,,,,,,,,,232,232,232,,',
',,232,232,232,232,,,,,,233,,233,,233,239,239,239,,,,,233,233,,239,233',
',,,239,,,,,,,247,247,247,,233,233,233,,,,247,233,233,233,233,247,,,',
',239,,239,,239,355,355,355,,,,,239,239,,355,239,,,,355,,,,247,,247,287',
'287,287,,239,239,239,247,247,,287,239,239,239,239,287,,,,,,,355,,355',
',247,247,,,,,355,355,247,247,247,,,,,,287,,287,,287,336,336,336,,355',
'355,,287,287,,336,287,355,355,355,336,,,287,,,,,,287,,287,287,287,,',
',,287,287,287,287,,,,,,336,,336,,336,351,351,351,,,,,336,336,,351,336',
',,,351,,,336,,,,,,336,,336,336,336,,,,,336,336,336,336,,,,,,351,,351',
',351,367,367,367,,,,,351,351,,367,351,,,,367,,,351,,,,,,351,,351,351',
'351,,,,,351,351,351,351,,,,,,367,,367,,367,370,370,370,,,,,367,367,',
'370,367,,,,370,,,367,,,,,,367,,367,367,367,,,,,367,367,367,367,,,,,',
'370,,370,,370,371,371,371,,,,,370,370,,371,370,,,,371,,,,,,,375,375',
'375,,370,370,370,,,,375,370,370,370,370,375,,,,,371,,371,,371,,,,,,',
',371,371,,,371,,,,,,,,375,,375,,,,,371,371,371,375,375,,,371,371,371',
'371,80,,,,,,,,,,,375,375,,,80,,80,,375,375,375,,,,,,,,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,236,,,,',
'80,,,80,,,,,,236,236,236,236,236,236,,236,236,236,236,236,,,,,,,236',
'236,236,236,236,26,,26,,,,,236,,,,,,,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,26,26,100,,,,,,,,,,,,,,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,100,100,269,,,,,,,,,,,,,,269,269,269,269,269,269,,,269,269',
'269,269,,,,,,,269,269,269,269,269,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,,,,',
',102,,,102,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,,159,,,,,159,144,144,144,144',
'144,144,,144,144,144,144,144,,,,,,,144,144,144,144,144,,,,,,,,144,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89',
'89,,,,,89,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,,,,,244,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,61,61,61,61,61',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,242,242,242,242,242,242,242,242,242,242',
'242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,326,326',
'326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326',
'326,326,326,326,326,326,192,192,192,192,192,192,,,192,192,192,192,,',
',,,,192,192,192,192,192' ]
        racc_action_check = arr = ::Array.new(3572, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   228,   105,     8,   nil,   nil,    94,   nil,   nil,   nil,   nil,
   nil,    50,    64,    99,   nil,   nil,   142,  3367,   193,   nil,
    85,   nil,   nil,   nil,   173,   -21,  3109,   193,    -7,   192,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   211,  3392,   259,   263,   nil,   nil,   nil,   nil,   nil,     7,
  3417,   nil,   270,   168,   268,   nil,   173,   316,   263,   nil,
  3033,   213,   269,   nil,   nil,   279,   nil,   nil,    -4,  3307,
   nil,   nil,   nil,   318,   nil,   280,   348,   nil,   nil,   378,
  3148,   436,  3210,   396,   nil,   182,   460,   393,   488,   nil,
   659,   439,   nil,   706,   753,   800,   nil,   nil,   nil,   nil,
   -66,   441,   nil,   466,   509,    81,   nil,     5,   467,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   489,
   520,   nil,   847,  3442,  3236,   nil,   894,   941,   988,  1035,
  1082,   nil,   nil,   527,   nil,     9,   nil,   525,   533,  3244,
   553,   261,   628,   349,   nil,   nil,   nil,   nil,   578,   nil,
   nil,   nil,   nil,   613,   613,   nil,   nil,   nil,    84,  1129,
   nil,   197,   616,   nil,   349,   631,  1176,   nil,    -6,   679,
  1223,   nil,  3477,   -10,  1270,  1317,  1364,  1411,   633,  1458,
     0,   632,   618,   nil,  1505,   nil,  1552,  1599,  1646,  1693,
   nil,  1740,   635,   nil,  1787,   nil,   nil,  1834,  1881,  1928,
  1975,  2022,  2069,  2116,  2163,  2210,  2257,  2304,  2351,  2398,
  2445,  2492,  2539,  2586,   nil,    13,  3032,   641,   627,  2633,
   nil,   nil,  3467,   642,  3337,   627,   nil,  2655,   nil,   100,
   nil,   nil,   172,   nil,   395,     3,   nil,   nil,   261,   nil,
   700,   247,   104,   277,   260,   nil,   nil,   348,   653,  3147,
   651,   652,   nil,   nil,   nil,   nil,   436,   nil,   633,   136,
   174,   nil,   285,    83,   nil,   nil,   nil,  2702,   335,   190,
   101,   365,   423,   453,   483,   nil,   485,   nil,   -58,   -59,
   524,   559,   643,   648,   649,   650,   855,   350,   438,  1843,
  1890,   339,   427,   515,   997,  1044,  1091,   nil,   nil,   nil,
   762,   nil,   nil,   nil,   nil,   660,  3492,   nil,   183,   nil,
   730,   712,   nil,   663,   680,   nil,  2749,   nil,   588,   737,
   nil,   522,   543,   738,   nil,   nil,   nil,   664,   593,   nil,
   nil,  2796,   nil,   672,   682,  2680,   664,   nil,    97,   nil,
   nil,   nil,   263,   693,   595,   748,   nil,  2843,   524,   nil,
  2890,  2937,   nil,   602,   nil,  2959,   685,   nil,   nil,   695,
   nil,   nil,   nil,    -4,   nil,  1232,  1796,   nil,   701,   612,
   nil,   683,   nil ]

racc_action_default = [
    -6,  -226,  -215,    -2,    -4,  -226,    -7,    -9,   -10,   -11,
   -12,  -226,  -226,  -226,   -46,   -47,   -53,  -226,  -226,    -1,
  -216,  -217,  -219,  -220,    -5,   -15,   -19,  -226,  -226,  -226,
  -101,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,  -208,   393,    -3,  -218,    -8,
  -226,  -226,  -226,  -226,   -20,   -22,   -23,   -24,  -101,  -226,
   -32,  -225,  -129,  -127,  -226,   -54,  -226,    -6,   -15,   -16,
  -226,  -226,  -226,   -39,   -40,  -215,   -33,  -101,   -56,  -226,
  -125,  -126,  -128,   -29,  -102,  -215,  -226,   -17,   -21,   -29,
  -226,  -226,  -216,   -35,   -37,  -226,  -226,  -215,   -57,   -59,
  -209,  -211,   -62,  -226,  -226,  -226,   -67,   -68,   -69,   -70,
   -71,  -211,   -73,  -211,  -226,  -161,  -101,  -178,  -169,  -178,
  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -221,
  -221,  -137,  -226,  -226,  -142,  -143,  -226,  -226,  -226,  -226,
  -226,  -170,  -172,  -226,  -174,  -226,  -131,  -226,  -135,  -101,
  -226,  -216,  -226,    -6,   -18,   -25,   -38,  -101,  -226,   -31,
   -34,  -101,  -101,   -29,   -98,   -99,   -48,   -55,  -216,  -226,
   -60,  -210,  -161,  -169,  -178,  -178,  -180,  -212,  -226,  -226,
  -226,   -78,  -226,  -226,  -226,  -226,  -180,  -180,  -226,  -226,
  -226,   -91,   -94,   -95,  -226,  -171,  -180,  -226,  -226,  -226,
  -175,  -103,  -222,  -223,  -120,  -138,  -101,  -226,  -226,  -226,
  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,
  -226,  -226,  -226,  -226,  -144,  -226,  -142,  -143,  -157,  -226,
  -158,  -159,  -226,  -226,  -226,  -135,  -134,  -226,   -27,  -226,
  -101,   -52,   -56,   -13,  -226,   -41,  -101,   -36,  -226,   -97,
   -58,   -64,  -213,  -181,   -56,   -85,   -86,   -56,  -226,  -226,
  -226,  -226,   -81,   -82,   -83,   -84,   -56,  -139,  -140,  -213,
  -213,   -75,   -76,  -127,  -176,  -177,  -101,  -226,  -106,  -226,
  -226,  -107,  -108,  -104,  -226,  -224,  -221,  -121,  -226,  -226,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -162,  -163,  -164,  -165,  -166,  -167,  -145,  -160,  -168,
  -226,  -101,  -130,  -132,  -133,  -136,  -101,   -30,   -50,   -51,
  -226,  -226,  -101,   -42,  -226,   -61,  -226,  -214,   -87,  -226,
   -77,  -226,  -226,  -226,   -72,   -74,   -92,   -93,  -100,  -179,
  -183,  -226,  -118,  -226,  -221,  -226,  -226,  -141,  -226,   -28,
   -49,   -14,   -44,   -29,  -182,  -226,   -88,  -226,   -56,   -65,
  -226,  -226,   -66,  -105,  -119,  -226,  -123,  -124,  -173,  -226,
   -45,   -96,   -63,  -226,   -90,   -79,   -80,  -122,   -29,   -56,
   -43,   -87,   -89 ]

racc_goto_table = [
    70,    10,    58,    30,    59,    76,    58,   106,   125,   160,
   264,    20,    68,   129,    24,   165,   104,   297,   128,   211,
   214,    10,    19,   248,   246,    10,    72,    66,    95,   210,
   191,    86,     3,    77,    60,   175,    64,    67,   156,   365,
   262,   335,   203,    81,     1,     2,    63,    78,   164,   249,
   279,   280,    57,    85,   103,   202,    87,    82,   344,   345,
   289,   186,    58,   170,   166,   379,    68,    28,    88,   163,
   260,   196,    80,   197,   180,   157,   189,   370,    10,   371,
   201,    66,   334,   294,    58,   210,   167,    96,    87,   259,
    98,    67,   392,   296,   102,   355,   155,   215,   125,   237,
   257,   nil,   nil,   129,   161,   101,   268,   nil,   128,   nil,
   nil,   324,   nil,   nil,   254,   162,   178,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177,   nil,   216,
   285,   nil,   nil,   252,   298,   nil,   nil,   nil,   nil,   nil,
   nil,    59,   255,    58,   nil,   250,   nil,   258,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   266,    10,   181,    10,   nil,   188,   325,   193,   nil,
   nil,   330,   125,   nil,   nil,   nil,   353,   129,   387,   329,
   nil,   nil,   128,   338,   125,   295,   339,   125,   175,   129,
   359,   299,   129,   323,   128,   343,   125,   128,   284,   234,
   235,   129,   346,   nil,   nil,   389,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   347,   322,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   328,   nil,   nil,   321,   nil,
   157,   333,   261,   nil,   375,   nil,   nil,   nil,   nil,   263,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   277,   278,   263,
   263,   nil,   282,   nil,   nil,   nil,   nil,   288,   175,   263,
   290,   291,   292,   331,   293,   nil,   192,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   376,   nil,   nil,   nil,   381,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,   125,   nil,
   nil,   nil,   nil,   129,   nil,   298,   358,   nil,   128,   236,
   238,   240,   241,   nil,   390,   nil,   nil,   362,   391,   125,
   nil,    59,   250,    58,   129,   nil,   nil,   nil,   nil,   128,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   348,   nil,   269,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   300,
   301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   nil,   nil,   nil,   364,
   nil,   320,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   373,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   383,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   385,   386 ]

racc_goto_check = [
    14,    12,    77,    15,     8,    21,    77,    37,    52,    22,
    47,     5,    15,    63,     5,    22,    28,    67,    61,    65,
    65,    12,     3,    24,    71,    12,    35,    12,     7,    75,
    53,    26,     4,    14,    13,    61,    18,    20,    70,    48,
    43,    44,    59,    21,     1,     2,    16,    15,    17,    23,
    43,    43,     4,    25,    27,    28,    15,    29,    44,    44,
    43,    42,    77,    26,    30,    31,    15,    34,    36,    14,
    39,    42,     5,    42,    41,    15,    49,    55,    12,    56,
    58,    12,    60,    62,    77,    75,    15,    13,    15,    22,
    18,    20,    48,    66,     5,    68,    69,    72,    52,    74,
    28,   nil,   nil,    63,     5,     3,    53,   nil,    61,   nil,
   nil,    71,   nil,   nil,     7,     3,     5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,    15,
    61,   nil,   nil,    14,    52,   nil,   nil,   nil,   nil,   nil,
   nil,     8,    21,    77,   nil,    15,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,    14,    12,    46,    12,   nil,    46,    52,    46,   nil,
   nil,    37,    52,   nil,   nil,   nil,    65,    63,    67,    28,
   nil,   nil,    61,    37,    52,    14,    37,    52,    61,    63,
    24,    21,    63,    70,    61,    37,    52,    61,    35,    46,
    46,    63,    59,   nil,   nil,    47,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,    15,   nil,
    15,    21,    46,   nil,    65,   nil,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,    46,    46,
    46,   nil,    46,   nil,   nil,   nil,   nil,    46,    61,    46,
    46,    46,    46,     5,    46,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    52,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    52,   nil,
   nil,   nil,   nil,    63,   nil,    52,    21,   nil,    61,    54,
    54,    54,    54,   nil,    22,   nil,   nil,    21,    37,    52,
   nil,     8,    15,    77,    63,   nil,   nil,   nil,   nil,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,   nil,   nil,   nil,    46,
   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,    54 ]

racc_goto_pointer = [
   nil,    44,    45,    20,    32,     9,   nil,   -49,   -20,   nil,
   nil,   nil,     1,     9,   -27,   -14,    20,   -49,    10,   nil,
    11,   -25,   -84,  -110,  -136,   -17,   -39,   -33,   -71,   -12,
   -36,  -297,   nil,   nil,    51,    -2,    -4,   -81,   nil,  -108,
   nil,   -36,   -50,  -146,  -221,   nil,    53,  -178,  -299,   -38,
   nil,   nil,   -80,   -84,   152,  -264,  -263,   nil,   -46,   -84,
  -176,   -70,  -128,   -75,   nil,  -120,  -121,  -197,  -203,     7,
   -51,  -134,   -45,   nil,   -48,  -100,   nil,   -18,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   117,   nil,   213,   126,   nil,   nil,   nil,    65,
   119,   105,   nil,   nil,   nil,   nil,   nil,   nil,   251,   nil,
   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   107,   108,
   109,   nil,   nil,   nil,   nil,   112,   120,   nil,   nil,   nil,
   116,   118,   182,   nil,   144,   270,   271,   366,   nil,   nil,
   173,   183,   nil,   185,   151,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   141,   142,   145,   205,   152,    21,   212 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 104, :_reduce_1,
  1, 105, :_reduce_2,
  3, 105, :_reduce_3,
  1, 107, :_reduce_4,
  2, 107, :_reduce_5,
  0, 110, :_reduce_6,
  1, 110, :_reduce_7,
  3, 110, :_reduce_8,
  1, 111, :_reduce_9,
  1, 111, :_reduce_10,
  1, 111, :_reduce_11,
  1, 111, :_reduce_12,
  7, 113, :_reduce_13,
  9, 114, :_reduce_14,
  0, 116, :_reduce_15,
  2, 116, :_reduce_16,
  0, 120, :_reduce_17,
  6, 109, :_reduce_18,
  0, 119, :_reduce_19,
  1, 119, :_reduce_20,
  3, 119, :_reduce_21,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_25,
  0, 126, :_reduce_26,
  1, 126, :_reduce_27,
  3, 126, :_reduce_28,
  0, 125, :_reduce_29,
  3, 125, :_reduce_30,
  6, 115, :_reduce_31,
  0, 128, :_reduce_32,
  1, 128, :_reduce_33,
  3, 128, :_reduce_34,
  2, 129, :_reduce_35,
  3, 130, :_reduce_36,
  1, 130, :_reduce_37,
  4, 123, :_reduce_38,
  1, 132, :_reduce_none,
  1, 132, :_reduce_40,
  2, 133, :_reduce_41,
  3, 133, :_reduce_42,
  7, 133, :_reduce_43,
  0, 134, :_reduce_44,
  1, 134, :_reduce_45,
  1, 112, :_reduce_46,
  1, 112, :_reduce_47,
  6, 135, :_reduce_48,
  8, 136, :_reduce_49,
  2, 127, :_reduce_50,
  2, 127, :_reduce_51,
  1, 127, :_reduce_52,
  0, 137, :_reduce_53,
  2, 137, :_reduce_54,
  2, 140, :_reduce_55,
  0, 141, :_reduce_56,
  1, 141, :_reduce_57,
  3, 141, :_reduce_58,
  1, 142, :_reduce_59,
  2, 142, :_reduce_60,
  4, 142, :_reduce_61,
  1, 142, :_reduce_62,
  6, 142, :_reduce_63,
  3, 142, :_reduce_64,
  5, 142, :_reduce_65,
  5, 142, :_reduce_66,
  1, 142, :_reduce_67,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_71,
  4, 142, :_reduce_72,
  1, 142, :_reduce_73,
  4, 142, :_reduce_74,
  3, 154, :_reduce_75,
  3, 153, :_reduce_76,
  3, 152, :_reduce_77,
  1, 152, :_reduce_none,
  5, 156, :_reduce_79,
  5, 156, :_reduce_80,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 151, :_reduce_87,
  1, 151, :_reduce_88,
  5, 151, :_reduce_89,
  2, 160, :_reduce_90,
  2, 143, :_reduce_91,
  3, 161, :_reduce_92,
  3, 161, :_reduce_93,
  1, 161, :_reduce_94,
  1, 161, :_reduce_95,
  6, 131, :_reduce_96,
  3, 131, :_reduce_97,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 162, :_reduce_100,
  0, 124, :_reduce_101,
  2, 124, :_reduce_102,
  0, 165, :_reduce_103,
  1, 165, :_reduce_104,
  3, 165, :_reduce_105,
  3, 148, :_reduce_106,
  3, 148, :_reduce_107,
  3, 148, :_reduce_108,
  1, 167, :_reduce_109,
  1, 167, :_reduce_110,
  1, 167, :_reduce_111,
  1, 167, :_reduce_112,
  1, 167, :_reduce_113,
  1, 167, :_reduce_114,
  1, 167, :_reduce_115,
  1, 167, :_reduce_116,
  1, 167, :_reduce_117,
  4, 167, :_reduce_118,
  5, 167, :_reduce_119,
  0, 169, :_reduce_120,
  1, 169, :_reduce_121,
  4, 169, :_reduce_122,
  3, 170, :_reduce_123,
  2, 171, :_reduce_none,
  2, 138, :_reduce_125,
  2, 138, :_reduce_126,
  1, 138, :_reduce_127,
  2, 138, :_reduce_128,
  0, 139, :_reduce_129,
  4, 139, :_reduce_130,
  1, 172, :_reduce_131,
  3, 172, :_reduce_132,
  3, 173, :_reduce_133,
  2, 173, :_reduce_134,
  0, 174, :_reduce_135,
  2, 174, :_reduce_136,
  1, 149, :_reduce_137,
  2, 149, :_reduce_138,
  3, 149, :_reduce_139,
  3, 149, :_reduce_140,
  4, 176, :_reduce_141,
  1, 175, :_reduce_142,
  1, 175, :_reduce_143,
  2, 175, :_reduce_144,
  3, 175, :_reduce_145,
  3, 157, :_reduce_146,
  3, 157, :_reduce_147,
  3, 157, :_reduce_148,
  3, 157, :_reduce_149,
  3, 157, :_reduce_150,
  3, 157, :_reduce_151,
  3, 157, :_reduce_152,
  3, 157, :_reduce_153,
  3, 157, :_reduce_154,
  3, 157, :_reduce_155,
  3, 157, :_reduce_156,
  2, 157, :_reduce_157,
  2, 157, :_reduce_158,
  2, 157, :_reduce_159,
  3, 157, :_reduce_160,
  1, 157, :_reduce_161,
  3, 177, :_reduce_162,
  3, 177, :_reduce_163,
  3, 177, :_reduce_164,
  3, 177, :_reduce_165,
  3, 177, :_reduce_166,
  3, 177, :_reduce_167,
  3, 177, :_reduce_168,
  1, 155, :_reduce_169,
  1, 155, :_reduce_170,
  2, 155, :_reduce_171,
  1, 155, :_reduce_none,
  5, 155, :_reduce_173,
  1, 155, :_reduce_174,
  2, 179, :_reduce_175,
  3, 166, :_reduce_176,
  3, 166, :_reduce_177,
  0, 178, :_reduce_178,
  3, 178, :_reduce_179,
  0, 146, :_reduce_180,
  1, 146, :_reduce_181,
  3, 146, :_reduce_182,
  4, 164, :_reduce_183,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_208,
  0, 144, :_reduce_209,
  1, 144, :_reduce_none,
  0, 145, :_reduce_211,
  1, 145, :_reduce_none,
  0, 147, :_reduce_213,
  1, 147, :_reduce_none,
  0, 106, :_reduce_215,
  1, 106, :_reduce_216,
  1, 108, :_reduce_217,
  2, 108, :_reduce_218,
  1, 180, :_reduce_219,
  1, 180, :_reduce_none,
  0, 168, :_reduce_221,
  1, 168, :_reduce_none,
  1, 181, :_reduce_none,
  2, 181, :_reduce_none,
  1, 117, :_reduce_225 ]

racc_reduce_n = 226

racc_shift_n = 393

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kBLOCK_GIVEN => 30,
  :kYIELD => 31,
  :kDTYPE_UINT => 32,
  :kDTYPE_LINT => 33,
  :kDTYPE_LLINT => 34,
  :kDTYPE_CHAR => 35,
  :kDTYPE_I8 => 36,
  :kDTYPE_I16 => 37,
  :kDTYPE_I32 => 38,
  :kDTYPE_I64 => 39,
  :kDTYPE_UI8 => 40,
  :kDTYPE_UI16 => 41,
  :kDTYPE_UI32 => 42,
  :kDTYPE_UI64 => 43,
  :kDTYPE_INT => 44,
  :kDTYPE_F32 => 45,
  :kDTYPE_F64 => 46,
  :kDTYPE_LF64 => 47,
  :kDTYPE_ROBJ => 48,
  :kDTYPE_ULINT => 49,
  :kDTYPE_ULLINT => 50,
  :kDTYPE_VOID => 51,
  :kDTYPE_SIZE_T => 52,
  :kDTYPE_RB_STR => 53,
  :kDTYPE_UCHAR => 54,
  :kDTYPE_BOOL => 55,
  :tCUSTOM_DTYPE => 56,
  :tLPAREN => 57,
  :tRPAREN => 58,
  :tLSQUARE => 59,
  :tRSQUARE => 60,
  :tIDENTIFIER => 61,
  :tNL => 62,
  :tCOMMA => 63,
  :tSQUOTE => 64,
  :tSCOLON => 65,
  :EOF => 66,
  :tDOT => 67,
  :tQMARK => 68,
  :tSYMBOL => 69,
  :tLBRACE => 70,
  :tRBRACE => 71,
  :tPLUS => 72,
  :tMINUS => 73,
  :tSTAR => 74,
  :tDIVIDE => 75,
  :tEXPO => 76,
  :tMODULUS => 77,
  :tASSIGN => 78,
  :tEQ => 79,
  :tLT => 80,
  :tLTEQ => 81,
  :tGT => 82,
  :tGTEQ => 83,
  :tANDOP => 84,
  :tOROP => 85,
  :tBANG => 86,
  :tOP_ASSIGN => 87,
  :tSTRING => 88,
  :kSIZEOF => 89,
  :tBIT_AND => 90,
  :tBIT_OR => 91,
  :tBIT_XOR => 92,
  :tBIT_LSHIFT => 93,
  :tBIT_RSHIFT => 94,
  :tBIT_NOT => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSINGLE_CHAR => 98,
  :ADDRESS_OF => 99,
  :TYPECAST => 100,
  :UMINUS => 101,
  :tNEQ => 102 }

racc_nt_base = 103

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "@1",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_18(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_19(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_25(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_27(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_28(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_29(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_30(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_31(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_33(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_35(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_36(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_37(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_38(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_41(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_42(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_43(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_44(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_48(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_49(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_50(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_52(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_54(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_58(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_60(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_61(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_62(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_63(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_64(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_65(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_71(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_72(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_74(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_75(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_76(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_77(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_79(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_80(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_88(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_89(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_90(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_91(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_92(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_93(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_96(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_97(val, _values, result)
            result = {}

        if !val[2].empty?
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_100(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_101(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_102(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_103(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_104(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_105(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_106(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 435)
  def _reduce_107(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_108(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_119(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_122(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_123(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_126(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_127(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_128(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_129(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_130(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_131(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_132(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_133(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_134(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_135(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_137(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_138(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_141(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_144(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_157(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_158(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_159(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 564)
  def _reduce_168(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_170(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_171(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_173(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_174(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_175(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_176(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_177(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_178(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_180(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_181(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_182(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_183(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'parser.racc', 624)
  def _reduce_208(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 628)
  def _reduce_209(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_211(val, _values, result)
    
    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_213(val, _values, result)
    
    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_215(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 644)
  def _reduce_217(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_218(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 648)
  def _reduce_219(val, _values, result)
    
    result
  end
.,.,

# reduce 220 omitted

module_eval(<<'.,.,', 'parser.racc', 652)
  def _reduce_221(val, _values, result)
    
    result
  end
.,.,

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

module_eval(<<'.,.,', 'parser.racc', 660)
  def _reduce_225(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
