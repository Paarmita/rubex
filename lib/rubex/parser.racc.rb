#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 497)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'93,94,96,223,233,223,210,97,98,142,141,113,114,115,88,140,84,76,172',
'266,173,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,120,163,164,66,106,66,208,17,201,172,210,173,116,202,121,21,163,164',
'22,163,164,76,172,163,164,163,164,119,170,112,122,15,93,94,96,123,109',
'110,111,97,98,175,24,113,114,115,88,12,84,25,11,10,16,30,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,120,173,289,166,106',
'304,21,72,317,22,72,-40,116,207,121,26,-40,288,206,76,76,165,221,73',
'163,164,73,119,28,112,122,15,93,94,96,123,109,110,111,97,98,163,164',
'113,114,115,88,12,84,163,164,10,16,30,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,120,15,52,15,106,21,21,21,22,22,22,57',
'116,21,121,21,22,12,22,12,11,10,16,10,16,21,58,119,22,112,122,59,93',
'94,96,123,109,110,111,97,98,163,164,113,114,115,88,21,84,310,22,61,311',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,120,163',
'164,62,106,177,178,179,180,181,182,63,116,66,121,177,178,179,180,181',
'182,67,183,184,185,186,187,119,66,112,122,66,93,94,96,123,109,110,111',
'97,98,163,164,113,114,115,88,71,84,179,180,181,182,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,120,163,164,75,106,177',
'178,179,180,181,182,76,116,66,121,177,178,179,180,181,182,138,183,184',
'185,186,187,119,146,112,122,147,93,94,96,123,109,110,111,97,98,163,164',
'113,114,115,88,150,84,179,180,181,182,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,120,163,164,174,106,177,178,179,180',
'181,182,203,116,75,121,295,296,228,229,230,231,216,183,184,185,186,187',
'119,218,112,122,59,93,94,96,123,109,110,111,97,98,163,164,113,114,115',
'88,166,84,163,164,163,164,30,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,120,295,296,172,106,177,178,179,180,181,182,221',
'116,225,121,237,240,241,265,181,66,269,183,184,185,186,187,119,75,112',
'122,173,93,94,96,123,109,110,111,97,98,150,280,113,114,115,88,281,84',
'163,181,181,181,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,120,181,292,297,106,15,212,300,113,114,115,241,116,303,121',
'177,178,179,180,181,182,12,305,75,319,10,16,119,75,112,122,,,184,185',
'123,109,110,111,120,,,,154,,,,113,114,115,,116,,121,21,,,22,113,114',
'115,,,,,,119,,112,122,,,,,123,109,110,111,120,,,,154,,,,113,114,115',
'161,116,,121,154,,,,,,,,116,,121,,119,,112,122,,,,,123,109,110,111,120',
'112,122,,154,,,123,109,110,111,,116,,121,113,114,115,,,,,,,,,,119,,112',
'122,,,,,123,109,110,111,264,,,,113,114,115,120,,,,154,177,178,179,180',
'181,182,,116,,121,,113,114,115,,,,183,184,185,186,187,119,120,112,122',
',154,,,123,109,110,111,,116,,121,,113,114,115,120,,,,154,,,,119,,112',
'122,116,,121,,123,109,110,111,,,,,113,114,115,119,161,112,122,,154,',
',123,109,110,111,,116,,121,113,114,115,,,,,,,,,,161,,112,122,154,,,',
'123,109,110,111,116,,121,113,114,115,,161,,,,154,,,,,,112,122,116,,121',
',123,109,110,111,,,,,113,114,115,120,,112,122,154,,,,123,109,110,111',
'116,,121,,113,114,115,,,,,,,,,119,161,112,122,,154,,,123,109,110,111',
',116,,121,,113,114,115,120,,,,154,,,,,,112,122,116,,121,,123,109,110',
'111,,,,,,,,119,120,112,122,,154,,,123,109,110,111,,116,,121,113,114',
'115,,,,,,,,,,119,,112,122,,,,,123,109,110,111,,,,,113,114,115,120,,',
',154,177,178,179,180,181,182,,116,,121,,113,114,115,,,,183,184,185,186',
'187,119,120,112,122,,154,,,123,109,110,111,,116,,121,,113,114,115,120',
',,,154,,,,119,,112,122,116,,121,,123,109,110,111,,,,,,,,119,120,112',
'122,,154,,,123,109,110,111,,116,,121,113,114,115,,,,,,,,,,119,,112,122',
',,,,123,109,110,111,,,,,113,114,115,120,,,,154,,,,113,114,115,,116,',
'121,,,,,,,,,,,,,119,120,112,122,,154,,,123,109,110,111,161,116,,121',
'154,,,,113,114,115,,116,,121,,119,,112,122,,113,114,115,123,109,110',
'111,,112,122,,,,,123,109,110,111,161,,,,154,,,,,113,114,115,116,161',
'121,,,154,,,,,113,114,115,116,,121,,112,122,,,,,123,109,110,111,,161',
',112,122,154,,,,123,109,110,111,116,161,121,,,154,,,,113,114,115,,116',
',121,,112,122,,113,114,115,123,109,110,111,,,,112,122,,,,,123,109,110',
'111,161,,,,154,,,,113,114,115,161,116,,121,154,,,,113,114,115,,116,',
'121,,,,112,122,,,,,123,109,110,111,161,112,122,,154,,,123,109,110,111',
'161,116,,121,154,,,,113,114,115,,116,,121,,,,112,122,,113,114,115,123',
'109,110,111,,112,122,,,,,123,109,110,111,161,,,,154,,,,,113,114,115',
'116,161,121,,,154,,,,,113,114,115,116,,121,,112,122,,,,,123,109,110',
'111,,161,,112,122,154,,,,123,109,110,111,116,161,121,,,154,,,,113,114',
'115,,116,,121,,112,122,,113,114,115,123,109,110,111,,,,112,122,,,,,123',
'109,110,111,161,,,,154,,,,113,114,115,161,116,,121,154,,,,113,114,115',
',116,,121,,,,112,122,,,,,123,109,110,111,161,112,122,,154,,,123,109',
'110,111,161,116,,121,154,,,,113,114,115,,116,,121,,,,112,122,,,,,123',
'109,110,111,,112,122,,,,,123,109,110,111,120,,,,154,,,,113,114,115,',
'116,,121,177,178,179,180,181,182,,,,,,,119,,112,122,,183,184,185,123',
'109,110,111,120,,287,,154,,,,113,114,115,,116,,121,,,,,113,114,115,',
',,,,119,,112,122,,,,,123,109,110,111,120,,,,154,,,,113,114,115,161,116',
',121,154,,,,113,114,115,,116,,121,,119,,112,122,,,,,123,109,110,111',
'120,112,122,,154,,,123,109,110,111,161,116,,121,154,,,,113,114,115,',
'116,,121,,119,,112,122,,,,,123,109,110,111,,112,122,,,,,123,109,110',
'111,120,,,,154,177,178,179,180,181,182,,116,,121,,,213,,,,,183,184,185',
'186,187,119,,112,122,,12,,84,123,109,110,111,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,264,,,,,21,,,22,,,,177,178,179',
'180,181,182,,188,190,191,192,193,,,,,,183,184,185,186,187,,,,,,,189',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,',
'21,,,22,177,178,179,180,181,182,,188,190,191,192,193,,,,,,183,184,185',
'186,187,12,,84,,,,189,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,275,-43,,,,,-43,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,,,,,129,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,,,,,129,177,178,179,180,181,182,,,228,229,230,231,,,',
',,183,184,185,186,187,177,178,179,180,181,182,177,178,179,180,181,182',
',,,,,183,184,185,186,187,,183,184,185,186,187,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,177,178,179,180,181,182,,,,,,,,,,,,183,184',
'185' ]
        racc_action_table = arr = ::Array.new(2135, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,70,70,158,162,306,271,70,70,85,84,70,70,70,70,84,70,271,154,197,154',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,197',
'197,158,70,306,135,1,126,106,135,106,70,126,70,85,103,103,85,162,162',
'135,108,158,158,306,306,70,106,70,70,19,130,130,130,70,70,70,70,130',
'130,108,10,130,130,130,130,19,130,11,19,19,19,130,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,237',
'244,104,130,291,19,61,313,19,237,131,130,134,130,12,131,243,134,313',
'291,104,243,61,244,244,237,130,15,130,130,23,149,149,149,130,130,130',
'130,149,149,151,151,149,149,149,149,23,149,157,157,23,23,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,0,17,65,149,149,23,2,149,23,2,24,149,5,149,77,5,0,77,65,0,0',
'0,65,65,78,25,149,78,149,149,26,222,222,222,149,149,149,149,222,222',
'220,220,222,222,222,222,90,222,301,90,27,301,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,236',
'236,28,222,258,258,258,258,258,258,29,222,56,222,254,254,254,254,254',
'254,57,258,258,258,258,258,222,58,222,222,59,225,225,225,222,222,222',
'222,225,225,242,242,225,225,225,225,60,225,247,247,247,247,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,245,245,63,225,259,259,259,259,259,259,64,225,74,225,255,255',
'255,255,255,255,83,259,259,259,259,259,225,88,225,225,89,233,233,233',
'225,225,225,225,233,233,246,246,233,233,233,233,91,233,248,248,248,248',
'233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,233,277,277,107,233,260,260,260,260,260,260,128,233',
'138,233,278,278,280,280,281,281,139,260,260,260,260,260,233,144,233',
'233,146,296,296,296,233,233,233,233,296,296,286,286,296,296,296,296',
'152,296,302,302,315,315,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,318,318,155,296,261,261',
'261,261,261,261,156,296,159,296,166,167,168,196,198,201,204,261,261',
'261,261,261,296,209,296,296,210,314,314,314,296,296,296,296,314,314',
'219,226,314,314,314,314,227,314,235,249,250,251,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314',
'252,275,279,314,136,136,282,93,93,93,284,314,290,314,253,253,253,253',
'253,253,136,293,303,316,136,136,314,319,314,314,,,253,253,314,314,314',
'314,93,,,,93,,,,94,94,94,,93,,93,136,,,136,97,97,97,,,,,,93,,93,93,',
',,,93,93,93,93,94,,,,94,,,,96,96,96,97,94,,94,97,,,,,,,,97,,97,,94,',
'94,94,,,,,94,94,94,94,96,97,97,,96,,,97,97,97,97,,96,,96,98,98,98,,',
',,,,,,,96,,96,96,,,,,96,96,96,96,232,,,,119,119,119,98,,,,98,232,232',
'232,232,232,232,,98,,98,,120,120,120,,,,232,232,232,232,232,98,119,98',
'98,,119,,,98,98,98,98,,119,,119,,121,121,121,120,,,,120,,,,119,,119',
'119,120,,120,,119,119,119,119,,,,,122,122,122,120,121,120,120,,121,',
',120,120,120,120,,121,,121,123,123,123,,,,,,,,,,122,,121,121,122,,,',
'121,121,121,121,122,,122,150,150,150,,123,,,,123,,,,,,122,122,123,,123',
',122,122,122,122,,,,,161,161,161,150,,123,123,150,,,,123,123,123,123',
'150,,150,,163,163,163,,,,,,,,,150,161,150,150,,161,,,150,150,150,150',
',161,,161,,164,164,164,163,,,,163,,,,,,161,161,163,,163,,161,161,161',
'161,,,,,,,,163,164,163,163,,164,,,163,163,163,163,,164,,164,165,165',
'165,,,,,,,,,,164,,164,164,,,,,164,164,164,164,,,,,170,170,170,165,,',
',165,262,262,262,262,262,262,,165,,165,,172,172,172,,,,262,262,262,262',
'262,165,170,165,165,,170,,,165,165,165,165,,170,,170,,173,173,173,172',
',,,172,,,,170,,170,170,172,,172,,170,170,170,170,,,,,,,,172,173,172',
'172,,173,,,172,172,172,172,,173,,173,174,174,174,,,,,,,,,,173,,173,173',
',,,,173,173,173,173,,,,,175,175,175,174,,,,174,,,,177,177,177,,174,',
'174,,,,,,,,,,,,,174,175,174,174,,175,,,174,174,174,174,177,175,,175',
'177,,,,178,178,178,,177,,177,,175,,175,175,,179,179,179,175,175,175',
'175,,177,177,,,,,177,177,177,177,178,,,,178,,,,,180,180,180,178,179',
'178,,,179,,,,,181,181,181,179,,179,,178,178,,,,,178,178,178,178,,180',
',179,179,180,,,,179,179,179,179,180,181,180,,,181,,,,182,182,182,,181',
',181,,180,180,,183,183,183,180,180,180,180,,,,181,181,,,,,181,181,181',
'181,182,,,,182,,,,184,184,184,183,182,,182,183,,,,185,185,185,,183,',
'183,,,,182,182,,,,,182,182,182,182,184,183,183,,184,,,183,183,183,183',
'185,184,,184,185,,,,186,186,186,,185,,185,,,,184,184,,187,187,187,184',
'184,184,184,,185,185,,,,,185,185,185,185,186,,,,186,,,,,188,188,188',
'186,187,186,,,187,,,,,189,189,189,187,,187,,186,186,,,,,186,186,186',
'186,,188,,187,187,188,,,,187,187,187,187,188,189,188,,,189,,,,190,190',
'190,,189,,189,,188,188,,191,191,191,188,188,188,188,,,,189,189,,,,,189',
'189,189,189,190,,,,190,,,,192,192,192,191,190,,190,191,,,,193,193,193',
',191,,191,,,,190,190,,,,,190,190,190,190,192,191,191,,192,,,191,191',
'191,191,193,192,,192,193,,,,221,221,221,,193,,193,,,,192,192,,,,,192',
'192,192,192,,193,193,,,,,193,193,193,193,221,,,,221,,,,241,241,241,',
'221,,221,256,256,256,256,256,256,,,,,,,221,,221,221,,256,256,256,221',
'221,221,221,241,,241,,241,,,,287,287,287,,241,,241,,,,,298,298,298,',
',,,,241,,241,241,,,,,241,241,241,241,287,,,,287,,,,295,295,295,298,287',
',287,298,,,,299,299,299,,298,,298,,287,,287,287,,,,,287,287,287,287',
'295,298,298,,295,,,298,298,298,298,299,295,,295,299,,,,311,311,311,',
'299,,299,,295,,295,295,,,,,295,295,295,295,,299,299,,,,,299,299,299',
'299,311,,,,311,263,263,263,263,263,263,,311,,311,,,137,,,,,263,263,263',
'263,263,311,,311,311,,137,,137,311,311,311,311,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,195,,,,',
'137,,,137,,,,195,195,195,195,195,195,,195,195,195,195,195,,,,,,195,195',
'195,195,195,,,,,,,195,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,,,,,,143,,,143,117,117,117,117,117',
'117,,117,117,117,117,117,,,,,,117,117,117,117,117,68,,68,,,,117,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,216,75,,,,,75,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,,,,,71,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,,,,,202,160,160,160,160,160,160,,,160,160',
'160,160,,,,,,160,160,160,160,160,308,308,308,308,308,308,309,309,309',
'309,309,309,,,,,,308,308,308,308,308,,309,309,309,309,309,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,257,257',
'257,257,257,257,,,,,,,,,,,,257,257,257' ]
        racc_action_check = arr = ::Array.new(2135, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   189,    49,   146,   nil,   nil,   152,   nil,   nil,   nil,   nil,
    34,    16,    81,   nil,   nil,   120,  2027,   192,   nil,    71,
   nil,   nil,   nil,   145,   134,   202,   207,   191,   211,   225,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   226,   235,   241,   244,
   265,    66,   nil,   295,   288,   191,   nil,   nil,  1855,  2048,
    -4,  1925,   nil,   nil,   300,  1876,   nil,   154,   164,   nil,
   nil,   nil,   nil,   309,   -35,     6,   nil,   nil,   316,   366,
   186,   379,   nil,   553,   592,   nil,   631,   603,   677,   nil,
   nil,   nil,   nil,   -13,    63,   nil,     5,   350,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1792,   nil,   705,
   724,   752,   779,   798,   nil,   nil,     3,   nil,   373,   nil,
    70,    80,   nil,   nil,    82,     2,   563,  1734,   379,   368,
   nil,   nil,   nil,  1796,   388,   nil,   429,   nil,   nil,   144,
   825,    86,   403,   nil,   -28,   443,   445,    94,    -6,   485,
  1943,   853,   -10,   872,   900,   946,   451,   450,   438,   nil,
   974,   nil,   993,  1021,  1067,  1095,   nil,  1106,  1145,  1158,
  1185,  1198,  1237,  1248,  1276,  1287,  1326,  1339,  1366,  1379,
  1418,  1429,  1457,  1468,   nil,  1733,   457,   -28,   442,   nil,
   nil,   455,  1951,   nil,   504,   nil,  2069,   nil,   nil,   468,
   469,   nil,   nil,   nil,   nil,   nil,  1904,   nil,   nil,   521,
   160,  1507,   218,   nil,   nil,   292,   478,   483,   nil,   nil,
   nil,   nil,   669,   366,   nil,   464,   194,    69,   nil,   nil,
   nil,  1546,   234,    86,    69,   268,   308,   252,   326,   473,
   474,   475,   498,   516,   220,   294,  1509,  2056,   210,   284,
   358,   432,   938,  1666,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -44,   nil,   nil,   nil,   512,   nil,   342,   420,   560,
   362,   362,   564,   nil,   506,   nil,   382,  1585,   nil,   nil,
   526,    75,   nil,   579,   nil,  1624,   440,   nil,  1596,  1635,
   nil,   190,   390,   537,   nil,   nil,    -4,   nil,  1965,  1971,
   nil,  1674,   nil,    74,   514,   392,   537,   nil,   480,   542,
   nil,   nil ]

racc_action_default = [
    -6,  -189,  -182,    -2,    -4,  -189,    -7,    -9,   -10,   -11,
  -189,  -189,  -189,   -36,   -37,   -48,  -189,  -189,    -1,  -183,
  -184,  -186,  -187,    -5,   -13,  -189,  -189,  -189,  -189,  -189,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,   -93,   322,    -3,  -185,    -8,  -189,  -189,  -189,  -189,
  -112,  -111,   -49,   -46,  -181,    -6,  -188,   -14,  -189,  -189,
   -51,  -189,  -109,  -110,  -189,   -93,   -94,  -189,  -189,   -16,
   -18,   -19,   -20,  -189,  -189,  -189,   -23,   -93,  -189,  -189,
  -182,   -52,   -54,  -189,  -156,   -57,  -189,  -189,  -189,   -62,
   -63,   -64,   -65,   -66,  -139,   -93,  -154,  -147,  -154,  -101,
  -102,  -103,  -104,  -105,  -106,  -107,  -108,  -118,  -119,  -189,
  -189,  -189,  -189,  -189,  -148,  -150,  -189,  -114,  -189,  -117,
   -51,   -93,   -42,   -44,  -189,  -189,  -189,  -189,   -46,  -189,
   -29,   -30,   -22,  -189,   -25,   -27,   -67,   -38,   -50,  -183,
  -189,   -55,  -139,  -147,  -154,  -154,   -56,  -157,  -189,  -189,
  -189,  -189,  -189,  -189,  -189,  -189,  -189,   -81,   -84,   -85,
  -189,  -149,  -156,  -189,  -189,  -189,  -151,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -122,  -118,  -119,  -189,  -135,  -136,
  -137,  -189,  -189,  -116,  -189,   -41,   -93,   -47,   -93,   -46,
   -88,   -89,   -12,   -15,   -17,   -21,  -189,   -24,   -93,   -53,
   -59,  -189,   -51,   -75,   -76,   -51,  -189,  -189,   -71,   -72,
   -73,   -74,  -189,   -51,  -120,  -121,   -68,  -111,  -152,  -153,
   -93,  -189,   -98,  -189,  -189,   -99,  -100,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -140,  -141,
  -142,  -143,  -144,  -145,  -138,  -146,  -123,  -113,  -115,   -39,
   -45,  -189,   -87,   -28,   -93,  -189,   -26,  -158,   -77,  -189,
  -189,  -189,  -189,   -82,   -83,   -90,   -91,   -95,  -155,  -159,
  -189,   -31,   -32,  -189,   -78,  -189,   -51,   -60,  -189,  -189,
   -61,  -189,   -96,   -46,   -93,   -58,  -189,   -80,   -69,   -70,
   -92,  -189,   -86,   -34,   -51,   -97,  -189,   -35,   -77,   -46,
   -79,   -33 ]

racc_goto_table = [
    74,    64,    89,   222,   104,    29,    51,   209,   107,   108,
    60,     9,   226,   145,   151,   157,   227,   158,   169,   162,
   156,   133,    55,    86,    65,   160,    68,    69,     3,     1,
     9,   168,    79,    82,     9,    18,     2,   127,   293,    77,
   194,   197,   130,   176,    56,    78,    85,    53,   195,   198,
   199,   200,   144,    19,   139,   273,    23,   205,    51,    87,
   128,    51,   204,    54,   104,   131,   316,    54,   107,   108,
    27,   220,    70,   211,   134,   215,     9,   219,   320,    81,
   159,   167,   285,   104,   234,   235,   236,   107,   108,   232,
   176,   242,   301,   157,   244,   245,   246,   217,   243,   126,
   196,   214,    82,   nil,   239,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   nil,   148,   nil,   nil,   nil,    51,   136,   137,
   nil,   nil,   298,    87,   nil,    55,   143,   299,   nil,   nil,
   nil,   149,   277,   290,   276,   nil,   272,     9,    81,   238,
   nil,   314,   270,   283,   278,   nil,   104,   279,   271,   104,
   107,   108,   286,   107,   108,   282,   284,   104,   268,   267,
   nil,   107,   108,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    54,    54,   nil,   nil,   nil,   nil,   nil,    54,   nil,   nil,
   nil,   128,    51,    54,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,   302,   211,
   nil,   nil,   nil,   nil,   nil,   nil,   306,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   291,   nil,   308,   309,   307,   nil,
   104,   nil,   315,   nil,   107,   108,   nil,   nil,   nil,   nil,
   312,   nil,   nil,   nil,   nil,   nil,   318,   nil,   104,   nil,
   nil,   nil,   107,   108,   313,   nil,   321 ]

racc_goto_check = [
    19,    27,    34,    43,    48,    18,    22,    55,    56,    59,
    32,    11,    50,    24,    40,    40,    51,    40,    54,    40,
    41,    35,     8,    21,    13,    49,    13,    13,     4,     1,
    11,    24,    15,    17,    11,     3,     2,    62,    44,     7,
    40,    40,    13,    64,    12,    14,    20,     4,    49,    49,
    49,    49,    23,     5,    25,    26,     5,    24,    22,    22,
    18,    22,    34,    66,    48,    22,    28,    66,    56,    59,
    31,    40,    33,    56,    36,    19,    11,    38,    44,    11,
    45,    53,    57,    48,    40,    40,    40,    56,    59,    49,
    64,    40,    58,    40,    40,    40,    40,    21,    41,    61,
    63,    15,    17,   nil,    56,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,   nil,     3,   nil,   nil,   nil,    22,     5,     5,
   nil,   nil,    50,    22,   nil,     8,     5,    51,   nil,   nil,
   nil,     5,    40,    55,    24,   nil,    19,    11,    11,    32,
   nil,    43,    35,    54,    34,   nil,    48,    34,    27,    48,
    56,    59,    40,    56,    59,    34,    24,    48,    62,    13,
   nil,    56,    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    66,    66,   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,
   nil,    18,    22,    66,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,    40,    56,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,    49,    49,    34,   nil,
    48,   nil,    40,   nil,    56,    59,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,    34,   nil,    48,   nil,
   nil,   nil,    56,    59,    27,   nil,    19 ]

racc_goto_pointer = [
   nil,    29,    36,    33,    28,    51,   nil,   -26,    -1,   nil,
   nil,    11,    20,   -32,   -23,   -36,   nil,   -35,   -11,   -63,
   -23,   -46,   -10,   -35,   -74,   -30,  -161,   -50,  -247,   nil,
   nil,    55,   -17,    12,   -68,   -54,    -1,   nil,   -72,   nil,
   -79,   -74,   nil,  -155,  -240,   -17,   nil,   nil,   -66,   -72,
  -148,  -144,   nil,   -24,   -87,  -128,   -62,  -159,  -195,   -61,
   nil,    28,   -34,   -20,   -65,   nil,    44 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   100,   nil,   224,   nil,   nil,    80,   102,    83,   nil,
   nil,   nil,   105,   nil,   132,   nil,   nil,   135,   nil,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,    90,    91,    92,
   103,   nil,    95,   nil,   nil,   nil,    99,   101,   152,   117,
   nil,   nil,   294,   nil,   nil,   nil,   153,   nil,   nil,   155,
   124,   nil,   nil,   118,   171,   125,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 90, :_reduce_2,
  3, 90, :_reduce_3,
  1, 92, :_reduce_4,
  2, 92, :_reduce_5,
  0, 95, :_reduce_6,
  1, 95, :_reduce_7,
  3, 95, :_reduce_8,
  1, 96, :_reduce_9,
  1, 96, :_reduce_10,
  1, 96, :_reduce_11,
  7, 98, :_reduce_12,
  0, 100, :_reduce_13,
  2, 100, :_reduce_14,
  7, 94, :_reduce_15,
  1, 102, :_reduce_16,
  3, 102, :_reduce_17,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  3, 104, :_reduce_21,
  6, 99, :_reduce_22,
  1, 108, :_reduce_23,
  3, 108, :_reduce_24,
  2, 109, :_reduce_25,
  3, 111, :_reduce_26,
  1, 111, :_reduce_27,
  4, 105, :_reduce_28,
  1, 113, :_reduce_none,
  1, 113, :_reduce_30,
  2, 114, :_reduce_31,
  2, 114, :_reduce_32,
  7, 114, :_reduce_33,
  0, 116, :_reduce_34,
  1, 116, :_reduce_35,
  1, 97, :_reduce_36,
  1, 97, :_reduce_37,
  6, 117, :_reduce_38,
  7, 118, :_reduce_39,
  1, 123, :_reduce_40,
  2, 123, :_reduce_41,
  1, 123, :_reduce_42,
  0, 124, :_reduce_43,
  1, 124, :_reduce_44,
  3, 124, :_reduce_45,
  0, 107, :_reduce_46,
  3, 107, :_reduce_47,
  0, 119, :_reduce_48,
  2, 119, :_reduce_49,
  2, 122, :_reduce_50,
  0, 125, :_reduce_51,
  1, 125, :_reduce_52,
  3, 125, :_reduce_53,
  1, 126, :_reduce_54,
  2, 126, :_reduce_55,
  2, 126, :_reduce_56,
  1, 126, :_reduce_57,
  6, 126, :_reduce_58,
  3, 126, :_reduce_59,
  5, 126, :_reduce_60,
  5, 126, :_reduce_61,
  1, 126, :_reduce_62,
  1, 126, :_reduce_none,
  1, 126, :_reduce_64,
  1, 126, :_reduce_none,
  1, 126, :_reduce_66,
  2, 135, :_reduce_67,
  3, 134, :_reduce_68,
  5, 133, :_reduce_69,
  5, 133, :_reduce_70,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  0, 132, :_reduce_77,
  1, 132, :_reduce_78,
  5, 132, :_reduce_79,
  2, 140, :_reduce_80,
  2, 127, :_reduce_81,
  3, 141, :_reduce_82,
  3, 141, :_reduce_83,
  1, 141, :_reduce_84,
  1, 141, :_reduce_85,
  6, 112, :_reduce_86,
  3, 112, :_reduce_87,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  3, 142, :_reduce_90,
  1, 145, :_reduce_none,
  3, 145, :_reduce_92,
  0, 115, :_reduce_93,
  2, 115, :_reduce_94,
  0, 146, :_reduce_95,
  1, 146, :_reduce_96,
  3, 146, :_reduce_97,
  3, 130, :_reduce_98,
  3, 130, :_reduce_99,
  3, 130, :_reduce_100,
  1, 148, :_reduce_101,
  1, 148, :_reduce_102,
  1, 148, :_reduce_103,
  1, 148, :_reduce_104,
  1, 148, :_reduce_105,
  1, 148, :_reduce_106,
  1, 148, :_reduce_107,
  1, 148, :_reduce_108,
  2, 120, :_reduce_109,
  2, 120, :_reduce_110,
  1, 120, :_reduce_111,
  0, 121, :_reduce_112,
  4, 121, :_reduce_113,
  1, 149, :_reduce_114,
  3, 149, :_reduce_115,
  2, 150, :_reduce_116,
  1, 150, :_reduce_117,
  1, 128, :_reduce_118,
  1, 128, :_reduce_119,
  3, 128, :_reduce_120,
  3, 128, :_reduce_121,
  2, 128, :_reduce_122,
  3, 128, :_reduce_123,
  3, 137, :_reduce_124,
  3, 137, :_reduce_125,
  3, 137, :_reduce_126,
  3, 137, :_reduce_127,
  3, 137, :_reduce_128,
  3, 137, :_reduce_129,
  3, 137, :_reduce_130,
  3, 137, :_reduce_131,
  3, 137, :_reduce_132,
  3, 137, :_reduce_133,
  3, 137, :_reduce_134,
  2, 137, :_reduce_135,
  2, 137, :_reduce_136,
  2, 137, :_reduce_137,
  3, 137, :_reduce_138,
  1, 137, :_reduce_139,
  3, 151, :_reduce_140,
  3, 151, :_reduce_141,
  3, 151, :_reduce_142,
  3, 151, :_reduce_143,
  3, 151, :_reduce_144,
  3, 151, :_reduce_145,
  3, 151, :_reduce_146,
  1, 136, :_reduce_147,
  1, 136, :_reduce_148,
  2, 136, :_reduce_149,
  1, 136, :_reduce_none,
  2, 153, :_reduce_151,
  3, 147, :_reduce_152,
  3, 147, :_reduce_153,
  0, 152, :_reduce_154,
  3, 152, :_reduce_155,
  0, 129, :_reduce_156,
  1, 129, :_reduce_157,
  3, 129, :_reduce_158,
  4, 144, :_reduce_159,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_180,
  2, 106, :_reduce_181,
  0, 91, :_reduce_182,
  1, 91, :_reduce_183,
  1, 93, :_reduce_184,
  2, 93, :_reduce_185,
  1, 154, :_reduce_186,
  1, 154, :_reduce_none,
  1, 101, :_reduce_188 ]

racc_reduce_n = 189

racc_shift_n = 322

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :kDTYPE_VOID => 44,
  :tCUSTOM_DTYPE => 45,
  :tLPAREN => 46,
  :tRPAREN => 47,
  :tLSQUARE => 48,
  :tRSQUARE => 49,
  :tIDENTIFIER => 50,
  :tNL => 51,
  :tCOMMA => 52,
  :tSQUOTE => 53,
  :tSCOLON => 54,
  :EOF => 55,
  :tDOT => 56,
  :tQMARK => 57,
  :tSYMBOL => 58,
  :tPLUS => 59,
  :tMINUS => 60,
  :tSTAR => 61,
  :tDIVIDE => 62,
  :tEXPO => 63,
  :tMODULUS => 64,
  :tASSIGN => 65,
  :tEQ => 66,
  :tLT => 67,
  :tLTEQ => 68,
  :tGT => 69,
  :tGTEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tBANG => 73,
  :tOP_ASSIGN => 74,
  :tSTRING => 75,
  :tBIT_AND => 76,
  :tBIT_OR => 77,
  :tBIT_XOR => 78,
  :tBIT_LSHIFT => 79,
  :tBIT_RSHIFT => 80,
  :tBIT_NOT => 81,
  :tINTEGER => 82,
  :tFLOAT => 83,
  :tSINGLE_CHAR => 84,
  :ADDRESS_OF => 85,
  :UMINUS => 86,
  :tNEQ => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "dtype",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_star",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_22(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_25(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_26(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_28(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_31(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_32(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_33(val, _values, result)
            result = {
          dtype: val[0],
          return_ptr_level: val[1],
          ptr_level: val[3],
          arg_list: val[6]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_38(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_39(val, _values, result)
     #FIXME: raise error if any of the arguments does not have a name and is
        # only dtype.
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_40(val, _values, result)
     result = CBaseType.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_41(val, _values, result)
     result = CBaseType.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_42(val, _values, result)
     result = CBaseType.new('object', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_43(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_45(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_46(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_47(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_48(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_49(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_52(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_53(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_54(val, _values, result)
          
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_55(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_56(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_57(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_58(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_59(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_60(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_61(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_66(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_67(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_68(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_69(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_77(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_79(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_80(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_81(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_86(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_87(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        else
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        end
      
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_90(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_93(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_94(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_96(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_97(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_98(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_100(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_109(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_110(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_111(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_112(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_113(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_114(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_115(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_116(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_117(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_118(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_122(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 397)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_135(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_136(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_139(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_149(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_151(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_152(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_153(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_154(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_157(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_158(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_159(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_180(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_181(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_188(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
