#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 569)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'90,91,93,219,229,219,72,94,95,17,135,110,111,112,85,134,81,73,157,158',
'262,114,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,118,157,158,64,103,64,211,206,195,166,213,167,113,196,119,166,24',
'167,73,157,158,73,166,157,158,157,158,117,164,109,120,15,90,91,93,121',
'106,107,108,94,95,169,25,110,111,112,85,12,81,26,11,10,16,114,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,118,167,289',
'160,103,21,21,70,22,22,70,213,113,211,119,269,21,213,28,22,268,159,73',
'71,157,158,71,117,73,109,120,15,90,91,93,121,106,107,108,94,95,157,158',
'110,111,112,85,12,81,157,158,10,16,114,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,118,15,320,15,103,21,21,51,22,22,305',
'288,113,73,119,21,217,12,22,12,11,10,16,10,16,73,56,117,21,109,120,22',
'90,91,93,121,106,107,108,94,95,157,158,110,111,112,85,21,81,21,22,57',
'22,114,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'118,157,158,58,103,171,172,173,174,175,176,60,113,61,119,171,172,173',
'174,175,176,64,177,178,179,180,181,117,313,109,120,314,90,91,93,121',
'106,107,108,94,95,157,158,110,111,112,85,65,81,173,174,175,176,114,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,118,157',
'158,64,103,171,172,173,174,175,176,64,113,69,119,171,172,173,174,175',
'176,129,177,178,179,180,181,117,140,109,120,141,90,91,93,121,106,107',
'108,94,95,157,158,110,111,112,85,144,81,173,174,175,176,114,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,118,157,158,168',
'103,171,172,173,174,175,176,197,113,64,119,297,298,224,225,226,227,207',
'177,178,179,180,181,117,210,109,120,58,90,91,93,121,106,107,108,94,95',
'157,158,110,111,112,85,160,81,157,158,157,158,114,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,118,297,298,166,103,171',
'172,173,174,175,176,217,113,221,119,233,236,237,261,175,64,129,177,178',
'179,180,181,117,129,109,120,167,90,91,93,121,106,107,108,94,95,144,280',
'110,111,112,85,281,81,157,175,175,175,114,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,118,175,15,203,103,290,293,110,111',
'112,299,302,113,237,119,307,308,114,12,73,129,322,10,16,129,,,117,,109',
'120,,,,,121,106,107,108,118,,,,148,,,110,111,112,,,113,21,119,,22,114',
'110,111,112,,,,,,,117,114,109,120,,,,,121,106,107,108,118,,,,148,,,110',
'111,112,,155,113,,119,148,,114,,,,,,113,,119,,117,,109,120,,,,,121,106',
'107,108,118,109,120,,148,,,121,106,107,108,,113,,119,110,111,112,,,',
',,,,114,,117,,109,120,,,,,121,106,107,108,,,,,110,111,112,,118,,,,148',
',114,,,,,,113,,119,110,111,112,,,,,,,,114,,117,118,109,120,,148,,,121',
'106,107,108,,113,,119,110,111,112,,118,,,,148,,114,,117,,109,120,113',
',119,,121,106,107,108,,,,110,111,112,,117,155,109,120,,148,114,,121',
'106,107,108,,113,,119,110,111,112,,,,,,,,114,,155,,109,120,148,,,,121',
'106,107,108,113,,119,110,111,112,,,155,,,,148,114,,,,109,120,,113,,119',
'121,106,107,108,,,,,110,111,112,,118,,109,120,148,,114,,121,106,107',
'108,113,,119,110,111,112,,,,,,,,114,,117,155,109,120,,148,,,121,106',
'107,108,,113,,119,110,111,112,,118,,,,148,,114,,,,109,120,113,,119,',
'121,106,107,108,,,,,110,111,112,117,118,109,120,,148,,114,121,106,107',
'108,,113,,119,110,111,112,,,,,,,,114,,117,118,109,120,,148,,,121,106',
'107,108,,113,,119,110,111,112,,118,,,,148,,114,,117,,109,120,113,,119',
',121,106,107,108,,,,,110,111,112,117,118,109,120,,148,,114,121,106,107',
'108,,113,,119,110,111,112,,,,,,,,114,,117,118,109,120,,148,,,121,106',
'107,108,,113,,119,110,111,112,,118,,,,148,,114,,117,,109,120,113,,119',
',121,106,107,108,,,,,110,111,112,117,118,109,120,,148,,114,121,106,107',
'108,,113,,119,110,111,112,,,,,,,,114,,117,155,109,120,,148,,,121,106',
'107,108,,113,,119,110,111,112,,155,,,,148,,114,,,,109,120,113,,119,',
'121,106,107,108,,,,110,111,112,,,155,109,120,,148,114,,121,106,107,108',
',113,,119,110,111,112,,,,,,,,114,,155,,109,120,148,,,,121,106,107,108',
'113,,119,110,111,112,,,155,,,,148,114,,,,109,120,,113,,119,121,106,107',
'108,,,,110,111,112,,,155,,109,120,148,114,,,121,106,107,108,113,,119',
'110,111,112,,,,,,,,114,,155,,109,120,148,,,,121,106,107,108,113,,119',
'110,111,112,,,155,,,,148,114,,,,109,120,,113,,119,121,106,107,108,,',
',110,111,112,,,155,,109,120,148,114,,,121,106,107,108,113,,119,110,111',
'112,,,,,,,,114,,155,,109,120,148,,,,121,106,107,108,113,,119,110,111',
'112,,,155,,,,148,114,,,,109,120,,113,,119,121,106,107,108,,,,110,111',
'112,,,155,,109,120,148,114,,,121,106,107,108,113,,119,110,111,112,,',
',,,,,114,,155,,109,120,148,,,,121,106,107,108,113,,119,110,111,112,',
',155,,,,148,114,,,,109,120,,113,,119,121,106,107,108,,,,110,111,112',
',,155,,109,120,148,114,,,121,106,107,108,113,,119,110,111,112,,,,,,',
',114,,155,,109,120,148,,,,121,106,107,108,113,,119,110,111,112,,,155',
',,,148,114,,,,109,120,,113,,119,121,106,107,108,,,,,110,111,112,,118',
',109,120,148,,114,,121,106,107,108,113,,119,110,111,112,,,,,,,,114,',
'117,118,109,120,,148,,,121,106,107,108,,113,,119,110,111,112,,118,,287',
',148,,114,,117,,109,120,113,,119,,121,106,107,108,,,,,110,111,112,117',
'118,109,120,,148,,114,121,106,107,108,,113,,119,110,111,112,,,,,,,,114',
',117,155,109,120,,148,,,121,106,107,108,,113,,119,110,111,112,,155,',
',,148,,114,,,,109,120,113,,119,,121,106,107,108,,,,,,,,,118,109,120',
',148,,,121,106,107,108,,113,,119,,204,,,,,,,,,,,117,,109,120,12,,81',
',121,106,107,108,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,208,,,,,21,,,22,,,,,,,,,,,,,,,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,260,,,,,21,,,22,,,,171,172,173,174',
'175,176,,182,184,185,186,187,,,,,,177,178,179,180,181,260,,,,,,183,',
',,,,171,172,173,174,175,176,,,,,,,,,12,,81,177,178,179,180,181,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,171,172,173',
'174,175,176,,182,184,185,186,187,,,,,,177,178,179,180,181,273,,,,,,183',
',30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,-44,,,,,-44',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,127',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,127',
'171,172,173,174,175,176,,,224,225,226,227,,,,,,177,178,179,180,181,171',
'172,173,174,175,176,171,172,173,174,175,176,,,,,,177,178,179,180,181',
',177,178,179,180,181,171,172,173,174,175,176,171,172,173,174,175,176',
',,,,,177,178,179,180,181,,177,178,179,180,181,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,171,172,173,174,175,176,171,172,173,174,175',
'176,171,172,173,174,175,176,178,179,,,,177,178,179,,,,177,178,179' ]
        racc_action_table = arr = ::Array.new(2198, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'68,68,68,152,156,309,62,68,68,1,81,68,68,68,68,81,68,62,100,100,191',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'191,191,152,68,309,139,132,124,103,139,103,68,124,68,148,10,148,132',
'156,156,139,105,152,152,309,309,68,103,68,68,19,143,143,143,68,68,68',
'68,143,143,105,11,143,143,143,143,19,143,12,19,19,19,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,233,240,101,143,143,19,60,143,19,233,275,143,266,143,202,2,266',
'15,2,202,101,275,60,240,240,233,143,266,143,143,23,198,198,198,143,143',
'143,143,198,198,145,145,198,198,198,198,23,198,151,151,23,23,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,0,315,63,198,5,23,17,5,23,292,239,198,315,198,74,239',
'0,74,63,0,0,0,63,63,292,24,198,75,198,198,75,218,218,218,198,198,198',
'198,218,218,216,216,218,218,218,218,82,218,87,82,25,87,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,232,232,26,218,254,254,254,254,254,254,27,218,28,218,250,250',
'250,250,250,250,55,254,254,254,254,254,218,303,218,218,303,221,221,221',
'218,218,218,218,221,221,238,238,221,221,221,221,56,221,243,243,243,243',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,241,241,57,221,255,255,255,255,255,255,58,221',
'59,221,251,251,251,251,251,251,72,255,255,255,255,255,221,85,221,221',
'86,229,229,229,221,221,221,221,229,229,242,242,229,229,229,229,88,229',
'244,244,244,244,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,277,277,104,229,256,256,256',
'256,256,256,126,229,128,229,278,278,280,280,281,281,133,256,256,256',
'256,256,229,137,229,229,140,298,298,298,229,229,229,229,298,298,286',
'286,298,298,298,298,146,298,304,304,318,318,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'321,321,149,298,257,257,257,257,257,257,150,298,153,298,160,161,162',
'190,192,195,206,257,257,257,257,257,298,212,298,298,213,317,317,317',
'298,298,298,298,317,317,215,222,317,317,317,317,223,317,231,245,246',
'247,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317',
'317,317,317,317,317,317,317,248,130,130,317,265,273,90,90,90,279,282',
'317,284,317,294,295,90,130,306,307,319,130,130,322,,,317,,317,317,,',
',,317,317,317,317,90,,,,90,,,91,91,91,,,90,130,90,,130,91,94,94,94,',
',,,,,90,94,90,90,,,,,90,90,90,90,91,,,,91,,,93,93,93,,94,91,,91,94,',
'93,,,,,,94,,94,,91,,91,91,,,,,91,91,91,91,93,94,94,,93,,,94,94,94,94',
',93,,93,95,95,95,,,,,,,,95,,93,,93,93,,,,,93,93,93,93,,,,,117,117,117',
',95,,,,95,,117,,,,,,95,,95,118,118,118,,,,,,,,118,,95,117,95,95,,117',
',,95,95,95,95,,117,,117,119,119,119,,118,,,,118,,119,,117,,117,117,118',
',118,,117,117,117,117,,,,120,120,120,,118,119,118,118,,119,120,,118',
'118,118,118,,119,,119,121,121,121,,,,,,,,121,,120,,119,119,120,,,,119',
'119,119,119,120,,120,144,144,144,,,121,,,,121,144,,,,120,120,,121,,121',
'120,120,120,120,,,,,155,155,155,,144,,121,121,144,,155,,121,121,121',
'121,144,,144,157,157,157,,,,,,,,157,,144,155,144,144,,155,,,144,144',
'144,144,,155,,155,158,158,158,,157,,,,157,,158,,,,155,155,157,,157,',
'155,155,155,155,,,,,159,159,159,157,158,157,157,,158,,159,157,157,157',
'157,,158,,158,164,164,164,,,,,,,,164,,158,159,158,158,,159,,,158,158',
'158,158,,159,,159,166,166,166,,164,,,,164,,166,,159,,159,159,164,,164',
',159,159,159,159,,,,,167,167,167,164,166,164,164,,166,,167,164,164,164',
'164,,166,,166,168,168,168,,,,,,,,168,,166,167,166,166,,167,,,166,166',
'166,166,,167,,167,169,169,169,,168,,,,168,,169,,167,,167,167,168,,168',
',167,167,167,167,,,,,171,171,171,168,169,168,168,,169,,171,168,168,168',
'168,,169,,169,172,172,172,,,,,,,,172,,169,171,169,169,,171,,,169,169',
'169,169,,171,,171,173,173,173,,172,,,,172,,173,,,,171,171,172,,172,',
'171,171,171,171,,,,174,174,174,,,173,172,172,,173,174,,172,172,172,172',
',173,,173,175,175,175,,,,,,,,175,,174,,173,173,174,,,,173,173,173,173',
'174,,174,176,176,176,,,175,,,,175,176,,,,174,174,,175,,175,174,174,174',
'174,,,,177,177,177,,,176,,175,175,176,177,,,175,175,175,175,176,,176',
'178,178,178,,,,,,,,178,,177,,176,176,177,,,,176,176,176,176,177,,177',
'179,179,179,,,178,,,,178,179,,,,177,177,,178,,178,177,177,177,177,,',
',180,180,180,,,179,,178,178,179,180,,,178,178,178,178,179,,179,181,181',
'181,,,,,,,,181,,180,,179,179,180,,,,179,179,179,179,180,,180,182,182',
'182,,,181,,,,181,182,,,,180,180,,181,,181,180,180,180,180,,,,183,183',
'183,,,182,,181,181,182,183,,,181,181,181,181,182,,182,184,184,184,,',
',,,,,184,,183,,182,182,183,,,,182,182,182,182,183,,183,185,185,185,',
',184,,,,184,185,,,,183,183,,184,,184,183,183,183,183,,,,186,186,186',
',,185,,184,184,185,186,,,184,184,184,184,185,,185,187,187,187,,,,,,',
',187,,186,,185,185,186,,,,185,185,185,185,186,,186,217,217,217,,,187',
',,,187,217,,,,186,186,,187,,187,186,186,186,186,,,,,287,287,287,,217',
',187,187,217,,287,,187,187,187,187,217,,217,237,237,237,,,,,,,,237,',
'217,287,217,217,,287,,,217,217,217,217,,287,,287,297,297,297,,237,,237',
',237,,297,,287,,287,287,237,,237,,287,287,287,287,,,,,300,300,300,237',
'297,237,237,,297,,300,237,237,237,237,,297,,297,301,301,301,,,,,,,,301',
',297,300,297,297,,300,,,297,297,297,297,,300,,300,314,314,314,,301,',
',,301,,314,,,,300,300,301,,301,,300,300,300,300,,,,,,,,,314,301,301',
',314,,,301,301,301,301,,314,,314,,131,,,,,,,,,,,314,,314,314,131,,131',
',314,314,314,314,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,136,,,,,131,,,131,,,,,,,,,,,,,,,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,189,,,,,136,,,136,,,,189,189,189,189,189,189,,189,189,189',
'189,189,,,,,,189,189,189,189,189,228,,,,,,189,,,,,,228,228,228,228,228',
'228,,,,,,,,,66,,66,228,228,228,228,228,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,115,115,115,115,115,115,,115,115,115',
'115,115,,,,,,115,115,115,115,115,207,,,,,,115,,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,129,129',
'129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129',
'129,129,,129,,,,,129,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,,,,,69,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,,,,,196,154,154,154,154,154,154',
',,154,154,154,154,,,,,,154,154,154,154,154,258,258,258,258,258,258,259',
'259,259,259,259,259,,,,,,258,258,258,258,258,,259,259,259,259,259,311',
'311,311,311,311,311,312,312,312,312,312,312,,,,,,311,311,311,311,311',
',312,312,312,312,312,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16',
'16,16,16,16,16,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,249,249,249,249,249,249,252,252,252,252,252',
'252,253,253,253,253,253,253,249,249,,,,252,252,252,,,,253,253,253' ]
        racc_action_check = arr = ::Array.new(2198, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   192,     9,    82,   nil,   nil,   146,   nil,   nil,   nil,   nil,
     8,     9,    41,   nil,   nil,   112,  2077,   200,   nil,    72,
   nil,   nil,   nil,   147,   151,   230,   257,   228,   224,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   237,   264,   294,   302,   309,
    67,   nil,   -45,   194,   nil,   nil,  1847,  2098,    -4,  1947,
   nil,   nil,   317,   nil,   156,   169,   nil,   nil,   nil,   nil,
   nil,   -36,   188,   nil,   nil,   320,   371,   190,   384,   nil,
   560,   599,   nil,   638,   610,   685,   nil,   nil,   nil,   nil,
   -54,    64,   nil,     5,   355,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1834,   nil,   713,   732,   760,
   787,   807,   nil,   nil,     3,   nil,   378,   nil,   379,  1919,
   568,  1714,    -1,   373,   nil,   nil,  1758,   393,   nil,     2,
   435,   nil,   nil,    71,   834,    87,   408,   nil,    11,   449,
   451,    95,    -6,   492,  1965,   862,   -10,   881,   909,   937,
   457,   456,   444,   nil,   956,   nil,   984,  1012,  1031,  1059,
   nil,  1087,  1106,  1134,  1161,  1181,  1208,  1235,  1255,  1282,
  1309,  1329,  1356,  1383,  1403,  1430,  1457,  1477,   nil,  1757,
   463,   -28,   448,   nil,   nil,   461,  1973,   nil,   146,   nil,
   nil,   nil,    85,   nil,   nil,   nil,   467,  1898,   nil,   nil,
   nil,   nil,   474,   475,   nil,   528,   162,  1504,   221,   nil,
   nil,   296,   484,   489,   nil,   nil,   nil,   nil,  1791,   371,
   nil,   470,   197,    70,   nil,   nil,   nil,  1551,   237,   156,
    70,   272,   312,   255,   330,   479,   480,   481,   505,  2106,
   223,   298,  2112,  2118,   213,   288,   363,   438,  1987,  1993,
   nil,   nil,   nil,   nil,   nil,   570,    84,   nil,  2119,   nil,
   nil,   nil,   nil,   523,   nil,    78,   nil,   347,   426,   575,
   367,   367,   576,   nil,   515,   nil,   387,  1532,   nil,   nil,
   nil,   nil,   156,   nil,   535,   581,   nil,  1579,   446,   nil,
  1607,  1626,   nil,   246,   395,   nil,   525,   541,   nil,    -4,
   nil,  2015,  2021,   nil,  1654,   144,   nil,   521,   397,   541,
   nil,   487,   545,   nil,   nil ]

racc_action_default = [
    -6,  -190,  -183,    -2,    -4,  -190,    -7,    -9,   -10,   -11,
  -190,  -190,  -190,   -37,   -38,   -49,  -190,  -190,    -1,  -184,
  -185,  -187,  -188,    -5,   -13,  -190,  -190,  -190,  -190,   -94,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,   325,    -3,  -186,    -8,  -190,  -190,  -190,  -190,  -114,
  -113,   -50,  -190,    -6,  -189,   -14,  -190,   -23,   -52,  -190,
  -111,  -112,   -47,   -95,  -190,  -190,   -16,   -18,   -19,   -20,
   -94,  -190,  -190,   -24,   -94,  -190,  -190,  -183,   -53,   -55,
  -190,  -158,   -58,  -190,  -190,  -190,   -63,   -64,   -65,   -66,
   -67,  -141,   -94,  -156,  -149,  -156,  -102,  -103,  -104,  -105,
  -106,  -107,  -108,  -109,  -110,  -120,  -121,  -190,  -190,  -190,
  -190,  -190,  -150,  -152,  -190,  -116,  -190,  -119,  -190,   -94,
  -190,  -190,  -190,  -190,   -30,   -31,  -190,   -26,   -28,  -190,
   -68,   -39,   -51,  -184,  -190,   -56,  -141,  -149,  -156,  -156,
   -57,  -159,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,   -82,   -85,   -86,  -190,  -151,  -158,  -190,  -190,  -190,
  -153,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -124,  -120,
  -121,  -190,  -137,  -138,  -139,  -190,  -190,  -118,   -52,   -94,
   -43,   -45,  -190,   -12,   -15,   -17,   -47,  -190,   -22,   -25,
   -94,   -94,   -47,   -89,   -90,   -54,   -60,  -190,   -52,   -76,
   -77,   -52,  -190,  -190,   -72,   -73,   -74,   -75,  -190,   -52,
  -122,  -123,   -69,  -113,  -154,  -155,   -94,  -190,   -99,  -190,
  -190,  -100,  -101,  -126,  -127,  -128,  -129,  -130,  -131,  -132,
  -133,  -134,  -135,  -136,  -142,  -143,  -144,  -145,  -146,  -147,
  -140,  -148,  -125,  -115,  -117,  -190,   -41,   -42,   -94,   -48,
   -21,   -29,   -94,  -190,   -27,  -190,   -88,  -160,   -78,  -190,
  -190,  -190,  -190,   -83,   -84,   -91,   -92,   -96,  -157,  -161,
   -40,   -46,   -32,   -94,  -190,  -190,   -79,  -190,   -52,   -61,
  -190,  -190,   -62,  -190,   -97,   -94,   -33,   -47,   -59,  -190,
   -81,   -70,   -71,   -93,  -190,   -35,   -87,   -52,   -98,  -190,
   -36,   -78,   -47,   -80,   -34 ]

racc_goto_table = [
    62,   128,   163,    29,    86,   218,   201,   222,   101,    63,
   104,    66,    67,    59,   105,    53,   138,    54,    18,    53,
   223,     9,   150,   125,    83,    76,    79,   170,     3,   295,
     1,     2,   145,   151,   162,   152,    74,   156,    55,    75,
     9,    82,   137,   133,     9,   271,   319,    52,    27,    68,
   202,   132,   215,    80,    84,   153,   126,   161,   294,   188,
   191,   285,   303,   124,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   170,   323,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   214,   198,   101,     9,   104,   216,    78,   nil,   105,
   205,    79,   nil,   209,   nil,   nil,   nil,   239,   nil,   230,
   231,   232,   235,   142,    19,   nil,   238,    23,   151,   240,
   241,   242,   nil,   nil,   nil,   nil,   199,   nil,    80,   nil,
   nil,   nil,   nil,    84,    54,   nil,    53,    53,   nil,   nil,
   nil,   267,    53,   300,   265,   270,   283,   nil,   101,    53,
   104,   276,   274,   nil,   105,   291,   234,   301,   nil,   263,
   264,     9,    78,   nil,   278,   nil,   nil,   279,   101,   277,
   104,   101,   317,   104,   105,   282,   nil,   105,   284,   101,
   266,   104,   nil,   nil,   nil,   105,   130,   131,   nil,   286,
   nil,   nil,   275,   126,   136,   nil,   nil,   nil,   nil,   143,
   nil,   nil,   nil,   nil,   272,   nil,   nil,   nil,   nil,   nil,
   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   214,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   214,   nil,   nil,
   nil,   nil,   nil,   nil,   189,   192,   193,   194,   nil,   304,
   nil,   nil,   nil,   nil,   310,   nil,   316,   nil,   101,   309,
   104,   nil,   nil,   292,   105,   nil,   nil,   nil,   nil,   nil,
   nil,   324,   nil,   321,   nil,   199,   318,   101,   nil,   104,
   nil,   228,   nil,   105,   306,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   315,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   311,   312 ]

racc_goto_check = [
    19,    20,    53,    18,    33,    42,    34,    49,    47,    13,
    55,    13,    13,    31,    58,    65,    24,     8,     3,    65,
    50,    11,    40,    61,    22,    15,    17,    63,     4,    43,
     1,     2,    39,    39,    24,    39,     7,    39,    12,    14,
    11,    21,    23,    25,    11,    26,    27,     4,    30,    32,
    35,    19,    37,    18,    18,    44,    18,    52,    54,    39,
    39,    56,    57,    60,    62,   nil,   nil,   nil,   nil,   nil,
   nil,    63,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55,    13,    47,    11,    55,    39,    11,   nil,    58,
    15,    17,   nil,    22,   nil,   nil,   nil,    40,   nil,    39,
    39,    39,    55,     3,     5,   nil,    39,     5,    39,    39,
    39,    39,   nil,   nil,   nil,   nil,    18,   nil,    18,   nil,
   nil,   nil,   nil,    18,     8,   nil,    65,    65,   nil,   nil,
   nil,    24,    65,    49,    33,    20,    53,   nil,    47,    65,
    55,    20,    24,   nil,    58,    34,    31,    50,   nil,    13,
    61,    11,    11,   nil,    33,   nil,   nil,    33,    47,    39,
    55,    47,    42,    55,    58,    33,   nil,    58,    24,    47,
    19,    55,   nil,   nil,   nil,    58,     5,     5,   nil,    39,
   nil,   nil,    19,    18,     5,   nil,   nil,   nil,   nil,     5,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    48,    48,    48,   nil,    39,
   nil,   nil,   nil,   nil,    33,   nil,    20,   nil,    47,    39,
    55,   nil,   nil,    19,    58,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,    33,   nil,    18,    39,    47,   nil,    55,
   nil,    48,   nil,    58,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    48,    48 ]

racc_goto_pointer = [
   nil,    30,    31,    16,    28,   102,   nil,   -27,    -6,   nil,
   nil,    21,    14,   -46,   -27,   -41,   nil,   -40,   -13,   -29,
   -71,   -26,   -43,   -42,   -68,   -38,  -162,  -269,   nil,   nil,
    33,   -14,   -10,   -64,  -123,   -79,   nil,   -91,   nil,   -58,
   -69,   nil,  -147,  -249,   -39,   nil,   nil,   -60,   106,  -147,
  -134,   nil,   -45,  -100,  -217,   -58,  -176,  -225,   -54,   nil,
    -6,   -46,   -54,   -78,   nil,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,    97,   nil,   220,   nil,   nil,    77,    99,   102,   139,
   nil,   nil,   nil,   nil,   200,   nil,   nil,   nil,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,    87,    88,    89,   100,
   nil,    92,   nil,   nil,   nil,    96,    98,   146,   115,   nil,
   nil,   296,   nil,   nil,   212,   147,   nil,   nil,   149,   122,
   nil,   nil,   116,   165,   123,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 90, :_reduce_1,
  1, 91, :_reduce_2,
  3, 91, :_reduce_3,
  1, 93, :_reduce_4,
  2, 93, :_reduce_5,
  0, 96, :_reduce_6,
  1, 96, :_reduce_7,
  3, 96, :_reduce_8,
  1, 97, :_reduce_9,
  1, 97, :_reduce_10,
  1, 97, :_reduce_11,
  7, 99, :_reduce_12,
  0, 101, :_reduce_13,
  2, 101, :_reduce_14,
  7, 95, :_reduce_15,
  1, 103, :_reduce_16,
  3, 103, :_reduce_17,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 105, :_reduce_21,
  7, 100, :_reduce_22,
  0, 110, :_reduce_23,
  1, 110, :_reduce_24,
  3, 110, :_reduce_25,
  2, 111, :_reduce_26,
  3, 112, :_reduce_27,
  1, 112, :_reduce_28,
  4, 106, :_reduce_29,
  1, 114, :_reduce_none,
  1, 114, :_reduce_31,
  2, 115, :_reduce_32,
  3, 115, :_reduce_33,
  7, 115, :_reduce_34,
  0, 116, :_reduce_35,
  1, 116, :_reduce_36,
  1, 98, :_reduce_37,
  1, 98, :_reduce_38,
  6, 117, :_reduce_39,
  8, 118, :_reduce_40,
  2, 123, :_reduce_41,
  2, 123, :_reduce_42,
  1, 123, :_reduce_43,
  0, 124, :_reduce_44,
  1, 124, :_reduce_45,
  3, 124, :_reduce_46,
  0, 109, :_reduce_47,
  3, 109, :_reduce_48,
  0, 119, :_reduce_49,
  2, 119, :_reduce_50,
  2, 122, :_reduce_51,
  0, 125, :_reduce_52,
  1, 125, :_reduce_53,
  3, 125, :_reduce_54,
  1, 126, :_reduce_55,
  2, 126, :_reduce_56,
  2, 126, :_reduce_57,
  1, 126, :_reduce_58,
  6, 126, :_reduce_59,
  3, 126, :_reduce_60,
  5, 126, :_reduce_61,
  5, 126, :_reduce_62,
  1, 126, :_reduce_63,
  1, 126, :_reduce_none,
  1, 126, :_reduce_65,
  1, 126, :_reduce_none,
  1, 126, :_reduce_67,
  2, 135, :_reduce_68,
  3, 134, :_reduce_69,
  5, 133, :_reduce_70,
  5, 133, :_reduce_71,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  0, 132, :_reduce_78,
  1, 132, :_reduce_79,
  5, 132, :_reduce_80,
  2, 140, :_reduce_81,
  2, 127, :_reduce_82,
  3, 141, :_reduce_83,
  3, 141, :_reduce_84,
  1, 141, :_reduce_85,
  1, 141, :_reduce_86,
  6, 113, :_reduce_87,
  3, 113, :_reduce_88,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  3, 142, :_reduce_91,
  1, 145, :_reduce_none,
  3, 145, :_reduce_93,
  0, 108, :_reduce_94,
  2, 108, :_reduce_95,
  0, 146, :_reduce_96,
  1, 146, :_reduce_97,
  3, 146, :_reduce_98,
  3, 130, :_reduce_99,
  3, 130, :_reduce_100,
  3, 130, :_reduce_101,
  1, 148, :_reduce_102,
  1, 148, :_reduce_103,
  1, 148, :_reduce_104,
  1, 148, :_reduce_105,
  1, 148, :_reduce_106,
  1, 148, :_reduce_107,
  1, 148, :_reduce_108,
  1, 148, :_reduce_109,
  1, 148, :_reduce_110,
  2, 120, :_reduce_111,
  2, 120, :_reduce_112,
  1, 120, :_reduce_113,
  0, 121, :_reduce_114,
  4, 121, :_reduce_115,
  1, 149, :_reduce_116,
  3, 149, :_reduce_117,
  2, 150, :_reduce_118,
  1, 150, :_reduce_119,
  1, 128, :_reduce_120,
  1, 128, :_reduce_121,
  3, 128, :_reduce_122,
  3, 128, :_reduce_123,
  2, 128, :_reduce_124,
  3, 128, :_reduce_125,
  3, 137, :_reduce_126,
  3, 137, :_reduce_127,
  3, 137, :_reduce_128,
  3, 137, :_reduce_129,
  3, 137, :_reduce_130,
  3, 137, :_reduce_131,
  3, 137, :_reduce_132,
  3, 137, :_reduce_133,
  3, 137, :_reduce_134,
  3, 137, :_reduce_135,
  3, 137, :_reduce_136,
  2, 137, :_reduce_137,
  2, 137, :_reduce_138,
  2, 137, :_reduce_139,
  3, 137, :_reduce_140,
  1, 137, :_reduce_141,
  3, 151, :_reduce_142,
  3, 151, :_reduce_143,
  3, 151, :_reduce_144,
  3, 151, :_reduce_145,
  3, 151, :_reduce_146,
  3, 151, :_reduce_147,
  3, 151, :_reduce_148,
  1, 136, :_reduce_149,
  1, 136, :_reduce_150,
  2, 136, :_reduce_151,
  1, 136, :_reduce_none,
  2, 153, :_reduce_153,
  3, 147, :_reduce_154,
  3, 147, :_reduce_155,
  0, 152, :_reduce_156,
  3, 152, :_reduce_157,
  0, 129, :_reduce_158,
  1, 129, :_reduce_159,
  3, 129, :_reduce_160,
  4, 144, :_reduce_161,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_182,
  0, 92, :_reduce_183,
  1, 92, :_reduce_184,
  1, 94, :_reduce_185,
  2, 94, :_reduce_186,
  1, 154, :_reduce_187,
  1, 154, :_reduce_none,
  1, 102, :_reduce_189 ]

racc_reduce_n = 190

racc_shift_n = 325

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kDTYPE_UINT => 26,
  :kDTYPE_LINT => 27,
  :kDTYPE_LLINT => 28,
  :kDTYPE_CHAR => 29,
  :kDTYPE_I8 => 30,
  :kDTYPE_I16 => 31,
  :kDTYPE_I32 => 32,
  :kDTYPE_I64 => 33,
  :kDTYPE_UI8 => 34,
  :kDTYPE_UI16 => 35,
  :kDTYPE_UI32 => 36,
  :kDTYPE_UI64 => 37,
  :kDTYPE_INT => 38,
  :kDTYPE_F32 => 39,
  :kDTYPE_F64 => 40,
  :kDTYPE_LF64 => 41,
  :kDTYPE_ROBJ => 42,
  :kDTYPE_ULINT => 43,
  :kDTYPE_ULLINT => 44,
  :kDTYPE_VOID => 45,
  :tCUSTOM_DTYPE => 46,
  :tLPAREN => 47,
  :tRPAREN => 48,
  :tLSQUARE => 49,
  :tRSQUARE => 50,
  :tIDENTIFIER => 51,
  :tNL => 52,
  :tCOMMA => 53,
  :tSQUOTE => 54,
  :tSCOLON => 55,
  :EOF => 56,
  :tDOT => 57,
  :tQMARK => 58,
  :tSYMBOL => 59,
  :tPLUS => 60,
  :tMINUS => 61,
  :tSTAR => 62,
  :tDIVIDE => 63,
  :tEXPO => 64,
  :tMODULUS => 65,
  :tASSIGN => 66,
  :tEQ => 67,
  :tLT => 68,
  :tLTEQ => 69,
  :tGT => 70,
  :tGTEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tBANG => 74,
  :tOP_ASSIGN => 75,
  :tSTRING => 76,
  :tBIT_AND => 77,
  :tBIT_OR => 78,
  :tBIT_XOR => 79,
  :tBIT_LSHIFT => 80,
  :tBIT_RSHIFT => 81,
  :tBIT_NOT => 82,
  :tINTEGER => 83,
  :tFLOAT => 84,
  :tSINGLE_CHAR => 85,
  :ADDRESS_OF => 86,
  :UMINUS => 87,
  :tNEQ => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "dtype",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_22(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[4].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_23(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_25(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_26(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_29(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_31(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_32(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_33(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_34(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_35(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_39(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_40(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_41(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_42(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_43(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_44(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_45(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_46(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_48(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_49(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_50(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_52(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_53(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_54(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_55(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_56(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_57(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_58(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_59(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_60(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_61(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_63(val, _values, result)
    
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_65(val, _values, result)
    
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_67(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_68(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_69(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_71(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_79(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_80(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_81(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_82(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_86(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_87(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_88(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_91(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_93(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_94(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_95(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_96(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_97(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_98(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_100(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_101(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_111(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_112(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_113(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_114(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_115(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_116(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_117(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_118(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_119(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_121(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_124(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_138(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_139(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_141(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_148(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_151(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_153(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_154(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_155(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_159(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_160(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_161(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_182(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_189(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
