#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 329)

def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
  @yydebug = true
end

def next_token
  @lexer.next_token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

def op_assign val # expr, op_assign, expr => expr = expr op expr
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]))
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value])
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value])
  end

  var
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    19,    21,   128,   216,   128,   139,    22,    23,   182,
     3,    34,    35,    36,    25,   143,   117,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    41,    97,    93,   130,
    28,   130,   117,     5,   117,   169,   117,   118,    12,   183,
    40,     6,   119,     8,   184,    92,    95,    98,    99,   100,
   101,   102,   103,    42,    13,    31,    32,    33,    18,    19,
    21,    74,   187,   188,    75,    22,    23,   134,   135,    34,
    35,    36,    25,   136,   137,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    41,   187,   188,    74,    28,    74,
    75,    74,    75,    74,    75,    11,    75,    70,    40,    98,
    99,   100,   101,   102,   103,    76,    88,   134,   135,   136,
   137,    42,    89,    31,    32,    33,    18,    19,    21,   100,
   101,   102,   103,    22,    23,    91,    94,    34,    35,    36,
    25,   117,   120,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    41,   121,    74,   218,    28,    75,   219,   117,
    98,    99,   100,   101,   102,   103,    40,   104,   106,   107,
   108,   109,   110,   111,   100,   101,   102,   103,    93,    42,
   105,    31,    32,    33,    18,    19,    21,    97,   117,   131,
   140,    22,    23,   102,   170,    34,    35,    36,    25,     8,
   130,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    41,    76,   117,   176,    28,   177,   117,   180,    98,    99,
   100,   101,   102,   103,    40,   104,   106,   107,   108,   109,
   110,   111,   117,   117,   117,   117,   102,    42,   105,    31,
    32,    33,    18,    19,    21,   102,   102,   102,   189,    22,
    23,   192,   201,    34,    35,    36,    25,   206,    91,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    41,   117,
   117,   221,    28,    98,    99,   100,   101,   102,   103,    93,
   216,   117,    40,    98,    99,   100,   101,   102,   103,    98,
    99,   100,   101,   102,   103,    42,   nil,    31,    32,    33,
    18,    19,    21,   nil,   nil,   nil,   nil,    22,    23,   nil,
   nil,    34,    35,    36,    25,   nil,   nil,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    41,   nil,   nil,   nil,
    28,    98,    99,   100,   101,   102,   103,   nil,   nil,   nil,
    40,    98,    99,   100,   101,   102,   103,    98,    99,   100,
   101,   102,   103,    42,   nil,    31,    32,    33,    18,    19,
    21,   nil,   nil,   nil,   nil,    22,    23,   nil,   nil,    34,
    35,    36,    25,   nil,   nil,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    41,   nil,   nil,   nil,    28,   nil,
   nil,    34,    35,    36,   nil,   nil,   nil,   nil,    40,    34,
    35,    36,    98,    99,   100,   101,   102,   103,   nil,   nil,
   nil,    42,   nil,    31,    32,    33,    41,   nil,   nil,   nil,
    80,   nil,   nil,   nil,    41,   nil,   nil,   nil,    80,   nil,
    40,    34,    35,    36,    34,    35,    36,   nil,    40,    34,
    35,    36,   nil,    42,   nil,    31,    32,    33,   nil,   nil,
   nil,    42,   nil,    31,    32,    33,    41,   nil,   nil,    86,
    80,   nil,   nil,    80,    41,   nil,   nil,   nil,    80,   nil,
    40,   nil,   nil,    40,    34,    35,    36,   nil,    40,    34,
    35,    36,   nil,    42,   nil,    31,    32,    33,    31,    32,
    33,    42,   nil,    31,    32,    33,   nil,   nil,   nil,    86,
   nil,   nil,   nil,    80,    41,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,    40,    34,    35,    36,   nil,    40,    34,
    35,    36,    34,    35,    36,   nil,   nil,   nil,    31,    32,
    33,    42,   nil,    31,    32,    33,   nil,   nil,   nil,    41,
   nil,   nil,   nil,    80,    41,   nil,   nil,    86,    80,   nil,
   nil,    80,   nil,    40,    34,    35,    36,   nil,    40,   nil,
   nil,    40,    34,    35,    36,   nil,    42,   nil,    31,    32,
    33,    42,   nil,    31,    32,    33,    31,    32,    33,    41,
   nil,   nil,   nil,    80,   nil,   nil,   nil,    41,   nil,   nil,
   nil,   146,   nil,    40,    34,    35,    36,   nil,   nil,   nil,
   nil,    40,   143,    34,    35,    36,    42,   nil,    31,    32,
    33,   nil,   nil,   nil,    42,   nil,    31,    32,    33,    41,
   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,    41,   nil,
   nil,   nil,    80,    40,   nil,    34,    35,    36,   nil,   nil,
   nil,   nil,    40,    34,    35,    36,    42,   nil,    31,    32,
    33,   nil,   nil,   nil,   nil,    42,   nil,    31,    32,    33,
    41,   nil,   nil,   nil,    80,   nil,   nil,   nil,    41,   nil,
   nil,   nil,    80,   nil,    40,    34,    35,    36,    34,    35,
    36,   nil,    40,    34,    35,    36,   nil,    42,   nil,    31,
    32,    33,   nil,   nil,   nil,    42,   nil,    31,    32,    33,
    41,   nil,   nil,    86,    80,   nil,   nil,    80,    86,   nil,
   nil,   nil,    80,   nil,    40,   nil,   nil,    40,    34,    35,
    36,   nil,    40,    34,    35,    36,   nil,    42,   nil,    31,
    32,    33,    31,    32,    33,   nil,   nil,    31,    32,    33,
   nil,   nil,   nil,    86,   nil,   nil,   nil,    80,    86,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,    40,    34,    35,
    36,   nil,    40,    34,    35,    36,    34,    35,    36,    34,
    35,    36,    31,    32,    33,   nil,   nil,    31,    32,    33,
   nil,   nil,   nil,    86,   nil,   nil,   nil,    80,    86,   nil,
   nil,    86,    80,   nil,    86,    80,   nil,    40,    80,   nil,
   nil,   nil,    40,   nil,   nil,    40,   nil,   nil,    40,    34,
    35,    36,    31,    32,    33,   nil,   nil,    31,    32,    33,
    31,    32,    33,    31,    32,    33,   nil,    34,    35,    36,
    34,    35,    36,   nil,    86,   nil,   nil,   nil,    80,    98,
    99,   100,   101,   102,   103,   nil,   nil,   nil,    40,    34,
    35,    36,    86,   nil,   nil,    86,    80,   nil,   nil,    80,
   nil,   nil,   nil,    31,    32,    33,    40,   nil,   nil,    40,
    34,    35,    36,   nil,    86,   nil,   nil,   nil,    80,   nil,
   nil,    31,    32,    33,    31,    32,    33,   nil,    40,    34,
    35,    36,   nil,   -47,   nil,    86,   -47,   -47,   -47,    80,
   nil,   nil,   nil,    31,    32,    33,   nil,   nil,   -48,    40,
   nil,   -48,   -48,   -48,    86,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,    31,    32,    33,   nil,    40,    34,
    35,    36,    93,   nil,   nil,   -47,   -47,   nil,   -47,   nil,
    34,    35,    36,    31,    32,    33,   nil,   nil,   nil,    92,
   -48,   -48,   nil,   -48,    41,   nil,   nil,   nil,   146,   nil,
   nil,    34,    35,    36,   181,    41,   nil,   199,    40,    80,
   nil,   nil,    34,    35,    36,   nil,   nil,   nil,   nil,    40,
   nil,    42,   nil,    31,    32,    33,    41,   nil,   nil,   nil,
    80,   nil,    42,   nil,    31,    32,    33,    41,   nil,   nil,
    40,    80,   nil,   nil,    34,    35,    36,    34,    35,    36,
   nil,    40,   nil,    42,   nil,    31,    32,    33,    98,    99,
   100,   101,   102,   103,    42,   nil,    31,    32,    33,    86,
   nil,   nil,    86,    80,   nil,   nil,    80,   nil,   nil,    34,
    35,    36,   nil,    40,   nil,   nil,    40,    34,    35,    36,
    98,    99,   100,   101,   102,   103,   nil,   nil,    31,    32,
    33,    31,    32,    33,    41,   nil,   nil,   nil,    80,   nil,
   nil,   nil,    41,   nil,   nil,   nil,    80,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,    42,   169,    31,    32,    33,   nil,   nil,   nil,    42,
   nil,    31,    32,    33,    98,    99,   100,   101,   102,   103,
   nil,   104,   106,   107,   108,   109,   110,   111,   nil,   nil,
   nil,   nil,    69,   nil,   105,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,   nil,   nil,   nil,   nil,   nil,    74,
    69,   nil,    75,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,   nil,   nil,    69,   nil,    68,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,   nil,   nil,    69,   nil,
    68,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63 ]

racc_action_check = [
     9,     9,     9,    83,   209,   202,    87,     9,     9,   150,
     1,     9,     9,     9,     9,   209,   150,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,    30,    28,    83,
     9,   202,    87,     2,    83,   138,   202,    65,     8,   154,
     9,     3,    65,     5,   154,    28,    30,   138,   138,   138,
   138,   138,   138,     9,     8,     9,     9,     9,    72,    72,
    72,    15,   174,   174,    15,    72,    72,   176,   176,    72,
    72,    72,    72,   177,   177,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,   220,   220,    70,    72,    72,
    70,   123,    72,   140,   123,     7,   140,    14,    72,    85,
    85,    85,    85,    85,    85,    16,    25,    85,    85,    85,
    85,    72,    26,    72,    72,    72,   127,   127,   127,   155,
   155,   155,   155,   127,   127,    27,    29,   127,   127,   127,
   127,    44,    67,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,    69,   194,   210,   127,   194,   210,    77,
    38,    38,    38,    38,    38,    38,   127,    38,    38,    38,
    38,    38,    38,    38,   156,   156,   156,   156,    80,   127,
    38,   127,   127,   127,   131,   131,   131,    81,    82,    84,
    88,   131,   131,   112,   114,   131,   131,   131,   131,   117,
   118,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   124,   126,   132,   131,   133,   141,   142,   115,   115,
   115,   115,   115,   115,   131,   115,   115,   115,   115,   115,
   115,   115,   149,   151,   152,   153,   157,   131,   115,   131,
   131,   131,   139,   139,   139,   158,   159,   160,   175,   139,
   139,   178,   185,   139,   139,   139,   139,   193,   196,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   200,
   211,   214,   139,   161,   161,   161,   161,   161,   161,   216,
   221,   222,   139,   162,   162,   162,   162,   162,   162,   163,
   163,   163,   163,   163,   163,   139,   nil,   139,   139,   139,
   188,   188,   188,   nil,   nil,   nil,   nil,   188,   188,   nil,
   nil,   188,   188,   188,   188,   nil,   nil,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   nil,   nil,   nil,
   188,   164,   164,   164,   164,   164,   164,   nil,   nil,   nil,
   188,   165,   165,   165,   165,   165,   165,   166,   166,   166,
   166,   166,   166,   188,   nil,   188,   188,   188,   212,   212,
   212,   nil,   nil,   nil,   nil,   212,   212,   nil,   nil,   212,
   212,   212,   212,   nil,   nil,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   nil,   nil,   nil,   212,   nil,
   nil,    18,    18,    18,   nil,   nil,   nil,   nil,   212,    19,
    19,    19,   167,   167,   167,   167,   167,   167,   nil,   nil,
   nil,   212,   nil,   212,   212,   212,    18,   nil,   nil,   nil,
    18,   nil,   nil,   nil,    19,   nil,   nil,   nil,    19,   nil,
    18,    21,    21,    21,    22,    22,    22,   nil,    19,    23,
    23,    23,   nil,    18,   nil,    18,    18,    18,   nil,   nil,
   nil,    19,   nil,    19,    19,    19,    21,   nil,   nil,    22,
    21,   nil,   nil,    22,    23,   nil,   nil,   nil,    23,   nil,
    21,   nil,   nil,    22,    40,    40,    40,   nil,    23,    41,
    41,    41,   nil,    21,   nil,    21,    21,    21,    22,    22,
    22,    23,   nil,    23,    23,    23,   nil,   nil,   nil,    40,
   nil,   nil,   nil,    40,    41,   nil,   nil,   nil,    41,   nil,
   nil,   nil,   nil,    40,    42,    42,    42,   nil,    41,    76,
    76,    76,    86,    86,    86,   nil,   nil,   nil,    40,    40,
    40,    41,   nil,    41,    41,    41,   nil,   nil,   nil,    42,
   nil,   nil,   nil,    42,    76,   nil,   nil,    86,    76,   nil,
   nil,    86,   nil,    42,    89,    89,    89,   nil,    76,   nil,
   nil,    86,    90,    90,    90,   nil,    42,   nil,    42,    42,
    42,    76,   nil,    76,    76,    76,    86,    86,    86,    89,
   nil,   nil,   nil,    89,   nil,   nil,   nil,    90,   nil,   nil,
   nil,    90,   nil,    89,    92,    92,    92,   nil,   nil,   nil,
   nil,    90,    90,    93,    93,    93,    89,   nil,    89,    89,
    89,   nil,   nil,   nil,    90,   nil,    90,    90,    90,    92,
   nil,   nil,   nil,    92,   nil,   nil,   nil,   nil,    93,   nil,
   nil,   nil,    93,    92,   nil,    94,    94,    94,   nil,   nil,
   nil,   nil,    93,    95,    95,    95,    92,   nil,    92,    92,
    92,   nil,   nil,   nil,   nil,    93,   nil,    93,    93,    93,
    94,   nil,   nil,   nil,    94,   nil,   nil,   nil,    95,   nil,
   nil,   nil,    95,   nil,    94,    97,    97,    97,    98,    98,
    98,   nil,    95,    99,    99,    99,   nil,    94,   nil,    94,
    94,    94,   nil,   nil,   nil,    95,   nil,    95,    95,    95,
    97,   nil,   nil,    98,    97,   nil,   nil,    98,    99,   nil,
   nil,   nil,    99,   nil,    97,   nil,   nil,    98,   100,   100,
   100,   nil,    99,   101,   101,   101,   nil,    97,   nil,    97,
    97,    97,    98,    98,    98,   nil,   nil,    99,    99,    99,
   nil,   nil,   nil,   100,   nil,   nil,   nil,   100,   101,   nil,
   nil,   nil,   101,   nil,   nil,   nil,   nil,   100,   102,   102,
   102,   nil,   101,   103,   103,   103,   104,   104,   104,   105,
   105,   105,   100,   100,   100,   nil,   nil,   101,   101,   101,
   nil,   nil,   nil,   102,   nil,   nil,   nil,   102,   103,   nil,
   nil,   104,   103,   nil,   105,   104,   nil,   102,   105,   nil,
   nil,   nil,   103,   nil,   nil,   104,   nil,   nil,   105,   106,
   106,   106,   102,   102,   102,   nil,   nil,   103,   103,   103,
   104,   104,   104,   105,   105,   105,   nil,   107,   107,   107,
   108,   108,   108,   nil,   106,   nil,   nil,   nil,   106,   168,
   168,   168,   168,   168,   168,   nil,   nil,   nil,   106,   109,
   109,   109,   107,   nil,   nil,   108,   107,   nil,   nil,   108,
   nil,   nil,   nil,   106,   106,   106,   107,   nil,   nil,   108,
   110,   110,   110,   nil,   109,   nil,   nil,   nil,   109,   nil,
   nil,   107,   107,   107,   108,   108,   108,   nil,   109,   111,
   111,   111,   nil,   146,   nil,   110,   146,   146,   146,   110,
   nil,   nil,   nil,   109,   109,   109,   nil,   nil,   147,   110,
   nil,   147,   147,   147,   111,   nil,   nil,   nil,   111,   nil,
   nil,   nil,   nil,   nil,   110,   110,   110,   nil,   111,   180,
   180,   180,   146,   nil,   nil,   146,   146,   nil,   146,   nil,
   181,   181,   181,   111,   111,   111,   nil,   nil,   nil,   146,
   147,   147,   nil,   147,   180,   nil,   nil,   nil,   180,   nil,
   nil,   184,   184,   184,   147,   181,   nil,   181,   180,   181,
   nil,   nil,   187,   187,   187,   nil,   nil,   nil,   nil,   181,
   nil,   180,   nil,   180,   180,   180,   184,   nil,   nil,   nil,
   184,   nil,   181,   nil,   181,   181,   181,   187,   nil,   nil,
   184,   187,   nil,   nil,   190,   190,   190,   191,   191,   191,
   nil,   187,   nil,   184,   nil,   184,   184,   184,   204,   204,
   204,   204,   204,   204,   187,   nil,   187,   187,   187,   190,
   nil,   nil,   191,   190,   nil,   nil,   191,   nil,   nil,   199,
   199,   199,   nil,   190,   nil,   nil,   191,   219,   219,   219,
   205,   205,   205,   205,   205,   205,   nil,   nil,   190,   190,
   190,   191,   191,   191,   199,   nil,   nil,   nil,   199,   nil,
   nil,   nil,   219,   nil,   nil,   nil,   219,   nil,   199,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   219,   nil,   nil,   nil,
   nil,   199,   113,   199,   199,   199,   nil,   nil,   nil,   219,
   nil,   219,   219,   219,   113,   113,   113,   113,   113,   113,
   nil,   113,   113,   113,   113,   113,   113,   113,   nil,   nil,
   nil,   nil,   208,   nil,   113,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   nil,   nil,   nil,   nil,   nil,   208,
    11,   nil,   208,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,   nil,   nil,   119,   nil,    11,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   nil,   nil,   179,   nil,
   119,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179 ]

racc_action_pointer = [
   nil,    10,    41,    51,   nil,     9,   nil,    75,    -3,    -4,
   nil,  1192,   nil,   nil,   114,    26,   119,   nil,   436,   444,
   nil,   476,   479,   484,   nil,    82,    64,    90,    -4,    87,
    -3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,
   519,   524,   559,   nil,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   108,   nil,   129,
    62,   nil,    64,   nil,   nil,   nil,   564,   129,   nil,   nil,
   156,   167,   158,    -6,   195,    66,   567,    -8,   196,   599,
   607,   nil,   639,   648,   680,   688,   nil,   720,   723,   728,
   763,   768,   803,   808,   811,   814,   854,   872,   875,   894,
   915,   934,   156,  1111,   173,   195,   nil,   175,   175,  1216,
   nil,   nil,   nil,    66,   235,   nil,   192,   132,   nil,   nil,
   nil,   200,   199,   201,   nil,   nil,   nil,   nil,     4,   268,
    68,   196,   201,   nil,   nil,   nil,   950,   965,   nil,   212,
   -34,   213,   214,   215,     8,    84,   139,   209,   218,   219,
   220,   260,   270,   276,   328,   338,   344,   409,   846,   nil,
   nil,   nil,   nil,   nil,    65,   275,    16,    20,   278,  1240,
   974,   985,   nil,   nil,  1006,   279,   nil,  1017,   336,   nil,
  1049,  1052,   nil,   284,   129,   nil,   233,   nil,   nil,  1084,
   259,   nil,    -4,   nil,  1025,  1057,   nil,   nil,  1164,   -40,
   132,   260,   404,   nil,   265,   nil,   277,   nil,   nil,  1092,
    98,   276,   271,   nil,   nil ]

racc_action_default = [
    -3,  -135,    -1,  -135,    -2,  -135,   225,   -66,   -65,    -6,
   -67,  -135,   -63,   -64,  -135,  -128,    -7,    -9,  -135,  -135,
   -12,  -135,  -135,  -135,   -17,  -135,   -84,   -40,   -98,   -96,
  -101,   -57,   -58,   -59,   -60,   -61,   -62,   -73,   -74,   -75,
  -135,  -135,  -135,   -97,  -135,  -107,  -108,  -109,  -110,  -111,
  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -120,  -121,
  -122,  -123,  -124,  -125,  -126,  -135,   -69,  -135,   -72,  -135,
  -128,    -5,  -129,  -130,  -132,  -133,  -135,   -10,   -84,   -96,
   -98,  -101,   -11,  -135,  -135,  -135,  -135,  -135,  -127,  -135,
  -135,   -41,  -135,  -135,  -135,  -135,   -99,  -103,  -135,  -135,
  -135,  -135,  -135,  -135,  -135,  -135,  -135,  -135,  -135,  -135,
  -135,  -135,   -82,  -135,  -135,   -94,   -95,  -135,  -135,  -135,
   -71,  -127,    -4,  -129,    -8,  -131,   -14,    -6,   -33,   -34,
  -134,    -6,  -135,  -135,   -29,   -30,   -31,   -32,  -135,    -6,
  -128,   -26,   -39,   -42,   -45,   -46,   -98,   -96,   -49,   -54,
  -135,   -55,   -56,  -104,  -135,   -76,   -77,   -78,   -79,   -80,
   -81,   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,   -83,
   -93,  -100,   -68,   -70,   -35,  -135,  -135,  -135,  -135,   -20,
  -135,  -135,  -106,  -102,  -135,  -135,   -36,  -135,    -6,   -15,
  -135,  -135,   -16,  -135,  -128,   -21,   -40,   -43,   -44,   -51,
  -105,   -13,  -135,   -38,   -27,   -28,   -18,   -19,  -129,  -135,
  -135,   -52,    -6,   -22,   -23,   -24,   -47,   -48,   -50,  -135,
   -35,  -135,   -53,   -37,   -25 ]

racc_goto_table = [
    29,    14,    26,    30,   125,    67,    72,    90,   144,    71,
   127,   133,   148,   132,     7,   145,   185,   195,   114,   116,
    77,    82,     1,    83,     2,    87,     4,    66,     9,   124,
    84,   193,   194,   214,   172,   142,   210,    10,    65,   154,
   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,
   nil,   nil,   223,    29,   122,    26,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,
   nil,   147,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   141,   nil,   nil,   149,   150,   151,   152,   198,   153,
   nil,   nil,   148,   191,   190,   197,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,    29,   174,
    26,    30,    29,   175,    26,    30,   171,   215,   nil,   212,
    29,   178,    26,    30,   179,   173,   nil,   nil,   nil,   224,
   125,   nil,   nil,   nil,   nil,   nil,    85,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   112,   113,   115,   nil,   nil,   nil,
   nil,   147,   nil,   196,    30,   nil,   209,   nil,   nil,    29,
   203,    26,    30,   151,   nil,   208,   200,   nil,   207,   202,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   217,   211,   196,    29,   220,    26,    30,   nil,   nil,   nil,
   138,   nil,   217,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   222,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   204,   205 ]

racc_goto_check = [
    33,     6,    25,    35,    45,    21,    10,    22,    24,     7,
    14,    28,    13,    27,     4,    32,    15,    20,    41,    41,
    12,    12,     1,    12,     2,    12,     3,    39,     5,     9,
    16,    18,    19,    23,    29,    31,    34,    37,    38,    43,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,    15,    33,     7,    25,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,    33,   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,    12,    12,    12,    12,    24,    12,
   nil,   nil,    13,    28,    27,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,    33,     6,
    25,    35,    33,     6,    25,    35,     4,    24,   nil,    14,
    33,     6,    25,    35,     7,    39,   nil,   nil,   nil,    24,
    45,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    26,    26,   nil,   nil,   nil,
   nil,    33,   nil,    21,    35,   nil,    22,   nil,   nil,    33,
     6,    25,    35,    12,   nil,    10,    12,   nil,     7,    12,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    33,    12,    21,    33,     6,    25,    35,   nil,   nil,   nil,
    26,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,    26,    26,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,    26,    26,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    26 ]

racc_goto_pointer = [
   nil,    22,    24,    24,     9,    21,    -8,    -6,   nil,   -43,
    -9,   nil,     2,   -78,   -73,  -158,     8,   nil,  -148,  -147,
  -162,    -6,   -20,  -176,   -82,    -7,   124,   -72,   -74,   -84,
   nil,   -55,   -75,    -9,  -163,    -6,   nil,    30,    27,    16,
   nil,   -23,   nil,   -58,   nil,   -68 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,    16,
   123,    17,    44,    20,   nil,   nil,   nil,    24,   nil,   nil,
   nil,    27,   nil,   nil,   nil,    78,    38,   nil,   nil,   129,
   186,   nil,   nil,    79,   nil,    81,    43,   nil,   nil,   nil,
    37,    39,    96,   nil,    64,    73 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 75, :_reduce_1,
  2, 76, :_reduce_2,
  0, 76, :_reduce_3,
  6, 77, :_reduce_4,
  2, 80, :_reduce_5,
  0, 82, :_reduce_6,
  1, 82, :_reduce_7,
  3, 82, :_reduce_8,
  1, 83, :_reduce_9,
  2, 83, :_reduce_10,
  2, 83, :_reduce_11,
  1, 83, :_reduce_12,
  6, 83, :_reduce_13,
  3, 83, :_reduce_14,
  5, 83, :_reduce_15,
  5, 83, :_reduce_16,
  1, 83, :_reduce_17,
  6, 83, :_reduce_18,
  2, 92, :_reduce_19,
  0, 93, :_reduce_20,
  1, 93, :_reduce_21,
  3, 93, :_reduce_22,
  3, 94, :_reduce_23,
  1, 97, :_reduce_24,
  3, 97, :_reduce_25,
  3, 91, :_reduce_26,
  5, 90, :_reduce_27,
  5, 90, :_reduce_28,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  0, 89, :_reduce_35,
  1, 89, :_reduce_36,
  5, 89, :_reduce_37,
  2, 104, :_reduce_38,
  3, 85, :_reduce_39,
  0, 96, :_reduce_40,
  1, 96, :_reduce_41,
  2, 96, :_reduce_42,
  3, 105, :_reduce_43,
  3, 105, :_reduce_44,
  1, 105, :_reduce_45,
  1, 105, :_reduce_46,
  1, 98, :_reduce_47,
  1, 98, :_reduce_48,
  1, 106, :_reduce_none,
  5, 106, :_reduce_50,
  0, 108, :_reduce_51,
  1, 108, :_reduce_52,
  3, 108, :_reduce_53,
  3, 87, :_reduce_54,
  3, 87, :_reduce_55,
  3, 87, :_reduce_56,
  1, 110, :_reduce_57,
  1, 110, :_reduce_58,
  1, 110, :_reduce_59,
  1, 110, :_reduce_60,
  1, 110, :_reduce_61,
  1, 110, :_reduce_62,
  2, 78, :_reduce_63,
  2, 78, :_reduce_64,
  1, 78, :_reduce_65,
  0, 79, :_reduce_66,
  1, 79, :_reduce_none,
  4, 111, :_reduce_68,
  1, 112, :_reduce_69,
  3, 112, :_reduce_70,
  2, 113, :_reduce_71,
  1, 113, :_reduce_72,
  1, 86, :_reduce_73,
  1, 86, :_reduce_74,
  1, 86, :_reduce_75,
  3, 100, :_reduce_76,
  3, 100, :_reduce_77,
  3, 100, :_reduce_78,
  3, 100, :_reduce_79,
  3, 100, :_reduce_80,
  3, 100, :_reduce_81,
  2, 100, :_reduce_82,
  3, 100, :_reduce_83,
  1, 100, :_reduce_84,
  3, 115, :_reduce_85,
  3, 115, :_reduce_86,
  3, 115, :_reduce_87,
  3, 115, :_reduce_88,
  3, 115, :_reduce_89,
  3, 115, :_reduce_90,
  3, 115, :_reduce_91,
  3, 115, :_reduce_92,
  3, 115, :_reduce_93,
  2, 115, :_reduce_94,
  2, 115, :_reduce_95,
  1, 99, :_reduce_96,
  1, 99, :_reduce_97,
  1, 99, :_reduce_98,
  2, 114, :_reduce_99,
  3, 109, :_reduce_100,
  0, 116, :_reduce_101,
  3, 116, :_reduce_102,
  0, 117, :_reduce_103,
  1, 117, :_reduce_104,
  3, 117, :_reduce_105,
  4, 107, :_reduce_106,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_126,
  2, 118, :_reduce_127,
  0, 81, :_reduce_128,
  1, 81, :_reduce_129,
  1, 84, :_reduce_130,
  2, 84, :_reduce_131,
  1, 119, :_reduce_132,
  1, 119, :_reduce_none,
  1, 103, :_reduce_134 ]

racc_reduce_n = 135

racc_shift_n = 225

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kDTYPE_UINT => 21,
  :kDTYPE_LINT => 22,
  :kDTYPE_LLINT => 23,
  :kDTYPE_CHAR => 24,
  :kDTYPE_I8 => 25,
  :kDTYPE_I16 => 26,
  :kDTYPE_I32 => 27,
  :kDTYPE_I64 => 28,
  :kDTYPE_UI8 => 29,
  :kDTYPE_UI16 => 30,
  :kDTYPE_UI32 => 31,
  :kDTYPE_UI64 => 32,
  :kDTYPE_INT => 33,
  :kDTYPE_F32 => 34,
  :kDTYPE_F64 => 35,
  :kDTYPE_LF64 => 36,
  :kDTYPE_ROBJ => 37,
  :kDTYPE_ULINT => 38,
  :kDTYPE_ULLINT => 39,
  :tLPAREN => 40,
  :tRPAREN => 41,
  :tLSQUARE => 42,
  :tRSQUARE => 43,
  :tIDENTIFIER => 44,
  :tNL => 45,
  :tCOMMA => 46,
  :tSQUOTE => 47,
  :tSCOLON => 48,
  :EOF => 49,
  :tDOT => 50,
  :tQMARK => 51,
  :tSTART_LINE => 52,
  :tPLUS => 53,
  :tMINUS => 54,
  :tSTAR => 55,
  :tDIVIDE => 56,
  :tEXPO => 57,
  :tMODULUS => 58,
  :tASSIGN => 59,
  :tEQ => 60,
  :tLT => 61,
  :tLTEQ => 62,
  :tGT => 63,
  :tGTEQ => 64,
  :tANDOP => 65,
  :tOROP => 66,
  :tBANG => 67,
  :tOP_ASSIGN => 68,
  :tINTEGER => 69,
  :tFLOAT => 70,
  :tSINGLE_CHAR => 71,
  :UMINUS => 72,
  :tNEQ => 73 }

racc_nt_base = 74

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "methods",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_terms",
  "stmts",
  "stmt",
  "terms",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "var_decl_stmts",
  "var_decls",
  "var_decl",
  "dtype",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "command_call",
  "expr_cmp",
  "command_opt_args",
  "command_arg_list",
  "user_dtype",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_4(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_7(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_10(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_11(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_12(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_13(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_14(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
            result = Statement::For.new *val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = Statement::While.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_17(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_18(val, _values, result)
            result = Statement::CStructOrUnionDefn.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
            declarations = []
        val[0].each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_20(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_22(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_23(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = { 
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_24(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_25(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_26(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_27(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_28(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_37(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_38(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_39(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_40(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_41(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_42(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_43(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_44(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_45(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_47(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_48(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_50(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_52(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_53(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_54(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_55(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_56(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_57(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_58(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_59(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_60(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_61(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_62(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_63(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_64(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_66(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_68(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_69(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_70(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_71(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_72(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_73(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_74(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_75(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_76(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_77(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_78(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_79(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_80(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_81(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_82(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_84(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_85(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_86(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_87(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_88(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_89(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_90(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_91(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_92(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_93(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_94(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_95(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_96(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_97(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_98(val, _values, result)
     result = Expression::Name.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_99(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_100(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_101(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_103(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_104(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_105(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_106(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_126(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_127(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_130(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_131(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_132(val, _values, result)
    
    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_134(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
