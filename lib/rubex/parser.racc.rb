#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 410)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      end
      t = check_for_primitive_dtype(t)
      t = check_for_keyword(t)
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

def op_assign val # expr, op_assign, expr => expr = expr op expr
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    34,    35,    37,   151,   169,   151,   257,    38,    39,   226,
   227,    53,    54,    55,    41,   166,    29,   166,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   116,     8,
   115,   153,    46,   153,   116,   120,    26,    26,   214,   237,
   121,     9,   114,   215,   238,   157,   158,     8,     6,   118,
     8,   112,    27,    27,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   159,   160,    53,    54,    55,    41,     6,
    29,    16,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   115,   203,   116,    13,    46,    13,    14,    18,
    14,    13,   114,    19,    14,   131,   132,   133,   134,   135,
   136,   112,   131,   132,   133,   134,   135,   136,    34,    35,
    37,    52,    49,    50,    51,    38,    39,   226,   227,    53,
    54,    55,    41,    22,    29,    25,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    13,   188,    87,    14,
    46,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    88,    34,    35,    37,    52,    49,    50,    51,    38,
    39,    91,   108,    53,    54,    55,    41,   109,    29,   111,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    13,   117,   122,    14,    46,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   125,    34,    35,    37,    52,
    49,    50,    51,    38,    39,   126,   128,    53,    54,    55,
    41,   115,    29,   154,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    13,   162,   163,    14,    46,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,   174,
    34,    35,    37,    52,    49,    50,    51,    38,    39,   153,
   184,    53,    54,    55,    41,   185,    29,    91,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    13,   135,
   204,    14,    46,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   207,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   208,   212,    53,    54,    55,    41,   213,
    29,   118,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   115,   216,   116,   223,    46,   135,    53,    54,
    55,   135,   114,   135,    53,    54,    55,   135,   228,   231,
    53,    54,    55,   131,   132,   133,   134,   135,   136,   169,
   239,    52,    49,    50,    51,    96,   111,    13,   243,   100,
    14,    96,   248,    13,   262,   100,    14,    96,   116,    95,
    13,   100,   257,    14,   nil,    95,    53,    54,    55,   nil,
    13,    95,    98,    14,    52,    49,    50,    51,    98,   nil,
    52,    49,    50,    51,    98,   nil,    52,    49,    50,    51,
    53,    54,    55,   106,   nil,    13,   nil,   100,    14,    53,
    54,    55,   133,   134,   135,   136,   260,    95,   nil,   261,
    53,    54,    55,   133,   134,   135,   136,    96,   nil,   nil,
   nil,   100,    52,    49,    50,    51,    96,   nil,   nil,   nil,
   100,    95,    53,    54,    55,    13,    13,   106,    14,    14,
    95,   100,   nil,   nil,    98,   nil,    52,    49,    50,    51,
   nil,    95,   nil,    98,   nil,    52,    49,    50,    51,    96,
   nil,   nil,   nil,   100,   nil,   nil,    52,    49,    50,    51,
    53,    54,    55,    95,   nil,    53,    54,    55,   nil,   nil,
   nil,    53,    54,    55,   nil,   nil,    98,   nil,    52,    49,
    50,    51,   nil,   nil,   nil,   nil,   nil,    96,   nil,   nil,
   nil,   100,   106,   nil,   nil,   nil,   100,   nil,    96,   nil,
   nil,    95,   100,   nil,   nil,   nil,    95,    53,    54,    55,
   nil,   nil,    95,   nil,    98,   nil,    52,    49,    50,    51,
   nil,    52,    49,    50,    51,    98,   nil,    52,    49,    50,
    51,    53,    54,    55,    96,   nil,   nil,   nil,   100,   nil,
    53,    54,    55,   nil,   nil,   nil,   nil,   nil,    95,   nil,
   nil,    53,    54,    55,   nil,   nil,   nil,   nil,    96,   nil,
   nil,    98,   100,    52,    49,    50,    51,    96,   nil,   nil,
   nil,   100,    95,    53,    54,    55,   nil,   nil,    96,   nil,
   nil,    95,   100,   nil,   nil,    98,   nil,    52,    49,    50,
    51,   nil,    95,   nil,    98,   nil,    52,    49,    50,    51,
    96,   nil,   nil,   nil,   100,    98,   nil,    52,    49,    50,
    51,    53,    54,    55,    95,   nil,    53,    54,    55,   nil,
   nil,   nil,    53,    54,    55,   nil,   nil,    98,   nil,    52,
    49,    50,    51,   nil,   nil,    53,    54,    55,   106,   nil,
   nil,   nil,   100,   106,   nil,   nil,   nil,   100,   nil,   106,
   nil,   nil,    95,   100,   nil,   nil,   nil,    95,    53,    54,
    55,   nil,   106,    95,   nil,   nil,   100,    52,    49,    50,
    51,   nil,    52,    49,    50,    51,    95,   nil,    52,    49,
    50,    51,    53,    54,    55,   106,   nil,   nil,   nil,   100,
   nil,    52,    49,    50,    51,    53,    54,    55,   nil,    95,
   nil,    53,    54,    55,   nil,   nil,    53,    54,    55,   106,
   nil,   nil,   nil,   100,    52,    49,    50,    51,   nil,   nil,
   nil,   nil,   106,    95,   nil,   nil,   100,   nil,   106,   nil,
   nil,   nil,   100,   106,   nil,   nil,    95,   100,    52,    49,
    50,    51,    95,    53,    54,    55,   nil,    95,    53,    54,
    55,    52,    49,    50,    51,   nil,   nil,    52,    49,    50,
    51,   nil,    52,    49,    50,    51,   nil,    53,    54,    55,
   106,   nil,   nil,   nil,   100,   106,   nil,   nil,   nil,   100,
   nil,   nil,   nil,   nil,    95,   nil,    53,    54,    55,    95,
   nil,    53,    54,    55,   106,   nil,   nil,   nil,   100,    52,
    49,    50,    51,   nil,    52,    49,    50,    51,    95,   nil,
    53,    54,    55,   106,   nil,   nil,   nil,   100,   106,   nil,
   nil,   nil,   100,    52,    49,    50,    51,    95,   nil,    53,
    54,    55,    95,   nil,    53,    54,    55,    96,   nil,   235,
   nil,   100,    52,    49,    50,    51,   nil,    52,    49,    50,
    51,    95,   nil,    53,    54,    55,    96,   nil,   nil,   nil,
   100,   106,   nil,   nil,    98,   100,    52,    49,    50,    51,
    95,   nil,    53,    54,    55,    95,   nil,   nil,   nil,   nil,
    96,   nil,   nil,    98,   100,    52,    49,    50,    51,   nil,
    52,    49,    50,    51,    95,    53,    54,    55,   nil,   106,
   nil,   nil,   nil,   100,   nil,   nil,   nil,    98,   nil,    52,
    49,    50,    51,    95,    53,    54,    55,   nil,   nil,   nil,
   nil,   nil,    96,   nil,   nil,   nil,   100,   nil,    52,    49,
    50,    51,   nil,   nil,   nil,   nil,    95,   nil,   nil,   nil,
   nil,    96,   nil,   nil,   nil,   100,   nil,   nil,   nil,    98,
   nil,    52,    49,    50,    51,    95,   nil,   nil,   nil,   123,
   131,   132,   133,   134,   135,   136,   nil,   nil,    98,   nil,
    52,    49,    50,    51,    85,   nil,    29,   nil,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   203,   131,
   132,   133,   134,   135,   136,   nil,   nil,   nil,   nil,   nil,
   131,   132,   133,   134,   135,   136,   nil,   137,   139,   140,
   141,   142,   143,   144,   nil,   nil,   nil,   nil,    85,   nil,
    29,   138,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
    14,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
   nil,   nil,   nil,   nil,    81,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   nil,   nil,   nil,   nil,    81,
   131,   132,   133,   134,   135,   136,   nil,   137,   139,   140,
   141,   142,   143,   144,   nil,   131,   132,   133,   134,   135,
   136,   138,   137,   139,   140,   141,   142,   143,   144,   131,
   132,   133,   134,   135,   136,   nil,   138,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,   131,   132,   133,
   134,   135,   136,   nil,   nil,   157,   158,   159,   160,   131,
   132,   133,   134,   135,   136,   131,   132,   133,   134,   135,
   136,   131,   132,   133,   134,   135,   136,   131,   132,   133,
   134,   135,   136,   131,   132,   133,   134,   135,   136 ]

racc_action_check = [
    23,    23,    23,   103,   110,   244,   242,    23,    23,   205,
   205,    23,    23,    23,    23,   110,    23,   242,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,   174,     0,
    48,   103,    23,   244,   169,    78,    18,   174,   177,   217,
    78,     1,   169,   177,   217,   207,   207,     5,     0,    48,
    11,   169,    18,   174,    90,    90,    90,    23,    23,    23,
    23,    90,    90,   208,   208,    90,    90,    90,    90,    11,
    90,     6,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    90,    46,   161,    46,    11,    90,    90,    11,     8,
    90,     2,    46,     9,     2,   161,   161,   161,   161,   161,
   161,    46,   195,   195,   195,   195,   195,   195,   150,   150,
   150,    90,    90,    90,    90,   150,   150,   263,   263,   150,
   150,   150,   150,    16,   150,    17,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,    22,   128,    29,    22,
   150,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,    30,   154,   154,   154,   150,   150,   150,   150,   154,
   154,    32,    41,   154,   154,   154,   154,    44,   154,    45,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
    31,    47,    80,    31,   154,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   184,    84,   162,   162,   162,   154,
   154,   154,   154,   162,   162,    85,    87,   162,   162,   162,
   162,   101,   162,   104,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,    86,   107,   108,    86,   162,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   114,
   227,   227,   227,   162,   162,   162,   162,   227,   227,   120,
   125,   227,   227,   227,   227,   126,   227,   129,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   127,   145,
   147,   127,   227,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   155,   259,   259,   259,   227,   227,   227,
   227,   259,   259,   156,   165,   259,   259,   259,   259,   170,
   259,   172,   259,   259,   259,   259,   259,   259,   259,   259,
   259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
   259,   259,   100,   179,   100,   188,   259,   191,    34,    34,
    34,   192,   100,   193,    35,    35,    35,   194,   206,   209,
    37,    37,    37,   196,   196,   196,   196,   196,   196,   212,
   219,   259,   259,   259,   259,    34,   222,   163,   224,    34,
   163,    35,   232,   211,   255,    35,   211,    37,   257,    34,
   220,    37,   262,   220,   nil,    35,    38,    38,    38,   nil,
   237,    37,    34,   237,    34,    34,    34,    34,    35,   nil,
    35,    35,    35,    35,    37,   nil,    37,    37,    37,    37,
    39,    39,    39,    38,   nil,   239,   nil,    38,   239,    91,
    91,    91,   189,   189,   189,   189,   249,    38,   nil,   249,
    95,    95,    95,   190,   190,   190,   190,    39,   nil,   nil,
   nil,    39,    38,    38,    38,    38,    91,   nil,   nil,   nil,
    91,    39,    96,    96,    96,   251,   253,    95,   251,   253,
    91,    95,   nil,   nil,    39,   nil,    39,    39,    39,    39,
   nil,    95,   nil,    91,   nil,    91,    91,    91,    91,    96,
   nil,   nil,   nil,    96,   nil,   nil,    95,    95,    95,    95,
    98,    98,    98,    96,   nil,   106,   106,   106,   nil,   nil,
   nil,   109,   109,   109,   nil,   nil,    96,   nil,    96,    96,
    96,    96,   nil,   nil,   nil,   nil,   nil,    98,   nil,   nil,
   nil,    98,   106,   nil,   nil,   nil,   106,   nil,   109,   nil,
   nil,    98,   109,   nil,   nil,   nil,   106,   112,   112,   112,
   nil,   nil,   109,   nil,    98,   nil,    98,    98,    98,    98,
   nil,   106,   106,   106,   106,   109,   nil,   109,   109,   109,
   109,   115,   115,   115,   112,   nil,   nil,   nil,   112,   nil,
   116,   116,   116,   nil,   nil,   nil,   nil,   nil,   112,   nil,
   nil,   117,   117,   117,   nil,   nil,   nil,   nil,   115,   nil,
   nil,   112,   115,   112,   112,   112,   112,   116,   nil,   nil,
   nil,   116,   115,   118,   118,   118,   nil,   nil,   117,   nil,
   nil,   116,   117,   nil,   nil,   115,   nil,   115,   115,   115,
   115,   nil,   117,   nil,   116,   nil,   116,   116,   116,   116,
   118,   nil,   nil,   nil,   118,   117,   nil,   117,   117,   117,
   117,   131,   131,   131,   118,   nil,   132,   132,   132,   nil,
   nil,   nil,   133,   133,   133,   nil,   nil,   118,   nil,   118,
   118,   118,   118,   nil,   nil,   134,   134,   134,   131,   nil,
   nil,   nil,   131,   132,   nil,   nil,   nil,   132,   nil,   133,
   nil,   nil,   131,   133,   nil,   nil,   nil,   132,   135,   135,
   135,   nil,   134,   133,   nil,   nil,   134,   131,   131,   131,
   131,   nil,   132,   132,   132,   132,   134,   nil,   133,   133,
   133,   133,   136,   136,   136,   135,   nil,   nil,   nil,   135,
   nil,   134,   134,   134,   134,   137,   137,   137,   nil,   135,
   nil,   138,   138,   138,   nil,   nil,   139,   139,   139,   136,
   nil,   nil,   nil,   136,   135,   135,   135,   135,   nil,   nil,
   nil,   nil,   137,   136,   nil,   nil,   137,   nil,   138,   nil,
   nil,   nil,   138,   139,   nil,   nil,   137,   139,   136,   136,
   136,   136,   138,   140,   140,   140,   nil,   139,   141,   141,
   141,   137,   137,   137,   137,   nil,   nil,   138,   138,   138,
   138,   nil,   139,   139,   139,   139,   nil,   142,   142,   142,
   140,   nil,   nil,   nil,   140,   141,   nil,   nil,   nil,   141,
   nil,   nil,   nil,   nil,   140,   nil,   143,   143,   143,   141,
   nil,   144,   144,   144,   142,   nil,   nil,   nil,   142,   140,
   140,   140,   140,   nil,   141,   141,   141,   141,   142,   nil,
   213,   213,   213,   143,   nil,   nil,   nil,   143,   144,   nil,
   nil,   nil,   144,   142,   142,   142,   142,   143,   nil,   215,
   215,   215,   144,   nil,   229,   229,   229,   213,   nil,   213,
   nil,   213,   143,   143,   143,   143,   nil,   144,   144,   144,
   144,   213,   nil,   226,   226,   226,   215,   nil,   nil,   nil,
   215,   229,   nil,   nil,   213,   229,   213,   213,   213,   213,
   215,   nil,   230,   230,   230,   229,   nil,   nil,   nil,   nil,
   226,   nil,   nil,   215,   226,   215,   215,   215,   215,   nil,
   229,   229,   229,   229,   226,   235,   235,   235,   nil,   230,
   nil,   nil,   nil,   230,   nil,   nil,   nil,   226,   nil,   226,
   226,   226,   226,   230,   261,   261,   261,   nil,   nil,   nil,
   nil,   nil,   235,   nil,   nil,   nil,   235,   nil,   230,   230,
   230,   230,   nil,   nil,   nil,   nil,   235,   nil,   nil,   nil,
   nil,   261,   nil,   nil,   nil,   261,   nil,   nil,   nil,   235,
   nil,   235,   235,   235,   235,   261,   nil,   nil,   nil,    82,
   197,   197,   197,   197,   197,   197,   nil,   nil,   261,   nil,
   261,   261,   261,   261,    82,   nil,    82,   nil,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,   146,   198,
   198,   198,   198,   198,   198,   nil,   nil,   nil,   nil,   nil,
   146,   146,   146,   146,   146,   146,   nil,   146,   146,   146,
   146,   146,   146,   146,   nil,   nil,   nil,   nil,    28,   nil,
    28,   146,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
    28,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   nil,   nil,   nil,   nil,   nil,   241,   nil,   nil,   241,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
   nil,   nil,   nil,   nil,    25,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   nil,   nil,   nil,   nil,   121,
    93,    93,    93,    93,    93,    93,   nil,    93,    93,    93,
    93,    93,    93,    93,   nil,   148,   148,   148,   148,   148,
   148,    93,   148,   148,   148,   148,   148,   148,   148,   199,
   199,   199,   199,   199,   199,   nil,   148,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   105,   105,   105,
   105,   105,   105,   nil,   nil,   105,   105,   105,   105,   200,
   200,   200,   200,   200,   200,   201,   201,   201,   201,   201,
   201,   202,   202,   202,   202,   202,   202,   246,   246,   246,
   246,   246,   246,   247,   247,   247,   247,   247,   247 ]

racc_action_pointer = [
    37,    51,    64,   nil,   nil,    55,    10,   nil,    63,   113,
   nil,    58,   nil,   nil,   nil,   nil,   129,   103,    -7,   nil,
   nil,   nil,   119,    -4,   nil,  1188,   nil,   nil,  1130,   122,
   188,   183,   195,   nil,   413,   419,   nil,   425,   461,   485,
   nil,   156,   nil,   nil,   137,   152,    60,   170,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   186,   nil,  1076,   nil,   209,   219,   247,   205,   nil,   nil,
    60,   494,   nil,  1205,   nil,   505,   527,   nil,   565,   nil,
   380,   229,   nil,    -6,   259,  1262,   570,   281,   282,   576,
   -42,   nil,   612,   nil,   273,   636,   645,   656,   678,   nil,
   282,  1213,   nil,   nil,   nil,   288,   321,   311,   149,   331,
   nil,   716,   721,   727,   740,   763,   787,   800,   806,   811,
   848,   853,   872,   891,   896,   300,  1075,   317,  1220,   nil,
   124,   nil,   nil,   nil,   188,   337,   347,   nil,   nil,   nil,
   nil,    60,   252,   410,   nil,   346,   nil,   nil,   nil,     0,
   338,   nil,   340,   nil,    -6,   nil,   nil,     5,   nil,   378,
   nil,   nil,   nil,   nil,   213,   277,   nil,   nil,   379,   455,
   466,   368,   372,   374,   378,    67,   388,  1025,  1064,  1234,
  1274,  1280,  1286,   nil,   nil,     2,   435,    -8,     8,   436,
   341,   416,   403,   915,   nil,   934,   nil,     6,   nil,   447,
   423,   nil,   399,   nil,   455,   nil,   958,   316,   nil,   939,
   977,   nil,   459,   nil,   nil,  1000,   nil,   433,  1275,   458,
   nil,  1159,   -40,   nil,    -4,   nil,  1292,  1298,   nil,   471,
   nil,   498,   nil,   499,   nil,   416,   nil,   424,   nil,   380,
   nil,  1019,   426,   130,   nil,   nil,   nil ]

racc_action_default = [
    -2,  -156,  -149,    -3,    -5,    -6,  -156,   -19,  -156,  -156,
    -1,  -150,  -151,  -153,  -154,   -20,  -156,   -87,   -86,   267,
    -4,  -152,  -156,   -23,   -88,  -156,   -84,   -85,  -156,  -156,
  -156,  -149,   -24,   -26,  -156,  -156,   -29,  -156,  -156,  -156,
   -34,  -156,   -36,   -37,  -156,   -60,  -123,  -116,  -123,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,  -117,  -119,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -156,   -90,
  -156,   -93,  -156,    -8,  -156,  -156,  -156,  -156,   -21,   -22,
  -150,  -156,   -27,   -94,   -95,  -156,  -156,  -104,  -156,  -116,
  -123,  -123,   -28,  -156,  -156,  -156,  -156,  -156,   -38,  -156,
  -156,   -61,  -156,  -118,  -156,  -125,  -156,  -156,  -156,  -120,
  -156,  -156,   -92,    -7,    -9,  -156,  -156,   -12,  -156,   -25,
   -31,  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,
  -156,  -156,  -156,  -156,  -156,  -102,  -156,  -156,  -114,  -115,
   -23,   -53,   -54,  -155,   -23,  -156,  -156,   -49,   -50,   -51,
   -52,  -156,   -23,  -149,   -46,   -59,   -62,   -65,   -66,   -67,
   -68,   -69,  -156,   -74,   -86,  -121,  -122,  -156,  -126,  -156,
   -75,   -76,   -89,   -91,   -16,   -40,   -13,   -14,  -156,   -96,
   -97,   -98,   -99,  -100,  -101,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -103,  -113,   -55,  -156,  -156,  -156,  -156,
   -40,  -150,  -156,  -156,  -124,  -156,  -128,  -156,   -17,  -156,
  -149,   -41,   -60,   -15,  -156,   -56,  -156,   -23,   -32,  -156,
  -156,   -33,  -156,   -63,   -64,   -71,  -127,  -156,  -156,  -156,
   -39,  -150,  -156,   -30,  -156,   -58,   -47,   -48,   -35,  -156,
   -72,   -10,   -18,   -11,   -42,   -43,   -44,   -67,   -68,   -23,
   -70,  -156,  -156,   -55,   -73,   -45,   -57 ]

racc_goto_table = [
    21,    30,    47,    44,    80,   110,    10,    84,    11,   156,
   150,    17,   171,   167,    79,   224,   155,    21,   168,    48,
    83,    92,   102,    86,   103,   219,   107,   119,    28,     3,
   147,     1,   149,     2,    82,    89,   217,    90,   186,    15,
    20,    23,   129,   104,   254,   255,   182,   165,   249,    24,
   232,    78,   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    44,   nil,   nil,   266,   124,   nil,   nil,    86,   130,    21,
   119,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,   170,
   nil,   nil,   127,   176,   nil,   nil,   164,   nil,   nil,   173,
    80,   nil,   178,   179,   nil,   181,   172,   187,   nil,   nil,
   183,   nil,   230,   nil,   171,   234,    21,   175,   229,   nil,
   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,    47,
    44,   nil,   206,    47,    44,   nil,   nil,   nil,   nil,   nil,
   209,    47,    44,   nil,   nil,   256,    48,   nil,   nil,   nil,
    48,   259,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   218,   222,   265,   nil,   210,   nil,   211,
   nil,   nil,   nil,   nil,   nil,   nil,   105,   nil,   nil,   nil,
   nil,   nil,   242,   nil,   nil,   nil,   nil,   nil,   nil,   222,
   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   236,   nil,   nil,   245,    47,    44,   172,   nil,
   nil,   nil,   nil,   244,   nil,   nil,   nil,   252,   nil,   nil,
   222,   258,   250,    48,   240,   nil,   241,   nil,   nil,   nil,
    21,   nil,   nil,   145,   146,   nil,   148,   263,    47,    44,
    21,   258,    21,   251,   161,   253,   nil,   nil,   264,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,   247 ]

racc_goto_check = [
    53,    18,    42,    34,    10,    31,     3,    10,     5,    37,
    24,    16,    23,    33,    48,    25,    36,    53,    41,    44,
     9,    22,    22,    13,    22,    12,    22,    50,     5,     4,
    49,     1,    49,     2,     8,     3,    11,     5,    14,    15,
     4,    17,    20,    26,    30,    32,    38,    40,    43,    46,
    12,    47,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,
    34,   nil,   nil,    25,     9,   nil,   nil,    13,    22,    53,
    50,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,    42,
   nil,   nil,     5,    42,   nil,   nil,    22,   nil,   nil,    22,
    10,   nil,    22,    22,   nil,    22,    44,    10,   nil,   nil,
    48,   nil,    37,   nil,    23,    33,    53,    16,    36,   nil,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    42,
    34,   nil,    18,    42,    34,   nil,   nil,   nil,   nil,   nil,
    18,    42,    34,   nil,   nil,    33,    44,   nil,   nil,   nil,
    44,    24,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,
   nil,   nil,   nil,    10,    10,    33,   nil,     3,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    53,   nil,    22,   nil,   nil,    18,    42,    34,    44,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,    10,   nil,   nil,
    10,    42,    22,    44,     3,   nil,     5,   nil,   nil,   nil,
    53,   nil,   nil,    35,    35,   nil,    35,    18,    42,    34,
    53,    42,    53,     5,    35,     5,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,
    35,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,    35 ]

racc_goto_pointer = [
   nil,    31,    33,     4,    29,     6,   nil,   nil,     6,    -8,
   -21,  -148,  -160,    -5,   -90,    34,     3,    24,   -22,   nil,
   -48,   nil,   -13,   -98,   -93,  -190,     5,   nil,   nil,   nil,
  -197,   -40,  -197,   -97,   -20,   138,   -89,   -96,   -74,   nil,
   -63,   -92,   -21,  -187,    -4,   nil,    32,    26,   -11,   -66,
   -21,   nil,   -63,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,   nil,   nil,
    45,   nil,   nil,    43,   nil,     7,   nil,   nil,   nil,    31,
    32,    33,   180,    36,   nil,   nil,   nil,    40,    42,   220,
   221,   nil,   nil,   nil,    97,    93,   nil,   nil,   152,   225,
   nil,   nil,    99,   nil,   101,    56,   nil,   nil,   nil,    94,
   113,    57,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 78, :_reduce_1,
  0, 79, :_reduce_2,
  1, 79, :_reduce_3,
  3, 79, :_reduce_4,
  1, 81, :_reduce_5,
  1, 81, :_reduce_6,
  6, 83, :_reduce_7,
  1, 85, :_reduce_8,
  2, 85, :_reduce_9,
  6, 86, :_reduce_10,
  6, 86, :_reduce_11,
  2, 86, :_reduce_none,
  4, 90, :_reduce_13,
  1, 91, :_reduce_none,
  2, 91, :_reduce_15,
  0, 88, :_reduce_16,
  1, 88, :_reduce_17,
  3, 88, :_reduce_18,
  1, 84, :_reduce_19,
  2, 84, :_reduce_20,
  5, 92, :_reduce_21,
  2, 95, :_reduce_22,
  0, 96, :_reduce_23,
  1, 96, :_reduce_24,
  3, 96, :_reduce_25,
  1, 97, :_reduce_26,
  2, 97, :_reduce_27,
  2, 97, :_reduce_28,
  1, 97, :_reduce_29,
  6, 97, :_reduce_30,
  3, 97, :_reduce_31,
  5, 97, :_reduce_32,
  5, 97, :_reduce_33,
  1, 97, :_reduce_34,
  6, 97, :_reduce_35,
  1, 97, :_reduce_36,
  1, 97, :_reduce_none,
  2, 105, :_reduce_38,
  2, 89, :_reduce_39,
  0, 106, :_reduce_40,
  1, 106, :_reduce_41,
  3, 106, :_reduce_42,
  3, 107, :_reduce_43,
  1, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 104, :_reduce_46,
  5, 103, :_reduce_47,
  5, 103, :_reduce_48,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  0, 102, :_reduce_55,
  1, 102, :_reduce_56,
  5, 102, :_reduce_57,
  2, 116, :_reduce_58,
  3, 98, :_reduce_59,
  0, 108, :_reduce_60,
  1, 108, :_reduce_61,
  2, 108, :_reduce_62,
  3, 117, :_reduce_63,
  3, 117, :_reduce_64,
  1, 117, :_reduce_65,
  1, 117, :_reduce_66,
  1, 110, :_reduce_67,
  1, 110, :_reduce_68,
  1, 118, :_reduce_none,
  5, 118, :_reduce_70,
  0, 120, :_reduce_71,
  1, 120, :_reduce_72,
  3, 120, :_reduce_73,
  3, 100, :_reduce_74,
  3, 100, :_reduce_75,
  3, 100, :_reduce_76,
  1, 122, :_reduce_77,
  1, 122, :_reduce_78,
  1, 122, :_reduce_79,
  1, 122, :_reduce_80,
  1, 122, :_reduce_81,
  1, 122, :_reduce_82,
  1, 122, :_reduce_83,
  2, 93, :_reduce_84,
  2, 93, :_reduce_85,
  1, 93, :_reduce_86,
  0, 94, :_reduce_87,
  1, 94, :_reduce_none,
  4, 123, :_reduce_89,
  1, 124, :_reduce_90,
  3, 124, :_reduce_91,
  2, 125, :_reduce_92,
  1, 125, :_reduce_93,
  1, 99, :_reduce_94,
  1, 99, :_reduce_95,
  3, 112, :_reduce_96,
  3, 112, :_reduce_97,
  3, 112, :_reduce_98,
  3, 112, :_reduce_99,
  3, 112, :_reduce_100,
  3, 112, :_reduce_101,
  2, 112, :_reduce_102,
  3, 112, :_reduce_103,
  1, 112, :_reduce_104,
  3, 126, :_reduce_105,
  3, 126, :_reduce_106,
  3, 126, :_reduce_107,
  3, 126, :_reduce_108,
  3, 126, :_reduce_109,
  3, 126, :_reduce_110,
  3, 126, :_reduce_111,
  3, 126, :_reduce_112,
  3, 126, :_reduce_113,
  2, 126, :_reduce_114,
  2, 126, :_reduce_115,
  1, 111, :_reduce_116,
  1, 111, :_reduce_117,
  2, 111, :_reduce_118,
  1, 111, :_reduce_none,
  2, 128, :_reduce_120,
  3, 121, :_reduce_121,
  3, 121, :_reduce_122,
  0, 127, :_reduce_123,
  3, 127, :_reduce_124,
  0, 129, :_reduce_125,
  1, 129, :_reduce_126,
  3, 129, :_reduce_127,
  4, 119, :_reduce_128,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_148,
  0, 80, :_reduce_149,
  1, 80, :_reduce_150,
  1, 82, :_reduce_151,
  2, 82, :_reduce_152,
  1, 130, :_reduce_153,
  1, 130, :_reduce_none,
  1, 115, :_reduce_155 ]

racc_reduce_n = 156

racc_shift_n = 267

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kDTYPE_UINT => 22,
  :kDTYPE_LINT => 23,
  :kDTYPE_LLINT => 24,
  :kDTYPE_CHAR => 25,
  :kDTYPE_I8 => 26,
  :kDTYPE_I16 => 27,
  :kDTYPE_I32 => 28,
  :kDTYPE_I64 => 29,
  :kDTYPE_UI8 => 30,
  :kDTYPE_UI16 => 31,
  :kDTYPE_UI32 => 32,
  :kDTYPE_UI64 => 33,
  :kDTYPE_INT => 34,
  :kDTYPE_F32 => 35,
  :kDTYPE_F64 => 36,
  :kDTYPE_LF64 => 37,
  :kDTYPE_ROBJ => 38,
  :kDTYPE_ULINT => 39,
  :kDTYPE_ULLINT => 40,
  :tCUSTOM_DTYPE => 41,
  :tLPAREN => 42,
  :tRPAREN => 43,
  :tLSQUARE => 44,
  :tRSQUARE => 45,
  :tIDENTIFIER => 46,
  :tNL => 47,
  :tCOMMA => 48,
  :tSQUOTE => 49,
  :tSCOLON => 50,
  :EOF => 51,
  :tDOT => 52,
  :tQMARK => 53,
  :tSTART_LINE => 54,
  :tPLUS => 55,
  :tMINUS => 56,
  :tSTAR => 57,
  :tDIVIDE => 58,
  :tEXPO => 59,
  :tMODULUS => 60,
  :tASSIGN => 61,
  :tEQ => 62,
  :tLT => 63,
  :tLTEQ => 64,
  :tGT => 65,
  :tGTEQ => 66,
  :tANDOP => 67,
  :tOROP => 68,
  :tBANG => 69,
  :tOP_ASSIGN => 70,
  :tSTRING => 71,
  :tINTEGER => 72,
  :tFLOAT => 73,
  :tSINGLE_CHAR => 74,
  :UMINUS => 75,
  :tNEQ => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "c_declarations",
  "c_declaration",
  "dtype",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_7(val, _values, result)
            result = CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
            result = CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
            result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_16(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_17(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_18(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_21(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_24(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_25(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_26(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_28(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_29(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_30(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_31(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_32(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_33(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_35(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_38(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_39(val, _values, result)
            declarations = []
        val[0].each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_42(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_43(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_45(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_46(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_47(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_48(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_56(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_57(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_58(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_59(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_60(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_61(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_62(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_63(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_64(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_65(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_66(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_67(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_68(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_70(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_71(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_72(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_73(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_74(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_75(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_76(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_77(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_78(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_79(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_80(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_81(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_82(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_83(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_84(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_85(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_87(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_89(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_90(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_91(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_92(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_93(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_94(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_96(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_97(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_98(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_99(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_100(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_101(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_102(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_104(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_114(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_115(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_116(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_117(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_118(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_120(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_121(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_122(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_123(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_125(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_126(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_127(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_128(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_148(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_153(val, _values, result)
    
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_155(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
