#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 597)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'96,97,99,234,244,234,325,100,101,57,78,117,118,119,13,181,87,182,307',
'18,78,121,107,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,128,75,77,61,110,61,26,58,27,181,147,182,120,78,129,146',
'29,76,277,171,172,124,52,171,172,171,172,127,179,116,134,130,16,96,97',
'99,131,113,114,115,100,101,171,172,117,118,119,13,13,87,59,12,11,17',
'121,107,61,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,128,182,306,181,110,22,22,225,23,23,75,213,120,151,129,287,214',
'153,78,63,286,124,184,64,171,172,76,127,78,116,134,130,16,96,97,99,131',
'113,114,115,100,101,171,172,117,118,119,13,13,87,61,305,11,17,121,107',
'232,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128',
'151,175,16,110,153,22,153,22,23,326,23,120,68,129,340,78,61,78,13,174',
'124,12,11,17,78,78,127,74,116,134,130,16,96,97,99,131,113,114,115,100',
'101,171,172,117,118,119,13,13,87,171,172,11,17,121,107,58,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128,140,16,61,110',
'188,189,190,191,192,193,150,120,22,129,155,23,22,13,158,23,124,11,17',
'195,196,173,127,183,116,134,130,212,96,97,99,131,113,114,115,100,101',
'171,172,117,118,119,13,22,87,22,23,215,23,121,107,61,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128,171,172,226,110',
'188,189,190,191,192,193,140,120,182,129,188,189,190,191,192,193,124',
'175,194,195,196,181,127,232,116,134,130,236,96,97,99,131,113,114,115',
'100,101,171,172,117,118,119,13,22,87,22,23,247,23,121,107,249,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128,171,172',
'252,110,188,189,190,191,192,193,253,120,279,129,188,189,190,191,192',
'193,124,192,194,195,196,61,127,140,116,134,130,158,96,97,99,131,113',
'114,115,100,101,171,172,117,118,119,13,297,87,190,191,192,193,121,107',
'298,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,128',
'171,172,171,110,190,191,192,193,192,334,192,120,335,129,317,318,239',
'240,241,242,124,171,172,171,172,192,127,192,116,134,130,309,96,97,99',
'131,113,114,115,100,101,171,172,117,118,119,13,313,87,317,318,314,319',
'121,107,322,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,128,253,140,329,110,78,117,118,119,342,140,,120,,129,,121,,,,',
'124,,,,,,127,,116,134,130,,,,,131,113,114,115,128,,,,162,,117,118,119',
',,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114,115,128',
',,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,',
',,,131,113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124',
',,,,,127,,116,134,130,,,,,131,113,114,115,169,,,,162,,117,118,119,,',
',120,,129,,121,,,,,,,,,,,,,116,134,130,,,,,131,113,114,115,128,,,,162',
',117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131',
'113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,,,,,,,127,',
'116,134,130,,,,,131,113,114,115,128,,,,162,,117,118,119,,,,120,,129',
',121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114,115,128,,,,162,,117',
'118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114',
'115,169,,,,162,,117,118,119,,,,120,,129,,121,117,118,119,,,,,,,,121',
',116,134,130,,,,,131,113,114,115,169,,,,162,,,,,,,169,120,,129,162,',
'117,118,119,,,,120,,129,,121,,116,134,130,,,,,131,113,114,115,116,134',
'130,,,,,131,113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,',
',124,,,,,,127,,116,134,130,,,,,131,113,114,115,169,,,,162,,117,118,119',
',,,120,,129,,121,,,,,,,,,,,,,116,134,130,,,,,131,113,114,115,128,,,',
'162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,',
'131,113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,',
',,127,,116,134,130,,,,,131,113,114,115,128,,,,162,,117,118,119,,,,120',
',129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114,115,128,,,,162',
',117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131',
'113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127',
',116,134,130,,,,,131,113,114,115,128,,,,162,,117,118,119,,,,120,,129',
',121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114,115,128,,,,162,,117',
'118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114',
'115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134',
'130,,,,,131,113,114,115,169,,,,162,,117,118,119,,,,120,,129,,121,117',
'118,119,,,,,,,,121,,116,134,130,,,,,131,113,114,115,169,,,,162,,,,,',
',169,120,,129,162,,117,118,119,,,,120,,129,,121,,116,134,130,,,,,131',
'113,114,115,116,134,130,,,,,131,113,114,115,169,,,,162,,117,118,119',
',,,120,,129,,121,117,118,119,,,,,,,,121,,116,134,130,,,,,131,113,114',
'115,169,,,,162,,,,,,,169,120,,129,162,,117,118,119,,,,120,,129,,121',
',116,134,130,,,,,131,113,114,115,116,134,130,,,,,131,113,114,115,169',
',,,162,,117,118,119,,,,120,,129,,121,117,118,119,,,,,,,,121,,116,134',
'130,,,,,131,113,114,115,169,,,,162,,,,,,,169,120,,129,162,,117,118,119',
',,,120,,129,,121,,116,134,130,,,,,131,113,114,115,116,134,130,,,,,131',
'113,114,115,169,,,,162,,117,118,119,,,,120,,129,,121,117,118,119,,,',
',,,,121,,116,134,130,,,,,131,113,114,115,169,,,,162,,,,,,,169,120,,129',
'162,,117,118,119,,,,120,,129,,121,,116,134,130,,,,,131,113,114,115,116',
'134,130,,,,,131,113,114,115,169,,,,162,,117,118,119,,,,120,,129,,121',
'117,118,119,,,,,,,,121,,116,134,130,,,,,131,113,114,115,169,,,,162,',
',,,,,169,120,,129,162,,117,118,119,,,,120,,129,,121,,116,134,130,,,',
',131,113,114,115,116,134,130,,,,,131,113,114,115,169,,,,162,,117,118',
'119,,,,120,,129,,121,,,,,,,,,,,,,116,134,130,,,,,131,113,114,115,169',
',,,162,,117,118,119,,,,120,,129,,121,,,,,,,,,,,,,116,134,130,,,,,131',
'113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127',
',116,134,130,,,,,131,113,114,115,128,,304,,162,,117,118,119,,,,120,',
'129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131,113,114,115,128,,,,162',
',117,118,119,,,,120,,129,,121,,,,,124,,,,,,127,,116,134,130,,,,,131',
'113,114,115,128,,,,162,,117,118,119,,,,120,,129,,121,,,,,124,,,,,,127',
',116,134,130,,,,,131,113,114,115,169,,,,162,,117,118,119,,,,120,,129',
',121,,,,,,,,,,,,,116,134,130,,,,,131,113,114,115,169,16,221,,162,,117',
'118,119,,,,120,,129,,121,13,,,,11,17,,,,,,,116,134,130,,,,,131,113,114',
'115,128,,16,311,162,,,,,,,,120,22,129,,23,,13,,,124,11,17,,,,127,,116',
'134,130,,148,,,131,113,114,115,,,,,,,,,,,,,,,22,,,23,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,223,,,,,22,,,23,,,,',
',,13,,87,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,278,,,,,22,,,23,,,,188,189,190,191,192,193,,199,201,202,203',
'204,278,,,,,,194,195,196,197,198,,188,189,190,191,192,193,200,,,,,,',
'13,,87,,,194,195,196,197,198,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,188,189,190,191,192,193,,199,201,202,203,204',
',,,,,,194,195,196,197,198,292,,,,,,,200,,,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,,-47,,,,,-47,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,,,,,138,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,,,,,138,188,189,190,191,192,193',
',,239,240,241,242,188,189,190,191,192,193,194,195,196,197,198,188,189',
'190,191,192,193,,194,195,196,197,198,188,189,190,191,192,193,194,195',
'196,197,198,188,189,190,191,192,193,,194,195,196,197,198,188,189,190',
'191,192,193,194,195,196,197,198,188,189,190,191,192,193,,194,195,196',
'197,198,188,189,190,191,192,193,194,195,196,197,198,188,189,190,191',
'192,193,,194,195,196,197,198,,,,,,,194,195,196,197,198,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51' ]
        racc_action_table = arr = ::Array.new(2797, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'73,73,73,166,170,330,308,73,73,25,259,73,73,73,73,162,73,162,259,1,308',
'73,73,11,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,63,65,166,73,330,12,25,13,110,87,110,73,65,73,87,16,63,206,170',
'170,73,18,166,166,330,330,73,110,73,73,73,20,157,157,157,73,73,73,73',
'157,157,206,206,157,157,157,157,20,157,26,20,20,20,157,157,27,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,249,256,112,157,157,20,144,157,20,249,135,157,91,157,220',
'135,91,144,28,220,157,112,29,256,256,249,157,91,157,157,157,24,216,216',
'216,157,157,157,157,216,216,106,106,216,216,216,216,24,216,56,255,24',
'24,216,216,255,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,284,108,0,216,284,24,228,2,24,312,2',
'216,58,216,336,284,59,228,0,108,216,0,0,0,312,336,216,62,216,216,216',
'66,233,233,233,216,216,216,216,233,233,159,159,233,233,233,233,66,233',
'165,165,66,66,233,233,67,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,233,77,142,80,233,266,266,266',
'266,266,266,89,233,5,233,92,5,70,142,94,70,233,142,142,266,266,107,233',
'111,233,233,233,134,236,236,236,233,233,233,233,236,236,231,231,236',
'236,236,236,79,236,81,79,137,81,236,236,139,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,248',
'248,145,236,269,269,269,269,269,269,152,236,153,236,267,267,267,267',
'267,267,236,160,269,269,269,163,236,164,236,236,236,167,244,244,244',
'236,236,236,236,244,244,254,254,244,244,244,244,93,244,222,93,173,222',
'244,244,175,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,257,257,176,244,270,270,270,270,270',
'270,177,244,208,244,268,268,268,268,268,268,244,209,270,270,270,213',
'244,225,244,244,244,230,318,318,318,244,244,244,244,318,318,258,258',
'318,318,318,318,237,318,260,260,260,260,318,318,238,318,318,318,318',
'318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318',
'318,294,294,246,318,261,261,261,261,262,323,263,318,323,318,295,295',
'297,297,298,298,318,303,303,324,324,264,318,265,318,318,318,283,337',
'337,337,318,318,318,318,337,337,338,338,337,337,337,337,292,337,341',
'341,293,296,337,337,299,337,337,337,337,337,337,337,337,337,337,337',
'337,337,337,337,337,337,337,337,337,337,337,301,314,315,337,327,96,96',
'96,339,342,,337,,337,,96,,,,,337,,,,,,337,,337,337,337,,,,,337,337,337',
'337,96,,,,96,,97,97,97,,,,96,,96,,97,,,,,96,,,,,,96,,96,96,96,,,,,96',
'96,96,96,97,,,,97,,99,99,99,,,,97,,97,,99,,,,,97,,,,,,97,,97,97,97,',
',,,97,97,97,97,99,,,,99,,100,100,100,,,,99,,99,,100,,,,,99,,,,,,99,',
'99,99,99,,,,,99,99,99,99,100,,,,100,,101,101,101,,,,100,,100,,101,,',
',,,,,,,,,,100,100,100,,,,,100,100,100,100,101,,,,101,,123,123,123,,',
',101,,101,,123,,,,,101,,,,,,101,,101,101,101,,,,,101,101,101,101,123',
',,,123,,127,127,127,,,,123,,123,,127,,,,,,,,,,,123,,123,123,123,,,,',
'123,123,123,123,127,,,,127,,128,128,128,,,,127,,127,,128,,,,,127,,,',
',,127,,127,127,127,,,,,127,127,127,127,128,,,,128,,129,129,129,,,,128',
',128,,129,,,,,128,,,,,,128,,128,128,128,,,,,128,128,128,128,129,,,,129',
',130,130,130,,,,129,,129,,130,131,131,131,,,,,,,,131,,129,129,129,,',
',,129,129,129,129,130,,,,130,,,,,,,131,130,,130,131,,158,158,158,,,',
'131,,131,,158,,130,130,130,,,,,130,130,130,130,131,131,131,,,,,131,131',
'131,131,158,,,,158,,169,169,169,,,,158,,158,,169,,,,,158,,,,,,158,,158',
'158,158,,,,,158,158,158,158,169,,,,169,,171,171,171,,,,169,,169,,171',
',,,,,,,,,,,,169,169,169,,,,,169,169,169,169,171,,,,171,,172,172,172',
',,,171,,171,,172,,,,,171,,,,,,171,,171,171,171,,,,,171,171,171,171,172',
',,,172,,174,174,174,,,,172,,172,,174,,,,,172,,,,,,172,,172,172,172,',
',,,172,172,172,172,174,,,,174,,179,179,179,,,,174,,174,,179,,,,,174',
',,,,,174,,174,174,174,,,,,174,174,174,174,179,,,,179,,181,181,181,,',
',179,,179,,181,,,,,179,,,,,,179,,179,179,179,,,,,179,179,179,179,181',
',,,181,,182,182,182,,,,181,,181,,182,,,,,181,,,,,,181,,181,181,181,',
',,,181,181,181,181,182,,,,182,,183,183,183,,,,182,,182,,183,,,,,182',
',,,,,182,,182,182,182,,,,,182,182,182,182,183,,,,183,,184,184,184,,',
',183,,183,,184,,,,,183,,,,,,183,,183,183,183,,,,,183,183,183,183,184',
',,,184,,188,188,188,,,,184,,184,,188,,,,,184,,,,,,184,,184,184,184,',
',,,184,184,184,184,188,,,,188,,189,189,189,,,,188,,188,,189,190,190',
'190,,,,,,,,190,,188,188,188,,,,,188,188,188,188,189,,,,189,,,,,,,190',
'189,,189,190,,191,191,191,,,,190,,190,,191,,189,189,189,,,,,189,189',
'189,189,190,190,190,,,,,190,190,190,190,191,,,,191,,192,192,192,,,,191',
',191,,192,193,193,193,,,,,,,,193,,191,191,191,,,,,191,191,191,191,192',
',,,192,,,,,,,193,192,,192,193,,194,194,194,,,,193,,193,,194,,192,192',
'192,,,,,192,192,192,192,193,193,193,,,,,193,193,193,193,194,,,,194,',
'195,195,195,,,,194,,194,,195,196,196,196,,,,,,,,196,,194,194,194,,,',
',194,194,194,194,195,,,,195,,,,,,,196,195,,195,196,,197,197,197,,,,196',
',196,,197,,195,195,195,,,,,195,195,195,195,196,196,196,,,,,196,196,196',
'196,197,,,,197,,198,198,198,,,,197,,197,,198,199,199,199,,,,,,,,199',
',197,197,197,,,,,197,197,197,197,198,,,,198,,,,,,,199,198,,198,199,',
'200,200,200,,,,199,,199,,200,,198,198,198,,,,,198,198,198,198,199,199',
'199,,,,,199,199,199,199,200,,,,200,,201,201,201,,,,200,,200,,201,202',
'202,202,,,,,,,,202,,200,200,200,,,,,200,200,200,200,201,,,,201,,,,,',
',202,201,,201,202,,203,203,203,,,,202,,202,,203,,201,201,201,,,,,201',
'201,201,201,202,202,202,,,,,202,202,202,202,203,,,,203,,204,204,204',
',,,203,,203,,204,,,,,,,,,,,,,203,203,203,,,,,203,203,203,203,204,,,',
'204,,232,232,232,,,,204,,204,,232,,,,,,,,,,,,,204,204,204,,,,,204,204',
'204,204,232,,,,232,,253,253,253,,,,232,,232,,253,,,,,232,,,,,,232,,232',
'232,232,,,,,232,232,232,232,253,,253,,253,,304,304,304,,,,253,,253,',
'304,,,,,253,,,,,,253,,253,253,253,,,,,253,253,253,253,304,,,,304,,317',
'317,317,,,,304,,304,,317,,,,,304,,,,,,304,,304,304,304,,,,,304,304,304',
'304,317,,,,317,,320,320,320,,,,317,,317,,320,,,,,317,,,,,,317,,317,317',
'317,,,,,317,317,317,317,320,,,,320,,321,321,321,,,,320,,320,,321,,,',
',,,,,,,,,320,320,320,,,,,320,320,320,320,321,141,141,,321,,335,335,335',
',,,321,,321,,335,141,,,,141,141,,,,,,,321,321,321,,,,,321,321,321,321',
'335,,288,288,335,,,,,,,,335,141,335,,141,,288,,,335,288,288,,,,335,',
'335,335,335,,88,,,335,335,335,335,,,,,,,,,,,,,,,288,,,288,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,143,,,,,88,,,88,',
',,,,,143,,143,,,,,,,,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,207,,,,,143,,,143,,,,207,207,207',
'207,207,207,,207,207,207,207,207,243,,,,,,207,207,207,207,207,,243,243',
'243,243,243,243,207,,,,,,,69,,69,,,243,243,243,243,243,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,125,125,125,125,125',
'125,,125,125,125,125,125,,,,,,,125,125,125,125,125,226,,,,,,,125,,,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,,140,,,,,140,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,,,,,74,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,,,,,214,168',
'168,168,168,168,168,,,168,168,168,168,271,271,271,271,271,271,168,168',
'168,168,168,272,272,272,272,272,272,,271,271,271,271,271,273,273,273',
'273,273,273,272,272,272,272,272,274,274,274,274,274,274,,273,273,273',
'273,273,275,275,275,275,275,275,274,274,274,274,274,276,276,276,276',
'276,276,,275,275,275,275,275,332,332,332,332,332,332,276,276,276,276',
'276,333,333,333,333,333,333,,332,332,332,332,332,,,,,,,333,333,333,333',
'333,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,57',
'57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286' ]
        racc_action_check = arr = ::Array.new(2797, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   202,    19,   155,   nil,   nil,   238,   nil,   nil,   nil,   nil,
   nil,   -30,   -27,     0,   nil,   nil,    37,  2643,    67,   nil,
    75,   nil,   nil,   nil,   153,   -18,    81,    47,    89,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,  2664,   161,   164,
  2685,   nil,   180,   -14,   nil,    -6,   231,   187,   nil,  2373,
   242,   nil,   nil,    -4,  2476,   nil,   nil,   231,   nil,   273,
   228,   275,   nil,   nil,   nil,   nil,   nil,     7,  2247,   235,
   nil,    87,   291,   351,   292,   nil,   582,   622,   nil,   662,
   702,   742,   nil,   nil,   nil,   nil,    91,   287,   144,   nil,
     5,   239,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   782,  2706,  2360,   nil,   822,   862,   902,
   942,   953,   nil,   nil,   262,    84,   nil,   278,   nil,   281,
  2448,  2176,   279,  2293,    77,   292,   nil,   nil,   nil,   nil,
   nil,   nil,   319,   319,   nil,   nil,   nil,    74,   993,   169,
   320,   nil,   -34,   334,   330,   177,    -6,   375,  2494,  1033,
   -10,  1073,  1113,   356,  1153,   360,   383,   378,   nil,  1193,
   nil,  1233,  1273,  1313,  1353,   nil,   nil,   nil,  1393,  1433,
  1444,  1484,  1524,  1535,  1575,  1615,  1626,  1666,  1706,  1717,
  1757,  1797,  1808,  1848,  1888,   nil,    13,  2292,   398,   391,
   nil,   nil,  2727,   407,  2502,   nil,   152,   nil,   nil,   nil,
    88,   nil,   353,   nil,   nil,   414,  2427,   nil,   155,   nil,
   461,   247,  1928,   230,   nil,   nil,   308,   430,   438,   nil,
   nil,   nil,   nil,  2316,   386,   nil,   442,   nil,   284,    73,
   nil,   nil,   nil,  1968,   325,   124,    73,   362,   403,   -54,
   421,   454,   456,   458,   473,   475,   222,   310,   388,   300,
   378,  2506,  2517,  2529,  2540,  2552,  2563,   nil,   nil,   nil,
   nil,   nil,   nil,   542,   153,   nil,  2748,   nil,  2217,   nil,
   nil,   nil,   508,   515,   440,   521,   563,   460,   460,   566,
   nil,   524,   nil,   461,  2008,   nil,   nil,   nil,   -44,   nil,
   nil,   nil,   162,   nil,   544,   591,   nil,  2048,   464,   nil,
  2088,  2128,   nil,   471,   463,   nil,   nil,   532,   nil,   nil,
    -4,   nil,  2575,  2586,   nil,  2168,   163,   542,   481,   550,
   nil,   556,   552,   nil,   nil ]

racc_action_default = [
    -6,  -197,  -190,    -2,    -4,  -197,    -7,    -9,   -10,   -11,
   -12,  -197,  -197,  -197,   -40,   -41,   -52,  -197,  -197,    -1,
  -191,  -192,  -194,  -195,    -5,   -15,   -18,  -197,  -197,  -197,
   -97,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,   345,    -3,  -193,    -8,  -197,  -197,  -197,  -197,
   -26,  -196,  -117,  -116,   -53,  -197,    -6,   -15,   -16,  -197,
  -197,   -27,   -97,   -55,  -197,  -114,  -115,   -50,   -98,  -197,
  -197,  -197,   -19,   -21,   -22,   -23,   -97,  -197,  -197,   -29,
   -31,  -197,  -197,  -190,   -56,   -58,  -197,  -165,   -61,  -197,
  -197,  -197,   -66,   -67,   -68,   -69,   -70,  -197,  -147,   -97,
  -163,  -155,  -163,  -105,  -106,  -107,  -108,  -109,  -110,  -111,
  -112,  -113,  -123,  -197,  -197,  -128,  -129,  -197,  -197,  -197,
  -197,  -197,  -156,  -158,  -197,  -197,  -119,  -197,  -122,  -197,
   -97,  -197,    -6,  -197,  -197,  -197,   -33,   -34,   -25,   -28,
   -97,   -97,   -50,   -92,   -93,   -42,   -54,  -191,  -197,   -59,
  -147,  -155,  -163,  -163,   -60,  -166,  -197,  -197,  -197,  -197,
  -197,  -197,  -197,  -197,  -197,  -197,   -85,   -88,   -89,  -197,
  -157,  -165,  -197,  -197,  -197,  -160,  -124,   -97,  -197,  -197,
  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,  -197,
  -197,  -197,  -197,  -197,  -197,  -130,  -197,  -128,  -129,  -143,
  -144,  -145,  -197,  -197,  -197,  -121,   -55,   -97,   -46,   -48,
  -197,   -13,  -197,   -17,   -20,   -50,  -197,   -30,  -197,   -91,
   -57,   -63,  -197,   -55,   -79,   -80,   -55,  -197,  -197,   -75,
   -76,   -77,   -78,  -197,   -55,  -125,  -126,   -71,   -72,  -116,
  -161,  -162,   -97,  -197,  -102,  -197,  -197,  -103,  -104,  -197,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -148,  -149,  -150,  -151,  -152,  -153,  -131,  -146,  -154,
   -97,  -118,  -120,  -197,   -44,   -45,   -97,   -51,  -197,   -24,
   -32,   -97,  -197,  -197,  -167,   -81,  -197,  -197,  -197,  -197,
   -86,   -87,   -94,   -95,   -99,  -164,  -168,  -127,  -197,   -43,
   -49,   -14,   -35,   -97,   -50,  -197,   -82,  -197,   -55,   -64,
  -197,  -197,   -65,  -197,  -100,  -159,   -97,   -36,   -90,   -62,
  -197,   -84,   -73,   -74,   -96,  -197,   -38,   -55,  -101,  -197,
   -39,   -81,   -50,   -83,   -37 ]

racc_goto_table = [
    65,    10,    30,   139,   219,    55,    92,   136,    54,    62,
   108,   112,    54,    19,   233,    60,   178,   237,   238,    20,
   185,    10,    24,    90,   164,    10,    79,    56,   315,    82,
    71,    85,     3,   111,     1,     2,    81,    70,    89,   145,
   290,   339,    67,    28,    66,    72,    73,    69,   220,   230,
   167,   154,    53,   176,    86,   293,   144,   302,   149,   137,
   177,   323,   135,   186,   208,   nil,   nil,    10,   142,    80,
    84,   185,   nil,    72,   343,   nil,    54,   nil,   229,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    88,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   112,   141,   nil,   143,   nil,
   nil,   227,   222,   224,   156,    85,   nil,   nil,   255,   187,
   157,   nil,   nil,   nil,   nil,   nil,   nil,   111,   nil,   nil,
   nil,   228,    55,   nil,   nil,   217,   nil,   216,    86,    54,
   nil,    54,   nil,   168,   nil,   251,   nil,   nil,   nil,   nil,
   nil,   nil,    10,    10,    84,    54,   320,   282,   321,   283,
   310,   289,   nil,   108,   112,   nil,   250,   259,   nil,   300,
   nil,   207,   209,   210,   211,   nil,   295,   nil,   285,   296,
   108,   112,   nil,   108,   112,   nil,   111,   299,   337,   nil,
   nil,   108,   112,   nil,   nil,   nil,   nil,   284,   154,   nil,
   nil,   nil,   nil,   111,   nil,   nil,   111,   280,   nil,   137,
   nil,   281,   243,   301,   111,   nil,   nil,   nil,   nil,   nil,
   nil,   291,   nil,   nil,   nil,   159,   165,   nil,   166,   nil,
   170,   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   nil,   288,
   328,   nil,   nil,   nil,   154,   nil,   205,   206,   nil,   nil,
   308,   331,   nil,   nil,   nil,   108,   112,   nil,   nil,   nil,
   nil,   312,   nil,   nil,   nil,   nil,   nil,   nil,   344,    55,
   341,   217,   nil,   nil,   108,   112,    54,   231,   111,   nil,
   nil,   nil,   nil,   327,   nil,   nil,   nil,   nil,   nil,    10,
   245,   246,   nil,   248,   nil,   nil,   336,   111,   254,   nil,
   165,   256,   257,   258,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   294,   nil,   332,   333,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   303,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   324,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   338 ]

racc_goto_check = [
    20,    12,    15,    21,    35,     8,    34,    62,    68,    32,
    48,    59,    68,     3,    43,    14,    54,    50,    51,     5,
    66,    12,     5,    25,    41,    12,     7,    13,    44,    17,
    23,    19,     4,    56,     1,     2,    16,    22,    24,    26,
    27,    28,    15,    31,    14,    15,    33,    14,    36,    38,
    45,    56,     4,    53,    15,    55,    20,    57,    23,    15,
    25,    58,    61,    63,    65,   nil,   nil,    12,    14,    13,
    12,    66,   nil,    15,    44,   nil,    68,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    59,     5,   nil,     5,   nil,
   nil,    25,     7,    17,     3,    19,   nil,   nil,    41,    15,
     5,   nil,   nil,   nil,   nil,   nil,   nil,    56,   nil,   nil,
   nil,    20,     8,   nil,   nil,    15,   nil,    14,    15,    68,
   nil,    68,   nil,    49,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   nil,    12,    12,    12,    68,    50,    62,    51,    34,
    35,    21,   nil,    48,    59,   nil,    32,    20,   nil,    54,
   nil,    49,    49,    49,    49,   nil,    34,   nil,    25,    34,
    48,    59,   nil,    48,    59,   nil,    56,    34,    43,   nil,
   nil,    48,    59,   nil,   nil,   nil,   nil,    20,    56,   nil,
   nil,   nil,   nil,    56,   nil,   nil,    56,    15,   nil,    15,
   nil,    14,    49,    25,    56,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,    40,    40,   nil,    40,   nil,
    40,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,   nil,     5,
    21,   nil,   nil,   nil,    56,   nil,    40,    40,   nil,   nil,
    20,    34,   nil,   nil,   nil,    48,    59,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,    21,     8,
    34,    15,   nil,   nil,    48,    59,    68,    40,    56,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,    12,
    40,    40,   nil,    40,   nil,   nil,    20,    56,    40,   nil,
    40,    40,    40,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,    49,    49,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40 ]

racc_goto_pointer = [
   nil,    34,    35,    11,    32,    17,   nil,   -40,   -19,   nil,
   nil,   nil,     1,     2,   -12,   -15,   -33,   -40,   nil,   -38,
   -30,   -74,   -23,   -30,   -34,   -49,   -48,  -186,  -295,   nil,
   nil,    27,   -19,   -16,   -67,  -136,   -92,   nil,  -108,   nil,
   119,   -73,   nil,  -152,  -267,   -50,   nil,   nil,   -63,    33,
  -151,  -150,   nil,   -56,   -93,  -173,   -40,  -196,  -243,   -62,
   nil,   -12,   -67,   -60,   nil,   -64,   -92,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   103,   nil,   235,   109,   nil,   nil,    83,   105,
    91,   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,    14,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    93,    94,    95,
   106,   nil,    98,   nil,   nil,   nil,   102,   104,   160,   125,
   nil,   nil,   316,   nil,   nil,   152,   161,   nil,   nil,   163,
   132,   nil,   nil,   122,   123,   126,   180,   133,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 94, :_reduce_1,
  1, 95, :_reduce_2,
  3, 95, :_reduce_3,
  1, 97, :_reduce_4,
  2, 97, :_reduce_5,
  0, 100, :_reduce_6,
  1, 100, :_reduce_7,
  3, 100, :_reduce_8,
  1, 101, :_reduce_9,
  1, 101, :_reduce_10,
  1, 101, :_reduce_11,
  1, 101, :_reduce_12,
  7, 103, :_reduce_13,
  9, 104, :_reduce_14,
  0, 106, :_reduce_15,
  2, 106, :_reduce_16,
  7, 99, :_reduce_17,
  2, 99, :_reduce_18,
  1, 109, :_reduce_19,
  3, 109, :_reduce_20,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  4, 111, :_reduce_24,
  6, 105, :_reduce_25,
  0, 115, :_reduce_26,
  1, 115, :_reduce_27,
  3, 115, :_reduce_28,
  2, 116, :_reduce_29,
  3, 117, :_reduce_30,
  1, 117, :_reduce_31,
  4, 112, :_reduce_32,
  1, 119, :_reduce_none,
  1, 119, :_reduce_34,
  2, 120, :_reduce_35,
  3, 120, :_reduce_36,
  7, 120, :_reduce_37,
  0, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 102, :_reduce_40,
  1, 102, :_reduce_41,
  6, 122, :_reduce_42,
  8, 123, :_reduce_43,
  2, 128, :_reduce_44,
  2, 128, :_reduce_45,
  1, 128, :_reduce_46,
  0, 129, :_reduce_47,
  1, 129, :_reduce_48,
  3, 129, :_reduce_49,
  0, 114, :_reduce_50,
  3, 114, :_reduce_51,
  0, 124, :_reduce_52,
  2, 124, :_reduce_53,
  2, 127, :_reduce_54,
  0, 130, :_reduce_55,
  1, 130, :_reduce_56,
  3, 130, :_reduce_57,
  1, 131, :_reduce_58,
  2, 131, :_reduce_59,
  2, 131, :_reduce_60,
  1, 131, :_reduce_61,
  6, 131, :_reduce_62,
  3, 131, :_reduce_63,
  5, 131, :_reduce_64,
  5, 131, :_reduce_65,
  1, 131, :_reduce_66,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_70,
  3, 140, :_reduce_71,
  3, 139, :_reduce_72,
  5, 138, :_reduce_73,
  5, 138, :_reduce_74,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  0, 137, :_reduce_81,
  1, 137, :_reduce_82,
  5, 137, :_reduce_83,
  2, 145, :_reduce_84,
  2, 132, :_reduce_85,
  3, 146, :_reduce_86,
  3, 146, :_reduce_87,
  1, 146, :_reduce_88,
  1, 146, :_reduce_89,
  6, 118, :_reduce_90,
  3, 118, :_reduce_91,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_94,
  1, 150, :_reduce_none,
  3, 150, :_reduce_96,
  0, 113, :_reduce_97,
  2, 113, :_reduce_98,
  0, 151, :_reduce_99,
  1, 151, :_reduce_100,
  3, 151, :_reduce_101,
  3, 135, :_reduce_102,
  3, 135, :_reduce_103,
  3, 135, :_reduce_104,
  1, 153, :_reduce_105,
  1, 153, :_reduce_106,
  1, 153, :_reduce_107,
  1, 153, :_reduce_108,
  1, 153, :_reduce_109,
  1, 153, :_reduce_110,
  1, 153, :_reduce_111,
  1, 153, :_reduce_112,
  1, 153, :_reduce_113,
  2, 125, :_reduce_114,
  2, 125, :_reduce_115,
  1, 125, :_reduce_116,
  0, 126, :_reduce_117,
  4, 126, :_reduce_118,
  1, 154, :_reduce_119,
  3, 154, :_reduce_120,
  2, 155, :_reduce_121,
  1, 155, :_reduce_122,
  1, 133, :_reduce_123,
  2, 133, :_reduce_124,
  3, 133, :_reduce_125,
  3, 133, :_reduce_126,
  4, 157, :_reduce_127,
  1, 156, :_reduce_128,
  1, 156, :_reduce_129,
  2, 156, :_reduce_130,
  3, 156, :_reduce_131,
  3, 142, :_reduce_132,
  3, 142, :_reduce_133,
  3, 142, :_reduce_134,
  3, 142, :_reduce_135,
  3, 142, :_reduce_136,
  3, 142, :_reduce_137,
  3, 142, :_reduce_138,
  3, 142, :_reduce_139,
  3, 142, :_reduce_140,
  3, 142, :_reduce_141,
  3, 142, :_reduce_142,
  2, 142, :_reduce_143,
  2, 142, :_reduce_144,
  2, 142, :_reduce_145,
  3, 142, :_reduce_146,
  1, 142, :_reduce_147,
  3, 158, :_reduce_148,
  3, 158, :_reduce_149,
  3, 158, :_reduce_150,
  3, 158, :_reduce_151,
  3, 158, :_reduce_152,
  3, 158, :_reduce_153,
  3, 158, :_reduce_154,
  1, 141, :_reduce_155,
  1, 141, :_reduce_156,
  2, 141, :_reduce_157,
  1, 141, :_reduce_none,
  5, 141, :_reduce_159,
  2, 160, :_reduce_160,
  3, 152, :_reduce_161,
  3, 152, :_reduce_162,
  0, 159, :_reduce_163,
  3, 159, :_reduce_164,
  0, 134, :_reduce_165,
  1, 134, :_reduce_166,
  3, 134, :_reduce_167,
  4, 149, :_reduce_168,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_189,
  0, 96, :_reduce_190,
  1, 96, :_reduce_191,
  1, 98, :_reduce_192,
  2, 98, :_reduce_193,
  1, 161, :_reduce_194,
  1, 161, :_reduce_none,
  1, 107, :_reduce_196 ]

racc_reduce_n = 197

racc_shift_n = 345

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :tCUSTOM_DTYPE => 48,
  :tLPAREN => 49,
  :tRPAREN => 50,
  :tLSQUARE => 51,
  :tRSQUARE => 52,
  :tIDENTIFIER => 53,
  :tNL => 54,
  :tCOMMA => 55,
  :tSQUOTE => 56,
  :tSCOLON => 57,
  :EOF => 58,
  :tDOT => 59,
  :tQMARK => 60,
  :tSYMBOL => 61,
  :tPLUS => 62,
  :tMINUS => 63,
  :tSTAR => 64,
  :tDIVIDE => 65,
  :tEXPO => 66,
  :tMODULUS => 67,
  :tASSIGN => 68,
  :tEQ => 69,
  :tLT => 70,
  :tLTEQ => 71,
  :tGT => 72,
  :tGTEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tBANG => 76,
  :tOP_ASSIGN => 77,
  :tSTRING => 78,
  :kSIZEOF => 79,
  :tBIT_AND => 80,
  :tBIT_OR => 81,
  :tBIT_XOR => 82,
  :tBIT_LSHIFT => 83,
  :tBIT_RSHIFT => 84,
  :tBIT_NOT => 85,
  :tINTEGER => 86,
  :tFLOAT => 87,
  :tSINGLE_CHAR => 88,
  :ADDRESS_OF => 89,
  :TYPECAST => 90,
  :UMINUS => 91,
  :tNEQ => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_24(val, _values, result)
            val[4].pop # HACK: because declared C functions don't have implicit self argument.
        result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_27(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_29(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_32(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_35(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_36(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_37(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_42(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_43(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_44(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_45(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_46(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_50(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_51(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_94(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_97(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_98(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_100(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_101(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_103(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_104(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_115(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_118(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_119(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_120(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_122(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_124(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_127(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_130(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_143(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_144(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_145(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_157(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_159(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_160(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_161(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_162(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_166(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_167(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_168(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_189(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_190(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_191(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_193(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_194(val, _values, result)
    
    result
  end
.,.,

# reduce 195 omitted

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_196(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
