#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 722)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  elsif match == "begin"
    return [:kBEGIN, match]
  elsif match == "ensure"
    return [:kENSURE, match]
  elsif match == "rescue"
    return [:kRESCUE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'113,114,116,272,61,272,211,117,212,70,139,140,141,13,70,83,93,18,22',
'143,129,23,124,125,159,126,128,25,209,118,94,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,69,144,67,132',
'67,291,62,205,102,94,248,142,145,101,26,249,153,369,362,368,27,212,283',
'148,325,198,199,198,199,151,90,138,158,154,211,113,114,116,155,135,136',
'137,117,198,199,139,140,141,13,91,83,198,199,29,143,129,214,124,125',
'159,126,128,22,56,118,23,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,152,90,144,16,132,22,198,199,23,171,205',
'176,142,145,335,178,65,153,13,334,91,12,17,94,148,67,374,389,396,94',
'151,204,138,158,154,11,113,114,116,155,135,136,137,117,94,94,139,140',
'141,13,357,83,178,71,22,143,129,23,124,125,159,126,128,198,199,118,94',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,152,410,144,16,132,22,67,176,23,345,75,178,142,145,344,94,345',
'153,13,198,199,344,17,345,148,94,361,211,344,212,151,344,138,158,154',
'11,113,114,116,155,135,136,137,117,198,199,139,140,141,13,22,83,84,23',
'22,143,129,23,124,125,159,126,128,22,89,118,23,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,92,144,16',
'132,62,222,223,224,225,226,227,142,145,198,199,22,153,13,23,22,65,17',
'23,148,229,230,103,364,164,151,363,138,158,154,11,113,114,116,155,135',
'136,137,117,198,199,139,140,141,13,22,83,67,23,22,143,129,23,124,125',
'159,126,128,22,172,118,23,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,152,173,144,175,132,222,223,224,225',
'226,227,180,142,145,198,199,183,153,222,223,224,225,226,227,148,224',
'225,226,227,191,151,191,138,158,154,191,113,114,116,155,135,136,137',
'117,198,199,139,140,141,13,203,83,198,199,213,143,129,67,124,125,159',
'126,128,198,199,118,67,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,152,247,144,250,132,224,225,226,227,67',
'366,252,142,145,380,381,67,153,279,280,281,282,198,199,148,198,199,198',
'199,258,151,164,138,158,154,164,113,114,116,155,135,136,137,117,380',
'381,139,140,141,13,212,83,205,211,274,143,129,289,124,125,159,126,128',
'294,295,118,67,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,152,327,144,226,132,67,252,341,183,348,349,350',
'142,145,198,357,226,153,226,226,226,205,372,376,148,382,385,386,390',
'295,151,392,138,158,154,67,113,114,116,155,135,136,137,117,395,94,139',
'140,141,13,164,83,399,405,205,143,129,415,124,125,159,126,128,164,,118',
',31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,152,,144,,132,,,,,,,,142,145,,,,153,,,,,,,148,,,,,,151,,138,158',
'154,,113,114,116,155,135,136,137,117,,,139,140,141,13,,83,,,,143,129',
',124,125,159,126,128,,,118,,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,152,,144,,132,22,,,23,,,,142,145,,',
',153,,,,,,,148,,,,,,151,,138,158,154,,113,114,116,155,135,136,137,117',
',,139,140,141,13,,83,,,,143,129,,124,125,159,126,128,,,118,,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152',
',144,,132,22,,,23,,,,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154',
',113,114,116,155,135,136,137,117,,,139,140,141,13,,83,,,,143,129,,124',
'125,159,126,128,,,118,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,152,,144,,132,,,,,,,,142,145,,,,153,,',
',,,,148,,,,,,151,,138,158,154,,113,114,116,155,135,136,137,117,,,139',
'140,141,13,,83,,,,143,129,,124,125,159,126,128,,,118,,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,152,,144',
',132,22,,,23,139,140,141,142,145,,,,153,143,,,,,159,148,,,,,,151,,138',
'158,154,,,,,155,135,136,137,,222,223,224,225,226,227,16,,139,140,141',
'152,,144,16,188,,143,228,229,230,13,159,142,145,17,,,153,13,,,12,17',
',148,,,11,,,151,,138,158,154,11,,,,155,135,136,137,152,,144,,188,139',
'140,141,,,,,142,145,143,22,,153,23,159,,,,22,148,,23,,,,151,,138,158',
'154,,,,,155,135,136,137,,,,16,,139,140,141,194,,144,,188,,143,,,,13',
'159,142,145,17,,,153,222,223,224,225,226,227,,,,11,,,,,138,158,154,',
'228,229,230,155,135,136,137,152,,144,,188,139,140,141,,,,,142,145,143',
'22,,153,23,159,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,,,',
'16,373,139,140,141,152,,144,,188,,143,,,,13,159,142,145,17,,,153,,,',
',,,,,,11,,,151,,138,158,154,,,,,155,135,136,137,152,,144,,188,139,140',
'141,,,,,142,145,143,22,,153,23,159,,,,,148,,,,,,151,,138,158,154,,,',
',155,135,136,137,,,,,,139,140,141,152,,144,,188,,143,,,,,159,142,145',
',,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,244,,144',
',188,139,140,141,,,326,,142,145,143,,,153,,159,,,,,,222,223,224,225',
'226,227,,138,158,154,,,,,155,135,136,137,228,229,230,231,232,139,140',
'141,244,,144,,188,,143,,,,,159,142,145,,,,153,,,,,,,,,,,,,,,138,158',
'154,,,,,155,135,136,137,244,,144,,188,139,140,141,,,,,142,145,143,,',
'153,,159,,,,,,222,223,224,225,226,227,,138,158,154,,,,,155,135,136,137',
'228,229,230,231,232,139,140,141,152,,144,,188,,143,,,,,159,142,145,',
',,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,152,,144,',
'188,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,,,,,151,,138,158',
'154,,,,,155,135,136,137,,,,,,139,140,141,244,,144,,188,,143,,,,,159',
'142,145,,,,153,,,,,,,,,,,,,,,138,158,154,,,,,155,135,136,137,152,,144',
',188,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,,,,,151,,138,158',
'154,,,,,155,135,136,137,,,,,,139,140,141,152,,144,,188,,143,,,,,159',
'142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,152',
',144,,188,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,,,,,151,,138',
'158,154,,,,,155,135,136,137,,,,,,139,140,141,152,,144,,188,,143,,,,',
'159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137',
'152,,144,,188,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,,,,,151',
',138,158,154,,,,,155,135,136,137,,,,,,139,140,141,152,,144,,188,,143',
',,,,159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136',
'137,152,,144,,188,139,140,141,,,,,142,145,143,,,153,,159,,,,,148,,,',
',,151,,138,158,154,,,,,155,135,136,137,,,,,,139,140,141,152,,144,,188',
',143,,,,,159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155',
'135,136,137,152,,144,,188,139,140,141,,,,,142,145,143,,,153,,159,,,',
',148,,,,,,151,,138,158,154,,,,,155,135,136,137,,,,,,139,140,141,152',
',144,,188,,143,,,,,159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154',
',,,,155,135,136,137,152,,144,,188,139,140,141,,,,,142,145,143,,,153',
',159,,,,,148,,,,,,151,,138,158,154,,,,,155,135,136,137,,,,,,139,140',
'141,,,144,,188,,143,,,,,159,142,145,,139,140,141,,,,,,,143,,,,,159,',
',138,158,,,,,,,135,136,137,244,,144,,188,222,223,224,225,226,227,,142',
'145,,,,153,244,,144,,188,228,229,230,231,232,,,142,145,138,158,154,153',
',,,155,135,136,137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137',
'159,,,,139,140,141,,,,,,,143,,,,,159,222,223,224,225,226,227,,,279,280',
'281,282,,244,,144,,188,228,229,230,231,232,,,142,145,,,,153,244,,144',
',188,,,,,,,,142,145,138,158,154,153,,,,155,135,136,137,,,,,139,140,141',
'138,158,154,,,,143,155,135,136,137,159,,,,139,140,141,222,223,224,225',
'226,227,143,,,,,159,222,223,224,225,226,227,228,229,230,231,232,,,244',
',144,,188,228,229,230,231,232,,,142,145,,,,153,244,,144,,188,,,,,,,',
'142,145,138,158,154,153,,,,155,135,136,137,,,,,139,140,141,138,158,154',
',,,143,155,135,136,137,159,,,,139,140,141,222,223,224,225,226,227,143',
',,,,159,222,223,224,225,226,227,228,229,230,231,232,,,244,,144,,188',
'228,229,230,231,232,,,142,145,,,,153,244,,144,,188,,,,,,,,142,145,138',
'158,154,153,,,,155,135,136,137,,,,,139,140,141,138,158,154,,,,143,155',
'135,136,137,159,,,,139,140,141,222,223,224,225,226,227,143,,,,,159,222',
'223,224,225,226,227,228,229,230,231,232,,,244,,144,,188,228,229,230',
'231,232,,,142,145,,,,153,244,,144,,188,,,,,,,,142,145,138,158,154,153',
',,,155,135,136,137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137',
'159,,,,139,140,141,,,,,,,143,,,,,159,,,,,,,,,,,,,,244,,144,,188,,,,',
',,,142,145,,,,153,244,,144,,188,,,,,,,,142,145,138,158,154,153,,,,155',
'135,136,137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137,159,',
',,139,140,141,,,,,,,143,,,,,159,,,,,,,,,,,,,,244,,144,,188,,,,,,,,142',
'145,,,,153,244,,144,,188,,,,,,,,142,145,138,158,154,153,,,,155,135,136',
'137,,,,,139,140,141,138,158,154,,,,143,155,135,136,137,159,,,,139,140',
'141,,,,,,,143,,,,,159,,,,,,,,,,,,,,244,,144,,188,,,,,,,,142,145,,,,153',
'244,,144,,188,,,,,,,,142,145,138,158,154,153,,,,155,135,136,137,,,,',
'139,140,141,138,158,154,,,,143,155,135,136,137,159,,,,139,140,141,,',
',,,,143,,,,,159,,,,,,,,,,139,140,141,,244,,144,,188,143,,,,,159,,142',
'145,,,,153,244,,144,,188,,,,,,,,142,145,138,158,154,153,,,,155,135,136',
'137,,144,,188,139,140,141,138,158,154,,142,145,143,155,135,136,137,159',
',,,,,,,,,,,,138,158,,,,,,,135,136,137,,,,,,139,140,141,152,,144,,188',
',143,,,,,159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155',
'135,136,137,152,,144,,188,139,140,141,,,,,142,145,143,,,153,,159,,,',
',148,,,,,,151,,138,158,154,,,,,155,135,136,137,,,,,139,140,141,,152',
',144,,188,143,,,,,159,,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154',
',,,,155,135,136,137,,144,,188,139,140,141,,,,,142,145,143,,,,,159,,',
',,,,,,,,,,138,158,,,,,,,135,136,137,,,,,,139,140,141,152,,144,,188,',
'143,,,,,159,142,145,,,,153,,,,,,,148,,,,,,151,,138,158,154,,,,,155,135',
'136,137,244,,144,,188,139,140,141,,,,,142,145,143,,,153,,159,,139,140',
'141,,,,,,,143,,138,158,154,159,,,,155,135,136,137,,,,,,,,,244,,144,',
'188,,,,,,,,142,145,,,,153,144,,188,,,,,,,,142,145,169,,138,158,154,',
',,,155,135,136,137,,13,,83,,138,158,,,,,,,135,136,137,,,,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,13,,83',
',,22,,,23,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,326,,,,,,77,,,,,,,,,222,223,224,225,226,227',
',233,235,236,237,238,,263,,,,,228,229,230,231,232,,,,,,,,234,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,326',
',,,,,,,,,,,,,,222,223,224,225,226,227,,,279,280,281,282,,,,,,,228,229',
'230,231,232,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,,,,,,22,,,23,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,,-29,,,,,-29,222,223,224,225,226',
'227,,233,235,236,237,238,,,,,,,228,229,230,231,232,,,,,,,,234,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
',,,,163,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,,,,,163,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55' ]
        racc_action_table = arr = ::Array.new(3958, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'88,88,88,192,25,400,132,88,132,28,88,88,88,88,205,88,72,1,2,88,88,2',
'88,88,88,88,88,11,132,88,72,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,28,88,192,88,400,205,25,306,83,307',
'160,88,88,83,12,160,88,307,298,306,13,291,197,88,240,192,192,400,400',
'88,291,88,88,88,134,182,182,182,88,88,88,88,182,298,298,182,182,182',
'182,291,182,240,240,16,182,182,134,182,182,182,182,182,5,18,182,5,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,69,182,0,182,182,197,197,182,99,130',
'108,182,182,254,108,26,182,0,254,69,0,0,99,182,27,340,355,370,108,182',
'130,182,182,182,0,202,202,202,182,182,182,182,202,340,370,202,202,202',
'202,355,202,265,29,76,202,202,76,202,202,202,202,202,123,123,202,265',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,397,202,73,202,202,60,336,202,269',
'62,336,202,202,269,397,286,202,73,185,185,286,73,287,202,336,297,188',
'287,188,202,297,202,202,202,73,257,257,257,202,202,202,202,257,268,268',
'257,257,257,257,85,257,65,85,95,257,257,95,257,257,257,257,257,110,68',
'257,110,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,70,257,168,257,74,314,314',
'314,314,314,314,257,257,270,270,128,257,168,128,259,77,168,259,257,314',
'314,84,302,93,257,302,257,257,257,168,271,271,271,257,257,257,257,271',
'290,290,271,271,271,271,389,271,96,389,390,271,271,390,271,271,271,271',
'271,405,100,271,405,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,104,271,106',
'271,315,315,315,315,315,315,109,271,271,296,296,111,271,316,316,316',
'316,316,316,271,308,308,308,308,114,271,124,271,271,271,126,274,274',
'274,271,271,271,271,274,299,299,274,274,274,274,129,274,300,300,133',
'274,274,144,274,274,274,274,274,301,301,274,145,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,158,274,162,274,309,309,309,309,304,304,163,274,274',
'346,346,165,274,349,349,350,350,360,360,274,377,377,391,391,167,274',
'171,274,274,274,177,283,283,283,274,274,274,274,283,416,416,283,283',
'283,283,178,283,186,189,193,283,283,203,283,283,283,283,283,206,207',
'283,217,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,242,283,243,283,248,250',
'263,267,275,277,278,283,283,285,288,310,283,311,312,313,333,338,342',
'283,347,351,354,357,359,283,365,283,283,283,366,381,381,381,283,283',
'283,283,381,368,375,381,381,381,381,376,381,378,387,394,381,381,409',
'381,381,381,381,381,415,,381,,381,381,381,381,381,381,381,381,381,381',
'381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,,381',
',381,,,,,,,,381,381,,,,381,,,,,,,381,,,,,,381,,381,381,381,,406,406',
'406,381,381,381,381,406,,,406,406,406,406,,406,,,,406,406,,406,406,406',
'406,406,,,406,,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,406,406,406,406,406,406,406,406,406,,406,,406,406,,,406',
',,,406,406,,,,406,,,,,,,406,,,,,,406,,406,406,406,,407,407,407,406,406',
'406,406,407,,,407,407,407,407,,407,,,,407,407,,407,407,407,407,407,',
',407,,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,,407,,407,407,,,407,,,,407,407',
',,,407,,,,,,,407,,,,,,407,,407,407,407,,411,411,411,407,407,407,407',
'411,,,411,411,411,411,,411,,,,411,411,,411,411,411,411,411,,,411,,411',
'411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411,411',
'411,411,411,411,411,411,411,411,,411,,411,,,,,,,,411,411,,,,411,,,,',
',,411,,,,,,411,,411,411,411,,412,412,412,411,411,411,411,412,,,412,412',
'412,412,,412,,,,412,412,,412,412,412,412,412,,,412,,412,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,412,412,,412,,412,412,,,412,113,113,113,412,412,,,,412,113',
',,,,113,412,,,,,,412,,412,412,412,,,,,412,412,412,412,,317,317,317,317',
'317,317,24,,116,116,116,113,,113,20,113,,116,317,317,317,24,116,113',
'113,24,,,113,20,,,20,20,,113,,,24,,,113,,113,113,113,20,,,,113,113,113',
'113,116,,116,,116,117,117,117,,,,,116,116,117,24,,116,24,117,,,,20,116',
',20,,,,116,,116,116,116,,,,,116,116,116,116,,,,166,,118,118,118,117',
',117,,117,,118,,,,166,118,117,117,166,,,117,318,318,318,318,318,318',
',,,166,,,,,117,117,117,,318,318,318,117,117,117,117,118,,118,,118,147',
'147,147,,,,,118,118,147,166,,118,166,147,,,,,118,,,,,,118,,118,118,118',
',,,,118,118,118,118,,,,339,339,151,151,151,147,,147,,147,,151,,,,339',
'151,147,147,339,,,147,,,,,,,,,,339,,,147,,147,147,147,,,,,147,147,147',
'147,151,,151,,151,152,152,152,,,,,151,151,152,339,,151,339,152,,,,,151',
',,,,,151,,151,151,151,,,,,151,151,151,151,,,,,,153,153,153,152,,152',
',152,,153,,,,,153,152,152,,,,152,,,,,,,152,,,,,,152,,152,152,152,,,',
',152,152,152,152,153,,153,,153,154,154,154,,,328,,153,153,154,,,153',
',154,,,,,,328,328,328,328,328,328,,153,153,153,,,,,153,153,153,153,328',
'328,328,328,328,155,155,155,154,,154,,154,,155,,,,,155,154,154,,,,154',
',,,,,,,,,,,,,,154,154,154,,,,,154,154,154,154,155,,155,,155,183,183',
'183,,,,,155,155,183,,,155,,183,,,,,,319,319,319,319,319,319,,155,155',
'155,,,,,155,155,155,155,319,319,319,319,319,190,190,190,183,,183,,183',
',190,,,,,190,183,183,,,,183,,,,,,,183,,,,,,183,,183,183,183,,,,,183',
'183,183,183,190,,190,,190,194,194,194,,,,,190,190,194,,,190,,194,,,',
',190,,,,,,190,,190,190,190,,,,,190,190,190,190,,,,,,198,198,198,194',
',194,,194,,198,,,,,198,194,194,,,,194,,,,,,,,,,,,,,,194,194,194,,,,',
'194,194,194,194,198,,198,,198,199,199,199,,,,,198,198,199,,,198,,199',
',,,,198,,,,,,198,,198,198,198,,,,,198,198,198,198,,,,,,200,200,200,199',
',199,,199,,200,,,,,200,199,199,,,,199,,,,,,,199,,,,,,199,,199,199,199',
',,,,199,199,199,199,200,,200,,200,201,201,201,,,,,200,200,201,,,200',
',201,,,,,200,,,,,,200,,200,200,200,,,,,200,200,200,200,,,,,,204,204',
'204,201,,201,,201,,204,,,,,204,201,201,,,,201,,,,,,,201,,,,,,201,,201',
'201,201,,,,,201,201,201,201,204,,204,,204,209,209,209,,,,,204,204,209',
',,204,,209,,,,,204,,,,,,204,,204,204,204,,,,,204,204,204,204,,,,,,211',
'211,211,209,,209,,209,,211,,,,,211,209,209,,,,209,,,,,,,209,,,,,,209',
',209,209,209,,,,,209,209,209,209,211,,211,,211,212,212,212,,,,,211,211',
'212,,,211,,212,,,,,211,,,,,,211,,211,211,211,,,,,211,211,211,211,,,',
',,213,213,213,212,,212,,212,,213,,,,,213,212,212,,,,212,,,,,,,212,,',
',,,212,,212,212,212,,,,,212,212,212,212,213,,213,,213,214,214,214,,',
',,213,213,214,,,213,,214,,,,,213,,,,,,213,,213,213,213,,,,,213,213,213',
'213,,,,,,216,216,216,214,,214,,214,,216,,,,,216,214,214,,,,214,,,,,',
',214,,,,,,214,,214,214,214,,,,,214,214,214,214,216,,216,,216,219,219',
'219,,,,,216,216,219,,,216,,219,,,,,216,,,,,,216,,216,216,216,,,,,216',
'216,216,216,,,,,,222,222,222,,,219,,219,,222,,,,,222,219,219,,223,223',
'223,,,,,,,223,,,,,223,,,219,219,,,,,,,219,219,219,222,,222,,222,320',
'320,320,320,320,320,,222,222,,,,222,223,,223,,223,320,320,320,320,320',
',,223,223,222,222,222,223,,,,222,222,222,222,,,,,224,224,224,223,223',
'223,,,,224,223,223,223,223,224,,,,225,225,225,,,,,,,225,,,,,225,196',
'196,196,196,196,196,,,196,196,196,196,,224,,224,,224,196,196,196,196',
'196,,,224,224,,,,224,225,,225,,225,,,,,,,,225,225,224,224,224,225,,',
',224,224,224,224,,,,,226,226,226,225,225,225,,,,226,225,225,225,225',
'226,,,,227,227,227,321,321,321,321,321,321,227,,,,,227,322,322,322,322',
'322,322,321,321,321,321,321,,,226,,226,,226,322,322,322,322,322,,,226',
'226,,,,226,227,,227,,227,,,,,,,,227,227,226,226,226,227,,,,226,226,226',
'226,,,,,228,228,228,227,227,227,,,,228,227,227,227,227,228,,,,229,229',
'229,323,323,323,323,323,323,229,,,,,229,324,324,324,324,324,324,323',
'323,323,323,323,,,228,,228,,228,324,324,324,324,324,,,228,228,,,,228',
'229,,229,,229,,,,,,,,229,229,228,228,228,229,,,,228,228,228,228,,,,',
'230,230,230,229,229,229,,,,230,229,229,229,229,230,,,,231,231,231,402',
'402,402,402,402,402,231,,,,,231,403,403,403,403,403,403,402,402,402',
'402,402,,,230,,230,,230,403,403,403,403,403,,,230,230,,,,230,231,,231',
',231,,,,,,,,231,231,230,230,230,231,,,,230,230,230,230,,,,,232,232,232',
'231,231,231,,,,232,231,231,231,231,232,,,,233,233,233,,,,,,,233,,,,',
'233,,,,,,,,,,,,,,232,,232,,232,,,,,,,,232,232,,,,232,233,,233,,233,',
',,,,,,233,233,232,232,232,233,,,,232,232,232,232,,,,,234,234,234,233',
'233,233,,,,234,233,233,233,233,234,,,,235,235,235,,,,,,,235,,,,,235',
',,,,,,,,,,,,,234,,234,,234,,,,,,,,234,234,,,,234,235,,235,,235,,,,,',
',,235,235,234,234,234,235,,,,234,234,234,234,,,,,236,236,236,235,235',
'235,,,,236,235,235,235,235,236,,,,237,237,237,,,,,,,237,,,,,237,,,,',
',,,,,,,,,236,,236,,236,,,,,,,,236,236,,,,236,237,,237,,237,,,,,,,,237',
'237,236,236,236,237,,,,236,236,236,236,,,,,238,238,238,237,237,237,',
',,238,237,237,237,237,238,,,,244,244,244,,,,,,,244,,,,,244,,,,,,,,,',
'252,252,252,,238,,238,,238,252,,,,,252,,238,238,,,,238,244,,244,,244',
',,,,,,,244,244,238,238,238,244,,,,238,238,238,238,,252,,252,295,295',
'295,244,244,244,,252,252,295,244,244,244,244,295,,,,,,,,,,,,,252,252',
',,,,,,252,252,252,,,,,,344,344,344,295,,295,,295,,344,,,,,344,295,295',
',,,295,,,,,,,295,,,,,,295,,295,295,295,,,,,295,295,295,295,344,,344',
',344,363,363,363,,,,,344,344,363,,,344,,363,,,,,344,,,,,,344,,344,344',
'344,,,,,344,344,344,344,,,,,367,367,367,,363,,363,,363,367,,,,,367,',
'363,363,,,,363,,,,,,,363,,,,,,363,,363,363,363,,,,,363,363,363,363,',
'367,,367,380,380,380,,,,,367,367,380,,,,,380,,,,,,,,,,,,,367,367,,,',
',,,367,367,367,,,,,,383,383,383,380,,380,,380,,383,,,,,383,380,380,',
',,380,,,,,,,380,,,,,,380,,380,380,380,,,,,380,380,380,380,383,,383,',
'383,384,384,384,,,,,383,383,384,,,383,,384,,393,393,393,,,,,,,393,,383',
'383,383,393,,,,383,383,383,383,,,,,,,,,384,,384,,384,,,,,,,,384,384',
',,,384,393,,393,,,,,,,,393,393,97,,384,384,384,,,,,384,384,384,384,',
'97,,97,,393,393,,,,,,,393,393,393,,,,97,97,97,97,97,97,97,97,97,97,97',
'97,97,97,97,97,97,97,97,97,97,97,97,97,97,63,,63,,,97,,,97,,,,,,,,,',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,241,,,,,,63,,,,,,,,,241,241,241,241,241,241,,241,241,241,241,241',
',172,,,,,241,241,241,241,241,,,,,,,,241,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,276,,,,,,,,,,,,,,,276,276,276,276,276,276,,,276,276,276,276,,,,',
',,276,276,276,276,276,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,,,,,,105,,,105,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,,164,,,,,164,149,149,149,149,149,149,,149',
'149,149,149,149,,,,,,,149,149,149,149,149,,,,,,,,149,89,89,89,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,,,,,89,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,,,,,249,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,61,61,61,61,61,61,61,61,61',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,247,247,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,334,334,334,334,334',
'334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334,334',
'334,334,334' ]
        racc_action_check = arr = ::Array.new(3958, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   149,    17,   -47,   nil,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   -37,   -21,    13,   nil,   nil,    88,  3773,   120,   nil,
  1124,   nil,   nil,   nil,  1116,   -21,   100,   108,    -7,   131,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   181,  3798,   186,  3482,   nil,   217,  3823,   nil,   244,    78,
   262,   nil,   -48,   241,   253,   nil,   137,   289,   nil,   nil,
   nil,   nil,   nil,     6,   267,   225,   nil,   nil,    -4,  3713,
   nil,   nil,   nil,   301,   nil,   229,   319,  3439,   nil,    93,
   314,   nil,   nil,   nil,   422,  3616,   361,   nil,    99,   432,
   238,   434,   nil,  1063,   393,   nil,  1106,  1157,  1200,   nil,
   nil,   nil,   nil,   123,   395,   nil,   399,   nil,   283,   457,
    88,   nil,   -54,   396,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   416,   425,   nil,  1251,  3848,  3641,
   nil,  1294,  1345,  1388,  1439,  1482,   nil,   nil,   457,   nil,
     6,   nil,   455,   445,  3650,   467,  1210,   542,   333,   nil,
   nil,   487,  3553,   nil,   nil,   nil,   nil,   491,   504,   nil,
   nil,   nil,    88,  1533,   nil,   171,   498,   nil,   207,   509,
  1576,   nil,    -6,   557,  1627,   nil,  2298,    66,  1670,  1721,
  1764,  1815,   180,   509,  1858,    -2,   513,   498,   nil,  1909,
   nil,  1952,  2003,  2046,  2097,   nil,  2140,   517,   nil,  2191,
   nil,   nil,  2234,  2252,  2327,  2345,  2420,  2438,  2513,  2531,
  2606,  2624,  2699,  2717,  2792,  2810,  2885,  2903,  2978,   nil,
    20,  3481,   548,   531,  2996,   nil,   nil,  3873,   548,  3743,
   532,   nil,  3020,   nil,   101,   nil,   nil,   272,   nil,   287,
   nil,   nil,   nil,   551,   nil,   136,   nil,   610,   196,   188,
   258,   364,   nil,   nil,   456,   556,  3552,   554,   555,   nil,
   nil,   nil,   nil,   548,   nil,   534,   195,   202,   592,   nil,
   288,    16,   nil,   nil,   nil,  3071,   350,   205,    12,   380,
   388,   399,   297,   nil,   460,   nil,    -6,   -12,   371,   443,
   544,   546,   547,   548,   262,   353,   366,  1036,  1159,  1491,
  2223,  2379,  2391,  2472,  2484,   nil,   nil,   nil,  1397,   nil,
   nil,   nil,   nil,   559,  3898,   nil,   187,   nil,   627,  1304,
   114,   nil,   570,   nil,  3114,   nil,   523,   630,   nil,   450,
   450,   631,   nil,   nil,   632,   167,   nil,   572,   nil,   555,
   450,   nil,   nil,  3165,   nil,   565,   578,  3207,   566,   nil,
   115,   nil,   nil,   nil,   nil,   575,   598,   453,   657,   nil,
  3258,   640,   nil,  3301,  3352,   nil,   nil,   629,   nil,   317,
   321,   455,   nil,  3368,   592,   nil,   nil,   177,   nil,   nil,
    -4,   nil,  2565,  2577,   nil,   330,   732,   824,   nil,   604,
   nil,   916,  1008,   nil,   nil,   611,   553,   nil,   nil,   nil ]

racc_action_default = [
    -6,  -240,  -229,    -2,    -4,  -240,    -7,    -9,   -10,   -11,
   -12,  -240,  -240,  -240,   -49,   -50,   -56,  -240,  -240,    -1,
  -230,  -231,  -233,  -234,    -5,   -15,   -20,  -240,  -240,  -240,
  -115,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,
  -217,  -218,  -219,  -220,  -221,  -222,   420,    -3,  -232,    -8,
  -240,  -240,  -240,   -22,   -18,  -240,   -35,  -239,  -143,  -141,
  -240,   -57,  -240,    -6,   -15,   -16,  -240,   -20,   -23,   -25,
   -26,   -27,  -115,  -240,  -240,  -229,   -36,  -115,   -59,  -240,
  -139,  -140,  -142,   -32,  -116,  -229,  -240,  -240,   -19,  -240,
  -240,   -42,   -43,   -21,  -240,  -230,   -38,   -40,  -240,  -240,
  -229,   -60,   -62,  -223,  -225,   -65,  -240,  -240,  -240,   -70,
   -71,   -72,   -73,   -74,  -225,   -76,  -225,   -78,  -240,  -240,
  -175,  -115,  -192,  -183,  -192,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -235,  -235,  -151,  -240,  -240,  -156,
  -157,  -240,  -240,  -240,  -240,  -240,  -184,  -186,  -240,  -188,
  -240,  -145,  -240,  -149,  -115,  -240,  -230,  -240,    -6,   -17,
   -24,   -32,  -240,   -34,   -37,  -115,  -115,   -32,  -112,  -113,
   -51,   -58,  -230,  -240,   -63,  -224,  -175,  -183,  -192,  -192,
  -194,  -226,  -240,  -240,  -240,   -92,  -240,  -240,  -240,  -240,
  -194,  -194,   -59,  -240,  -240,  -240,  -105,  -108,  -109,  -240,
  -185,  -194,  -240,  -240,  -240,  -189,  -117,  -236,  -237,  -134,
  -152,  -115,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -158,
  -240,  -156,  -157,  -171,  -240,  -172,  -173,  -240,  -240,  -240,
  -149,  -148,  -240,   -30,  -240,  -115,   -55,   -59,   -13,  -240,
   -28,   -41,  -115,  -240,   -39,  -240,  -111,   -61,   -67,  -227,
  -195,   -59,   -99,  -100,   -59,  -240,  -240,  -240,  -240,   -95,
   -96,   -97,   -98,   -59,  -153,  -154,  -227,  -227,   -81,   -89,
   -90,  -141,  -190,  -191,  -115,  -240,  -120,  -240,  -240,  -121,
  -122,  -118,  -240,  -238,  -235,  -135,  -240,  -240,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -176,
  -177,  -178,  -179,  -180,  -181,  -159,  -174,  -182,  -240,  -115,
  -144,  -146,  -147,  -150,  -115,   -33,   -53,   -54,  -240,  -240,
   -44,  -115,  -240,   -64,  -240,  -228,  -101,  -240,   -91,  -240,
  -240,  -240,   -75,   -77,  -240,   -85,   -82,  -240,  -106,  -107,
  -114,  -193,  -197,  -240,  -132,  -240,  -235,  -240,  -240,  -155,
  -240,   -31,   -52,   -14,  -115,   -45,   -32,  -196,  -240,  -102,
  -240,   -59,   -68,  -240,  -240,   -69,   -79,   -87,   -83,  -240,
  -240,  -119,  -133,  -240,  -137,  -138,  -187,   -47,  -110,   -66,
  -240,  -104,   -93,   -94,   -80,  -240,   -59,   -59,  -136,  -240,
   -48,   -59,   -59,   -86,   -84,   -32,  -101,   -88,   -46,  -103 ]

racc_goto_table = [
    20,   271,    66,    24,    58,    72,    10,   109,    58,   216,
   219,    68,    59,   165,   208,   130,   378,    19,   161,   253,
   305,    95,   195,   356,    64,   251,    10,   215,    60,   107,
    10,    86,    78,    81,   269,    73,     3,     1,   190,   133,
     2,    63,    76,   343,   286,   287,   254,    85,   200,   134,
   201,   106,   100,   261,   409,   297,    57,    99,    28,   179,
   352,   353,    88,   267,   184,   193,   170,    81,   354,    80,
   174,   168,   355,   207,    97,    98,   387,    96,   404,    10,
   383,    58,   215,   105,   384,   206,   419,   342,   302,    58,
   388,   260,   304,   166,   367,   160,   220,   266,   242,   275,
   104,   nil,   nil,    80,   nil,   nil,   nil,   nil,   182,   130,
   167,    30,   332,   nil,   nil,   nil,   259,   264,   nil,   nil,
   nil,   288,   nil,   nil,   nil,   181,   202,   nil,   nil,   130,
   nil,   nil,   nil,   133,   nil,   nil,   nil,   nil,   nil,   nil,
   257,   nil,   nil,   134,   nil,   nil,   306,   nil,   nil,   nil,
    58,   265,   nil,   133,    59,    74,   293,    82,   nil,   nil,
    87,   nil,   nil,   134,   nil,   nil,    58,   273,   nil,   365,
   nil,   nil,    10,   nil,    10,   nil,   338,   358,   331,   333,
   nil,   nil,   185,   162,   130,   192,    58,   197,   292,   371,
   346,    82,   303,   347,   408,   nil,   307,   337,   130,    87,
   nil,   130,   351,   nil,   nil,   nil,   nil,   nil,   133,   411,
   130,   nil,   nil,   nil,   nil,   nil,   179,   nil,   134,   nil,
   239,   240,   133,   330,   nil,   133,   nil,   nil,   nil,   nil,
   336,   393,   134,   nil,   133,   134,   359,   340,   nil,   nil,
   nil,   nil,   221,   nil,   134,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   268,   nil,   nil,   nil,   nil,   339,   255,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   262,   284,   285,   270,
   270,   nil,   nil,   290,   nil,   nil,   nil,   nil,   296,   nil,
   270,   298,   299,   300,   nil,   301,   nil,   179,   nil,   nil,
   nil,   nil,   nil,   nil,   394,   nil,   398,   nil,   nil,   nil,
   401,   nil,   nil,   nil,   370,   nil,   nil,   nil,   130,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   375,   nil,   nil,   nil,
   306,   nil,   nil,    58,   nil,   413,   414,    59,   nil,   nil,
   416,   417,   133,   130,   130,   418,   nil,   nil,   130,   130,
   nil,   329,   134,   162,   nil,    10,   196,   nil,   nil,   397,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   133,   133,   nil,
   nil,   nil,   133,   133,   360,   nil,   nil,   134,   134,   nil,
   nil,   nil,   134,   134,   nil,   273,   nil,   nil,   nil,   nil,
   nil,   241,   243,   245,   246,   nil,   nil,   406,   407,   nil,
    58,    58,   nil,   nil,   nil,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,   412,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   377,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   276,   nil,   nil,   nil,   nil,   255,   nil,
   nil,   nil,   391,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   400,
   nil,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   nil,   nil,
   nil,   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   402,   403 ]

racc_goto_check = [
     5,    48,    14,     5,    84,    22,    12,    38,    84,    72,
    72,    36,     8,    23,    66,    59,    49,     3,    77,    25,
    74,     7,    60,    58,    18,    78,    12,    82,    13,    29,
    12,    27,    19,    21,    44,    14,     4,     1,    43,    68,
     2,    16,    17,    45,    44,    44,    24,    26,    43,    70,
    43,    28,    30,    31,    32,    44,     4,    22,    35,    68,
    45,    45,    37,    40,    42,    50,    19,    21,    54,    12,
    27,    14,    55,    29,     5,    18,    56,    13,    57,    12,
    62,    84,    82,     5,    63,    65,    49,    67,    69,    84,
    58,    23,    73,     5,    75,    76,    79,    23,    81,    60,
     3,   nil,   nil,    12,   nil,   nil,   nil,   nil,     5,    59,
     3,    15,    78,   nil,   nil,   nil,     7,    29,   nil,   nil,
   nil,    38,   nil,   nil,   nil,     3,     5,   nil,   nil,    59,
   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,    70,   nil,   nil,    59,   nil,   nil,   nil,
    84,    22,   nil,    68,     8,    15,    68,    15,   nil,   nil,
    15,   nil,   nil,    70,   nil,   nil,    84,    14,   nil,    72,
   nil,   nil,    12,   nil,    12,   nil,    38,    66,    77,    59,
   nil,   nil,    47,    15,    59,    47,    84,    47,    36,    25,
    38,    15,    14,    38,    74,   nil,    22,    29,    59,    15,
   nil,    59,    38,   nil,   nil,   nil,   nil,   nil,    68,    48,
    59,   nil,   nil,   nil,   nil,   nil,    68,   nil,    70,   nil,
    47,    47,    68,    14,   nil,    68,   nil,   nil,   nil,   nil,
    22,    72,    70,   nil,    68,    70,    29,    22,   nil,   nil,
   nil,   nil,    15,   nil,    70,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,   nil,   nil,   nil,   nil,     5,    15,    47,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    47,    47,    47,
    47,   nil,   nil,    47,   nil,   nil,   nil,   nil,    47,   nil,
    47,    47,    47,    47,   nil,    47,   nil,    68,   nil,   nil,
   nil,   nil,   nil,   nil,    59,   nil,    23,   nil,   nil,   nil,
    38,   nil,   nil,   nil,    22,   nil,   nil,   nil,    59,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
    59,   nil,   nil,    84,   nil,    38,    38,     8,   nil,   nil,
    38,    38,    68,    59,    59,    23,   nil,   nil,    59,    59,
   nil,    15,    70,    15,   nil,    12,    61,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,    68,   nil,
   nil,   nil,    68,    68,    47,   nil,   nil,    70,    70,   nil,
   nil,   nil,    70,    70,   nil,    14,   nil,   nil,   nil,   nil,
   nil,    61,    61,    61,    61,   nil,   nil,     5,     5,   nil,
    84,    84,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
   nil,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    61,    61,   nil,   nil,
   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    61,    61 ]

racc_goto_pointer = [
   nil,    37,    40,    15,    36,    -2,   nil,   -52,   -12,   nil,
   nil,   nil,     6,     3,   -25,    94,    15,   -21,    -2,   -31,
   nil,   -30,   -25,   -80,  -118,  -145,   -19,   -35,   -36,   -58,
   -31,  -119,  -343,   nil,   nil,    42,   -17,    -6,   -81,   nil,
  -119,   nil,   -49,   -76,  -156,  -226,   nil,    69,  -191,  -330,
   -52,   nil,   nil,   nil,  -220,  -216,  -279,  -309,  -265,   -73,
   -95,   229,  -269,  -266,   nil,   -46,  -117,  -178,   -49,  -128,
   -39,   nil,  -135,  -127,  -199,  -212,     6,   -71,  -138,   -51,
   nil,   -54,  -107,   nil,   -16,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   120,   nil,   218,   131,   nil,   nil,   nil,   nil,
    79,   122,   108,   nil,   nil,   nil,   nil,   nil,   nil,   256,
   nil,   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   110,
   111,   112,   nil,   nil,   nil,   nil,   115,   123,   nil,   nil,
   nil,   119,   121,   127,   nil,   nil,   nil,   nil,   nil,   186,
   nil,   149,   277,   278,   379,   nil,   nil,   177,   187,   nil,
   189,   156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   146,
   147,   150,   210,   157,    21,   217 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 108, :_reduce_1,
  1, 109, :_reduce_2,
  3, 109, :_reduce_3,
  1, 111, :_reduce_4,
  2, 111, :_reduce_5,
  0, 114, :_reduce_6,
  1, 114, :_reduce_7,
  3, 114, :_reduce_8,
  1, 115, :_reduce_9,
  1, 115, :_reduce_10,
  1, 115, :_reduce_11,
  1, 115, :_reduce_12,
  7, 117, :_reduce_13,
  9, 118, :_reduce_14,
  0, 120, :_reduce_15,
  2, 120, :_reduce_16,
  6, 113, :_reduce_17,
  1, 123, :_reduce_18,
  3, 123, :_reduce_19,
  0, 125, :_reduce_20,
  3, 125, :_reduce_21,
  0, 124, :_reduce_22,
  1, 124, :_reduce_23,
  3, 124, :_reduce_24,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  4, 127, :_reduce_28,
  0, 131, :_reduce_29,
  1, 131, :_reduce_30,
  3, 131, :_reduce_31,
  0, 130, :_reduce_32,
  3, 130, :_reduce_33,
  6, 119, :_reduce_34,
  0, 133, :_reduce_35,
  1, 133, :_reduce_36,
  3, 133, :_reduce_37,
  2, 134, :_reduce_38,
  3, 135, :_reduce_39,
  1, 135, :_reduce_40,
  4, 128, :_reduce_41,
  1, 137, :_reduce_none,
  1, 137, :_reduce_43,
  2, 138, :_reduce_44,
  3, 138, :_reduce_45,
  7, 138, :_reduce_46,
  0, 139, :_reduce_47,
  1, 139, :_reduce_48,
  1, 116, :_reduce_49,
  1, 116, :_reduce_50,
  6, 140, :_reduce_51,
  8, 141, :_reduce_52,
  2, 132, :_reduce_53,
  2, 132, :_reduce_54,
  1, 132, :_reduce_55,
  0, 142, :_reduce_56,
  2, 142, :_reduce_57,
  2, 145, :_reduce_58,
  0, 146, :_reduce_59,
  1, 146, :_reduce_60,
  3, 146, :_reduce_61,
  1, 147, :_reduce_62,
  2, 147, :_reduce_63,
  4, 147, :_reduce_64,
  1, 147, :_reduce_65,
  6, 147, :_reduce_66,
  3, 147, :_reduce_67,
  5, 147, :_reduce_68,
  5, 147, :_reduce_69,
  1, 147, :_reduce_70,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_74,
  4, 147, :_reduce_75,
  1, 147, :_reduce_76,
  4, 147, :_reduce_77,
  1, 147, :_reduce_none,
  5, 160, :_reduce_79,
  3, 161, :_reduce_80,
  0, 162, :_reduce_81,
  1, 162, :_reduce_82,
  2, 162, :_reduce_83,
  4, 165, :_reduce_84,
  0, 163, :_reduce_85,
  3, 163, :_reduce_86,
  0, 164, :_reduce_87,
  3, 164, :_reduce_88,
  3, 159, :_reduce_89,
  3, 158, :_reduce_90,
  3, 157, :_reduce_91,
  1, 157, :_reduce_none,
  5, 167, :_reduce_93,
  5, 167, :_reduce_94,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 156, :_reduce_101,
  1, 156, :_reduce_102,
  5, 156, :_reduce_103,
  2, 171, :_reduce_104,
  2, 148, :_reduce_105,
  3, 172, :_reduce_106,
  3, 172, :_reduce_107,
  1, 172, :_reduce_108,
  1, 172, :_reduce_109,
  6, 136, :_reduce_110,
  3, 136, :_reduce_111,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  3, 173, :_reduce_114,
  0, 129, :_reduce_115,
  2, 129, :_reduce_116,
  0, 176, :_reduce_117,
  1, 176, :_reduce_118,
  3, 176, :_reduce_119,
  3, 153, :_reduce_120,
  3, 153, :_reduce_121,
  3, 153, :_reduce_122,
  1, 178, :_reduce_123,
  1, 178, :_reduce_124,
  1, 178, :_reduce_125,
  1, 178, :_reduce_126,
  1, 178, :_reduce_127,
  1, 178, :_reduce_128,
  1, 178, :_reduce_129,
  1, 178, :_reduce_130,
  1, 178, :_reduce_131,
  4, 178, :_reduce_132,
  5, 178, :_reduce_133,
  0, 180, :_reduce_134,
  1, 180, :_reduce_135,
  4, 180, :_reduce_136,
  3, 181, :_reduce_137,
  2, 182, :_reduce_none,
  2, 143, :_reduce_139,
  2, 143, :_reduce_140,
  1, 143, :_reduce_141,
  2, 143, :_reduce_142,
  0, 144, :_reduce_143,
  4, 144, :_reduce_144,
  1, 183, :_reduce_145,
  3, 183, :_reduce_146,
  3, 184, :_reduce_147,
  2, 184, :_reduce_148,
  0, 185, :_reduce_149,
  2, 185, :_reduce_150,
  1, 154, :_reduce_151,
  2, 154, :_reduce_152,
  3, 154, :_reduce_153,
  3, 154, :_reduce_154,
  4, 187, :_reduce_155,
  1, 186, :_reduce_156,
  1, 186, :_reduce_157,
  2, 186, :_reduce_158,
  3, 186, :_reduce_159,
  3, 168, :_reduce_160,
  3, 168, :_reduce_161,
  3, 168, :_reduce_162,
  3, 168, :_reduce_163,
  3, 168, :_reduce_164,
  3, 168, :_reduce_165,
  3, 168, :_reduce_166,
  3, 168, :_reduce_167,
  3, 168, :_reduce_168,
  3, 168, :_reduce_169,
  3, 168, :_reduce_170,
  2, 168, :_reduce_171,
  2, 168, :_reduce_172,
  2, 168, :_reduce_173,
  3, 168, :_reduce_174,
  1, 168, :_reduce_175,
  3, 188, :_reduce_176,
  3, 188, :_reduce_177,
  3, 188, :_reduce_178,
  3, 188, :_reduce_179,
  3, 188, :_reduce_180,
  3, 188, :_reduce_181,
  3, 188, :_reduce_182,
  1, 166, :_reduce_183,
  1, 166, :_reduce_184,
  2, 166, :_reduce_185,
  1, 166, :_reduce_none,
  5, 166, :_reduce_187,
  1, 166, :_reduce_188,
  2, 190, :_reduce_189,
  3, 177, :_reduce_190,
  3, 177, :_reduce_191,
  0, 189, :_reduce_192,
  3, 189, :_reduce_193,
  0, 151, :_reduce_194,
  1, 151, :_reduce_195,
  3, 151, :_reduce_196,
  4, 175, :_reduce_197,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_222,
  0, 149, :_reduce_223,
  1, 149, :_reduce_none,
  0, 150, :_reduce_225,
  1, 150, :_reduce_none,
  0, 152, :_reduce_227,
  1, 152, :_reduce_none,
  0, 110, :_reduce_229,
  1, 110, :_reduce_230,
  1, 112, :_reduce_231,
  2, 112, :_reduce_232,
  1, 191, :_reduce_233,
  1, 191, :_reduce_none,
  0, 179, :_reduce_235,
  1, 179, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  1, 121, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 420

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kDOT_EACH => 12,
  :kDO => 13,
  :kTRUE => 14,
  :kFALSE => 15,
  :kNIL => 16,
  :kSTRUCT => 17,
  :kUNION => 18,
  :kALIAS => 19,
  :kLIB => 20,
  :kCFUNC => 21,
  :kSELF => 22,
  :kNULL => 23,
  :kFWD => 24,
  :kATTACH => 25,
  :kRAISE => 26,
  :kBREAK => 27,
  :kBLOCK_GIVEN => 28,
  :kYIELD => 29,
  :kBEGIN => 30,
  :kRESCUE => 31,
  :kENSURE => 32,
  :kWHILE => 33,
  :kCLASS => 34,
  :kDTYPE_UINT => 35,
  :kDTYPE_LINT => 36,
  :kDTYPE_LLINT => 37,
  :kDTYPE_CHAR => 38,
  :kDTYPE_I8 => 39,
  :kDTYPE_I16 => 40,
  :kDTYPE_I32 => 41,
  :kDTYPE_I64 => 42,
  :kDTYPE_UI8 => 43,
  :kDTYPE_UI16 => 44,
  :kDTYPE_UI32 => 45,
  :kDTYPE_UI64 => 46,
  :kDTYPE_INT => 47,
  :kDTYPE_F32 => 48,
  :kDTYPE_F64 => 49,
  :kDTYPE_LF64 => 50,
  :kDTYPE_ROBJ => 51,
  :kDTYPE_ULINT => 52,
  :kDTYPE_ULLINT => 53,
  :kDTYPE_VOID => 54,
  :kDTYPE_SIZE_T => 55,
  :kDTYPE_RB_STR => 56,
  :kDTYPE_UCHAR => 57,
  :kDTYPE_BOOL => 58,
  :tCUSTOM_DTYPE => 59,
  :tLPAREN => 60,
  :tRPAREN => 61,
  :tLSQUARE => 62,
  :tRSQUARE => 63,
  :tIDENTIFIER => 64,
  :tNL => 65,
  :tCOMMA => 66,
  :tSQUOTE => 67,
  :tSCOLON => 68,
  :EOF => 69,
  :tDOT => 70,
  :tQMARK => 71,
  :tSYMBOL => 72,
  :tLBRACE => 73,
  :tRBRACE => 74,
  :tCOLON => 75,
  :tPLUS => 76,
  :tMINUS => 77,
  :tSTAR => 78,
  :tDIVIDE => 79,
  :tEXPO => 80,
  :tMODULUS => 81,
  :tASSIGN => 82,
  :tEQ => 83,
  :tLT => 84,
  :tLTEQ => 85,
  :tGT => 86,
  :tGTEQ => 87,
  :tANDOP => 88,
  :tOROP => 89,
  :tBANG => 90,
  :tOP_ASSIGN => 91,
  :tSTRING => 92,
  :kSIZEOF => 93,
  :tBIT_AND => 94,
  :tBIT_OR => 95,
  :tBIT_XOR => 96,
  :tBIT_LSHIFT => 97,
  :tBIT_RSHIFT => 98,
  :tBIT_NOT => 99,
  :tINTEGER => 100,
  :tFLOAT => 101,
  :tSINGLE_CHAR => 102,
  :ADDRESS_OF => 103,
  :TYPECAST => 104,
  :UMINUS => 105,
  :tNEQ => 106 }

racc_nt_base = 107

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kWHILE",
  "kCLASS",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "opt_compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "begin_block",
  "opt_begin_block_tails",
  "opt_rescue_blocks",
  "opt_else_block",
  "opt_ensure_block",
  "rescue_block",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_20(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_30(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_31(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_46(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_79(val, _values, result)
            result = Statement::BeginBlock::Begin.new val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_80(val, _values, result)
            tails = []
        tails.concat(val[0]) if val[0]
        tails << val[1]      if val[1]
        tails << val[2]      if val[2]

        result = tails
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[1]]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_84(val, _values, result)
     result = Statement::BeginBlock::Rescue.new val[1], nil, val[3], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_85(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_86(val, _values, result)
     result = Statement::BeginBlock::Else.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_87(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_88(val, _values, result)
     result = Statement::BeginBlock::Ensure.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_89(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_90(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_94(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_101(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_103(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_104(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_105(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_106(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_107(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_108(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_110(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_111(val, _values, result)
            result = {}

        if !val[2].empty?
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_114(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_115(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_116(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_118(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_120(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_121(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_122(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_123(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_124(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_125(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_126(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_127(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_128(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_129(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_130(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_131(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_132(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_133(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_134(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_136(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_139(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_140(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_142(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_143(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_144(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_145(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_146(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_147(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_148(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_149(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 569)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_152(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_155(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_157(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 587)
  def _reduce_158(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_160(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_168(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_169(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_170(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_171(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_172(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_173(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_176(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_177(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_178(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_179(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_180(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 614)
  def _reduce_181(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 615)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 618)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_185(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 633)
  def _reduce_187(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_188(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_189(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_190(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 650)
  def _reduce_191(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_192(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 655)
  def _reduce_193(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_194(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_195(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 660)
  def _reduce_196(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 665)
  def _reduce_197(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'parser.racc', 675)
  def _reduce_222(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 679)
  def _reduce_223(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'parser.racc', 683)
  def _reduce_225(val, _values, result)
    
    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'parser.racc', 687)
  def _reduce_227(val, _values, result)
    
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'parser.racc', 691)
  def _reduce_229(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 692)
  def _reduce_230(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 695)
  def _reduce_231(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 696)
  def _reduce_232(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 699)
  def _reduce_233(val, _values, result)
    
    result
  end
.,.,

# reduce 234 omitted

module_eval(<<'.,.,', 'parser.racc', 703)
  def _reduce_235(val, _values, result)
    
    result
  end
.,.,

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

module_eval(<<'.,.,', 'parser.racc', 711)
  def _reduce_239(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
