#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 469)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'94,95,97,221,231,221,243,98,99,17,141,114,115,116,89,140,84,77,172,269',
'173,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121',
'162,163,67,107,67,241,24,201,172,243,173,117,202,122,21,162,163,22,162',
'163,77,172,162,163,162,163,120,170,113,123,15,94,95,97,124,110,111,112',
'98,99,175,25,114,115,116,89,12,84,26,11,10,16,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,121,173,292,165,107,28,21,73',
'206,22,73,291,117,205,122,21,219,21,22,21,22,164,22,74,162,163,74,120',
'52,113,123,15,94,95,97,124,110,111,112,98,99,162,163,114,115,116,89',
'12,84,162,163,10,16,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,121,15,57,15,107,21,21,21,22,22,22,58,117,21,122,311',
'22,12,312,12,11,10,16,10,16,162,163,120,59,113,123,61,94,95,97,124,110',
'111,112,98,99,162,163,114,115,116,89,62,84,179,180,181,182,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,162,163,63',
'107,177,178,179,180,181,182,64,117,67,122,177,178,179,180,181,182,68',
'183,184,185,186,187,120,67,113,123,67,94,95,97,124,110,111,112,98,99',
'162,163,114,115,116,89,72,84,179,180,181,182,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,121,162,163,75,107,177,178,179',
'180,181,182,77,117,67,122,177,178,179,180,181,182,138,183,184,185,186',
'187,120,142,113,123,64,94,95,97,124,110,111,112,98,99,162,163,114,115',
'116,89,145,84,297,298,226,227,30,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,121,228,229,146,107,177,178,179,180,181,182',
'149,117,64,122,162,163,162,163,162,163,174,183,184,185,186,187,120,203',
'113,123,204,94,95,97,124,110,111,112,98,99,297,298,114,115,116,89,75',
'84,212,216,59,165,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,121,172,219,223,107,177,178,179,180,181,182,235,117,238',
'122,239,268,181,67,273,277,149,183,184,185,186,187,120,281,113,123,282',
'94,95,97,124,110,111,112,98,99,162,64,114,115,116,89,64,84,75,173,181',
'181,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121',
'181,181,293,107,15,208,64,114,115,116,299,117,302,122,177,178,179,180',
'181,182,12,239,306,313,10,16,120,75,113,123,,,184,185,124,110,111,112',
'121,,,,153,,,,114,115,116,,117,,122,21,,,22,114,115,116,,,,,,120,,113',
'123,,,,,124,110,111,112,121,,,,153,,,,114,115,116,160,117,,122,153,',
',,,,,,117,,122,,120,,113,123,,,,,124,110,111,112,121,113,123,,153,,',
'124,110,111,112,,117,,122,114,115,116,,,,,,,,,,120,,113,123,,,,,124',
'110,111,112,267,,,,114,115,116,121,,,,153,177,178,179,180,181,182,,117',
',122,,114,115,116,,,,183,184,185,186,187,120,121,113,123,,153,,,124',
'110,111,112,,117,,122,,114,115,116,121,,,,153,,,,120,,113,123,117,,122',
',124,110,111,112,,,,,114,115,116,120,160,113,123,,153,,,124,110,111',
'112,,117,,122,114,115,116,,,,,,,,,,160,,113,123,153,,,,124,110,111,112',
'117,,122,114,115,116,,160,,,,153,,,,,,113,123,117,,122,,124,110,111',
'112,,,,,114,115,116,121,,113,123,153,,,,124,110,111,112,117,,122,,114',
'115,116,,,,,,,,,120,160,113,123,,153,,,124,110,111,112,,117,,122,,114',
'115,116,121,,,,153,,,,,,113,123,117,,122,,124,110,111,112,,,,,,,,120',
'121,113,123,,153,,,124,110,111,112,,117,,122,114,115,116,,,,,,,,,,120',
',113,123,,,,,124,110,111,112,,,,,114,115,116,121,,,,153,177,178,179',
'180,181,182,,117,,122,,114,115,116,,,,183,184,185,186,187,120,121,113',
'123,,153,,,124,110,111,112,,117,,122,,114,115,116,121,,,,153,,,,120',
',113,123,117,,122,,124,110,111,112,,,,,,,,120,121,113,123,,153,,,124',
'110,111,112,,117,,122,114,115,116,,,,,,,,,,120,,113,123,,,,,124,110',
'111,112,,,,,114,115,116,121,,,,153,,,,114,115,116,,117,,122,,,,,,,,',
',,,,120,121,113,123,,153,,,124,110,111,112,160,117,,122,153,,,,114,115',
'116,,117,,122,,120,,113,123,,114,115,116,124,110,111,112,,113,123,,',
',,124,110,111,112,160,,,,153,,,,,114,115,116,117,160,122,,,153,,,,,114',
'115,116,117,,122,,113,123,,,,,124,110,111,112,,160,,113,123,153,,,,124',
'110,111,112,117,160,122,,,153,,,,114,115,116,,117,,122,,113,123,,114',
'115,116,124,110,111,112,,,,113,123,,,,,124,110,111,112,160,,,,153,,',
',114,115,116,160,117,,122,153,,,,114,115,116,,117,,122,,,,113,123,,',
',,124,110,111,112,160,113,123,,153,,,124,110,111,112,160,117,,122,153',
',,,114,115,116,,117,,122,,,,113,123,,114,115,116,124,110,111,112,,113',
'123,,,,,124,110,111,112,160,,,,153,,,,,114,115,116,117,160,122,,,153',
',,,,114,115,116,117,,122,,113,123,,,,,124,110,111,112,,160,,113,123',
'153,,,,124,110,111,112,117,160,122,,,153,,,,114,115,116,,117,,122,,113',
'123,,114,115,116,124,110,111,112,,,,113,123,,,,,124,110,111,112,160',
',,,153,,,,114,115,116,160,117,,122,153,,,,114,115,116,,117,,122,,,,113',
'123,,,,,124,110,111,112,160,113,123,,153,,,124,110,111,112,160,117,',
'122,153,,,,114,115,116,,117,,122,,,,113,123,,,,,124,110,111,112,,113',
'123,,,,,124,110,111,112,121,,,,153,,,,114,115,116,,117,,122,177,178',
'179,180,181,182,,,,,,,120,,113,123,,183,184,185,124,110,111,112,121',
',288,,153,,,,114,115,116,,117,,122,,,,,114,115,116,,,,,,120,,113,123',
',,,,124,110,111,112,121,,,,153,,,,114,115,116,160,117,,122,153,,,,114',
'115,116,,117,,122,,120,,113,123,,,,,124,110,111,112,121,113,123,,153',
',,124,110,111,112,160,117,,122,153,,,,114,115,116,,117,,122,,120,,113',
'123,,,,,124,110,111,112,,113,123,,,,,124,110,111,112,121,,,,153,177',
'178,179,180,181,182,,117,,122,,,209,,,,,183,184,185,186,187,120,,113',
'123,,12,,84,124,110,111,112,30,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,267,,,,,21,,,22,,,,177,178,179,180,181,182,,188',
'190,191,192,193,,,,,,183,184,185,186,187,,,,,,,189,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,,21,,,22,177,178,179',
'180,181,182,,188,190,191,192,193,,,,,,183,184,185,186,187,12,,84,,,',
'189,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,276',
',,,,,,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,132',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,132',
'177,178,179,180,181,182,,,226,227,228,229,,,,,,183,184,185,186,187,177',
'178,179,180,181,182,177,178,179,180,181,182,,,,,,183,184,185,186,187',
',183,184,185,186,187,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,177,178,179,180,181,182,,,,,,,,,,,,183,184,185' ]
        racc_action_table = arr = ::Array.new(2145, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,71,71,157,161,307,289,71,71,1,84,71,71,71,71,84,71,289,153,197,153',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,197',
'197,157,71,307,169,10,127,107,169,107,71,127,71,2,104,104,2,161,161',
'169,109,157,157,307,307,71,107,71,71,19,135,135,135,71,71,71,71,135',
'135,109,11,135,135,135,135,19,135,12,19,19,19,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,235',
'247,105,135,15,19,61,134,19,235,246,135,134,135,5,246,78,5,79,78,105',
'79,61,247,247,235,135,17,135,135,23,148,148,148,135,135,135,135,148',
'148,150,150,148,148,148,148,23,148,156,156,23,23,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'0,24,66,148,148,23,86,148,23,86,25,148,91,148,303,91,0,303,66,0,0,0',
'66,66,218,218,148,26,148,148,27,220,220,220,148,148,148,148,220,220',
'234,234,220,220,220,220,28,220,250,250,250,250,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,245',
'245,29,220,261,261,261,261,261,261,51,220,56,220,257,257,257,257,257',
'257,57,261,261,261,261,261,220,58,220,220,59,223,223,223,220,220,220',
'220,223,223,248,248,223,223,223,223,60,223,251,251,251,251,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,249,249,63,223,262,262,262,262,262,262,65,223,76,223,258,258',
'258,258,258,258,81,262,262,262,262,262,223,85,223,223,88,231,231,231',
'223,223,223,223,231,231,278,278,231,231,231,231,89,231,279,279,281,281',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,282,282,90,231,263,263,263,263,263,263,92,231,106',
'231,287,287,304,304,315,315,108,263,263,263,263,263,231,129,231,231',
'131,298,298,298,231,231,231,231,298,298,317,317,298,298,298,298,138',
'298,139,144,145,151,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,154,155,158,298,264,264,264',
'264,264,264,165,298,166,298,167,196,198,201,207,214,217,264,264,264',
'264,264,298,224,298,298,225,314,314,314,298,298,298,298,314,314,233',
'238,314,314,314,314,241,314,242,243,252,253,314,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,254',
'255,276,314,136,136,277,94,94,94,280,314,283,314,256,256,256,256,256',
'256,136,285,295,305,136,136,314,313,314,314,,,256,256,314,314,314,314',
'94,,,,94,,,,95,95,95,,94,,94,136,,,136,98,98,98,,,,,,94,,94,94,,,,,94',
'94,94,94,95,,,,95,,,,97,97,97,98,95,,95,98,,,,,,,,98,,98,,95,,95,95',
',,,,95,95,95,95,97,98,98,,97,,,98,98,98,98,,97,,97,99,99,99,,,,,,,,',
',97,,97,97,,,,,97,97,97,97,230,,,,120,120,120,99,,,,99,230,230,230,230',
'230,230,,99,,99,,121,121,121,,,,230,230,230,230,230,99,120,99,99,,120',
',,99,99,99,99,,120,,120,,122,122,122,121,,,,121,,,,120,,120,120,121',
',121,,120,120,120,120,,,,,123,123,123,121,122,121,121,,122,,,121,121',
'121,121,,122,,122,124,124,124,,,,,,,,,,123,,122,122,123,,,,122,122,122',
'122,123,,123,149,149,149,,124,,,,124,,,,,,123,123,124,,124,,123,123',
'123,123,,,,,160,160,160,149,,124,124,149,,,,124,124,124,124,149,,149',
',162,162,162,,,,,,,,,149,160,149,149,,160,,,149,149,149,149,,160,,160',
',163,163,163,162,,,,162,,,,,,160,160,162,,162,,160,160,160,160,,,,,',
',,162,163,162,162,,163,,,162,162,162,162,,163,,163,164,164,164,,,,,',
',,,,163,,163,163,,,,,163,163,163,163,,,,,170,170,170,164,,,,164,265',
'265,265,265,265,265,,164,,164,,172,172,172,,,,265,265,265,265,265,164',
'170,164,164,,170,,,164,164,164,164,,170,,170,,173,173,173,172,,,,172',
',,,170,,170,170,172,,172,,170,170,170,170,,,,,,,,172,173,172,172,,173',
',,172,172,172,172,,173,,173,174,174,174,,,,,,,,,,173,,173,173,,,,,173',
'173,173,173,,,,,175,175,175,174,,,,174,,,,177,177,177,,174,,174,,,,',
',,,,,,,,174,175,174,174,,175,,,174,174,174,174,177,175,,175,177,,,,178',
'178,178,,177,,177,,175,,175,175,,179,179,179,175,175,175,175,,177,177',
',,,,177,177,177,177,178,,,,178,,,,,180,180,180,178,179,178,,,179,,,',
',181,181,181,179,,179,,178,178,,,,,178,178,178,178,,180,,179,179,180',
',,,179,179,179,179,180,181,180,,,181,,,,182,182,182,,181,,181,,180,180',
',183,183,183,180,180,180,180,,,,181,181,,,,,181,181,181,181,182,,,,182',
',,,184,184,184,183,182,,182,183,,,,185,185,185,,183,,183,,,,182,182',
',,,,182,182,182,182,184,183,183,,184,,,183,183,183,183,185,184,,184',
'185,,,,186,186,186,,185,,185,,,,184,184,,187,187,187,184,184,184,184',
',185,185,,,,,185,185,185,185,186,,,,186,,,,,188,188,188,186,187,186',
',,187,,,,,189,189,189,187,,187,,186,186,,,,,186,186,186,186,,188,,187',
'187,188,,,,187,187,187,187,188,189,188,,,189,,,,190,190,190,,189,,189',
',188,188,,191,191,191,188,188,188,188,,,,189,189,,,,,189,189,189,189',
'190,,,,190,,,,192,192,192,191,190,,190,191,,,,193,193,193,,191,,191',
',,,190,190,,,,,190,190,190,190,192,191,191,,192,,,191,191,191,191,193',
'192,,192,193,,,,219,219,219,,193,,193,,,,192,192,,,,,192,192,192,192',
',193,193,,,,,193,193,193,193,219,,,,219,,,,239,239,239,,219,,219,259',
'259,259,259,259,259,,,,,,,219,,219,219,,259,259,259,219,219,219,219',
'239,,239,,239,,,,288,288,288,,239,,239,,,,,300,300,300,,,,,,239,,239',
'239,,,,,239,239,239,239,288,,,,288,,,,297,297,297,300,288,,288,300,',
',,301,301,301,,300,,300,,288,,288,288,,,,,288,288,288,288,297,300,300',
',297,,,300,300,300,300,301,297,,297,301,,,,312,312,312,,301,,301,,297',
',297,297,,,,,297,297,297,297,,301,301,,,,,301,301,301,301,312,,,,312',
'266,266,266,266,266,266,,312,,312,,,137,,,,,266,266,266,266,266,312',
',312,312,,137,,137,312,312,312,312,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,137,195,,,,,137,,,137,,',
',195,195,195,195,195,195,,195,195,195,195,195,,,,,,195,195,195,195,195',
',,,,,,195,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,,,,,,143,,,143,118,118,118,118,118,118,,118',
'118,118,118,118,,,,,,118,118,118,118,118,69,,69,,,,118,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,212,,,,,,,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,',
',,,72,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75',
',,,,75,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,,,,,202,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,,,,,205,159,159,159,159',
'159,159,,,159,159,159,159,,,,,,159,159,159,159,159,309,309,309,309,309',
'309,310,310,310,310,310,310,,,,,,309,309,309,309,309,,310,310,310,310',
'310,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,260,260',
'260,260,260,260,,,,,,,,,,,,260,260,260' ]
        racc_action_check = arr = ::Array.new(2145, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   189,     9,     6,   nil,   nil,    80,   nil,   nil,   nil,   nil,
    -1,     9,    41,   nil,   nil,    97,  2058,   144,   nil,    71,
   nil,   nil,   nil,   145,   125,   187,   204,   171,   181,   217,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   214,   nil,   nil,   nil,   nil,   226,   235,   241,   244,
   265,    66,   nil,   295,   nil,   288,   191,   nil,   nil,  1855,
  2079,    -4,  1904,   nil,   nil,  1930,   300,   nil,    82,    84,
   nil,   309,   nil,   nil,   -35,   363,   146,   nil,   308,   335,
   412,   152,   417,   nil,   553,   592,   nil,   631,   603,   677,
   nil,   nil,   nil,   nil,   -13,    63,   364,     5,   368,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1792,   nil,
   705,   724,   752,   779,   798,   nil,   nil,     3,   nil,   390,
   nil,   393,   nil,   nil,    77,    70,   563,  1734,   413,   396,
   nil,   nil,   nil,  1796,   401,   449,   nil,   nil,   144,   825,
    86,   408,   nil,   -28,   441,   436,    94,    -6,   475,  1974,
   853,   -10,   872,   900,   946,   447,   447,   436,   nil,     2,
   974,   nil,   993,  1021,  1067,  1095,   nil,  1106,  1145,  1158,
  1185,  1198,  1237,  1248,  1276,  1287,  1326,  1339,  1366,  1379,
  1418,  1429,  1457,  1468,   nil,  1733,   455,   -28,   440,   nil,
   nil,   453,  1956,   nil,   nil,  1982,   nil,   502,   nil,   nil,
   nil,   nil,  1883,   nil,   454,   nil,   nil,   501,   144,  1507,
   218,   nil,   nil,   292,   464,   467,   nil,   nil,   nil,   nil,
   669,   366,   nil,   456,   160,    69,   nil,   nil,   467,  1546,
   nil,   472,   489,   488,   nil,   194,    80,    69,   234,   268,
   178,   252,   474,   475,   498,   499,   516,   220,   294,  1509,
  2066,   210,   284,   358,   432,   938,  1666,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   513,   506,   308,   380,
   568,   322,   344,   570,   nil,   517,   nil,   356,  1585,   -44,
   nil,   nil,   nil,   nil,   nil,   580,   nil,  1624,   440,   nil,
  1596,  1635,   nil,   156,   358,   537,   nil,    -4,   nil,  1996,
  2002,   nil,  1674,   542,   514,   360,   nil,   446,   nil ]

racc_action_default = [
    -6,  -189,  -182,    -2,    -4,  -189,    -7,    -9,   -10,   -11,
  -189,  -189,  -189,   -35,   -36,   -39,  -189,  -189,    -1,  -183,
  -184,  -186,  -187,    -5,   -13,  -189,  -189,  -189,  -189,  -189,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,   -92,   319,    -3,  -185,    -8,  -189,  -189,  -189,  -189,
  -112,  -111,   -40,   -33,   -93,  -181,    -6,  -188,   -14,  -189,
   -60,   -42,  -189,  -109,  -110,   -30,  -189,   -94,  -189,  -189,
   -16,  -189,   -19,   -20,  -189,  -189,  -189,   -61,   -92,  -189,
  -189,  -182,   -43,   -45,  -189,  -156,   -48,  -189,  -189,  -189,
   -53,   -54,   -55,   -56,   -57,  -139,   -92,  -154,  -147,  -154,
  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,  -118,  -119,
  -189,  -189,  -189,  -189,  -189,  -148,  -150,  -189,  -114,  -189,
  -117,   -27,   -29,   -31,  -189,   -42,  -189,  -189,   -33,  -189,
   -23,   -24,   -21,   -59,   -92,   -58,   -37,   -41,  -183,  -189,
   -46,  -139,  -147,  -154,  -154,   -47,  -157,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -189,  -189,   -79,   -82,   -83,  -189,
  -189,  -149,  -156,  -189,  -189,  -189,  -151,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -122,  -118,  -119,  -189,  -135,  -136,
  -137,  -189,  -189,  -116,   -28,  -189,   -34,  -189,   -12,   -15,
   -17,   -18,  -189,   -62,   -63,   -64,   -93,   -44,   -50,  -189,
   -42,   -73,   -74,   -42,  -189,  -189,   -69,   -70,   -71,   -72,
  -189,   -42,  -120,  -121,   -66,  -111,  -152,  -153,   -92,  -189,
   -84,   -92,   -33,   -87,   -88,   -98,  -189,  -189,   -99,  -100,
  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,
  -134,  -140,  -141,  -142,  -143,  -144,  -145,  -138,  -146,  -123,
  -113,  -115,   -32,   -38,   -22,   -25,  -189,   -92,  -158,   -75,
  -189,  -189,  -189,  -189,   -80,   -81,   -89,   -90,   -95,  -189,
   -86,  -155,  -159,   -26,   -65,  -189,   -76,  -189,   -42,   -51,
  -189,  -189,   -52,  -189,   -96,  -189,   -49,  -189,   -78,   -67,
   -68,   -91,  -189,   -33,   -42,   -97,   -85,   -75,   -77 ]

racc_goto_table = [
    76,    90,   105,   108,    51,    65,   220,   167,   109,    60,
   168,   133,   225,   150,   156,    29,   157,   242,   161,   128,
    55,   224,    87,   295,   159,   176,    66,     1,    69,    70,
    80,    18,     2,     9,     3,    78,    56,    79,    85,   194,
   197,   139,   144,   274,   134,   215,   135,   195,   198,   199,
   200,   155,     9,    53,    83,    27,     9,    51,    88,    71,
    51,   318,   217,    51,   158,   207,   105,   108,   218,    86,
   176,   129,   109,   214,   131,   211,   166,   240,   286,   105,
   108,   232,   233,   234,   303,   109,   230,   127,   196,   245,
   nil,   156,   247,   248,   249,   213,    54,   237,   210,     9,
    54,   244,    82,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
   147,    19,    83,   nil,    23,    51,   nil,   nil,   246,   nil,
   nil,    88,   nil,    55,   nil,   301,   nil,   305,   278,   285,
   nil,   272,   284,   300,   nil,   nil,   nil,   236,   nil,   271,
   279,   105,   108,   280,   105,   108,   314,   109,   287,   nil,
   109,   283,   105,   108,   nil,   nil,   nil,   nil,   109,     9,
    82,   270,   nil,   nil,   nil,   nil,   nil,   nil,   294,   290,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    51,   nil,   nil,    51,   nil,   289,   nil,   136,   137,   nil,
   275,   129,   nil,   nil,   131,   143,   nil,   304,   nil,   nil,
   148,   nil,   nil,    54,    54,   nil,   307,   nil,   nil,   nil,
    54,   244,   nil,   nil,   nil,    54,   309,   310,   308,   105,
   108,   315,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   317,   105,   108,   nil,   nil,   nil,
   316,   109 ]

racc_goto_check = [
    17,    30,    47,    56,    22,    44,    37,    46,    59,    28,
    53,    23,    50,    34,    34,    16,    34,    55,    34,    62,
     8,    49,    43,    38,    48,    64,    13,     1,    13,    13,
    15,     3,     2,    11,     4,     7,    12,    14,    19,    34,
    34,    20,    44,    21,    24,    46,    13,    48,    48,    48,
    48,    35,    11,     4,    18,    27,    11,    22,    22,    29,
    22,    38,    32,    22,    39,    30,    47,    56,    34,    42,
    64,    16,    59,    45,    16,    17,    52,    54,    57,    47,
    56,    34,    34,    34,    58,    59,    48,    61,    63,    34,
   nil,    34,    34,    34,    34,    43,    66,    56,    15,    11,
    66,    56,    11,    48,    48,    48,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    48,    48,    48,
     3,     5,    18,   nil,     5,    22,   nil,   nil,    35,   nil,
   nil,    22,   nil,     8,   nil,    50,   nil,    55,    34,    46,
   nil,    23,    53,    49,   nil,   nil,   nil,    28,   nil,    62,
    30,    47,    56,    30,    47,    56,    37,    59,    34,   nil,
    59,    30,    47,    56,   nil,   nil,   nil,   nil,    59,    11,
    11,    13,   nil,   nil,   nil,   nil,   nil,   nil,    46,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,    22,   nil,    44,   nil,     5,     5,   nil,
    22,    16,   nil,   nil,    16,     5,   nil,    34,   nil,   nil,
     5,   nil,   nil,    66,    66,   nil,    34,   nil,   nil,   nil,
    66,    56,   nil,   nil,   nil,    66,    48,    48,    30,    47,
    56,    34,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    30,    47,    56,   nil,   nil,   nil,
    17,    59 ]

racc_goto_pointer = [
   nil,    27,    32,    29,    34,   119,   nil,   -31,    -3,   nil,
   nil,    33,    12,   -30,   -32,   -39,    -1,   -63,   -15,   -32,
   -43,  -169,   -12,   -64,   -31,   nil,   nil,    40,   -18,    -1,
   -70,   nil,   -86,   nil,   -81,   -44,   nil,  -151,  -256,   -34,
   nil,   nil,    -1,   -48,   -46,   -71,   -99,   -69,   -74,  -138,
  -147,   nil,   -30,   -96,   -92,  -152,   -68,  -161,  -204,   -63,
   nil,    15,   -53,   -33,   -84,   nil,    77 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   101,   nil,   222,   nil,   nil,    81,   nil,   103,   nil,
   nil,   nil,   106,   nil,   nil,    13,    14,   nil,   nil,   nil,
   nil,    91,    92,    93,   104,   nil,    96,   nil,   nil,   nil,
   100,   102,   nil,   nil,   169,   nil,   nil,   151,   118,   nil,
   nil,   296,   nil,   nil,   nil,   nil,   152,   nil,   nil,   154,
   125,   nil,   nil,   119,   171,   126,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 90, :_reduce_2,
  3, 90, :_reduce_3,
  1, 92, :_reduce_4,
  2, 92, :_reduce_5,
  0, 95, :_reduce_6,
  1, 95, :_reduce_7,
  3, 95, :_reduce_8,
  1, 96, :_reduce_9,
  1, 96, :_reduce_10,
  1, 96, :_reduce_11,
  7, 98, :_reduce_12,
  0, 100, :_reduce_13,
  2, 100, :_reduce_14,
  7, 94, :_reduce_15,
  1, 102, :_reduce_16,
  3, 102, :_reduce_17,
  3, 103, :_reduce_18,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  6, 99, :_reduce_21,
  4, 106, :_reduce_22,
  1, 108, :_reduce_none,
  1, 108, :_reduce_24,
  1, 109, :_reduce_none,
  2, 109, :_reduce_26,
  1, 111, :_reduce_27,
  2, 111, :_reduce_28,
  1, 111, :_reduce_29,
  0, 112, :_reduce_30,
  1, 112, :_reduce_31,
  3, 112, :_reduce_32,
  0, 105, :_reduce_33,
  3, 105, :_reduce_34,
  1, 97, :_reduce_35,
  1, 97, :_reduce_36,
  6, 113, :_reduce_37,
  7, 114, :_reduce_38,
  0, 115, :_reduce_39,
  2, 115, :_reduce_40,
  2, 118, :_reduce_41,
  0, 119, :_reduce_42,
  1, 119, :_reduce_43,
  3, 119, :_reduce_44,
  1, 120, :_reduce_45,
  2, 120, :_reduce_46,
  2, 120, :_reduce_47,
  1, 120, :_reduce_48,
  6, 120, :_reduce_49,
  3, 120, :_reduce_50,
  5, 120, :_reduce_51,
  5, 120, :_reduce_52,
  1, 120, :_reduce_53,
  1, 120, :_reduce_none,
  1, 120, :_reduce_55,
  1, 120, :_reduce_none,
  1, 120, :_reduce_57,
  2, 129, :_reduce_58,
  2, 107, :_reduce_59,
  0, 130, :_reduce_60,
  1, 130, :_reduce_61,
  3, 130, :_reduce_62,
  3, 131, :_reduce_63,
  1, 133, :_reduce_64,
  3, 133, :_reduce_65,
  3, 128, :_reduce_66,
  5, 127, :_reduce_67,
  5, 127, :_reduce_68,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  0, 126, :_reduce_75,
  1, 126, :_reduce_76,
  5, 126, :_reduce_77,
  2, 139, :_reduce_78,
  2, 121, :_reduce_none,
  3, 140, :_reduce_80,
  3, 140, :_reduce_81,
  1, 140, :_reduce_82,
  1, 140, :_reduce_83,
  2, 134, :_reduce_none,
  5, 142, :_reduce_85,
  2, 142, :_reduce_86,
  1, 143, :_reduce_87,
  1, 143, :_reduce_88,
  3, 141, :_reduce_none,
  1, 145, :_reduce_90,
  3, 145, :_reduce_91,
  0, 132, :_reduce_92,
  1, 132, :_reduce_93,
  2, 132, :_reduce_94,
  0, 146, :_reduce_95,
  1, 146, :_reduce_96,
  3, 146, :_reduce_97,
  3, 124, :_reduce_98,
  3, 124, :_reduce_99,
  3, 124, :_reduce_100,
  1, 148, :_reduce_101,
  1, 148, :_reduce_102,
  1, 148, :_reduce_103,
  1, 148, :_reduce_104,
  1, 148, :_reduce_105,
  1, 148, :_reduce_106,
  1, 148, :_reduce_107,
  1, 148, :_reduce_108,
  2, 116, :_reduce_109,
  2, 116, :_reduce_110,
  1, 116, :_reduce_111,
  0, 117, :_reduce_112,
  4, 117, :_reduce_113,
  1, 149, :_reduce_114,
  3, 149, :_reduce_115,
  2, 150, :_reduce_116,
  1, 150, :_reduce_117,
  1, 122, :_reduce_118,
  1, 122, :_reduce_119,
  3, 122, :_reduce_120,
  3, 122, :_reduce_121,
  2, 122, :_reduce_122,
  3, 122, :_reduce_123,
  3, 136, :_reduce_124,
  3, 136, :_reduce_125,
  3, 136, :_reduce_126,
  3, 136, :_reduce_127,
  3, 136, :_reduce_128,
  3, 136, :_reduce_129,
  3, 136, :_reduce_130,
  3, 136, :_reduce_131,
  3, 136, :_reduce_132,
  3, 136, :_reduce_133,
  3, 136, :_reduce_134,
  2, 136, :_reduce_135,
  2, 136, :_reduce_136,
  2, 136, :_reduce_137,
  3, 136, :_reduce_138,
  1, 136, :_reduce_139,
  3, 151, :_reduce_140,
  3, 151, :_reduce_141,
  3, 151, :_reduce_142,
  3, 151, :_reduce_143,
  3, 151, :_reduce_144,
  3, 151, :_reduce_145,
  3, 151, :_reduce_146,
  1, 135, :_reduce_147,
  1, 135, :_reduce_148,
  2, 135, :_reduce_149,
  1, 135, :_reduce_none,
  2, 153, :_reduce_151,
  3, 147, :_reduce_152,
  3, 147, :_reduce_153,
  0, 152, :_reduce_154,
  3, 152, :_reduce_155,
  0, 123, :_reduce_156,
  1, 123, :_reduce_157,
  3, 123, :_reduce_158,
  4, 144, :_reduce_159,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_180,
  2, 104, :_reduce_181,
  0, 91, :_reduce_182,
  1, 91, :_reduce_183,
  1, 93, :_reduce_184,
  2, 93, :_reduce_185,
  1, 154, :_reduce_186,
  1, 154, :_reduce_none,
  1, 101, :_reduce_188 ]

racc_reduce_n = 189

racc_shift_n = 319

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :kDTYPE_VOID => 44,
  :tCUSTOM_DTYPE => 45,
  :tLPAREN => 46,
  :tRPAREN => 47,
  :tLSQUARE => 48,
  :tRSQUARE => 49,
  :tIDENTIFIER => 50,
  :tNL => 51,
  :tCOMMA => 52,
  :tSQUOTE => 53,
  :tSCOLON => 54,
  :EOF => 55,
  :tDOT => 56,
  :tQMARK => 57,
  :tSYMBOL => 58,
  :tPLUS => 59,
  :tMINUS => 60,
  :tSTAR => 61,
  :tDIVIDE => 62,
  :tEXPO => 63,
  :tMODULUS => 64,
  :tASSIGN => 65,
  :tEQ => 66,
  :tLT => 67,
  :tLTEQ => 68,
  :tGT => 69,
  :tGTEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tBANG => 73,
  :tOP_ASSIGN => 74,
  :tSTRING => 75,
  :tBIT_AND => 76,
  :tBIT_OR => 77,
  :tBIT_XOR => 78,
  :tBIT_LSHIFT => 79,
  :tBIT_RSHIFT => 80,
  :tBIT_NOT => 81,
  :tINTEGER => 82,
  :tFLOAT => 83,
  :tSINGLE_CHAR => 84,
  :ADDRESS_OF => 85,
  :UMINUS => 86,
  :tNEQ => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "alias_stmt",
  "var_decl_stmts",
  "ident_or_custom_dtype",
  "aliased_type",
  "dtype",
  "c_func_normal_arg",
  "c_func_args",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "aa_actual_normal_decl",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_18(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2]
      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_22(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_26(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = CBaseType.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_28(val, _values, result)
     result = CBaseType.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_29(val, _values, result)
     result = CBaseType.new('object', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_32(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_34(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_37(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_38(val, _values, result)
            result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_39(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_40(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_42(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_43(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_44(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_45(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_46(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_47(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_48(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_49(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_50(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_51(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_52(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_57(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_58(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_59(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_60(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_62(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_63(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_65(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_66(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_67(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_68(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_75(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_76(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_77(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_78(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_80(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_81(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_82(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_83(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_85(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_86(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_87(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_88(val, _values, result)
      
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_90(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_91(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_92(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_93(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_94(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_96(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_97(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_98(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_100(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_109(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_110(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_111(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_112(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_113(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_114(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_115(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_116(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_117(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_118(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_122(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_135(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_136(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_139(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_149(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_151(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_152(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_153(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_154(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_157(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_158(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_159(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.racc', 439)
  def _reduce_180(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_181(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_182(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_188(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
