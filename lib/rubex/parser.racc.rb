#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 467)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'94,95,97,212,222,212,206,98,99,229,137,114,115,116,89,136,84,76,158',
'159,76,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'123,15,74,67,107,67,165,17,166,165,194,24,117,25,120,195,164,12,75,158',
'159,10,16,158,159,158,159,124,168,113,121,15,94,95,97,122,110,111,112',
'98,99,158,159,114,115,116,89,12,84,26,11,10,16,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,123,166,278,165,107,166,21',
'158,159,22,74,166,117,164,120,277,279,158,159,164,210,280,162,28,158',
'159,75,124,162,113,121,15,94,95,97,122,110,111,112,98,99,158,159,114',
'115,116,89,12,84,158,159,10,16,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,123,15,158,159,107,21,21,21,22,22,22,52,117',
'21,120,21,22,12,22,57,11,10,16,21,58,21,22,124,22,113,121,59,94,95,97',
'122,110,111,112,98,99,158,159,114,115,116,89,21,84,304,22,61,305,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,123,158',
'159,62,107,170,171,172,173,174,175,64,117,65,120,170,171,172,173,174',
'175,67,176,177,178,179,180,124,68,113,121,67,94,95,97,122,110,111,112',
'98,99,286,287,114,115,116,89,67,84,172,173,174,175,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,123,217,218,73,107,170',
'171,172,173,174,175,76,117,73,120,170,171,172,173,174,175,134,176,177',
'178,179,180,124,138,113,121,64,94,95,97,122,110,111,112,98,99,219,220',
'114,115,116,89,141,84,172,173,174,175,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,123,158,159,142,107,170,171,172,173',
'174,175,145,117,160,120,286,287,158,159,64,167,196,176,177,178,179,180',
'124,197,113,121,201,94,95,97,122,110,111,112,98,99,202,59,114,115,116',
'89,165,84,210,214,234,174,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,123,259,67,268,107,170,171,172,173,174,175,166',
'117,145,120,272,273,158,275,276,168,174,176,177,178,179,180,124,174',
'113,121,174,94,95,97,122,110,111,112,98,99,174,281,114,115,116,89,282',
'84,206,288,291,229,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,123,296,,,107,15,198,,114,115,116,,117,,120,170,171,172',
'173,174,175,12,,,,10,16,124,,113,121,,,177,178,122,110,111,112,123,',
',,149,,,,114,115,116,,117,,120,21,,,22,114,115,116,,,,,,124,,113,121',
',,,,122,110,111,112,123,,,,149,,,,114,115,116,156,117,,120,149,,,,,',
',,117,,120,,124,,113,121,,,,,122,110,111,112,123,113,121,,149,,,122',
'110,111,112,,117,,120,114,115,116,,,,,,,,,,124,,113,121,,,,,122,110',
'111,112,,,,,114,115,116,123,,,,149,,,,114,115,116,,117,,120,,,,,,,,',
',,,,124,156,113,121,,149,,,122,110,111,112,156,117,,120,149,,,,114,115',
'116,,117,,120,,,,113,121,,114,115,116,122,110,111,112,,113,121,,,,,122',
'110,111,112,156,,,,149,,,,,,,,117,123,120,,,149,,,,114,115,116,,117',
',120,,113,121,,114,115,116,122,110,111,112,,124,,113,121,,,,,122,110',
'111,112,123,,,,149,,,,114,115,116,156,117,,120,149,,,,,,,,117,,120,',
'124,,113,121,,,,,122,110,111,112,123,113,121,,149,,,122,110,111,112',
',117,,120,114,115,116,,,,,,,,,,124,,113,121,,,,,122,110,111,112,258',
',,,114,115,116,123,,,,149,170,171,172,173,174,175,,117,,120,,114,115',
'116,,,,176,177,178,179,180,124,123,113,121,,149,,,122,110,111,112,,117',
',120,,114,115,116,123,,,,149,,,,124,,113,121,117,,120,,122,110,111,112',
',,,,,,,124,123,113,121,,149,,,122,110,111,112,,117,,120,114,115,116',
',,,,,,,,,124,,113,121,,,,,122,110,111,112,,,,,114,115,116,123,,,,149',
'170,171,172,173,174,175,,117,,120,,114,115,116,,,,176,177,178,179,180',
'124,123,113,121,,149,,,122,110,111,112,,117,,120,,114,115,116,123,,',
',149,,,,124,,113,121,117,,120,,122,110,111,112,,,,,,,,124,123,113,121',
',149,,,122,110,111,112,,117,,120,114,115,116,,,,,,,,,,124,,113,121,',
',,,122,110,111,112,,,,114,115,116,,156,,,,149,,,,,114,115,116,117,,120',
'170,171,172,173,174,175,,,,,,,156,,113,121,149,176,177,178,122,110,111',
'112,117,156,120,,,149,,,,114,115,116,,117,,120,,113,121,,114,115,116',
'122,110,111,112,,,,113,121,,,,,122,110,111,112,156,,,,149,,,,114,115',
'116,156,117,,120,149,,,,114,115,116,,117,,120,,,,113,121,,,,,122,110',
'111,112,156,113,121,,149,,,122,110,111,112,156,117,,120,149,,,,114,115',
'116,,117,,120,,,,113,121,,114,115,116,122,110,111,112,,113,121,,,,,122',
'110,111,112,156,,,,149,,,,,114,115,116,117,156,120,,,149,,,,,114,115',
'116,117,,120,,113,121,,,,,122,110,111,112,,156,,113,121,149,,,,122,110',
'111,112,117,156,120,,,149,,,,114,115,116,,117,,120,,113,121,,114,115',
'116,122,110,111,112,,,,113,121,,,,,122,110,111,112,156,,,,149,,,,114',
'115,116,156,117,,120,149,,,,114,115,116,,117,,120,,,,113,121,,,,,122',
'110,111,112,156,113,121,,149,,,122,110,111,112,156,117,,120,149,,,,114',
'115,116,,117,,120,,,,113,121,,114,115,116,122,110,111,112,,113,121,',
',,,122,110,111,112,156,,,,149,,,,,114,115,116,117,156,120,,,149,,,,',
',,,117,,120,,113,121,,,,,122,110,111,112,,123,,113,121,149,,,,122,110',
'111,112,117,,120,114,115,116,,,,,,,,,,124,,113,121,,,,,122,110,111,112',
',,,,114,115,116,123,,294,,149,,,,114,115,116,,117,,120,,,,,,,,,,,,,124',
'123,113,121,,149,,,122,110,111,112,156,117,,120,149,,,,114,115,116,',
'117,,120,,124,,113,121,,114,115,116,122,110,111,112,,113,121,,,,,122',
'110,111,112,156,,,,149,,,,,,,,117,123,120,,,149,,,,114,115,116,,117',
',120,,113,121,,,,,122,110,111,112,,124,,113,121,,,,,122,110,111,112',
'123,,,,149,170,171,172,173,174,175,,117,,120,,,199,,,,,176,177,178,179',
'180,124,,113,121,,12,,84,122,110,111,112,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,258,,,,,21,,,22,,,,170,171,172,173',
'174,175,,181,183,184,185,186,,,,,,176,177,178,179,180,,,,,,,182,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,,,,,,21,,,22',
'170,171,172,173,174,175,,181,183,184,185,186,,,,,,176,177,178,179,180',
'170,171,172,173,174,175,182,181,183,184,185,186,,,,,,176,177,178,179',
'180,12,,84,,,,182,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,267,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,,,,,130,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,,,,,130,170,171,172,173,174,175,,,217,218,219,220,,,,,,176',
'177,178,179,180,170,171,172,173,174,175,170,171,172,173,174,175,,,,',
',176,177,178,179,180,,176,177,178,179,180,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,170,171,172,173,174,175,,,,,,,,,,,,176,177,178' ]
        racc_action_table = arr = ::Array.new(2182, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,71,71,153,157,297,140,71,71,161,84,71,71,71,71,84,71,140,104,104',
'161,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'66,61,153,71,297,149,1,149,109,127,10,71,11,71,127,149,66,61,157,157',
'66,66,153,153,297,297,71,109,71,71,19,77,77,77,71,71,71,71,77,77,146',
'146,77,77,77,77,19,77,12,19,19,19,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,77,77,234,238,107,77,107,19,152,152,19,234,229',
'77,107,77,237,262,209,209,229,237,262,107,15,238,238,234,77,229,77,77',
'23,144,144,144,77,77,77,77,144,144,225,225,144,144,144,144,23,144,233',
'233,23,23,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144',
'144,144,144,144,144,144,144,0,239,239,144,144,23,2,144,23,2,17,144,5',
'144,78,5,0,78,24,0,0,0,79,25,86,79,144,86,144,144,26,211,211,211,144',
'144,144,144,211,211,240,240,211,211,211,211,91,211,301,91,27,301,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,269,269,28,211,252,252,252,252,252,252,29,211,30,211',
'248,248,248,248,248,248,56,252,252,252,252,252,211,57,211,211,58,214',
'214,214,211,211,211,211,214,214,270,270,214,214,214,214,59,214,241,241',
'241,241,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,272,272,60,214,253,253,253,253,253,253,63',
'214,65,214,249,249,249,249,249,249,81,253,253,253,253,253,214,85,214',
'214,88,222,222,222,214,214,214,214,222,222,273,273,222,222,222,222,89',
'222,242,242,242,242,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,302,302,90,222,254,254,254,254',
'254,254,92,222,105,222,306,306,307,307,106,108,129,254,254,254,254,254',
'222,131,222,222,134,287,287,287,222,222,222,222,287,287,135,141,287',
'287,287,287,150,287,151,154,164,187,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,191,194,204',
'287,255,255,255,255,255,255,206,287,208,287,215,216,224,226,230,232',
'243,255,255,255,255,255,287,244,287,287,245,303,303,303,287,287,287',
'287,303,303,246,263,303,303,303,303,267,303,268,271,274,275,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,284,,,303,132,132,,94,94,94,,303,,303,247,247,247,247,247',
'247,132,,,,132,132,303,,303,303,,,247,247,303,303,303,303,94,,,,94,',
',,95,95,95,,94,,94,132,,,132,98,98,98,,,,,,94,,94,94,,,,,94,94,94,94',
'95,,,,95,,,,97,97,97,98,95,,95,98,,,,,,,,98,,98,,95,,95,95,,,,,95,95',
'95,95,97,98,98,,97,,,98,98,98,98,,97,,97,99,99,99,,,,,,,,,,97,,97,97',
',,,,97,97,97,97,,,,,120,120,120,99,,,,99,,,,121,121,121,,99,,99,,,,',
',,,,,,,,99,120,99,99,,120,,,99,99,99,99,121,120,,120,121,,,,122,122',
'122,,121,,121,,,,120,120,,123,123,123,120,120,120,120,,121,121,,,,,121',
'121,121,121,122,,,,122,,,,,,,,122,123,122,,,123,,,,124,124,124,,123',
',123,,122,122,,156,156,156,122,122,122,122,,123,,123,123,,,,,123,123',
'123,123,124,,,,124,,,,145,145,145,156,124,,124,156,,,,,,,,156,,156,',
'124,,124,124,,,,,124,124,124,124,145,156,156,,145,,,156,156,156,156',
',145,,145,158,158,158,,,,,,,,,,145,,145,145,,,,,145,145,145,145,221',
',,,159,159,159,158,,,,158,221,221,221,221,221,221,,158,,158,,160,160',
'160,,,,221,221,221,221,221,158,159,158,158,,159,,,158,158,158,158,,159',
',159,,162,162,162,160,,,,160,,,,159,,159,159,160,,160,,159,159,159,159',
',,,,,,,160,162,160,160,,162,,,160,160,160,160,,162,,162,165,165,165',
',,,,,,,,,162,,162,162,,,,,162,162,162,162,,,,,166,166,166,165,,,,165',
'256,256,256,256,256,256,,165,,165,,167,167,167,,,,256,256,256,256,256',
'165,166,165,165,,166,,,165,165,165,165,,166,,166,,168,168,168,167,,',
',167,,,,166,,166,166,167,,167,,166,166,166,166,,,,,,,,167,168,167,167',
',168,,,167,167,167,167,,168,,168,170,170,170,,,,,,,,,,168,,168,168,',
',,,168,168,168,168,,,,171,171,171,,170,,,,170,,,,,172,172,172,170,,170',
'250,250,250,250,250,250,,,,,,,171,,170,170,171,250,250,250,170,170,170',
'170,171,172,171,,,172,,,,173,173,173,,172,,172,,171,171,,174,174,174',
'171,171,171,171,,,,172,172,,,,,172,172,172,172,173,,,,173,,,,175,175',
'175,174,173,,173,174,,,,176,176,176,,174,,174,,,,173,173,,,,,173,173',
'173,173,175,174,174,,175,,,174,174,174,174,176,175,,175,176,,,,177,177',
'177,,176,,176,,,,175,175,,178,178,178,175,175,175,175,,176,176,,,,,176',
'176,176,176,177,,,,177,,,,,179,179,179,177,178,177,,,178,,,,,180,180',
'180,178,,178,,177,177,,,,,177,177,177,177,,179,,178,178,179,,,,178,178',
'178,178,179,180,179,,,180,,,,181,181,181,,180,,180,,179,179,,182,182',
'182,179,179,179,179,,,,180,180,,,,,180,180,180,180,181,,,,181,,,,183',
'183,183,182,181,,181,182,,,,184,184,184,,182,,182,,,,181,181,,,,,181',
'181,181,181,183,182,182,,183,,,182,182,182,182,184,183,,183,184,,,,185',
'185,185,,184,,184,,,,183,183,,186,186,186,183,183,183,183,,184,184,',
',,,184,184,184,184,185,,,,185,,,,,210,210,210,185,186,185,,,186,,,,',
',,,186,,186,,185,185,,,,,185,185,185,185,,210,,186,186,210,,,,186,186',
'186,186,210,,210,276,276,276,,,,,,,,,,210,,210,210,,,,,210,210,210,210',
',,,,286,286,286,276,,276,,276,,,,289,289,289,,276,,276,,,,,,,,,,,,,276',
'286,276,276,,286,,,276,276,276,276,289,286,,286,289,,,,290,290,290,',
'289,,289,,286,,286,286,,294,294,294,286,286,286,286,,289,289,,,,,289',
'289,289,289,290,,,,290,,,,,,,,290,294,290,,,294,,,,305,305,305,,294',
',294,,290,290,,,,,290,290,290,290,,294,,294,294,,,,,294,294,294,294',
'305,,,,305,257,257,257,257,257,257,,305,,305,,,133,,,,,257,257,257,257',
'257,305,,305,305,,133,,133,305,305,305,305,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,190,,,,,133',
',,133,,,,190,190,190,190,190,190,,190,190,190,190,190,,,,,,190,190,190',
'190,190,,,,,,,190,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,,,,,,139,,,139,118,118,118,118,118,118',
',118,118,118,118,118,,,,,,118,118,118,118,118,192,192,192,192,192,192',
'118,192,192,192,192,192,,,,,,192,192,192,192,192,69,,69,,,,192,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,202,,,,,,,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,,,,,73,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,,,,,195,155,155,155,155,155,155,,,155,155',
'155,155,,,,,,155,155,155,155,155,299,299,299,299,299,299,300,300,300',
'300,300,300,,,,,,299,299,299,299,299,,300,300,300,300,300,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,251,251,251,251,251,251,,,,,,,,,,,,251,251,251' ]
        racc_action_check = arr = ::Array.new(2182, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   189,    49,   146,   nil,   nil,   152,   nil,   nil,   nil,   nil,
     3,   -20,    41,   nil,   nil,   115,  2053,   201,   nil,    71,
   nil,   nil,   nil,   145,   142,   200,   207,   191,   211,   214,
   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   242,   244,   260,
   295,   -13,   nil,   288,   nil,   305,    41,   nil,   nil,  1902,
  2074,    -4,   nil,  1951,   nil,   nil,   nil,    70,   154,   162,
   nil,   309,   nil,   nil,   -35,   363,   164,   nil,   308,   335,
   412,   186,   417,   nil,   553,   592,   nil,   631,   603,   677,
   nil,   nil,   nil,   nil,   -53,   351,   370,    73,   367,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1817,   nil,
   705,   716,   755,   768,   807,   nil,   nil,     5,   nil,   383,
   nil,   437,   563,  1759,   397,   388,   nil,   nil,   nil,  1821,
   -44,   440,   nil,   nil,   144,   846,    12,   nil,   nil,     2,
   413,   409,    52,    -6,   448,  1969,   818,   -10,   892,   920,
   939,   -41,   967,   nil,   413,  1013,  1041,  1060,  1088,   nil,
  1134,  1161,  1174,  1213,  1224,  1252,  1263,  1302,  1315,  1342,
  1355,  1394,  1405,  1433,  1444,  1483,  1496,   401,   nil,   nil,
  1758,   440,  1839,   nil,   437,  1977,   nil,   nil,   nil,   nil,
   nil,  2095,  1930,   nil,   437,   nil,   449,   nil,   493,    62,
  1523,   218,   nil,   nil,   292,   451,   452,   nil,   nil,   nil,
   nil,   884,   366,   nil,   432,    86,   452,   nil,   nil,    79,
   440,   nil,   441,    94,    69,   nil,   nil,    84,    69,   121,
   160,   252,   326,   444,   451,   454,   464,   516,   220,   294,
  1136,  2103,   210,   284,   358,   432,  1005,  1691,   nil,   nil,
   nil,   nil,    85,   478,   nil,   nil,   nil,   483,   485,   194,
   298,   533,   272,   310,   534,   488,  1569,   nil,   nil,   nil,
  2116,   nil,   nil,   nil,   558,   nil,  1597,   440,   nil,  1608,
  1647,   nil,   nil,   nil,  1660,   nil,   nil,    -4,   nil,  1991,
  1997,   190,   342,   514,   nil,  1699,   420,   358,   nil ]

racc_action_default = [
    -6,  -183,  -176,    -2,    -4,  -183,    -7,    -9,   -10,   -11,
  -183,  -183,  -183,   -33,   -34,   -36,  -183,  -183,    -1,  -177,
  -178,  -180,  -181,    -5,   -13,  -183,  -183,  -183,  -183,   -78,
  -183,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,
  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,
  -174,  -175,   309,    -3,  -179,    -8,  -183,  -183,  -183,  -183,
  -106,  -105,   -37,   -29,   -79,  -106,    -6,  -182,   -14,  -183,
   -58,   -40,  -107,  -183,  -103,  -104,   -80,   -40,  -183,  -183,
   -16,  -183,   -19,   -20,  -183,  -183,  -183,   -59,   -78,  -183,
  -183,  -176,   -41,   -43,  -183,  -151,   -46,  -183,  -183,  -183,
   -51,   -52,   -53,   -54,   -55,  -132,   -78,  -149,  -142,  -149,
   -95,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -113,  -114,
  -183,  -183,  -183,  -183,  -183,  -143,  -145,  -183,  -109,  -183,
  -112,  -183,  -183,  -183,  -183,  -183,   -23,   -24,   -21,   -57,
  -183,   -56,   -35,   -39,  -177,  -183,   -44,  -132,  -142,  -149,
  -149,   -45,  -152,  -183,  -183,  -183,  -183,  -183,  -183,  -183,
  -183,  -183,  -183,  -144,  -183,  -151,  -183,  -183,  -183,  -146,
  -183,  -183,  -183,  -183,  -183,  -183,  -183,  -183,  -183,  -183,
  -183,  -183,  -183,  -183,  -183,  -183,  -183,  -128,  -129,  -130,
  -183,  -183,  -140,  -141,  -183,  -183,  -111,   -38,   -12,   -15,
   -17,   -30,  -183,   -60,   -61,   -62,   -85,   -86,   -42,   -48,
  -183,   -40,   -71,   -72,   -40,  -183,  -183,   -67,   -68,   -69,
   -70,  -183,   -40,  -115,  -116,   -64,   -77,   -83,   -84,   -85,
   -86,   -87,  -183,   -92,  -105,  -147,  -148,  -183,  -183,   -93,
   -94,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -126,  -127,  -133,  -134,  -135,  -136,  -137,  -138,  -131,  -139,
  -108,  -110,  -183,   -27,   -31,   -22,   -25,  -183,  -183,  -153,
   -73,  -183,  -183,  -183,  -183,  -183,  -183,  -150,  -154,   -18,
  -183,   -28,   -26,   -63,  -183,   -74,  -183,   -40,   -49,  -183,
  -183,   -50,   -81,   -82,   -89,   -32,   -47,  -183,   -76,   -65,
   -66,  -183,   -90,   -40,   -88,  -183,   -73,   -91,   -75 ]

racc_goto_table = [
    30,    29,    90,   105,   108,   211,     9,   128,   131,   105,
   108,    60,   216,   231,   228,   146,   152,   109,   153,   215,
   157,    18,   264,   109,    66,     9,    69,    70,   205,     9,
   151,    55,    19,    87,    63,    23,     1,   169,   284,    80,
    83,     3,    71,   191,   193,     2,    78,    77,    56,   227,
    79,   262,    54,    85,    29,    88,    54,   135,   129,   265,
    53,    27,   208,   154,    86,   204,   209,   226,   301,   127,
   nil,   nil,     9,   207,   308,    82,   105,   108,   169,   223,
   224,   225,   nil,   233,   nil,   nil,   152,   238,   239,   240,
   109,   nil,   nil,   140,   230,   nil,   nil,   236,   nil,   nil,
   237,   295,   203,   200,    83,   nil,   nil,   232,   132,   133,
   143,   161,   nil,   nil,   nil,   nil,   139,   nil,    29,   nil,
   nil,   144,   nil,   nil,    88,   nil,   nil,   231,   292,   261,
   290,   269,   nil,   nil,   nil,   nil,   289,   nil,     9,    82,
    55,   nil,   270,   105,   108,   271,   105,   108,   235,   303,
   nil,   nil,   nil,   274,   105,   108,   283,   109,   nil,   nil,
   109,   nil,   260,   293,   nil,    54,    54,   nil,   109,   nil,
   nil,   nil,    54,   nil,   nil,   nil,   nil,    54,   nil,   nil,
   129,   nil,   nil,   nil,   nil,   263,    29,   266,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,   nil,   nil,
   nil,   207,   nil,   nil,   nil,   155,   nil,   297,   230,   nil,
   nil,   nil,   nil,   nil,   nil,   302,   nil,   nil,   298,   105,
   108,   232,   nil,   nil,   nil,   nil,   307,   187,   188,   189,
   190,   192,   nil,   109,   306,   105,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   109,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   221,   263,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   241,   242,   243,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   299,   300 ]

racc_goto_check = [
    16,    22,    30,    46,    53,    37,    11,    59,    30,    46,
    53,    28,    49,    36,    52,    34,    34,    55,    34,    48,
    34,     3,    23,    55,    13,    11,    13,    13,    45,    11,
    35,     8,     5,    43,    24,     5,     1,    61,    38,    15,
    18,     4,    29,    60,    60,     2,     7,    29,    12,    45,
    14,    17,    63,    19,    22,    22,    63,    20,    22,    21,
     4,    27,    32,    39,    42,    44,    34,    51,    54,    58,
   nil,   nil,    11,    53,    38,    11,    46,    53,    61,    34,
    34,    34,   nil,    34,   nil,   nil,    34,    34,    34,    34,
    55,   nil,   nil,    24,    53,   nil,   nil,    53,   nil,   nil,
    35,    23,    43,    15,    18,   nil,   nil,    55,     5,     5,
     3,    24,   nil,   nil,   nil,   nil,     5,   nil,    22,   nil,
   nil,     5,   nil,   nil,    22,   nil,   nil,    36,    52,    59,
    49,    34,   nil,   nil,   nil,   nil,    48,   nil,    11,    11,
     8,   nil,    30,    46,    53,    30,    46,    53,    28,    37,
   nil,   nil,   nil,    30,    46,    53,    45,    55,   nil,   nil,
    55,   nil,    13,    45,   nil,    63,    63,   nil,    55,   nil,
   nil,   nil,    63,   nil,   nil,   nil,   nil,    63,   nil,   nil,
    22,   nil,   nil,   nil,   nil,    16,    22,    22,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,
   nil,    53,   nil,   nil,   nil,    47,   nil,    34,    53,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,    30,    46,
    53,    55,   nil,   nil,   nil,   nil,    34,    47,    47,    47,
    47,    47,   nil,    55,    30,    46,    53,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    16,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    47,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    47 ]

racc_goto_pointer = [
   nil,    36,    45,    19,    41,    30,   nil,   -20,     8,   nil,
   nil,     6,    24,   -32,   -19,   -30,   -16,  -150,   -29,   -17,
   -27,  -143,   -15,  -179,     5,   nil,   nil,    46,   -16,   -18,
   -69,   nil,   -82,   nil,   -79,   -65,  -148,  -148,  -232,   -35,
   nil,   nil,    -6,   -37,   -75,  -112,   -68,   107,  -136,  -143,
   nil,   -94,  -147,   -67,  -226,   -54,   nil,   nil,    -4,   -66,
   -80,   -72,   nil,    33 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   101,   nil,   213,   nil,   nil,    81,   nil,   103,   nil,
   nil,   nil,   106,   nil,   nil,    13,    14,   nil,   nil,   nil,
   nil,    91,    92,    93,   104,   nil,    96,   nil,   nil,   nil,
   100,   102,   nil,   nil,   nil,   nil,   147,   118,   nil,   nil,
   285,   nil,   nil,   148,   nil,   150,   125,    72,   nil,   nil,
   119,   163,   126,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 89, :_reduce_1,
  1, 90, :_reduce_2,
  3, 90, :_reduce_3,
  1, 92, :_reduce_4,
  2, 92, :_reduce_5,
  0, 95, :_reduce_6,
  1, 95, :_reduce_7,
  3, 95, :_reduce_8,
  1, 96, :_reduce_9,
  1, 96, :_reduce_10,
  1, 96, :_reduce_11,
  7, 98, :_reduce_12,
  0, 100, :_reduce_13,
  2, 100, :_reduce_14,
  7, 94, :_reduce_15,
  1, 102, :_reduce_16,
  3, 102, :_reduce_17,
  5, 103, :_reduce_18,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  6, 99, :_reduce_21,
  4, 106, :_reduce_22,
  1, 108, :_reduce_none,
  1, 108, :_reduce_24,
  1, 109, :_reduce_none,
  2, 109, :_reduce_26,
  1, 111, :_reduce_27,
  2, 111, :_reduce_28,
  2, 104, :_reduce_29,
  0, 105, :_reduce_30,
  1, 105, :_reduce_31,
  3, 105, :_reduce_32,
  1, 97, :_reduce_33,
  1, 97, :_reduce_34,
  6, 113, :_reduce_35,
  0, 115, :_reduce_36,
  2, 115, :_reduce_37,
  6, 114, :_reduce_38,
  2, 118, :_reduce_39,
  0, 119, :_reduce_40,
  1, 119, :_reduce_41,
  3, 119, :_reduce_42,
  1, 120, :_reduce_43,
  2, 120, :_reduce_44,
  2, 120, :_reduce_45,
  1, 120, :_reduce_46,
  6, 120, :_reduce_47,
  3, 120, :_reduce_48,
  5, 120, :_reduce_49,
  5, 120, :_reduce_50,
  1, 120, :_reduce_51,
  1, 120, :_reduce_none,
  1, 120, :_reduce_53,
  1, 120, :_reduce_none,
  1, 120, :_reduce_55,
  2, 129, :_reduce_56,
  2, 107, :_reduce_57,
  0, 130, :_reduce_58,
  1, 130, :_reduce_59,
  3, 130, :_reduce_60,
  3, 131, :_reduce_61,
  1, 132, :_reduce_62,
  3, 132, :_reduce_63,
  3, 128, :_reduce_64,
  5, 127, :_reduce_65,
  5, 127, :_reduce_66,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  0, 126, :_reduce_73,
  1, 126, :_reduce_74,
  5, 126, :_reduce_75,
  2, 138, :_reduce_76,
  3, 121, :_reduce_77,
  0, 112, :_reduce_78,
  1, 112, :_reduce_79,
  2, 112, :_reduce_80,
  3, 139, :_reduce_81,
  3, 139, :_reduce_82,
  1, 139, :_reduce_83,
  1, 139, :_reduce_84,
  1, 133, :_reduce_85,
  1, 133, :_reduce_86,
  1, 140, :_reduce_none,
  5, 140, :_reduce_88,
  0, 142, :_reduce_89,
  1, 142, :_reduce_90,
  3, 142, :_reduce_91,
  3, 124, :_reduce_92,
  3, 124, :_reduce_93,
  3, 124, :_reduce_94,
  1, 144, :_reduce_95,
  1, 144, :_reduce_96,
  1, 144, :_reduce_97,
  1, 144, :_reduce_98,
  1, 144, :_reduce_99,
  1, 144, :_reduce_100,
  1, 144, :_reduce_101,
  1, 144, :_reduce_102,
  2, 116, :_reduce_103,
  2, 116, :_reduce_104,
  1, 116, :_reduce_105,
  0, 117, :_reduce_106,
  1, 117, :_reduce_none,
  4, 145, :_reduce_108,
  1, 146, :_reduce_109,
  3, 146, :_reduce_110,
  2, 147, :_reduce_111,
  1, 147, :_reduce_112,
  1, 122, :_reduce_113,
  1, 122, :_reduce_114,
  3, 122, :_reduce_115,
  3, 122, :_reduce_116,
  3, 135, :_reduce_117,
  3, 135, :_reduce_118,
  3, 135, :_reduce_119,
  3, 135, :_reduce_120,
  3, 135, :_reduce_121,
  3, 135, :_reduce_122,
  3, 135, :_reduce_123,
  3, 135, :_reduce_124,
  3, 135, :_reduce_125,
  3, 135, :_reduce_126,
  3, 135, :_reduce_127,
  2, 135, :_reduce_128,
  2, 135, :_reduce_129,
  2, 135, :_reduce_130,
  3, 135, :_reduce_131,
  1, 135, :_reduce_132,
  3, 148, :_reduce_133,
  3, 148, :_reduce_134,
  3, 148, :_reduce_135,
  3, 148, :_reduce_136,
  3, 148, :_reduce_137,
  3, 148, :_reduce_138,
  3, 148, :_reduce_139,
  2, 148, :_reduce_140,
  2, 148, :_reduce_141,
  1, 134, :_reduce_142,
  1, 134, :_reduce_143,
  2, 134, :_reduce_144,
  1, 134, :_reduce_none,
  2, 150, :_reduce_146,
  3, 143, :_reduce_147,
  3, 143, :_reduce_148,
  0, 149, :_reduce_149,
  3, 149, :_reduce_150,
  0, 123, :_reduce_151,
  1, 123, :_reduce_152,
  3, 123, :_reduce_153,
  4, 141, :_reduce_154,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_175,
  0, 91, :_reduce_176,
  1, 91, :_reduce_177,
  1, 93, :_reduce_178,
  2, 93, :_reduce_179,
  1, 151, :_reduce_180,
  1, 151, :_reduce_none,
  1, 101, :_reduce_182 ]

racc_reduce_n = 183

racc_shift_n = 309

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :kDTYPE_VOID => 44,
  :tCUSTOM_DTYPE => 45,
  :tLPAREN => 46,
  :tRPAREN => 47,
  :tLSQUARE => 48,
  :tRSQUARE => 49,
  :tIDENTIFIER => 50,
  :tNL => 51,
  :tCOMMA => 52,
  :tSQUOTE => 53,
  :tSCOLON => 54,
  :EOF => 55,
  :tDOT => 56,
  :tQMARK => 57,
  :tSYMBOL => 58,
  :tPLUS => 59,
  :tMINUS => 60,
  :tSTAR => 61,
  :tDIVIDE => 62,
  :tEXPO => 63,
  :tMODULUS => 64,
  :tASSIGN => 65,
  :tEQ => 66,
  :tLT => 67,
  :tLTEQ => 68,
  :tGT => 69,
  :tGTEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tBANG => 73,
  :tOP_ASSIGN => 74,
  :tSTRING => 75,
  :tBIT_AND => 76,
  :tBIT_OR => 77,
  :tBIT_XOR => 78,
  :tBIT_LSHIFT => 79,
  :tBIT_RSHIFT => 80,
  :tBIT_NOT => 81,
  :tINTEGER => 82,
  :tFLOAT => 83,
  :tSINGLE_CHAR => 84,
  :ADDRESS_OF => 85,
  :UMINUS => 86,
  :tNEQ => 87 }

racc_nt_base = 88

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "alias_stmt",
  "var_decl_stmts",
  "ident_or_custom_dtype",
  "aliased_type",
  "dtype",
  "c_func_normal_arg",
  "opt_star",
  "ruby_method",
  "c_method",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_18(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_22(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_26(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = val[0]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_29(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_32(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_35(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_36(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_37(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_38(val, _values, result)
            result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_41(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_42(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_43(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_44(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_45(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_46(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_47(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_48(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_49(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_50(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_55(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_56(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_57(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_60(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_61(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_63(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_64(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_65(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_66(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_73(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_74(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_75(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_76(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_77(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_78(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_79(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_80(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_81(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_83(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_85(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_86(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_88(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_89(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_90(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_91(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_92(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_93(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_94(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_95(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_96(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_97(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_98(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_99(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_100(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_103(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_104(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_108(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_110(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_111(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_112(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_128(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_129(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_130(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_132(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_140(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_141(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_144(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_146(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_147(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_148(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_149(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_151(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_152(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_153(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_154(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_175(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_176(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_177(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_178(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_179(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_180(val, _values, result)
    
    result
  end
.,.,

# reduce 181 omitted

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_182(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
