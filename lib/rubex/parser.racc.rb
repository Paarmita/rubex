#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 597)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'97,98,100,235,245,235,326,101,102,58,79,118,119,120,13,182,88,183,308',
'18,79,122,108,278,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,129,172,173,62,111,62,76,59,148,182,214,183,121,147,130',
'215,172,173,25,172,173,125,77,172,173,172,173,128,180,117,135,131,16',
'97,98,100,132,114,115,116,101,102,172,173,118,119,120,13,13,88,26,12',
'11,17,122,108,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,129,183,307,182,111,22,22,78,23,23,76,288,121,152,130',
'306,287,154,79,29,233,125,185,53,172,173,77,128,79,117,135,131,16,97',
'98,100,132,114,115,116,101,102,172,173,118,119,120,13,13,88,172,173',
'11,17,122,108,60,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,129,152,176,16,111,154,22,226,22,23,327,23,121,62,130',
'154,79,341,79,13,175,125,12,11,17,79,79,128,79,117,135,131,16,97,98',
'100,132,114,115,116,101,102,172,173,118,119,120,13,13,88,172,173,11',
'17,122,108,64,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,129,65,16,62,111,189,190,191,192,193,194,69,121,22,130,62',
'23,22,13,75,23,125,11,17,196,197,59,128,141,117,135,131,62,97,98,100',
'132,114,115,116,101,102,172,173,118,119,120,13,22,88,22,23,151,23,122',
'108,156,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,129,172,173,159,111,189,190,191,192,193,194,174,121,184,130,189',
'190,191,192,193,194,125,213,195,196,197,216,128,62,117,135,131,227,97',
'98,100,132,114,115,116,101,102,172,173,118,119,120,13,22,88,22,23,141',
'23,122,108,183,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,129,318,319,176,111,189,190,191,192,193,194,182,121,233',
'130,189,190,191,192,193,194,125,237,195,196,197,248,128,250,117,135',
'131,253,97,98,100,132,114,115,116,101,102,240,241,118,119,120,13,254',
'88,191,192,193,194,122,108,280,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,129,242,243,193,111,191,192,193,194,62,335',
'141,121,336,130,172,173,172,173,172,173,125,318,319,159,298,299,128',
'172,117,135,131,193,97,98,100,132,114,115,116,101,102,193,193,118,119',
'120,13,193,88,310,314,315,320,122,108,323,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,129,254,16,222,111,118,119,120',
'141,330,79,343,121,141,130,122,,,13,,,125,11,17,,,,128,,117,135,131',
',118,119,120,132,114,115,116,129,,,122,163,,,,,,,,121,,130,22,,,23,',
',125,,,,,,128,129,117,135,131,163,118,119,120,132,114,115,116,121,,130',
'122,118,119,120,,,125,,,,,122,128,,117,135,131,,,,,132,114,115,116,129',
',,,163,,,,,,,170,121,,130,163,118,119,120,,,125,,121,,130,122,128,,117',
'135,131,,,,,132,114,115,116,117,135,131,,118,119,120,132,114,115,116',
'129,,,122,163,,,,,,,,121,,130,,,,,,,125,,,,16,312,128,129,117,135,131',
'163,118,119,120,132,114,115,116,121,13,130,122,,11,17,,,,,,,,,128,,117',
'135,131,,118,119,120,132,114,115,116,129,,,122,163,,,,,,22,,121,23,130',
',,,,,,125,,,,,,128,129,117,135,131,163,118,119,120,132,114,115,116,121',
',130,122,118,119,120,,,125,,,,,122,128,,117,135,131,,,,,132,114,115',
'116,170,,,,163,,,,,,,170,121,,130,163,118,119,120,,,,,121,,130,122,',
',117,135,131,,,,,132,114,115,116,117,135,131,,118,119,120,132,114,115',
'116,170,,,122,163,189,190,191,192,193,194,,121,,130,,,,,,,,,195,196',
'197,198,199,129,117,135,131,163,118,119,120,132,114,115,116,121,,130',
'122,,,118,119,120,125,,,,,,128,122,117,135,131,,,,,132,114,115,116,170',
',,,163,,118,119,120,,,,121,129,130,,122,163,,,,,,,,121,,130,,117,135',
'131,,,125,,132,114,115,116,128,129,117,135,131,163,118,119,120,132,114',
'115,116,121,,130,122,,,,,,125,,,,,,128,,117,135,131,,118,119,120,132',
'114,115,116,129,,,122,163,,,,,,,,121,,130,,,,,,,125,,,,,,128,129,117',
'135,131,163,118,119,120,132,114,115,116,121,,130,122,,,,,,125,,,,,,128',
',117,135,131,,118,119,120,132,114,115,116,129,,,122,163,,,,,,,,121,',
'130,,,,,,,125,,,,,,128,129,117,135,131,163,118,119,120,132,114,115,116',
'121,,130,122,,,,,,125,,,,,,128,,117,135,131,,118,119,120,132,114,115',
'116,129,,,122,163,,,,,,,,121,,130,,,,,,,125,,,,,,128,129,117,135,131',
'163,118,119,120,132,114,115,116,121,,130,122,118,119,120,,,125,,,,,122',
'128,,117,135,131,,,,,132,114,115,116,170,,,,163,,,,,,,170,121,,130,163',
'118,119,120,,,,,121,,130,122,,,117,135,131,,,,,132,114,115,116,117,135',
'131,,118,119,120,132,114,115,116,170,,,122,163,,118,119,120,,,,121,',
'130,,122,,,,,,,,,,,,170,117,135,131,163,,,,132,114,115,116,121,170,130',
',,163,118,119,120,,,,,121,,130,122,117,135,131,,,,,132,114,115,116,',
',117,135,131,,118,119,120,132,114,115,116,170,,,122,163,,118,119,120',
',,,121,,130,,122,,,,,,,,,,,,170,117,135,131,163,,,,132,114,115,116,121',
'170,130,,,163,118,119,120,,,,,121,,130,122,117,135,131,,,,,132,114,115',
'116,,,117,135,131,,118,119,120,132,114,115,116,170,,,122,163,,118,119',
'120,,,,121,,130,,122,,,,,,,,,,,,170,117,135,131,163,,,,132,114,115,116',
'121,170,130,,,163,118,119,120,,,,,121,,130,122,117,135,131,,,,,132,114',
'115,116,,,117,135,131,,118,119,120,132,114,115,116,170,,,122,163,,118',
'119,120,,,,121,,130,,122,,,,,,,,,,,,170,117,135,131,163,,,,132,114,115',
'116,121,170,130,,,163,118,119,120,,,,,121,,130,122,117,135,131,,,,,132',
'114,115,116,,,117,135,131,,118,119,120,132,114,115,116,170,,,122,163',
',118,119,120,,,,121,,130,,122,,,,,,,,,,,,170,117,135,131,163,,,,132',
'114,115,116,121,170,130,,,163,118,119,120,,,,,121,,130,122,117,135,131',
',,,,132,114,115,116,,,117,135,131,,,,,132,114,115,116,129,,,,163,118',
'119,120,,,,,121,,130,122,,,,,,125,,,,,,128,,117,135,131,,118,119,120',
'132,114,115,116,129,,305,122,163,,,,,,,,121,,130,,,,,,,125,,,,,,128',
'129,117,135,131,163,118,119,120,132,114,115,116,121,,130,122,118,119',
'120,,,125,,,,,122,128,,117,135,131,,,,,132,114,115,116,129,,,,163,,',
',,,,170,121,,130,163,118,119,120,,,125,,121,,130,122,128,,117,135,131',
',,,,132,114,115,116,117,135,131,,118,119,120,132,114,115,116,170,,,122',
'163,189,190,191,192,193,194,,121,,130,,,,,,,,,195,196,197,198,199,129',
'117,135,131,163,,,,132,114,115,116,121,,130,149,,,,,,125,,,,,,128,,117',
'135,131,,,,,132,114,115,116,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,224,,,,,22,,,23,,,,,,,13,,88,,,,,,,,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,279,,,,,22',
',,23,,,,189,190,191,192,193,194,,200,202,203,204,205,279,,,,,,195,196',
'197,198,199,,189,190,191,192,193,194,201,,,,,,,13,,88,,,195,196,197',
'198,199,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,293,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,189,190,191,192,193,194,,200,202,203,204,205,,,,,,,195',
'196,197,198,199,,,,,,,,201,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,,-47,,,,,-47,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,,,,,139,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,,,,,139,189,190,191,192,193,194',
',,240,241,242,243,189,190,191,192,193,194,195,196,197,198,199,189,190',
'191,192,193,194,,195,196,197,198,199,189,190,191,192,193,194,195,196',
'197,198,199,189,190,191,192,193,194,,195,196,197,198,199,189,190,191',
'192,193,194,195,196,197,198,199,189,190,191,192,193,194,,195,196,197',
'198,199,,,,,,,195,196,197,198,199,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52' ]
        racc_action_table = arr = ::Array.new(2501, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'74,74,74,167,171,331,309,74,74,25,260,74,74,74,74,163,74,163,260,1,309',
'74,74,207,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,207,207,167,74,331,64,25,88,111,136,111,74,88,74,136,107,107',
'11,171,171,74,64,167,167,331,331,74,111,74,74,74,20,158,158,158,74,74',
'74,74,158,158,160,160,158,158,158,158,20,158,12,20,20,20,158,158,13',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158',
'158,158,158,158,158,158,250,257,113,158,158,20,66,158,20,250,221,158',
'92,158,256,221,92,66,16,256,158,113,18,257,257,250,158,92,158,158,158',
'24,217,217,217,158,158,158,158,217,217,166,166,217,217,217,217,24,217',
'232,232,24,24,217,217,26,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,285,109,0,217,285,24',
'145,2,24,313,2,217,27,217,229,285,337,145,0,109,217,0,0,0,313,229,217',
'337,217,217,217,67,234,234,234,217,217,217,217,234,234,249,249,234,234',
'234,234,67,234,255,255,67,67,234,234,28,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,29,143',
'57,234,267,267,267,267,267,267,59,234,5,234,60,5,71,143,63,71,234,143',
'143,267,267,68,234,78,234,234,234,81,237,237,237,234,234,234,234,237',
'237,258,258,237,237,237,237,80,237,82,80,90,82,237,237,93,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,259,259,95,237,270,270,270,270,270,270,108,237,112,237,268',
'268,268,268,268,268,237,135,270,270,270,138,237,140,237,237,237,146',
'245,245,245,237,237,237,237,245,245,295,295,245,245,245,245,94,245,223',
'94,153,223,245,245,154,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,296,296,161,245,271,271',
'271,271,271,271,164,245,165,245,269,269,269,269,269,269,245,168,271',
'271,271,174,245,176,245,245,245,177,319,319,319,245,245,245,245,319',
'319,298,298,319,319,319,319,178,319,261,261,261,261,319,319,209,319',
'319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319',
'319,319,319,319,319,299,299,210,319,262,262,262,262,214,324,226,319',
'324,319,304,304,325,325,339,339,319,342,342,231,238,239,319,247,319',
'319,319,263,338,338,338,319,319,319,319,338,338,264,265,338,338,338',
'338,266,338,284,293,294,297,338,338,300,338,338,338,338,338,338,338',
'338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,302',
'142,142,338,97,97,97,315,316,328,340,338,343,338,97,,,142,,,338,142',
'142,,,,338,,338,338,338,,98,98,98,338,338,338,338,97,,,98,97,,,,,,,',
'97,,97,142,,,142,,,97,,,,,,97,98,97,97,97,98,100,100,100,97,97,97,97',
'98,,98,100,101,101,101,,,98,,,,,101,98,,98,98,98,,,,,98,98,98,98,100',
',,,100,,,,,,,101,100,,100,101,102,102,102,,,100,,101,,101,102,100,,100',
'100,100,,,,,100,100,100,100,101,101,101,,124,124,124,101,101,101,101',
'102,,,124,102,,,,,,,,102,,102,,,,,,,102,,,,289,289,102,124,102,102,102',
'124,128,128,128,102,102,102,102,124,289,124,128,,289,289,,,,,,,,,124',
',124,124,124,,129,129,129,124,124,124,124,128,,,129,128,,,,,,289,,128',
'289,128,,,,,,,128,,,,,,128,129,128,128,128,129,130,130,130,128,128,128',
'128,129,,129,130,131,131,131,,,129,,,,,131,129,,129,129,129,,,,,129',
'129,129,129,130,,,,130,,,,,,,131,130,,130,131,132,132,132,,,,,131,,131',
'132,,,130,130,130,,,,,130,130,130,130,131,131,131,,159,159,159,131,131',
'131,131,132,,,159,132,272,272,272,272,272,272,,132,,132,,,,,,,,,272',
'272,272,272,272,159,132,132,132,159,170,170,170,132,132,132,132,159',
',159,170,,,172,172,172,159,,,,,,159,172,159,159,159,,,,,159,159,159',
'159,170,,,,170,,173,173,173,,,,170,172,170,,173,172,,,,,,,,172,,172',
',170,170,170,,,172,,170,170,170,170,172,173,172,172,172,173,175,175',
'175,172,172,172,172,173,,173,175,,,,,,173,,,,,,173,,173,173,173,,180',
'180,180,173,173,173,173,175,,,180,175,,,,,,,,175,,175,,,,,,,175,,,,',
',175,180,175,175,175,180,182,182,182,175,175,175,175,180,,180,182,,',
',,,180,,,,,,180,,180,180,180,,183,183,183,180,180,180,180,182,,,183',
'182,,,,,,,,182,,182,,,,,,,182,,,,,,182,183,182,182,182,183,184,184,184',
'182,182,182,182,183,,183,184,,,,,,183,,,,,,183,,183,183,183,,185,185',
'185,183,183,183,183,184,,,185,184,,,,,,,,184,,184,,,,,,,184,,,,,,184',
'185,184,184,184,185,189,189,189,184,184,184,184,185,,185,189,190,190',
'190,,,185,,,,,190,185,,185,185,185,,,,,185,185,185,185,189,,,,189,,',
',,,,190,189,,189,190,191,191,191,,,,,190,,190,191,,,189,189,189,,,,',
'189,189,189,189,190,190,190,,192,192,192,190,190,190,190,191,,,192,191',
',193,193,193,,,,191,,191,,193,,,,,,,,,,,,192,191,191,191,192,,,,191',
'191,191,191,192,193,192,,,193,194,194,194,,,,,193,,193,194,192,192,192',
',,,,192,192,192,192,,,193,193,193,,195,195,195,193,193,193,193,194,',
',195,194,,196,196,196,,,,194,,194,,196,,,,,,,,,,,,195,194,194,194,195',
',,,194,194,194,194,195,196,195,,,196,197,197,197,,,,,196,,196,197,195',
'195,195,,,,,195,195,195,195,,,196,196,196,,198,198,198,196,196,196,196',
'197,,,198,197,,199,199,199,,,,197,,197,,199,,,,,,,,,,,,198,197,197,197',
'198,,,,197,197,197,197,198,199,198,,,199,200,200,200,,,,,199,,199,200',
'198,198,198,,,,,198,198,198,198,,,199,199,199,,201,201,201,199,199,199',
'199,200,,,201,200,,202,202,202,,,,200,,200,,202,,,,,,,,,,,,201,200,200',
'200,201,,,,200,200,200,200,201,202,201,,,202,203,203,203,,,,,202,,202',
'203,201,201,201,,,,,201,201,201,201,,,202,202,202,,204,204,204,202,202',
'202,202,203,,,204,203,,205,205,205,,,,203,,203,,205,,,,,,,,,,,,204,203',
'203,203,204,,,,203,203,203,203,204,205,204,,,205,233,233,233,,,,,205',
',205,233,204,204,204,,,,,204,204,204,204,,,205,205,205,,,,,205,205,205',
'205,233,,,,233,254,254,254,,,,,233,,233,254,,,,,,233,,,,,,233,,233,233',
'233,,305,305,305,233,233,233,233,254,,254,305,254,,,,,,,,254,,254,,',
',,,,254,,,,,,254,305,254,254,254,305,318,318,318,254,254,254,254,305',
',305,318,321,321,321,,,305,,,,,321,305,,305,305,305,,,,,305,305,305',
'305,318,,,,318,,,,,,,321,318,,318,321,322,322,322,,,318,,321,,321,322',
'318,,318,318,318,,,,,318,318,318,318,321,321,321,,336,336,336,321,321',
'321,321,322,,,336,322,273,273,273,273,273,273,,322,,322,,,,,,,,,273',
'273,273,273,273,336,322,322,322,336,,,,322,322,322,322,336,,336,89,',
',,,,336,,,,,,336,,336,336,336,,,,,336,336,336,336,89,89,89,89,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,144,,,,,89,,,89,,,,',
',,144,,144,,,,,,,,144,144,144,144,144,144,144,144,144,144,144,144,144',
'144,144,144,144,144,144,144,144,144,208,,,,,144,,,144,,,,208,208,208',
'208,208,208,,208,208,208,208,208,244,,,,,,208,208,208,208,208,,244,244',
'244,244,244,244,208,,,,,,,70,,70,,,244,244,244,244,244,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,227,,,,,,,,,,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,126,126,126,126,126,126,,126,126,126,126,126,,,,,,,126',
'126,126,126,126,,,,,,,,126,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,,141,,,,,141,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,,,,,75,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,,,,,215,169,169,169,169,169,169,,,169,169,169,169,274,274',
'274,274,274,274,169,169,169,169,169,275,275,275,275,275,275,,274,274',
'274,274,274,276,276,276,276,276,276,275,275,275,275,275,277,277,277',
'277,277,277,,276,276,276,276,276,333,333,333,333,333,333,277,277,277',
'277,277,334,334,334,334,334,334,,333,333,333,333,333,,,,,,,334,334,334',
'334,334,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58',
'58,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,125,125,213,213,213,213,213,213,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,213,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287' ]
        racc_action_check = arr = ::Array.new(2501, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   205,    19,   157,   nil,   nil,   241,   nil,   nil,   nil,   nil,
   nil,    10,    17,    48,   nil,   nil,   120,  2341,   148,   nil,
    76,   nil,   nil,   nil,   155,   -18,   167,   162,   206,   224,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   231,  2363,   240,
   243,  2385,   nil,   252,    -9,   nil,    78,   234,   238,   nil,
  2081,   245,   nil,   nil,    -4,  2195,   nil,   nil,   261,   nil,
   276,   260,   278,   nil,   nil,   nil,   nil,   nil,     5,  1953,
   279,   nil,    88,   336,   355,   359,   nil,   589,   617,   nil,
   657,   668,   708,   nil,   nil,   nil,   nil,   -13,   355,   146,
   nil,     5,   306,    78,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   736,  2407,  2100,   nil,   776,   804,
   844,   855,   895,   nil,   nil,   334,     5,   nil,   334,   nil,
   335,  2166,   599,   283,  2000,   157,   325,   nil,   nil,   nil,
   nil,   nil,   nil,   364,   366,   nil,   nil,   nil,    75,   923,
    13,   384,   nil,   -35,   402,   398,    92,    -6,   449,  2214,
   963,   -10,   976,  1004,   413,  1044,   415,   417,   420,   nil,
  1072,   nil,  1112,  1140,  1180,  1208,   nil,   nil,   nil,  1248,
  1259,  1299,  1327,  1340,  1380,  1408,  1421,  1461,  1489,  1502,
  1542,  1570,  1583,  1623,  1651,  1664,   nil,   -28,  1999,   446,
   456,   nil,   nil,  2429,   474,  2222,   nil,   154,   nil,   nil,
   nil,    85,   nil,   357,   nil,   nil,   481,  2113,   nil,   165,
   nil,   538,   100,  1704,   233,   nil,   nil,   312,   491,   492,
   nil,   nil,   nil,   nil,  2023,   391,   nil,   473,   nil,   171,
    74,   nil,   nil,   nil,  1744,   179,    89,    74,   250,   288,
   -55,   426,   460,   485,   495,   496,   501,   225,   314,   393,
   304,   383,   887,  1855,  2226,  2237,  2249,  2260,   nil,   nil,
   nil,   nil,   nil,   nil,   567,   155,   nil,  2451,   nil,   781,
   nil,   nil,   nil,   517,   521,   329,   435,   570,   412,   448,
   573,   nil,   531,   nil,   460,  1772,   nil,   nil,   nil,   -45,
   nil,   nil,   nil,   164,   nil,   557,   605,   nil,  1812,   470,
   nil,  1823,  1863,   nil,   477,   462,   nil,   nil,   544,   nil,
   nil,    -4,   nil,  2272,  2283,   nil,  1891,   167,   549,   464,
   559,   nil,   535,   562,   nil,   nil ]

racc_action_default = [
    -6,  -198,  -191,    -2,    -4,  -198,    -7,    -9,   -10,   -11,
   -12,  -198,  -198,  -198,   -40,   -41,   -52,  -198,  -198,    -1,
  -192,  -193,  -195,  -196,    -5,   -15,   -18,  -198,  -198,  -198,
   -97,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,   346,    -3,  -194,    -8,  -198,  -198,  -198,
  -198,   -26,  -197,  -117,  -116,   -53,  -198,    -6,   -15,   -16,
  -198,  -198,   -27,   -97,   -55,  -198,  -114,  -115,   -50,   -98,
  -198,  -198,  -198,   -19,   -21,   -22,   -23,   -97,  -198,  -198,
   -29,   -31,  -198,  -198,  -191,   -56,   -58,  -198,  -165,   -61,
  -198,  -198,  -198,   -66,   -67,   -68,   -69,   -70,  -198,  -147,
   -97,  -163,  -155,  -163,  -105,  -106,  -107,  -108,  -109,  -110,
  -111,  -112,  -113,  -123,  -198,  -198,  -128,  -129,  -198,  -198,
  -198,  -198,  -198,  -156,  -158,  -198,  -198,  -119,  -198,  -122,
  -198,   -97,  -198,    -6,  -198,  -198,  -198,   -33,   -34,   -25,
   -28,   -97,   -97,   -50,   -92,   -93,   -42,   -54,  -192,  -198,
   -59,  -147,  -155,  -163,  -163,   -60,  -166,  -198,  -198,  -198,
  -198,  -198,  -198,  -198,  -198,  -198,  -198,   -85,   -88,   -89,
  -198,  -157,  -165,  -198,  -198,  -198,  -160,  -124,   -97,  -198,
  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,  -198,
  -198,  -198,  -198,  -198,  -198,  -198,  -130,  -198,  -128,  -129,
  -143,  -144,  -145,  -198,  -198,  -198,  -121,   -55,   -97,   -46,
   -48,  -198,   -13,  -198,   -17,   -20,   -50,  -198,   -30,  -198,
   -91,   -57,   -63,  -198,   -55,   -79,   -80,   -55,  -198,  -198,
   -75,   -76,   -77,   -78,  -198,   -55,  -125,  -126,   -71,   -72,
  -116,  -161,  -162,   -97,  -198,  -102,  -198,  -198,  -103,  -104,
  -198,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -148,  -149,  -150,  -151,  -152,  -153,  -131,  -146,
  -154,   -97,  -118,  -120,  -198,   -44,   -45,   -97,   -51,  -198,
   -24,   -32,   -97,  -198,  -198,  -167,   -81,  -198,  -198,  -198,
  -198,   -86,   -87,   -94,   -95,   -99,  -164,  -168,  -127,  -198,
   -43,   -49,   -14,   -35,   -97,   -50,  -198,   -82,  -198,   -55,
   -64,  -198,  -198,   -65,  -198,  -100,  -159,   -97,   -36,   -90,
   -62,  -198,   -84,   -73,   -74,   -96,  -198,   -38,   -55,  -101,
  -198,   -39,   -81,   -50,   -83,   -37 ]

racc_goto_table = [
    66,    10,    30,    56,   140,   234,    20,    93,    55,    24,
    91,   109,    55,    63,   220,    61,   113,   137,   239,   179,
   238,    10,    19,   165,   316,    10,    80,    83,    72,    86,
   186,     3,     1,    57,   112,     2,    82,    71,    90,   146,
   291,   340,    28,    68,    74,    67,    73,   178,    70,   221,
   231,    54,   155,   168,   177,    87,   150,   145,   294,   303,
   138,   324,   136,   187,   209,   nil,   nil,   nil,    10,   143,
   344,    85,   nil,   nil,    73,    89,    81,    55,   nil,   230,
   nil,   186,   nil,   nil,   142,   nil,   144,   nil,   228,   nil,
   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,   158,   nil,
   113,   225,   223,    86,   nil,   nil,   nil,   256,   nil,   nil,
   188,   nil,   nil,   nil,   157,   nil,   nil,   nil,   112,   nil,
   nil,    56,   229,   nil,   nil,   nil,   218,   nil,   217,    87,
    55,   nil,    55,   nil,   nil,   nil,   252,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    10,    85,    55,   nil,   322,   321,
   284,   nil,   290,   nil,   109,   286,   nil,   283,   260,   113,
   311,   251,   301,   nil,   nil,   nil,   nil,   296,   nil,   338,
   297,   109,   nil,   nil,   109,   nil,   113,   112,   300,   113,
   nil,   nil,   109,   nil,   nil,   nil,   nil,   113,   285,   155,
   302,   nil,   nil,   nil,   112,   nil,   nil,   112,   281,   nil,
   138,   nil,   282,   nil,   nil,   112,   nil,   nil,   nil,   nil,
   nil,   nil,   292,   nil,   nil,   nil,   160,   166,   nil,   167,
   nil,   171,   nil,   nil,   nil,   nil,   nil,   289,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,
   nil,   329,   nil,   nil,   nil,   155,   nil,   206,   207,   nil,
   nil,   309,   332,   nil,   nil,   nil,   109,   nil,   nil,   nil,
   nil,   113,   313,   nil,   208,   210,   211,   212,    56,   345,
   nil,   342,   218,   nil,   nil,   109,   nil,    55,   232,   112,
   113,   nil,   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,
    10,   246,   247,   nil,   249,   nil,   nil,   337,   112,   255,
   nil,   166,   257,   258,   259,   244,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   304,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   325,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   331,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   339,   333,   334 ]

racc_goto_check = [
    20,    12,    15,     8,    21,    43,     5,    34,    68,     5,
    25,    48,    68,    32,    35,    14,    59,    62,    51,    54,
    50,    12,     3,    41,    44,    12,     7,    17,    23,    19,
    66,     4,     1,    13,    56,     2,    16,    22,    24,    26,
    27,    28,    31,    15,    33,    14,    15,    25,    14,    36,
    38,     4,    56,    45,    53,    15,    23,    20,    55,    57,
    15,    58,    61,    63,    65,   nil,   nil,   nil,    12,    14,
    44,    12,   nil,   nil,    15,     5,    13,    68,   nil,    21,
   nil,    66,   nil,   nil,     5,   nil,     5,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,     5,   nil,
    59,    17,     7,    19,   nil,   nil,   nil,    41,   nil,   nil,
    15,   nil,   nil,   nil,     3,   nil,   nil,   nil,    56,   nil,
   nil,     8,    20,   nil,   nil,   nil,    15,   nil,    14,    15,
    68,   nil,    68,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,    12,    12,    12,    68,   nil,    51,    50,
    34,   nil,    21,   nil,    48,    25,   nil,    62,    20,    59,
    35,    32,    54,   nil,   nil,   nil,   nil,    34,   nil,    43,
    34,    48,   nil,   nil,    48,   nil,    59,    56,    34,    59,
   nil,   nil,    48,   nil,   nil,   nil,   nil,    59,    20,    56,
    25,   nil,   nil,   nil,    56,   nil,   nil,    56,    15,   nil,
    15,   nil,    14,   nil,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,    40,    40,   nil,    40,
   nil,    40,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,    56,   nil,    40,    40,   nil,
   nil,    20,    34,   nil,   nil,   nil,    48,   nil,   nil,   nil,
   nil,    59,    20,   nil,    49,    49,    49,    49,     8,    21,
   nil,    34,    15,   nil,   nil,    48,   nil,    68,    40,    56,
    59,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,
    12,    40,    40,   nil,    40,   nil,   nil,    20,    56,    40,
   nil,    40,    40,    40,    40,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,    49,    49 ]

racc_goto_pointer = [
   nil,    32,    35,    20,    31,     4,   nil,   -41,   -21,   nil,
   nil,   nil,     1,     8,   -12,   -15,   -34,   -43,   nil,   -41,
   -30,   -74,   -24,   -33,   -35,   -63,   -49,  -187,  -296,   nil,
   nil,    26,   -15,   -19,   -67,  -127,   -92,   nil,  -108,   nil,
   119,   -75,   nil,  -162,  -272,   -48,   nil,   nil,   -63,   135,
  -149,  -151,   nil,   -56,   -91,  -171,   -40,  -195,  -244,   -58,
   nil,   -13,   -58,   -61,   nil,   -65,   -83,   nil,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   104,   nil,   236,   110,   nil,   nil,    84,   106,
    92,   nil,   nil,   nil,   nil,   219,   nil,   nil,   nil,    14,
    15,   nil,   nil,   nil,   nil,   nil,   nil,    94,    95,    96,
   107,   nil,    99,   nil,   nil,   nil,   103,   105,   161,   126,
   nil,   nil,   317,   nil,   nil,   153,   162,   nil,   nil,   164,
   133,   nil,   nil,   123,   124,   127,   181,   134,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 95, :_reduce_1,
  1, 96, :_reduce_2,
  3, 96, :_reduce_3,
  1, 98, :_reduce_4,
  2, 98, :_reduce_5,
  0, 101, :_reduce_6,
  1, 101, :_reduce_7,
  3, 101, :_reduce_8,
  1, 102, :_reduce_9,
  1, 102, :_reduce_10,
  1, 102, :_reduce_11,
  1, 102, :_reduce_12,
  7, 104, :_reduce_13,
  9, 105, :_reduce_14,
  0, 107, :_reduce_15,
  2, 107, :_reduce_16,
  7, 100, :_reduce_17,
  2, 100, :_reduce_18,
  1, 110, :_reduce_19,
  3, 110, :_reduce_20,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  4, 112, :_reduce_24,
  6, 106, :_reduce_25,
  0, 116, :_reduce_26,
  1, 116, :_reduce_27,
  3, 116, :_reduce_28,
  2, 117, :_reduce_29,
  3, 118, :_reduce_30,
  1, 118, :_reduce_31,
  4, 113, :_reduce_32,
  1, 120, :_reduce_none,
  1, 120, :_reduce_34,
  2, 121, :_reduce_35,
  3, 121, :_reduce_36,
  7, 121, :_reduce_37,
  0, 122, :_reduce_38,
  1, 122, :_reduce_39,
  1, 103, :_reduce_40,
  1, 103, :_reduce_41,
  6, 123, :_reduce_42,
  8, 124, :_reduce_43,
  2, 129, :_reduce_44,
  2, 129, :_reduce_45,
  1, 129, :_reduce_46,
  0, 130, :_reduce_47,
  1, 130, :_reduce_48,
  3, 130, :_reduce_49,
  0, 115, :_reduce_50,
  3, 115, :_reduce_51,
  0, 125, :_reduce_52,
  2, 125, :_reduce_53,
  2, 128, :_reduce_54,
  0, 131, :_reduce_55,
  1, 131, :_reduce_56,
  3, 131, :_reduce_57,
  1, 132, :_reduce_58,
  2, 132, :_reduce_59,
  2, 132, :_reduce_60,
  1, 132, :_reduce_61,
  6, 132, :_reduce_62,
  3, 132, :_reduce_63,
  5, 132, :_reduce_64,
  5, 132, :_reduce_65,
  1, 132, :_reduce_66,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_70,
  3, 141, :_reduce_71,
  3, 140, :_reduce_72,
  5, 139, :_reduce_73,
  5, 139, :_reduce_74,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  0, 138, :_reduce_81,
  1, 138, :_reduce_82,
  5, 138, :_reduce_83,
  2, 146, :_reduce_84,
  2, 133, :_reduce_85,
  3, 147, :_reduce_86,
  3, 147, :_reduce_87,
  1, 147, :_reduce_88,
  1, 147, :_reduce_89,
  6, 119, :_reduce_90,
  3, 119, :_reduce_91,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 148, :_reduce_94,
  1, 151, :_reduce_none,
  3, 151, :_reduce_96,
  0, 114, :_reduce_97,
  2, 114, :_reduce_98,
  0, 152, :_reduce_99,
  1, 152, :_reduce_100,
  3, 152, :_reduce_101,
  3, 136, :_reduce_102,
  3, 136, :_reduce_103,
  3, 136, :_reduce_104,
  1, 154, :_reduce_105,
  1, 154, :_reduce_106,
  1, 154, :_reduce_107,
  1, 154, :_reduce_108,
  1, 154, :_reduce_109,
  1, 154, :_reduce_110,
  1, 154, :_reduce_111,
  1, 154, :_reduce_112,
  1, 154, :_reduce_113,
  2, 126, :_reduce_114,
  2, 126, :_reduce_115,
  1, 126, :_reduce_116,
  0, 127, :_reduce_117,
  4, 127, :_reduce_118,
  1, 155, :_reduce_119,
  3, 155, :_reduce_120,
  2, 156, :_reduce_121,
  1, 156, :_reduce_122,
  1, 134, :_reduce_123,
  2, 134, :_reduce_124,
  3, 134, :_reduce_125,
  3, 134, :_reduce_126,
  4, 158, :_reduce_127,
  1, 157, :_reduce_128,
  1, 157, :_reduce_129,
  2, 157, :_reduce_130,
  3, 157, :_reduce_131,
  3, 143, :_reduce_132,
  3, 143, :_reduce_133,
  3, 143, :_reduce_134,
  3, 143, :_reduce_135,
  3, 143, :_reduce_136,
  3, 143, :_reduce_137,
  3, 143, :_reduce_138,
  3, 143, :_reduce_139,
  3, 143, :_reduce_140,
  3, 143, :_reduce_141,
  3, 143, :_reduce_142,
  2, 143, :_reduce_143,
  2, 143, :_reduce_144,
  2, 143, :_reduce_145,
  3, 143, :_reduce_146,
  1, 143, :_reduce_147,
  3, 159, :_reduce_148,
  3, 159, :_reduce_149,
  3, 159, :_reduce_150,
  3, 159, :_reduce_151,
  3, 159, :_reduce_152,
  3, 159, :_reduce_153,
  3, 159, :_reduce_154,
  1, 142, :_reduce_155,
  1, 142, :_reduce_156,
  2, 142, :_reduce_157,
  1, 142, :_reduce_none,
  5, 142, :_reduce_159,
  2, 161, :_reduce_160,
  3, 153, :_reduce_161,
  3, 153, :_reduce_162,
  0, 160, :_reduce_163,
  3, 160, :_reduce_164,
  0, 135, :_reduce_165,
  1, 135, :_reduce_166,
  3, 135, :_reduce_167,
  4, 150, :_reduce_168,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_190,
  0, 97, :_reduce_191,
  1, 97, :_reduce_192,
  1, 99, :_reduce_193,
  2, 99, :_reduce_194,
  1, 162, :_reduce_195,
  1, 162, :_reduce_none,
  1, 108, :_reduce_197 ]

racc_reduce_n = 198

racc_shift_n = 346

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :kDTYPE_SIZE_T => 48,
  :tCUSTOM_DTYPE => 49,
  :tLPAREN => 50,
  :tRPAREN => 51,
  :tLSQUARE => 52,
  :tRSQUARE => 53,
  :tIDENTIFIER => 54,
  :tNL => 55,
  :tCOMMA => 56,
  :tSQUOTE => 57,
  :tSCOLON => 58,
  :EOF => 59,
  :tDOT => 60,
  :tQMARK => 61,
  :tSYMBOL => 62,
  :tPLUS => 63,
  :tMINUS => 64,
  :tSTAR => 65,
  :tDIVIDE => 66,
  :tEXPO => 67,
  :tMODULUS => 68,
  :tASSIGN => 69,
  :tEQ => 70,
  :tLT => 71,
  :tLTEQ => 72,
  :tGT => 73,
  :tGTEQ => 74,
  :tANDOP => 75,
  :tOROP => 76,
  :tBANG => 77,
  :tOP_ASSIGN => 78,
  :tSTRING => 79,
  :kSIZEOF => 80,
  :tBIT_AND => 81,
  :tBIT_OR => 82,
  :tBIT_XOR => 83,
  :tBIT_LSHIFT => 84,
  :tBIT_RSHIFT => 85,
  :tBIT_NOT => 86,
  :tINTEGER => 87,
  :tFLOAT => 88,
  :tSINGLE_CHAR => 89,
  :ADDRESS_OF => 90,
  :TYPECAST => 91,
  :UMINUS => 92,
  :tNEQ => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_24(val, _values, result)
            val[4].pop # HACK: because declared external C functions don't have implicit self argument.
        result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_27(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_29(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_30(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_32(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_35(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_36(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_37(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_38(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_42(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_43(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_44(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_45(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_46(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_48(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_49(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_50(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_51(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_94(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_97(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_98(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_100(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_101(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_103(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_104(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_115(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_118(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_119(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_120(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_122(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_124(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_127(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_130(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_143(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_144(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_145(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_157(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_159(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_160(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_161(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_162(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_166(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_167(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_168(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_190(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_191(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_192(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_193(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 579)
  def _reduce_194(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_195(val, _values, result)
    
    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_197(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
