#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 417)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    34,    35,    37,   156,   167,    90,    13,    38,    39,    14,
    89,    53,    54,    55,    41,   156,    29,   221,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   119,   136,
   137,   158,    46,    26,   174,   260,   123,    26,     9,   219,
     8,   124,    16,   158,   220,   171,   171,   136,   137,    27,
     8,   136,   137,    27,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   136,   137,    53,    54,    55,    41,     6,
    29,    18,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    19,     8,   209,    13,    46,    13,    14,   242,
    14,    22,    13,    25,   243,    14,   138,   139,   140,   141,
   142,   143,     6,   144,   146,   147,   148,   149,    34,    35,
    37,    52,    49,    50,    51,    38,    39,   145,    91,    53,
    54,    55,    41,    94,    29,   111,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    13,   194,   112,    14,
    46,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   114,    34,    35,    37,    52,    49,    50,    51,    38,
    39,   136,   137,    53,    54,    55,    41,   120,    29,   125,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
   118,   118,   119,   119,    46,    13,    13,   130,    14,    14,
   117,   117,   136,   137,   138,   139,   140,   141,   142,   143,
   115,   144,   146,   147,   148,   149,    34,    35,    37,    52,
    49,    50,    51,    38,    39,   145,   131,    53,    54,    55,
    41,   114,    29,   133,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    13,   118,   118,    14,    46,   138,
   139,   140,   141,   142,   143,   136,   137,   159,   138,   139,
   140,   141,   142,   143,   121,   144,   146,   147,   148,   149,
    34,    35,    37,    52,    49,    50,    51,    38,    39,   145,
   168,    53,    54,    55,    41,   179,    29,   158,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    13,   136,
   137,    14,    46,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   190,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   136,   137,    53,    54,    55,    41,   191,
    29,   171,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   140,   141,   142,   143,    46,    94,    53,    54,
    55,   209,   136,   137,    53,    54,    55,   136,   137,   142,
    53,    54,    55,   138,   139,   140,   141,   142,   143,   119,
   210,    52,    49,    50,    51,    99,   213,   117,   214,   103,
    13,    99,   217,    14,   218,   103,   115,    99,   121,    98,
   263,   103,   228,   264,   136,    98,    53,    54,    55,   136,
   137,    98,   101,   142,    52,    49,    50,    51,   101,   142,
    52,    49,    50,    51,   101,   142,    52,    49,    50,    51,
    53,    54,    55,   109,   231,   232,   142,   103,   233,    53,
    54,    55,   140,   141,   142,   143,   236,    98,   162,   163,
    53,    54,    55,   164,   165,   136,   137,    99,   136,   137,
   174,   103,    52,    49,    50,    51,    99,   231,   232,   244,
   103,    98,    53,    54,    55,   136,   137,   109,   114,   248,
    98,   103,   253,   265,   101,   119,    52,    49,    50,    51,
   260,    98,   nil,   101,   nil,    52,    49,    50,    51,    99,
   nil,   nil,   nil,   103,   nil,   nil,    52,    49,    50,    51,
    53,    54,    55,    98,   nil,    53,    54,    55,   nil,   nil,
   nil,    53,    54,    55,   nil,   nil,   101,   nil,    52,    49,
    50,    51,   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,
   nil,   103,   109,   nil,   nil,   nil,   103,   nil,    99,   nil,
   nil,    98,   103,   nil,   nil,   nil,    98,    53,    54,    55,
   nil,   nil,    98,   nil,   101,   nil,    52,    49,    50,    51,
   nil,    52,    49,    50,    51,   101,   nil,    52,    49,    50,
    51,    53,    54,    55,    99,   nil,   nil,   nil,   103,   nil,
    53,    54,    55,   nil,   nil,   nil,   nil,   nil,    98,   nil,
   nil,    53,    54,    55,   nil,   nil,   nil,   nil,    99,   nil,
   nil,   101,   103,    52,    49,    50,    51,    99,   nil,   nil,
   nil,   103,    98,    53,    54,    55,   nil,   nil,    99,   nil,
   nil,    98,   103,   nil,   nil,   101,   nil,    52,    49,    50,
    51,   nil,    98,   nil,   101,   nil,    52,    49,    50,    51,
    99,   nil,   nil,   nil,   103,   101,   nil,    52,    49,    50,
    51,    53,    54,    55,    98,   nil,   nil,    53,    54,    55,
   nil,   nil,    53,    54,    55,   nil,   nil,   101,   nil,    52,
    49,    50,    51,   nil,   nil,   nil,   nil,   nil,    99,   nil,
   nil,   nil,   103,   nil,    99,   nil,   nil,   nil,   103,   109,
   nil,   nil,    98,   103,   nil,    53,    54,    55,    98,   nil,
    53,    54,    55,    98,   nil,   101,   nil,    52,    49,    50,
    51,   101,   nil,    52,    49,    50,    51,   nil,    52,    49,
    50,    51,   109,   nil,   nil,   nil,   103,   109,   nil,   nil,
   nil,   103,   nil,    53,    54,    55,    98,   nil,    53,    54,
    55,    98,   nil,   nil,    53,    54,    55,   nil,   nil,   nil,
   nil,    52,    49,    50,    51,   nil,    52,    49,    50,    51,
   109,   nil,   nil,   nil,   103,   109,   nil,   nil,   nil,   103,
   nil,   109,   nil,   nil,    98,   103,   nil,   nil,   nil,    98,
    53,    54,    55,   nil,   nil,    98,    53,    54,    55,    52,
    49,    50,    51,   nil,    52,    49,    50,    51,   nil,   nil,
    52,    49,    50,    51,   nil,   nil,   nil,   109,   nil,   nil,
   nil,   103,   nil,   109,   nil,   nil,   nil,   103,   nil,   nil,
   nil,    98,    53,    54,    55,   nil,   nil,    98,    53,    54,
    55,   nil,   nil,    53,    54,    55,    52,    49,    50,    51,
   nil,   nil,    52,    49,    50,    51,   nil,   nil,   nil,   109,
   nil,   nil,   nil,   103,   nil,   109,   nil,   nil,   nil,   103,
   109,   nil,   nil,    98,   103,   nil,    53,    54,    55,    98,
   nil,   nil,   nil,   nil,    98,    53,    54,    55,    52,    49,
    50,    51,   nil,   nil,    52,    49,    50,    51,   nil,    52,
    49,    50,    51,   109,   nil,   nil,   nil,   103,   nil,    53,
    54,    55,    99,   nil,   240,   nil,   103,    98,    53,    54,
    55,   nil,   nil,   nil,   nil,   nil,    98,   nil,   nil,    53,
    54,    55,    52,    49,    50,    51,    99,   nil,   nil,   101,
   103,    52,    49,    50,    51,    99,   nil,   nil,   nil,   103,
    98,    53,    54,    55,   nil,   nil,   109,   nil,   nil,    98,
   103,   nil,   nil,   101,   nil,    52,    49,    50,    51,   nil,
    98,   nil,   101,   nil,    52,    49,    50,    51,   109,   nil,
   nil,   nil,   103,   nil,   nil,    52,    49,    50,    51,    53,
    54,    55,    98,   nil,   nil,    53,    54,    55,   138,   139,
   140,   141,   142,   143,   nil,   nil,   nil,    52,    49,    50,
    51,   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,   nil,
   103,   nil,    99,   nil,   nil,   nil,   103,   nil,   nil,   nil,
    98,   nil,   nil,   nil,   nil,   nil,    98,   nil,   nil,   nil,
   126,   nil,   nil,   101,   nil,    52,    49,    50,    51,   101,
   nil,    52,    49,    50,    51,    85,   nil,    29,   nil,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    85,
   nil,    29,   nil,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,
   nil,    14,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
    14,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   nil,   nil,   nil,   nil,    81,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,   nil,   nil,   nil,   nil,
    81,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   138,   139,   140,   141,   142,   143,   nil,   nil,   162,
   163,   164,   165,   138,   139,   140,   141,   142,   143,   138,
   139,   140,   141,   142,   143,   138,   139,   140,   141,   142,
   143,   138,   139,   140,   141,   142,   143,   138,   139,   140,
   141,   142,   143,   138,   139,   140,   141,   142,   143 ]

racc_action_check = [
    23,    23,    23,   106,   110,    29,     2,    23,    23,     2,
    29,    23,    23,    23,    23,   249,    23,   184,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,   179,   184,
   184,   106,    23,    18,   113,   247,    78,   179,     1,   183,
     5,    78,     6,   249,   183,   113,   247,   110,   110,    18,
    11,   106,   106,   179,    93,    93,    93,    23,    23,    23,
    23,    93,    93,   249,   249,    93,    93,    93,    93,    11,
    93,     8,    93,    93,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    93,    93,     9,     0,   151,    11,    93,    93,    11,   222,
    93,    16,    22,    17,   222,    22,   151,   151,   151,   151,
   151,   151,     0,   151,   151,   151,   151,   151,   155,   155,
   155,    93,    93,    93,    93,   155,   155,   151,    30,   155,
   155,   155,   155,    32,   155,    41,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,    31,   133,    44,    31,
   155,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,    45,   159,   159,   159,   155,   155,   155,   155,   159,
   159,    95,    95,   159,   159,   159,   159,    47,   159,    80,
   159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   103,    46,   103,    46,   159,    83,   127,    84,    83,   127,
   103,    46,   105,   105,    96,    96,    96,    96,    96,    96,
    46,    96,    96,    96,    96,    96,   167,   167,   167,   159,
   159,   159,   159,   167,   167,    96,    85,   167,   167,   167,
   167,    87,   167,    88,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   129,    48,   104,   129,   167,   203,
   203,   203,   203,   203,   203,   135,   135,   107,   153,   153,
   153,   153,   153,   153,    48,   153,   153,   153,   153,   153,
   232,   232,   232,   167,   167,   167,   167,   232,   232,   153,
   111,   232,   232,   232,   232,   117,   232,   123,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   232,   232,   168,   169,
   169,   168,   232,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   130,   262,   262,   262,   232,   232,   232,
   232,   262,   262,   178,   178,   262,   262,   262,   262,   131,
   262,   132,   262,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   197,   197,   197,   197,   262,   134,    34,    34,
    34,   166,   182,   182,    35,    35,    35,   185,   185,   150,
    37,    37,    37,   166,   166,   166,   166,   166,   166,   174,
   152,   262,   262,   262,   262,    34,   160,   174,   161,    34,
   225,    35,   170,   225,   175,    35,   174,    37,   177,    34,
   254,    37,   194,   254,   196,    35,    38,    38,    38,   186,
   186,    37,    34,   199,    34,    34,    34,    34,    35,   200,
    35,    35,    35,    35,    37,   201,    37,    37,    37,    37,
    39,    39,    39,    38,   211,   211,   202,    38,   212,    94,
    94,    94,   198,   198,   198,   198,   215,    38,   213,   213,
    98,    98,    98,   214,   214,   241,   241,    39,   255,   255,
   217,    39,    38,    38,    38,    38,    94,   266,   266,   224,
    94,    39,    99,    99,    99,   267,   267,    98,   227,   229,
    94,    98,   237,   258,    39,   260,    39,    39,    39,    39,
   265,    98,   nil,    94,   nil,    94,    94,    94,    94,    99,
   nil,   nil,   nil,    99,   nil,   nil,    98,    98,    98,    98,
   101,   101,   101,    99,   nil,   109,   109,   109,   nil,   nil,
   nil,   112,   112,   112,   nil,   nil,    99,   nil,    99,    99,
    99,    99,   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,
   nil,   101,   109,   nil,   nil,   nil,   109,   nil,   112,   nil,
   nil,   101,   112,   nil,   nil,   nil,   109,   115,   115,   115,
   nil,   nil,   112,   nil,   101,   nil,   101,   101,   101,   101,
   nil,   109,   109,   109,   109,   112,   nil,   112,   112,   112,
   112,   118,   118,   118,   115,   nil,   nil,   nil,   115,   nil,
   119,   119,   119,   nil,   nil,   nil,   nil,   nil,   115,   nil,
   nil,   120,   120,   120,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   115,   118,   115,   115,   115,   115,   119,   nil,   nil,
   nil,   119,   118,   121,   121,   121,   nil,   nil,   120,   nil,
   nil,   119,   120,   nil,   nil,   118,   nil,   118,   118,   118,
   118,   nil,   120,   nil,   119,   nil,   119,   119,   119,   119,
   121,   nil,   nil,   nil,   121,   120,   nil,   120,   120,   120,
   120,   136,   136,   136,   121,   nil,   nil,   137,   137,   137,
   nil,   nil,   138,   138,   138,   nil,   nil,   121,   nil,   121,
   121,   121,   121,   nil,   nil,   nil,   nil,   nil,   136,   nil,
   nil,   nil,   136,   nil,   137,   nil,   nil,   nil,   137,   138,
   nil,   nil,   136,   138,   nil,   139,   139,   139,   137,   nil,
   140,   140,   140,   138,   nil,   136,   nil,   136,   136,   136,
   136,   137,   nil,   137,   137,   137,   137,   nil,   138,   138,
   138,   138,   139,   nil,   nil,   nil,   139,   140,   nil,   nil,
   nil,   140,   nil,   141,   141,   141,   139,   nil,   142,   142,
   142,   140,   nil,   nil,   143,   143,   143,   nil,   nil,   nil,
   nil,   139,   139,   139,   139,   nil,   140,   140,   140,   140,
   141,   nil,   nil,   nil,   141,   142,   nil,   nil,   nil,   142,
   nil,   143,   nil,   nil,   141,   143,   nil,   nil,   nil,   142,
   144,   144,   144,   nil,   nil,   143,   145,   145,   145,   141,
   141,   141,   141,   nil,   142,   142,   142,   142,   nil,   nil,
   143,   143,   143,   143,   nil,   nil,   nil,   144,   nil,   nil,
   nil,   144,   nil,   145,   nil,   nil,   nil,   145,   nil,   nil,
   nil,   144,   146,   146,   146,   nil,   nil,   145,   147,   147,
   147,   nil,   nil,   148,   148,   148,   144,   144,   144,   144,
   nil,   nil,   145,   145,   145,   145,   nil,   nil,   nil,   146,
   nil,   nil,   nil,   146,   nil,   147,   nil,   nil,   nil,   147,
   148,   nil,   nil,   146,   148,   nil,   149,   149,   149,   147,
   nil,   nil,   nil,   nil,   148,   218,   218,   218,   146,   146,
   146,   146,   nil,   nil,   147,   147,   147,   147,   nil,   148,
   148,   148,   148,   149,   nil,   nil,   nil,   149,   nil,   220,
   220,   220,   218,   nil,   218,   nil,   218,   149,   231,   231,
   231,   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,   234,
   234,   234,   149,   149,   149,   149,   220,   nil,   nil,   218,
   220,   218,   218,   218,   218,   231,   nil,   nil,   nil,   231,
   220,   235,   235,   235,   nil,   nil,   234,   nil,   nil,   231,
   234,   nil,   nil,   220,   nil,   220,   220,   220,   220,   nil,
   234,   nil,   231,   nil,   231,   231,   231,   231,   235,   nil,
   nil,   nil,   235,   nil,   nil,   234,   234,   234,   234,   240,
   240,   240,   235,   nil,   nil,   264,   264,   264,   204,   204,
   204,   204,   204,   204,   nil,   nil,   nil,   235,   235,   235,
   235,   nil,   nil,   nil,   nil,   nil,   240,   nil,   nil,   nil,
   240,   nil,   264,   nil,   nil,   nil,   264,   nil,   nil,   nil,
   240,   nil,   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,
    82,   nil,   nil,   240,   nil,   240,   240,   240,   240,   264,
   nil,   264,   264,   264,   264,    82,   nil,    82,   nil,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    28,
   nil,    28,   nil,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,    28,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
   246,   246,   nil,   nil,   nil,   nil,   nil,   246,   nil,   nil,
   246,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,   nil,   nil,   nil,   nil,    25,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   nil,   nil,   nil,   nil,
   124,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
   243,   108,   108,   108,   108,   108,   108,   nil,   nil,   108,
   108,   108,   108,   205,   205,   205,   205,   205,   205,   206,
   206,   206,   206,   206,   206,   207,   207,   207,   207,   207,
   207,   208,   208,   208,   208,   208,   208,   251,   251,   251,
   251,   251,   251,   252,   252,   252,   252,   252,   252 ]

racc_action_pointer = [
   101,    48,   -41,   nil,   nil,    48,   -19,   nil,    35,   102,
   nil,    58,   nil,   nil,   nil,   nil,    97,    71,   -10,   nil,
   nil,   nil,    65,    -4,   nil,  1189,   nil,   nil,  1131,   -36,
   135,   119,   137,   nil,   413,   419,   nil,   425,   461,   485,
   nil,    99,   nil,   nil,    98,   134,   189,   146,   253,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   163,   nil,  1107,   188,   191,   220,   nil,   214,   212,   nil,
   nil,   nil,   nil,    60,   494,   134,   189,   nil,   505,   527,
   nil,   565,   nil,   188,   254,   175,    -6,   293,  1266,   570,
   -10,   316,   576,    -2,   nil,   612,   nil,   289,   636,   645,
   656,   678,   nil,   290,  1214,   nil,   nil,   189,   nil,   247,
   341,   385,   344,   149,   421,   238,   716,   722,   727,   760,
   765,   798,   803,   809,   845,   851,   887,   893,   898,   931,
   380,    61,   407,   253,   nil,   124,   nil,   nil,   nil,   188,
   410,   412,   nil,   nil,   nil,   nil,   388,   252,   311,   292,
   414,   nil,   nil,   nil,   405,   403,   nil,   407,   326,    -6,
   nil,   nil,   365,     6,   -28,   370,   412,   nil,   nil,   nil,
   341,  1239,   nil,   nil,   426,   nil,   407,   365,   455,   424,
   430,   436,   447,   244,  1013,  1278,  1284,  1290,  1296,   nil,
   nil,   497,   505,   455,   458,   513,  1259,   484,   940,   nil,
   964,   nil,    66,   nil,   536,   413,   nil,   491,   nil,   546,
   nil,   973,   316,   nil,   984,  1006,   nil,   549,   nil,   nil,
  1044,   458,   nil,  1279,   nil,   nil,  1160,    -1,   nil,     6,
   nil,  1302,  1308,   nil,   425,   461,   nil,   nil,   505,   nil,
   511,   nil,   380,   nil,  1050,   514,   530,   478,   nil,   nil ]

racc_action_default = [
    -2,  -159,  -152,    -3,    -5,    -6,  -159,   -22,  -159,  -159,
    -1,  -153,  -154,  -156,  -157,   -23,  -159,   -90,   -89,   270,
    -4,  -155,  -159,   -26,   -91,  -159,   -87,   -88,  -159,  -159,
  -159,  -152,   -27,   -29,  -159,  -159,   -32,  -159,  -159,  -159,
   -37,  -159,   -39,   -40,  -159,   -63,  -126,  -119,  -126,   -80,
   -81,   -82,   -83,   -84,   -85,   -86,  -120,  -122,  -132,  -133,
  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,
  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -159,   -93,
  -159,   -96,  -159,  -152,  -159,  -159,   -12,   -63,  -159,   -15,
   -16,   -24,   -25,  -153,  -159,   -30,   -97,   -98,  -159,  -159,
  -109,  -159,  -119,  -126,  -126,   -31,  -159,  -159,  -159,  -159,
  -159,   -41,  -159,  -159,   -64,  -159,  -121,  -159,  -128,  -159,
  -159,  -159,  -123,  -159,  -159,   -95,    -7,  -152,    -8,  -153,
  -159,  -159,   -13,  -159,   -28,   -34,  -159,  -159,  -159,  -159,
  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,
  -107,  -159,  -159,  -117,  -118,   -26,   -56,   -57,  -158,   -26,
  -159,  -159,   -52,   -53,   -54,   -55,  -159,   -26,  -152,   -49,
   -62,   -65,   -68,   -69,   -70,   -71,   -72,  -159,   -77,   -89,
  -124,  -125,  -129,  -159,  -159,   -78,   -79,   -92,   -94,    -9,
   -19,   -43,   -14,   -17,  -159,   -99,  -100,  -101,  -102,  -103,
  -104,  -105,  -106,  -110,  -111,  -112,  -113,  -114,  -115,  -108,
  -116,   -58,  -159,  -159,  -159,  -159,   -43,  -159,  -159,  -127,
  -159,  -131,  -159,   -20,  -159,  -152,   -44,   -63,   -18,  -159,
   -59,  -159,   -26,   -35,  -159,  -159,   -36,  -159,   -66,   -67,
   -74,  -130,   -10,  -159,   -11,   -42,  -153,  -159,   -33,  -159,
   -61,   -50,   -51,   -38,  -159,   -75,   -21,   -45,   -46,   -47,
   -70,   -71,   -26,   -73,  -159,  -159,   -58,   -76,   -48,   -60 ]

racc_goto_table = [
    47,    30,    44,    21,   113,    10,   155,    48,    11,   161,
   176,    80,   173,    79,    87,   122,    17,   224,   172,   229,
    21,    95,   105,   223,   106,    83,   110,     3,    28,    86,
   160,   152,     1,   154,    92,     2,    82,    93,    20,   222,
    88,   192,   237,    15,    23,   134,   132,   107,   257,   258,
   187,   170,   254,    24,    78,   183,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,   nil,
    47,   122,    44,   nil,   269,   nil,   256,    48,   nil,   127,
   nil,   135,   nil,    86,   nil,    21,   128,   nil,   nil,   nil,
   175,   nil,   nil,   nil,   181,   nil,   nil,   177,   nil,   169,
   nil,   nil,   178,   nil,   nil,   182,   184,   nil,   186,   nil,
    80,   nil,   188,   nil,   176,   235,   238,   150,   151,   193,
   153,    21,   239,   195,   196,   180,   nil,   nil,   166,   nil,
   189,   nil,    47,   211,    44,   234,    47,   212,    44,    48,
   nil,   nil,   nil,    48,    47,   215,    44,   nil,   nil,   262,
   nil,    48,   259,   nil,   nil,   nil,   nil,   197,   198,   199,
   200,   201,   202,   203,   204,   205,   206,   207,   208,   nil,
   268,   216,   nil,   nil,   nil,   nil,    87,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,   nil,   nil,
   nil,   177,   227,   nil,   nil,   nil,   nil,   241,   nil,    47,
   250,    44,   nil,   nil,   nil,   nil,    48,   nil,   249,   nil,
   nil,   nil,   nil,   nil,   261,   nil,   nil,   255,   245,    87,
   nil,   246,   227,   nil,   nil,   nil,   nil,   nil,    21,    47,
   266,    44,   261,   nil,   nil,   nil,    48,   nil,   nil,   nil,
   nil,   267,   nil,   251,   252 ]

racc_goto_check = [
    44,    21,    36,    55,    15,     3,    27,    46,     5,    39,
    26,    14,    43,    50,    14,    52,    19,    12,    35,    28,
    55,    25,    25,    10,    25,     9,    25,     4,     5,    13,
    38,    51,     1,    51,     3,     2,     8,     5,     4,    11,
    16,    17,    12,    18,    20,    23,    15,    29,    33,    34,
    40,    42,    45,    48,    49,    54,   nil,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,
    44,    52,    36,   nil,    28,   nil,    10,    46,   nil,     9,
   nil,    25,   nil,    13,   nil,    55,     3,   nil,   nil,   nil,
    44,   nil,   nil,   nil,    44,   nil,   nil,    46,   nil,    25,
   nil,   nil,    25,   nil,   nil,    25,    25,   nil,    25,   nil,
    14,   nil,    50,   nil,    26,    39,    43,    37,    37,    14,
    37,    55,    35,    25,    25,    19,   nil,   nil,    37,   nil,
     3,   nil,    44,    21,    36,    38,    44,    21,    36,    46,
   nil,   nil,   nil,    46,    44,    21,    36,   nil,   nil,    27,
   nil,    46,    35,   nil,   nil,   nil,   nil,    37,    37,    37,
    37,    37,    37,    37,    37,    37,    37,    37,    37,   nil,
    35,     3,   nil,   nil,   nil,   nil,    14,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    14,   nil,   nil,   nil,   nil,    25,   nil,    44,
    21,    36,   nil,   nil,   nil,   nil,    46,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,    25,     3,    14,
   nil,     5,    14,   nil,   nil,   nil,   nil,   nil,    55,    44,
    21,    36,    44,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,    25,   nil,    37,    37 ]

racc_goto_pointer = [
   nil,    32,    35,     3,    27,     6,   nil,   nil,     8,    -3,
  -167,  -151,  -174,     1,   -14,   -41,    11,   -92,    38,     8,
    27,   -22,   nil,   -48,   nil,   -13,  -103,  -100,  -192,     9,
   nil,   nil,   nil,  -198,  -198,   -95,   -21,    19,   -78,   -99,
   -73,   nil,   -62,  -101,   -23,  -188,   -16,   nil,    36,    29,
   -12,   -68,   -33,   nil,   -63,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   129,     4,     5,   nil,   nil,
    84,   nil,   nil,    43,    45,   nil,   nil,   nil,     7,   nil,
   nil,   nil,    31,    32,    33,   185,    36,   nil,   nil,   nil,
    40,    42,   225,   226,   nil,   nil,   100,    96,   nil,   nil,
   157,   230,   nil,   nil,   102,   nil,   104,    56,   nil,   nil,
   nil,    97,   116,    57,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 78, :_reduce_1,
  0, 79, :_reduce_2,
  1, 79, :_reduce_3,
  3, 79, :_reduce_4,
  1, 81, :_reduce_5,
  1, 81, :_reduce_6,
  6, 83, :_reduce_7,
  2, 85, :_reduce_8,
  3, 85, :_reduce_9,
  5, 86, :_reduce_10,
  5, 86, :_reduce_11,
  1, 86, :_reduce_none,
  2, 87, :_reduce_13,
  4, 90, :_reduce_14,
  1, 93, :_reduce_none,
  1, 93, :_reduce_16,
  1, 94, :_reduce_none,
  2, 94, :_reduce_18,
  0, 88, :_reduce_19,
  1, 88, :_reduce_20,
  3, 88, :_reduce_21,
  1, 84, :_reduce_22,
  2, 84, :_reduce_23,
  5, 95, :_reduce_24,
  2, 98, :_reduce_25,
  0, 99, :_reduce_26,
  1, 99, :_reduce_27,
  3, 99, :_reduce_28,
  1, 100, :_reduce_29,
  2, 100, :_reduce_30,
  2, 100, :_reduce_31,
  1, 100, :_reduce_32,
  6, 100, :_reduce_33,
  3, 100, :_reduce_34,
  5, 100, :_reduce_35,
  5, 100, :_reduce_36,
  1, 100, :_reduce_37,
  6, 100, :_reduce_38,
  1, 100, :_reduce_39,
  1, 100, :_reduce_none,
  2, 108, :_reduce_41,
  2, 89, :_reduce_42,
  0, 109, :_reduce_43,
  1, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 110, :_reduce_46,
  1, 111, :_reduce_47,
  3, 111, :_reduce_48,
  3, 107, :_reduce_49,
  5, 106, :_reduce_50,
  5, 106, :_reduce_51,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  0, 105, :_reduce_58,
  1, 105, :_reduce_59,
  5, 105, :_reduce_60,
  2, 118, :_reduce_61,
  3, 101, :_reduce_62,
  0, 92, :_reduce_63,
  1, 92, :_reduce_64,
  2, 92, :_reduce_65,
  3, 119, :_reduce_66,
  3, 119, :_reduce_67,
  1, 119, :_reduce_68,
  1, 119, :_reduce_69,
  1, 112, :_reduce_70,
  1, 112, :_reduce_71,
  1, 120, :_reduce_none,
  5, 120, :_reduce_73,
  0, 122, :_reduce_74,
  1, 122, :_reduce_75,
  3, 122, :_reduce_76,
  3, 103, :_reduce_77,
  3, 103, :_reduce_78,
  3, 103, :_reduce_79,
  1, 124, :_reduce_80,
  1, 124, :_reduce_81,
  1, 124, :_reduce_82,
  1, 124, :_reduce_83,
  1, 124, :_reduce_84,
  1, 124, :_reduce_85,
  1, 124, :_reduce_86,
  2, 96, :_reduce_87,
  2, 96, :_reduce_88,
  1, 96, :_reduce_89,
  0, 97, :_reduce_90,
  1, 97, :_reduce_none,
  4, 125, :_reduce_92,
  1, 126, :_reduce_93,
  3, 126, :_reduce_94,
  2, 127, :_reduce_95,
  1, 127, :_reduce_96,
  1, 102, :_reduce_97,
  1, 102, :_reduce_98,
  3, 102, :_reduce_99,
  3, 102, :_reduce_100,
  3, 114, :_reduce_101,
  3, 114, :_reduce_102,
  3, 114, :_reduce_103,
  3, 114, :_reduce_104,
  3, 114, :_reduce_105,
  3, 114, :_reduce_106,
  2, 114, :_reduce_107,
  3, 114, :_reduce_108,
  1, 114, :_reduce_109,
  3, 128, :_reduce_110,
  3, 128, :_reduce_111,
  3, 128, :_reduce_112,
  3, 128, :_reduce_113,
  3, 128, :_reduce_114,
  3, 128, :_reduce_115,
  3, 128, :_reduce_116,
  2, 128, :_reduce_117,
  2, 128, :_reduce_118,
  1, 113, :_reduce_119,
  1, 113, :_reduce_120,
  2, 113, :_reduce_121,
  1, 113, :_reduce_none,
  2, 130, :_reduce_123,
  3, 123, :_reduce_124,
  3, 123, :_reduce_125,
  0, 129, :_reduce_126,
  3, 129, :_reduce_127,
  0, 131, :_reduce_128,
  1, 131, :_reduce_129,
  3, 131, :_reduce_130,
  4, 121, :_reduce_131,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_151,
  0, 80, :_reduce_152,
  1, 80, :_reduce_153,
  1, 82, :_reduce_154,
  2, 82, :_reduce_155,
  1, 132, :_reduce_156,
  1, 132, :_reduce_none,
  1, 117, :_reduce_158 ]

racc_reduce_n = 159

racc_shift_n = 270

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kDTYPE_UINT => 22,
  :kDTYPE_LINT => 23,
  :kDTYPE_LLINT => 24,
  :kDTYPE_CHAR => 25,
  :kDTYPE_I8 => 26,
  :kDTYPE_I16 => 27,
  :kDTYPE_I32 => 28,
  :kDTYPE_I64 => 29,
  :kDTYPE_UI8 => 30,
  :kDTYPE_UI16 => 31,
  :kDTYPE_UI32 => 32,
  :kDTYPE_UI64 => 33,
  :kDTYPE_INT => 34,
  :kDTYPE_F32 => 35,
  :kDTYPE_F64 => 36,
  :kDTYPE_LF64 => 37,
  :kDTYPE_ROBJ => 38,
  :kDTYPE_ULINT => 39,
  :kDTYPE_ULLINT => 40,
  :tCUSTOM_DTYPE => 41,
  :tLPAREN => 42,
  :tRPAREN => 43,
  :tLSQUARE => 44,
  :tRSQUARE => 45,
  :tIDENTIFIER => 46,
  :tNL => 47,
  :tCOMMA => 48,
  :tSQUOTE => 49,
  :tSCOLON => 50,
  :EOF => 51,
  :tDOT => 52,
  :tQMARK => 53,
  :tSTART_LINE => 54,
  :tPLUS => 55,
  :tMINUS => 56,
  :tSTAR => 57,
  :tDIVIDE => 58,
  :tEXPO => 59,
  :tMODULUS => 60,
  :tASSIGN => 61,
  :tEQ => 62,
  :tLT => 63,
  :tLTEQ => 64,
  :tGT => 65,
  :tGTEQ => 66,
  :tANDOP => 67,
  :tOROP => 68,
  :tBANG => 69,
  :tOP_ASSIGN => 70,
  :tSTRING => 71,
  :tINTEGER => 72,
  :tFLOAT => 73,
  :tSINGLE_CHAR => 74,
  :UMINUS => 75,
  :tNEQ => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_7(val, _values, result)
            result = CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
            result = CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_14(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_16(val, _values, result)
    
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_18(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_19(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_21(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_23(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_24(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_26(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_27(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_28(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_29(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_30(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_31(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_32(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_33(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_34(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_35(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_36(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_37(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_38(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_41(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_42(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_45(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_46(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_47(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_48(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_49(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_50(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_51(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_59(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_60(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_61(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_62(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_63(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_64(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_65(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_66(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_67(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_69(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_70(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_71(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_73(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_74(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_75(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_76(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_77(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_78(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_79(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_80(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_81(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_82(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_83(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_84(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_85(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_86(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_87(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_88(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_90(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_92(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_94(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_95(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_96(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_97(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_98(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_99(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_100(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_101(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_102(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_103(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_104(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_107(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_108(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_109(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_113(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_114(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_116(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_117(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_118(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_121(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_123(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_124(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_125(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_127(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_129(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_130(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_131(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_151(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_153(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_154(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_158(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
