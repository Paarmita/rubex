#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 673)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'107,108,110,263,274,263,60,111,112,196,68,131,132,133,13,90,80,68,190',
'191,354,135,121,355,118,119,151,120,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,144,67,136,64,124,64,61,360,281',
'202,97,203,134,137,239,96,145,22,315,240,23,190,191,140,90,190,191,190',
'191,143,200,130,150,146,16,107,108,110,147,127,128,129,111,112,190,191',
'131,132,133,13,13,80,18,12,11,17,135,121,25,118,119,151,120,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,144,203',
'136,202,124,22,22,196,23,23,86,26,134,137,377,22,145,325,23,27,348,335',
'324,140,205,29,334,195,87,143,90,130,150,146,16,107,108,110,147,127',
'128,129,111,112,190,191,131,132,133,13,13,80,55,335,11,17,135,121,334',
'118,119,151,120,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,144,16,136,335,124,89,22,86,334,23,168,168,134,137',
'170,170,145,13,90,347,12,11,17,140,334,87,64,90,90,143,64,130,150,146',
'16,107,108,110,147,127,128,129,111,112,69,163,131,132,133,13,13,80,190',
'191,11,17,135,121,90,118,119,151,120,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,144,16,136,64,124,170,22,387',
'22,23,73,23,134,137,190,191,145,13,90,85,90,11,17,140,22,22,88,23,23',
'143,61,130,150,146,16,107,108,110,147,127,128,129,111,112,190,191,131',
'132,133,13,13,80,190,191,11,17,135,121,156,118,119,151,120,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,144,202',
'136,203,124,64,213,214,215,216,217,218,134,137,190,191,145,213,214,215',
'216,217,218,140,219,220,221,222,223,143,164,130,150,146,165,107,108',
'110,147,127,128,129,111,112,190,191,131,132,133,13,22,80,22,23,167,23',
'135,121,172,118,119,151,120,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,144,175,136,183,124,183,213,214,215,216',
'217,218,134,137,190,191,145,213,214,215,216,217,218,140,219,220,221',
'222,223,143,183,130,150,146,194,107,108,110,147,127,128,129,111,112',
'190,191,131,132,133,13,350,80,204,349,64,352,135,121,64,118,119,151',
'120,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,144,64,136,238,124,241,213,214,215,216,217,218,134,137,366,367',
'145,215,216,217,218,270,271,140,219,220,221,222,223,143,243,130,150',
'146,64,107,108,110,147,127,128,129,111,112,272,273,131,132,133,13,249',
'80,215,216,217,218,135,121,156,118,119,151,120,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,144,156,136,203,124',
'131,132,133,190,191,190,191,134,137,196,135,145,190,191,202,151,366',
'367,140,265,279,284,285,64,143,317,130,150,146,217,64,243,331,147,127',
'128,129,175,338,16,359,144,339,136,340,180,131,132,133,190,217,217,217',
'134,137,13,135,145,217,11,17,151,196,358,140,362,368,371,285,373,143',
'64,130,150,146,376,90,156,380,147,127,128,129,196,389,156,,144,,136',
',180,131,132,133,,,,22,134,137,23,135,145,,,,151,,,140,,,,,,143,,130',
'150,146,,,,,147,127,128,129,,,,,186,,136,,180,131,132,133,,,,,134,137',
',135,145,,,,151,,,213,214,215,216,217,218,,,130,150,146,,,,,147,127',
'128,129,220,221,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,,,',
'151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,144,,136,,180',
'131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,143,,130,150,146,,,',
',147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135,145',
',,,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,144,,136',
',180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130,150',
'146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135',
'145,,,,151,,,,213,214,215,216,217,218,,130,150,146,,,,,147,127,128,129',
'219,220,221,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,',
',,213,214,215,216,217,218,,130,150,146,,,,,147,127,128,129,219,220,221',
',235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130',
'150,146,,,,,147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137',
',135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,',
'144,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143',
',130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134',
'137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,144',
',136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130',
'150,146,,,,,147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137',
',135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,',
'144,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143',
',130,150,146,,,,,147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134',
'137,,135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129',
',,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,',
',143,,130,150,146,,,,,147,127,128,129,,,,,144,,136,,180,131,132,133',
',,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,,147,127',
'128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,',
'140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,144,,136,,180,131',
'132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,',
'147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,',
',,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,144,,136,',
'180,131,132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130,150',
'146,,,,,147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135',
'145,,,,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,,,136',
',180,131,132,133,,,,,134,137,,135,,,,,151,,,,,,,,,,,130,150,,,,,,,127',
'128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,',
',,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133',
',,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129',
',,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,',
'130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134',
'137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235',
',136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150',
'146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135',
'145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235,,136,,180',
'131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147',
'127,128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151',
',,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132',
'133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128',
'129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,',
',,,,130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,',
',,134,137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129',
',,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,',
'130,150,146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134',
'137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235',
',136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150',
'146,,,,,147,127,128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135',
'145,,,,151,,,,,,,,,,,130,150,146,,,,,147,127,128,129,,,,,235,,136,,180',
'131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,,,,,130,150,146,,,,,147',
'127,128,129,,,,,235,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151',
',,,,,,131,132,133,,130,150,146,,,,135,147,127,128,129,151,,,,235,,136',
',180,131,132,133,,,,,134,137,,135,145,,,,151,,,,136,,180,131,132,133',
',130,150,146,134,137,,135,147,127,128,129,151,,,,,,136,,180,,,130,150',
',,,134,137,,127,128,129,,,,,144,,136,,180,131,132,133,,130,150,,134',
'137,,135,145,127,128,129,151,,,140,,,,,,143,,130,150,146,,,,,147,127',
'128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,,,,151,,',
'140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,144,,136,,180,131',
'132,133,,,,,134,137,,135,145,,,,151,,,140,,,,,,143,,130,150,146,,,,',
'147,127,128,129,,,,,144,,136,,180,131,132,133,,,,,134,137,,135,145,',
',,151,,,140,,,,,,143,,130,150,146,,,,,147,127,128,129,,,,,235,,136,',
'180,131,132,133,,,,,134,137,,135,145,,,,151,,,,,,,131,132,133,,130,150',
'146,,,,135,147,127,128,129,151,,,,235,,136,,180,,,,,,,,134,137,,,145',
',,,,,,,136,,180,,,,,130,150,146,134,137,,,147,127,128,129,161,,,,213',
'214,215,216,217,218,,130,150,,,13,,80,,127,128,129,219,220,221,222,223',
',,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,316,,,,,22,,,23,,,,,,213,214,215,216,217,218,,224,226,227,228',
'229,,,,,,,219,220,221,222,223,13,,80,,,,,225,,,,,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,254,,,,,,,,,,',
',,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,316,,,,,,,,,,,,316,,213,214,215,216,217,218,,,270,271,272,273',
'213,214,215,216,217,218,219,220,221,222,223,,,,,,,,219,220,221,222,223',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,,,,,,22,,,23,213,214,215,216,217,218,,224,226,227,228,229,,,,,,,219',
'220,221,222,223,,,,,,,,225,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,,-26,,,,,-26,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,155,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,155,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,213,214,215,216,217,218,,,270,271,272,273,213,214,215',
'216,217,218,219,220,221,222,223,213,214,215,216,217,218,,219,220,221',
'222,223,213,214,215,216,217,218,219,220,221,222,223,213,214,215,216',
'217,218,,219,220,221,222,223,,,,,,,219,220,221,222,223' ]
        racc_action_table = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,84,84,184,189,381,25,84,84,296,28,84,84,84,84,297,84,196,117,117',
'296,84,84,297,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,28,84,184,84,381,25,330,196,124,80',
'124,84,84,152,80,84,2,231,152,2,189,189,84,330,184,184,381,381,84,124',
'84,84,84,20,174,174,174,84,84,84,84,174,174,231,231,174,174,174,174',
'20,174,1,20,20,20,174,174,11,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,281,174,126,174,174,20,122,174,20,281,12,174,174,356,5,174,245',
'5,13,288,260,245,174,126,16,260,122,281,174,356,174,174,174,24,248,248',
'248,174,174,174,174,248,248,288,288,248,248,248,248,24,248,18,277,24',
'24,248,248,277,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,0,248,278',
'248,70,24,67,278,24,102,326,248,248,102,326,248,0,70,287,0,0,0,248,287',
'67,26,102,326,248,27,248,248,248,158,262,262,262,248,248,248,248,262',
'262,29,94,262,262,262,262,158,262,177,177,158,158,262,262,94,262,262',
'262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262',
'262,262,262,262,262,262,262,262,262,262,71,262,59,262,256,158,378,74',
'158,61,74,262,262,259,259,262,71,256,66,378,71,71,262,81,91,68,81,91',
'262,72,262,262,262,160,265,265,265,262,262,262,262,265,265,261,261,265',
'265,265,265,160,265,280,280,160,160,265,265,89,265,265,265,265,265,265',
'265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,265,265,265,265,265,180,265,180,265,92,309,309,309,309,309,309,265',
'265,286,286,265,305,305,305,305,305,305,265,309,309,309,309,309,265',
'95,265,265,265,98,274,274,274,265,265,265,265,274,274,289,289,274,274',
'274,274,104,274,250,104,100,250,274,274,103,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,105,274,108,274,118,310,310,310,310,310,310',
'274,274,290,290,274,306,306,306,306,306,306,274,310,310,310,310,310',
'274,120,274,274,274,121,367,367,367,274,274,274,274,367,367,291,291',
'367,367,367,367,292,367,125,292,294,294,367,367,136,367,367,367,367',
'367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367',
'367,367,367,367,367,367,367,367,137,367,150,367,154,311,311,311,311',
'311,311,367,367,336,336,367,298,298,298,298,339,339,367,311,311,311',
'311,311,367,155,367,367,367,157,388,388,388,367,367,367,367,388,388',
'340,340,388,388,388,388,159,388,299,299,299,299,388,388,163,388,388',
'388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388,388',
'388,388,388,388,388,388,388,388,388,388,169,388,170,388,107,107,107',
'346,346,363,363,388,388,178,107,388,372,372,181,107,390,390,388,185',
'194,197,198,208,388,233,388,388,388,234,239,241,254,388,388,388,388',
'258,266,329,329,107,268,107,269,107,110,110,110,276,300,301,302,107',
'107,329,110,107,303,329,329,110,323,328,107,332,337,341,345,351,107',
'352,107,107,107,354,361,362,364,107,107,107,107,375,386,389,,110,,110',
',110,111,111,111,,,,329,110,110,329,111,110,,,,111,,,110,,,,,,110,,110',
'110,110,,,,,110,110,110,110,,,,,111,,111,,111,112,112,112,,,,,111,111',
',112,111,,,,112,,,304,304,304,304,304,304,,,111,111,111,,,,,111,111',
'111,111,304,304,,,112,,112,,112,139,139,139,,,,,112,112,,139,112,,,',
'139,,,112,,,,,,112,,112,112,112,,,,,112,112,112,112,,,,,139,,139,,139',
'143,143,143,,,,,139,139,,143,139,,,,143,,,,,,,,,139,,139,139,139,,,',
',139,139,139,139,,,,,143,,143,,143,144,144,144,,,,,143,143,,144,143',
',,,144,,,143,,,,,,143,,143,143,143,,,,,143,143,143,143,,,,,144,,144',
',144,145,145,145,,,,,144,144,,145,144,,,,145,,,144,,,,,,144,,144,144',
'144,,,,,144,144,144,144,,,,,145,,145,,145,146,146,146,,,,,145,145,,146',
'145,,,,146,,,,307,307,307,307,307,307,,145,145,145,,,,,145,145,145,145',
'307,307,307,,146,,146,,146,147,147,147,,,,,146,146,,147,146,,,,147,',
',,308,308,308,308,308,308,,146,146,146,,,,,146,146,146,146,308,308,308',
',147,,147,,147,175,175,175,,,,,147,147,,175,147,,,,175,,,,,,,,,,,147',
'147,147,,,,,147,147,147,147,,,,,175,,175,,175,182,182,182,,,,,175,175',
',182,175,,,,182,,,175,,,,,,175,,175,175,175,,,,,175,175,175,175,,,,',
'182,,182,,182,186,186,186,,,,,182,182,,186,182,,,,186,,,182,,,,,,182',
',182,182,182,,,,,182,182,182,182,,,,,186,,186,,186,190,190,190,,,,,186',
'186,,190,186,,,,190,,,,,,,,,,,186,186,186,,,,,186,186,186,186,,,,,190',
',190,,190,191,191,191,,,,,190,190,,191,190,,,,191,,,190,,,,,,190,,190',
'190,190,,,,,190,190,190,190,,,,,191,,191,,191,192,192,192,,,,,191,191',
',192,191,,,,192,,,191,,,,,,191,,191,191,191,,,,,191,191,191,191,,,,',
'192,,192,,192,193,193,193,,,,,192,192,,193,192,,,,193,,,192,,,,,,192',
',192,192,192,,,,,192,192,192,192,,,,,193,,193,,193,195,195,195,,,,,193',
'193,,195,193,,,,195,,,193,,,,,,193,,193,193,193,,,,,193,193,193,193',
',,,,195,,195,,195,200,200,200,,,,,195,195,,200,195,,,,200,,,195,,,,',
',195,,195,195,195,,,,,195,195,195,195,,,,,200,,200,,200,202,202,202',
',,,,200,200,,202,200,,,,202,,,200,,,,,,200,,200,200,200,,,,,200,200',
'200,200,,,,,202,,202,,202,203,203,203,,,,,202,202,,203,202,,,,203,,',
'202,,,,,,202,,202,202,202,,,,,202,202,202,202,,,,,203,,203,,203,204',
'204,204,,,,,203,203,,204,203,,,,204,,,203,,,,,,203,,203,203,203,,,,',
'203,203,203,203,,,,,204,,204,,204,205,205,205,,,,,204,204,,205,204,',
',,205,,,204,,,,,,204,,204,204,204,,,,,204,204,204,204,,,,,205,,205,',
'205,207,207,207,,,,,205,205,,207,205,,,,207,,,205,,,,,,205,,205,205',
'205,,,,,205,205,205,205,,,,,207,,207,,207,210,210,210,,,,,207,207,,210',
'207,,,,210,,,207,,,,,,207,,207,207,207,,,,,207,207,207,207,,,,,,,210',
',210,213,213,213,,,,,210,210,,213,,,,,213,,,,,,,,,,,210,210,,,,,,,210',
'210,210,,,,,213,,213,,213,214,214,214,,,,,213,213,,214,213,,,,214,,',
',,,,,,,,213,213,213,,,,,213,213,213,213,,,,,214,,214,,214,215,215,215',
',,,,214,214,,215,214,,,,215,,,,,,,,,,,214,214,214,,,,,214,214,214,214',
',,,,215,,215,,215,216,216,216,,,,,215,215,,216,215,,,,216,,,,,,,,,,',
'215,215,215,,,,,215,215,215,215,,,,,216,,216,,216,217,217,217,,,,,216',
'216,,217,216,,,,217,,,,,,,,,,,216,216,216,,,,,216,216,216,216,,,,,217',
',217,,217,218,218,218,,,,,217,217,,218,217,,,,218,,,,,,,,,,,217,217',
'217,,,,,217,217,217,217,,,,,218,,218,,218,219,219,219,,,,,218,218,,219',
'218,,,,219,,,,,,,,,,,218,218,218,,,,,218,218,218,218,,,,,219,,219,,219',
'220,220,220,,,,,219,219,,220,219,,,,220,,,,,,,,,,,219,219,219,,,,,219',
'219,219,219,,,,,220,,220,,220,221,221,221,,,,,220,220,,221,220,,,,221',
',,,,,,,,,,220,220,220,,,,,220,220,220,220,,,,,221,,221,,221,222,222',
'222,,,,,221,221,,222,221,,,,222,,,,,,,,,,,221,221,221,,,,,221,221,221',
'221,,,,,222,,222,,222,223,223,223,,,,,222,222,,223,222,,,,223,,,,,,',
',,,,222,222,222,,,,,222,222,222,222,,,,,223,,223,,223,224,224,224,,',
',,223,223,,224,223,,,,224,,,,,,,,,,,223,223,223,,,,,223,223,223,223',
',,,,224,,224,,224,225,225,225,,,,,224,224,,225,224,,,,225,,,,,,,,,,',
'224,224,224,,,,,224,224,224,224,,,,,225,,225,,225,226,226,226,,,,,225',
'225,,226,225,,,,226,,,,,,,,,,,225,225,225,,,,,225,225,225,225,,,,,226',
',226,,226,227,227,227,,,,,226,226,,227,226,,,,227,,,,,,,,,,,226,226',
'226,,,,,226,226,226,226,,,,,227,,227,,227,228,228,228,,,,,227,227,,228',
'227,,,,228,,,,,,,,,,,227,227,227,,,,,227,227,227,227,,,,,228,,228,,228',
'229,229,229,,,,,228,228,,229,228,,,,229,,,,,,,,,,,228,228,228,,,,,228',
'228,228,228,,,,,229,,229,,229,235,235,235,,,,,229,229,,235,229,,,,235',
',,,,,,243,243,243,,229,229,229,,,,243,229,229,229,229,243,,,,235,,235',
',235,353,353,353,,,,,235,235,,353,235,,,,353,,,,243,,243,285,285,285',
',235,235,235,243,243,,285,235,235,235,235,285,,,,,,353,,353,,,243,243',
',,,353,353,,243,243,243,,,,,285,,285,,285,334,334,334,,353,353,,285',
'285,,334,285,353,353,353,334,,,285,,,,,,285,,285,285,285,,,,,285,285',
'285,285,,,,,334,,334,,334,349,349,349,,,,,334,334,,349,334,,,,349,,',
'334,,,,,,334,,334,334,334,,,,,334,334,334,334,,,,,349,,349,,349,366',
'366,366,,,,,349,349,,366,349,,,,366,,,349,,,,,,349,,349,349,349,,,,',
'349,349,349,349,,,,,366,,366,,366,369,369,369,,,,,366,366,,369,366,',
',,369,,,366,,,,,,366,,366,366,366,,,,,366,366,366,366,,,,,369,,369,',
'369,370,370,370,,,,,369,369,,370,369,,,,370,,,,,,,374,374,374,,369,369',
'369,,,,374,369,369,369,369,374,,,,370,,370,,370,,,,,,,,370,370,,,370',
',,,,,,,374,,374,,,,,370,370,370,374,374,,,370,370,370,370,93,,,,312',
'312,312,312,312,312,,374,374,,,93,,93,,374,374,374,312,312,312,312,312',
',,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,232,,,,,93,,,93,,,,,,232,232,232,232,232,232,,232,232,232,232',
'232,,,,,,,232,232,232,232,232,63,,63,,,,,232,,,,,,,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,164,,,,,,,,,,',
',,,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,267,,,,,,,,,,,,318,,267,267,267,267,267',
'267,,,267,267,267,267,318,318,318,318,318,318,267,267,267,267,267,,',
',,,,,318,318,318,318,318,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99',
'99,99,99,99,99,99,99,99,99,,,,,,99,,,99,141,141,141,141,141,141,,141',
'141,141,141,141,,,,,,,141,141,141,141,141,,,,,,,,141,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,,156,,,,,156,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,85,85,85,85,,,,,85,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,,,,,240',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,140,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,324',
'324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324,324',
'324,324,324,324,324,324,188,188,188,188,188,188,,,188,188,188,188,313',
'313,313,313,313,313,188,188,188,188,188,314,314,314,314,314,314,,313',
'313,313,313,313,383,383,383,383,383,383,314,314,314,314,314,384,384',
'384,384,384,384,,383,383,383,383,383,,,,,,,384,384,384,384,384' ]
        racc_action_check = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   225,   104,     8,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   nil,    50,    63,    98,   nil,   nil,   140,  3315,   191,   nil,
    84,   nil,   nil,   nil,   171,   -21,   191,   195,    -7,   204,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,
  3339,   263,   nil,  3051,   nil,  3363,   276,   166,   272,   nil,
   171,   312,   264,   nil,   260,   nil,   nil,   nil,   nil,   nil,
     7,   276,   nil,   nil,    -4,  3257,   nil,   nil,   nil,   315,
   nil,   277,   344,  2976,   211,   353,   nil,   nil,   431,  3162,
   392,   nil,   180,   455,   389,   482,   nil,   651,   434,   nil,
   697,   743,   789,   nil,   nil,   nil,   nil,   -65,   436,   nil,
   461,   503,    80,   nil,     5,   462,    86,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   484,   514,   nil,   835,
  3387,  3156,   nil,   881,   927,   973,  1019,  1065,   nil,   nil,
   521,   nil,     9,   nil,   519,   527,  3226,   547,   258,   621,
   345,   nil,   nil,   576,  3089,   nil,   nil,   nil,   nil,   606,
   606,   nil,   nil,   nil,    83,  1111,   nil,   195,   609,   nil,
   345,   624,  1157,   nil,    -6,   671,  1203,   nil,  3420,   -10,
  1249,  1295,  1341,  1387,   626,  1433,     0,   625,   611,   nil,
  1479,   nil,  1525,  1571,  1617,  1663,   nil,  1709,   628,   nil,
  1755,   nil,   nil,  1801,  1847,  1893,  1939,  1985,  2031,  2077,
  2123,  2169,  2215,  2261,  2307,  2353,  2399,  2445,  2491,  2537,
   nil,    13,  2975,   634,   620,  2583,   nil,   nil,  3411,   635,
  3286,   620,   nil,  2605,   nil,    99,   nil,   nil,   170,   nil,
   391,   nil,   nil,   nil,   638,   nil,   258,   nil,   697,   244,
   103,   274,   257,   nil,   nil,   344,   647,  3088,   648,   650,
   nil,   nil,   nil,   nil,   431,   nil,   632,   135,   172,   nil,
   282,    82,   nil,   nil,   nil,  2651,   331,   188,   100,   361,
   418,   448,   478,   nil,   480,   nil,   -57,   -58,   518,   553,
   641,   642,   643,   649,   751,   346,   433,   982,  1028,   335,
   422,   509,  2912,  3432,  3443,   nil,   nil,   nil,  3100,   nil,
   nil,   nil,   nil,   662,  3435,   nil,   181,   nil,   726,   703,
     3,   nil,   674,   nil,  2697,   nil,   581,   729,   nil,   516,
   537,   730,   nil,   nil,   nil,   657,   586,   nil,   nil,  2743,
   nil,   665,   676,  2629,   660,   nil,    96,   nil,   nil,   nil,
   nil,   669,   687,   588,   741,   nil,  2789,   518,   nil,  2835,
  2881,   nil,   595,   nil,  2903,   683,   nil,   nil,   260,   nil,
   nil,    -4,   nil,  3455,  3466,   nil,   693,   nil,   605,   695,
   675,   nil,   nil ]

racc_action_default = [
    -6,  -225,  -214,    -2,    -4,  -225,    -7,    -9,   -10,   -11,
   -12,  -225,  -225,  -225,   -46,   -47,   -53,  -225,  -225,    -1,
  -215,  -216,  -218,  -219,    -5,   -15,  -225,  -225,  -225,  -225,
  -101,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,   393,    -3,  -217,    -8,  -225,
  -225,  -225,   -17,   -18,  -224,   -32,  -129,  -127,  -225,   -54,
  -225,    -6,   -15,   -16,  -225,   -20,   -22,   -23,   -24,  -101,
  -225,  -214,   -33,  -101,   -56,  -225,  -125,  -126,  -128,   -29,
  -102,  -214,  -225,  -225,  -225,  -225,   -39,   -40,  -225,  -215,
   -35,   -37,  -225,  -225,  -214,   -57,   -59,  -208,  -210,   -62,
  -225,  -225,  -225,   -67,   -68,   -69,   -70,   -71,  -210,   -73,
  -210,  -225,  -161,  -101,  -178,  -169,  -178,  -109,  -110,  -111,
  -112,  -113,  -114,  -115,  -116,  -117,  -220,  -220,  -137,  -225,
  -225,  -142,  -143,  -225,  -225,  -225,  -225,  -225,  -170,  -172,
  -225,  -174,  -225,  -131,  -225,  -135,  -101,  -225,  -215,  -225,
    -6,   -19,   -21,   -29,  -225,   -31,   -34,  -101,  -101,   -29,
   -98,   -99,   -48,   -55,  -215,  -225,   -60,  -209,  -161,  -169,
  -178,  -178,  -180,  -211,  -225,  -225,  -225,   -78,  -225,  -225,
  -225,  -225,  -180,  -180,  -225,  -225,  -225,   -91,   -94,   -95,
  -225,  -171,  -180,  -225,  -225,  -225,  -175,  -103,  -221,  -222,
  -120,  -138,  -101,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -144,  -225,  -142,  -143,  -157,  -225,  -158,  -159,  -225,  -225,
  -225,  -135,  -134,  -225,   -27,  -225,  -101,   -52,   -56,   -13,
  -225,   -25,   -38,  -101,  -225,   -36,  -225,   -97,   -58,   -64,
  -212,  -181,   -56,   -85,   -86,   -56,  -225,  -225,  -225,  -225,
   -81,   -82,   -83,   -84,   -56,  -139,  -140,  -212,  -212,   -75,
   -76,  -127,  -176,  -177,  -101,  -225,  -106,  -225,  -225,  -107,
  -108,  -104,  -225,  -223,  -220,  -121,  -225,  -225,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -162,
  -163,  -164,  -165,  -166,  -167,  -145,  -160,  -168,  -225,  -101,
  -130,  -132,  -133,  -136,  -101,   -30,   -50,   -51,  -225,  -225,
   -41,  -101,  -225,   -61,  -225,  -213,   -87,  -225,   -77,  -225,
  -225,  -225,   -72,   -74,   -92,   -93,  -100,  -179,  -183,  -225,
  -118,  -225,  -220,  -225,  -225,  -141,  -225,   -28,   -49,   -14,
  -101,   -42,   -29,  -182,  -225,   -88,  -225,   -56,   -65,  -225,
  -225,   -66,  -105,  -119,  -225,  -123,  -124,  -173,   -44,   -96,
   -63,  -225,   -90,   -79,   -80,  -122,  -225,   -45,   -56,   -29,
   -87,   -43,   -89 ]

racc_goto_table = [
    63,    65,    70,    57,    10,    58,   157,    57,   262,    30,
   103,   122,   153,   207,   210,   244,   126,   242,   101,    66,
    19,   125,   295,    91,    10,   187,    20,   364,    10,    24,
    82,    59,   206,    71,   199,    75,     3,   182,    78,   171,
     1,     2,   333,   260,    62,    74,   245,   192,    81,   193,
   100,    94,    72,   277,   278,    79,    56,    83,   198,   342,
   343,    95,   252,   287,   166,   162,   160,    77,    78,   386,
    28,    84,   258,   176,   185,    10,    57,   154,    92,   369,
   251,   392,    57,   370,   197,    79,   257,   206,   332,   292,
   294,    83,   353,   152,   211,   233,   nil,    77,    93,    98,
   266,   122,   255,   322,   nil,    99,   126,   nil,   nil,   159,
   nil,   125,   250,   nil,   nil,   158,   nil,   nil,   nil,   nil,
   nil,   nil,   173,   nil,   nil,   nil,   nil,   nil,   174,   nil,
   nil,   248,   212,   283,   nil,   nil,   nil,   296,   nil,    58,
   256,    57,   nil,   nil,   nil,   nil,   nil,   nil,   246,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   253,    57,   264,   nil,
   nil,   nil,    10,   nil,    10,   nil,   nil,   321,   nil,   nil,
   323,   351,   nil,   177,   328,   122,   184,   nil,   189,   nil,
   126,   327,   293,   357,   297,   125,   385,   282,   336,   122,
   nil,   337,   122,   171,   126,   344,   nil,   126,   nil,   125,
   341,   122,   125,   nil,   nil,   388,   126,   nil,   nil,   230,
   231,   125,   nil,   320,   nil,   nil,   nil,   nil,   326,   345,
   nil,   nil,   nil,   nil,   nil,   330,   nil,   nil,   nil,   374,
   319,   nil,   154,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   259,   nil,   nil,   nil,   nil,   nil,   nil,   261,   nil,
   nil,   nil,   nil,   nil,   188,   nil,   275,   276,   261,   261,
   nil,   280,   nil,   171,   nil,   nil,   286,   nil,   261,   288,
   289,   290,   nil,   291,   329,   nil,   nil,   nil,   nil,   379,
   375,   nil,   nil,   nil,   nil,   nil,   nil,   232,   234,   236,
   237,   356,   nil,   382,   122,   nil,   nil,   nil,   nil,   126,
   nil,   296,   nil,   361,   125,   nil,   391,   nil,   nil,   nil,
    58,   nil,    57,   nil,   390,   122,   246,   nil,   nil,   nil,
   126,   nil,   nil,   nil,   nil,   125,   nil,   nil,   nil,   267,
   nil,   nil,   378,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   346,   nil,   nil,   nil,   264,   298,   299,   300,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   nil,   nil,   nil,   nil,   nil,   318,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   363,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   372,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   381,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   383,   384 ]

racc_goto_check = [
    14,    14,    21,    77,    12,     8,    22,    77,    47,    15,
    37,    52,    70,    65,    65,    24,    63,    71,    28,    35,
     3,    61,    67,     7,    12,    53,     5,    48,    12,     5,
    26,    13,    75,    14,    59,    18,     4,    42,    20,    61,
     1,     2,    44,    43,    16,    17,    23,    42,    25,    42,
    27,    21,    15,    43,    43,    15,     4,    15,    28,    44,
    44,    29,    30,    43,    26,    18,    14,    12,    20,    31,
    34,    36,    39,    41,    49,    12,    77,    15,    13,    55,
    22,    48,    77,    56,    58,    15,    22,    75,    60,    62,
    66,    15,    68,    69,    72,    74,   nil,    12,     5,     3,
    53,    52,    28,    71,   nil,     5,    63,   nil,   nil,     3,
   nil,    61,     7,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,     5,   nil,
   nil,    14,    15,    61,   nil,   nil,   nil,    52,   nil,     8,
    21,    77,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    77,    14,   nil,
   nil,   nil,    12,   nil,    12,   nil,   nil,    70,   nil,   nil,
    52,    65,   nil,    46,    37,    52,    46,   nil,    46,   nil,
    63,    28,    14,    24,    21,    61,    67,    35,    37,    52,
   nil,    37,    52,    61,    63,    59,   nil,    63,   nil,    61,
    37,    52,    61,   nil,   nil,    47,    63,   nil,   nil,    46,
    46,    61,   nil,    14,   nil,   nil,   nil,   nil,    21,    28,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,    65,
    15,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,    54,   nil,    46,    46,    46,    46,
   nil,    46,   nil,    61,   nil,   nil,    46,   nil,    46,    46,
    46,    46,   nil,    46,     5,   nil,   nil,   nil,   nil,    22,
    52,   nil,   nil,   nil,   nil,   nil,   nil,    54,    54,    54,
    54,    21,   nil,    37,    52,   nil,   nil,   nil,   nil,    63,
   nil,    52,   nil,    21,    61,   nil,    22,   nil,   nil,   nil,
     8,   nil,    77,   nil,    37,    52,    15,   nil,   nil,   nil,
    63,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,    54,
   nil,   nil,    21,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    14,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,   nil,   nil,   nil,   nil,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,    54 ]

racc_goto_pointer = [
   nil,    40,    41,    18,    36,    24,   nil,   -48,   -19,   nil,
   nil,   nil,     4,     6,   -26,    -8,    18,   -18,   -28,   nil,
   -25,   -28,   -83,  -110,  -141,   -17,   -35,   -33,   -65,   -19,
  -102,  -309,   nil,   nil,    54,    -9,     5,   -74,   nil,  -102,
   nil,   -34,   -71,  -139,  -218,   nil,    66,  -176,  -309,   -37,
   nil,   nil,   -73,   -86,   143,  -260,  -257,   nil,   -39,   -89,
  -168,   -63,  -118,   -68,   nil,  -123,  -120,  -188,  -204,     8,
   -73,  -138,   -45,   nil,   -49,   -94,   nil,   -17,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   114,   nil,   209,   123,   nil,   nil,   nil,    76,
   116,   102,   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,
   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   104,   105,
   106,   nil,   nil,   nil,   nil,   109,   117,   nil,   nil,   nil,
   113,   115,   178,   nil,   141,   268,   269,   365,   nil,   nil,
   169,   179,   nil,   181,   148,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   138,   139,   142,   201,   149,    21,   208 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 103, :_reduce_1,
  1, 104, :_reduce_2,
  3, 104, :_reduce_3,
  1, 106, :_reduce_4,
  2, 106, :_reduce_5,
  0, 109, :_reduce_6,
  1, 109, :_reduce_7,
  3, 109, :_reduce_8,
  1, 110, :_reduce_9,
  1, 110, :_reduce_10,
  1, 110, :_reduce_11,
  1, 110, :_reduce_12,
  7, 112, :_reduce_13,
  9, 113, :_reduce_14,
  0, 115, :_reduce_15,
  2, 115, :_reduce_16,
  3, 108, :_reduce_17,
  1, 118, :_reduce_18,
  4, 118, :_reduce_19,
  1, 119, :_reduce_20,
  3, 119, :_reduce_21,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 121, :_reduce_25,
  0, 125, :_reduce_26,
  1, 125, :_reduce_27,
  3, 125, :_reduce_28,
  0, 124, :_reduce_29,
  3, 124, :_reduce_30,
  6, 114, :_reduce_31,
  0, 127, :_reduce_32,
  1, 127, :_reduce_33,
  3, 127, :_reduce_34,
  2, 128, :_reduce_35,
  3, 129, :_reduce_36,
  1, 129, :_reduce_37,
  4, 122, :_reduce_38,
  1, 131, :_reduce_none,
  1, 131, :_reduce_40,
  2, 132, :_reduce_41,
  3, 132, :_reduce_42,
  7, 132, :_reduce_43,
  0, 133, :_reduce_44,
  1, 133, :_reduce_45,
  1, 111, :_reduce_46,
  1, 111, :_reduce_47,
  6, 134, :_reduce_48,
  8, 135, :_reduce_49,
  2, 126, :_reduce_50,
  2, 126, :_reduce_51,
  1, 126, :_reduce_52,
  0, 136, :_reduce_53,
  2, 136, :_reduce_54,
  2, 139, :_reduce_55,
  0, 140, :_reduce_56,
  1, 140, :_reduce_57,
  3, 140, :_reduce_58,
  1, 141, :_reduce_59,
  2, 141, :_reduce_60,
  4, 141, :_reduce_61,
  1, 141, :_reduce_62,
  6, 141, :_reduce_63,
  3, 141, :_reduce_64,
  5, 141, :_reduce_65,
  5, 141, :_reduce_66,
  1, 141, :_reduce_67,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_71,
  4, 141, :_reduce_72,
  1, 141, :_reduce_73,
  4, 141, :_reduce_74,
  3, 153, :_reduce_75,
  3, 152, :_reduce_76,
  3, 151, :_reduce_77,
  1, 151, :_reduce_none,
  5, 155, :_reduce_79,
  5, 155, :_reduce_80,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 150, :_reduce_87,
  1, 150, :_reduce_88,
  5, 150, :_reduce_89,
  2, 159, :_reduce_90,
  2, 142, :_reduce_91,
  3, 160, :_reduce_92,
  3, 160, :_reduce_93,
  1, 160, :_reduce_94,
  1, 160, :_reduce_95,
  6, 130, :_reduce_96,
  3, 130, :_reduce_97,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_100,
  0, 123, :_reduce_101,
  2, 123, :_reduce_102,
  0, 164, :_reduce_103,
  1, 164, :_reduce_104,
  3, 164, :_reduce_105,
  3, 147, :_reduce_106,
  3, 147, :_reduce_107,
  3, 147, :_reduce_108,
  1, 166, :_reduce_109,
  1, 166, :_reduce_110,
  1, 166, :_reduce_111,
  1, 166, :_reduce_112,
  1, 166, :_reduce_113,
  1, 166, :_reduce_114,
  1, 166, :_reduce_115,
  1, 166, :_reduce_116,
  1, 166, :_reduce_117,
  4, 166, :_reduce_118,
  5, 166, :_reduce_119,
  0, 168, :_reduce_120,
  1, 168, :_reduce_121,
  4, 168, :_reduce_122,
  3, 169, :_reduce_123,
  2, 170, :_reduce_none,
  2, 137, :_reduce_125,
  2, 137, :_reduce_126,
  1, 137, :_reduce_127,
  2, 137, :_reduce_128,
  0, 138, :_reduce_129,
  4, 138, :_reduce_130,
  1, 171, :_reduce_131,
  3, 171, :_reduce_132,
  3, 172, :_reduce_133,
  2, 172, :_reduce_134,
  0, 173, :_reduce_135,
  2, 173, :_reduce_136,
  1, 148, :_reduce_137,
  2, 148, :_reduce_138,
  3, 148, :_reduce_139,
  3, 148, :_reduce_140,
  4, 175, :_reduce_141,
  1, 174, :_reduce_142,
  1, 174, :_reduce_143,
  2, 174, :_reduce_144,
  3, 174, :_reduce_145,
  3, 156, :_reduce_146,
  3, 156, :_reduce_147,
  3, 156, :_reduce_148,
  3, 156, :_reduce_149,
  3, 156, :_reduce_150,
  3, 156, :_reduce_151,
  3, 156, :_reduce_152,
  3, 156, :_reduce_153,
  3, 156, :_reduce_154,
  3, 156, :_reduce_155,
  3, 156, :_reduce_156,
  2, 156, :_reduce_157,
  2, 156, :_reduce_158,
  2, 156, :_reduce_159,
  3, 156, :_reduce_160,
  1, 156, :_reduce_161,
  3, 176, :_reduce_162,
  3, 176, :_reduce_163,
  3, 176, :_reduce_164,
  3, 176, :_reduce_165,
  3, 176, :_reduce_166,
  3, 176, :_reduce_167,
  3, 176, :_reduce_168,
  1, 154, :_reduce_169,
  1, 154, :_reduce_170,
  2, 154, :_reduce_171,
  1, 154, :_reduce_none,
  5, 154, :_reduce_173,
  1, 154, :_reduce_174,
  2, 178, :_reduce_175,
  3, 165, :_reduce_176,
  3, 165, :_reduce_177,
  0, 177, :_reduce_178,
  3, 177, :_reduce_179,
  0, 145, :_reduce_180,
  1, 145, :_reduce_181,
  3, 145, :_reduce_182,
  4, 163, :_reduce_183,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_207,
  0, 143, :_reduce_208,
  1, 143, :_reduce_none,
  0, 144, :_reduce_210,
  1, 144, :_reduce_none,
  0, 146, :_reduce_212,
  1, 146, :_reduce_none,
  0, 105, :_reduce_214,
  1, 105, :_reduce_215,
  1, 107, :_reduce_216,
  2, 107, :_reduce_217,
  1, 179, :_reduce_218,
  1, 179, :_reduce_none,
  0, 167, :_reduce_220,
  1, 167, :_reduce_none,
  1, 180, :_reduce_none,
  2, 180, :_reduce_none,
  1, 116, :_reduce_224 ]

racc_reduce_n = 225

racc_shift_n = 393

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kBLOCK_GIVEN => 30,
  :kYIELD => 31,
  :kDTYPE_UINT => 32,
  :kDTYPE_LINT => 33,
  :kDTYPE_LLINT => 34,
  :kDTYPE_CHAR => 35,
  :kDTYPE_I8 => 36,
  :kDTYPE_I16 => 37,
  :kDTYPE_I32 => 38,
  :kDTYPE_I64 => 39,
  :kDTYPE_UI8 => 40,
  :kDTYPE_UI16 => 41,
  :kDTYPE_UI32 => 42,
  :kDTYPE_UI64 => 43,
  :kDTYPE_INT => 44,
  :kDTYPE_F32 => 45,
  :kDTYPE_F64 => 46,
  :kDTYPE_LF64 => 47,
  :kDTYPE_ROBJ => 48,
  :kDTYPE_ULINT => 49,
  :kDTYPE_ULLINT => 50,
  :kDTYPE_VOID => 51,
  :kDTYPE_SIZE_T => 52,
  :kDTYPE_RB_STR => 53,
  :kDTYPE_UCHAR => 54,
  :tCUSTOM_DTYPE => 55,
  :tLPAREN => 56,
  :tRPAREN => 57,
  :tLSQUARE => 58,
  :tRSQUARE => 59,
  :tIDENTIFIER => 60,
  :tNL => 61,
  :tCOMMA => 62,
  :tSQUOTE => 63,
  :tSCOLON => 64,
  :EOF => 65,
  :tDOT => 66,
  :tQMARK => 67,
  :tSYMBOL => 68,
  :tLBRACE => 69,
  :tRBRACE => 70,
  :tPLUS => 71,
  :tMINUS => 72,
  :tSTAR => 73,
  :tDIVIDE => 74,
  :tEXPO => 75,
  :tMODULUS => 76,
  :tASSIGN => 77,
  :tEQ => 78,
  :tLT => 79,
  :tLTEQ => 80,
  :tGT => 81,
  :tGTEQ => 82,
  :tANDOP => 83,
  :tOROP => 84,
  :tBANG => 85,
  :tOP_ASSIGN => 86,
  :tSTRING => 87,
  :kSIZEOF => 88,
  :tBIT_AND => 89,
  :tBIT_OR => 90,
  :tBIT_XOR => 91,
  :tBIT_LSHIFT => 92,
  :tBIT_RSHIFT => 93,
  :tBIT_NOT => 94,
  :tINTEGER => 95,
  :tFLOAT => 96,
  :tSINGLE_CHAR => 97,
  :ADDRESS_OF => 98,
  :TYPECAST => 99,
  :UMINUS => 100,
  :tNEQ => 101 }

racc_nt_base = 102

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_declarations",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_18(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_20(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_21(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_25(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_28(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_30(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_31(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_33(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_35(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_36(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_37(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_38(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_41(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_42(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_43(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_44(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_48(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_49(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_50(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_51(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_53(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_56(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_57(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_58(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_59(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_60(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_61(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_62(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_63(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_64(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_66(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_71(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_72(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_73(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_74(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_75(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_76(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_77(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_79(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_80(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_88(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_89(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_90(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_91(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_92(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_93(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_96(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_97(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_100(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_101(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_102(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_103(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_104(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_105(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_106(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_107(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_108(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_119(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_122(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_123(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_126(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_127(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_128(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_129(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 480)
  def _reduce_130(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_131(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_132(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_133(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_134(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_135(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_137(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_138(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_141(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_143(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_144(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_157(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_158(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_159(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 564)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 565)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_168(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 569)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_170(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_171(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_173(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_174(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_175(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_176(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_177(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_178(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_180(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_181(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 611)
  def _reduce_182(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_183(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

module_eval(<<'.,.,', 'parser.racc', 626)
  def _reduce_207(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_208(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_210(val, _values, result)
    
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'parser.racc', 638)
  def _reduce_212(val, _values, result)
    
    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.racc', 642)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_215(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 646)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_217(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 650)
  def _reduce_218(val, _values, result)
    
    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_220(val, _values, result)
    
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'parser.racc', 662)
  def _reduce_224(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
