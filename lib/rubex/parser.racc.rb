#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 608)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'100,101,103,239,249,239,330,104,105,60,81,121,122,123,13,186,90,187',
'312,18,81,125,111,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,132,78,80,64,114,64,26,61,27,186,152,187,124',
'81,133,151,29,79,282,176,177,128,55,176,177,176,177,131,184,120,138',
'134,16,100,101,103,135,117,118,119,104,105,176,177,121,122,123,13,13',
'90,62,12,11,17,125,111,64,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,132,187,311,186,114,22,22,230,23,23,78',
'218,124,156,133,289,219,158,81,66,288,128,189,67,176,177,79,131,81,120',
'138,134,16,100,101,103,135,117,118,119,104,105,176,177,121,122,123,13',
'13,90,64,310,11,17,125,111,237,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,132,156,180,16,114,158,22,158,22,23',
'331,23,124,71,133,345,81,64,81,13,179,128,12,11,17,81,81,131,77,120',
'138,134,16,100,101,103,135,117,118,119,104,105,176,177,121,122,123,13',
'13,90,176,177,11,17,125,111,61,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,132,143,16,64,114,22,22,22,23,23,23',
'153,124,22,133,155,23,22,13,160,23,128,11,17,163,22,178,131,23,120,138',
'134,16,100,101,103,135,117,118,119,104,105,176,177,121,122,123,13,13',
'90,176,177,11,17,125,111,188,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,132,176,177,217,114,193,194,195,196',
'197,198,220,124,64,133,193,194,195,196,197,198,128,226,22,200,201,23',
'131,231,120,138,134,143,100,101,103,135,117,118,119,104,105,176,177',
'121,122,123,13,187,90,195,196,197,198,125,111,180,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,132,176,177,186',
'114,193,194,195,196,197,198,237,124,241,133,193,194,195,196,197,198',
'128,252,199,200,201,254,131,257,120,138,134,258,100,101,103,135,117',
'118,119,104,105,176,177,121,122,123,13,284,90,195,196,197,198,125,111',
'197,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,132,322,323,64,114,193,194,195,196,197,198,143,124,339,133,163',
'340,244,245,246,247,128,302,199,200,201,303,131,176,120,138,134,197',
'100,101,103,135,117,118,119,104,105,176,177,121,122,123,13,197,90,176',
'177,176,177,125,111,197,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,132,197,16,316,114,121,122,123,322,323,315',
'318,124,319,133,125,324,327,13,258,143,128,11,17,334,81,347,131,143',
'120,138,134,,121,122,123,135,117,118,119,,,132,125,,,167,,,,,,,,124',
',133,22,,,23,,,128,,,,,,131,132,120,138,134,167,121,122,123,135,117',
'118,119,124,,133,125,121,122,123,,,128,,,,,125,131,,120,138,134,,,,',
'135,117,118,119,,,132,,,,167,,,,,,,174,124,,133,167,121,122,123,,,128',
',124,,133,125,131,,120,138,134,,,,,135,117,118,119,120,138,134,,121',
'122,123,135,117,118,119,,,132,125,,,167,,,,,,,,124,,133,,,,,,,128,,',
',,,131,132,120,138,134,167,121,122,123,135,117,118,119,124,,133,125',
',,,,,,,,,,,131,,120,138,134,,121,122,123,135,117,118,119,,,132,125,',
',167,,,,,,,,124,,133,,,,,,,128,,,,,,131,132,120,138,134,167,121,122',
'123,135,117,118,119,124,,133,125,121,122,123,,,128,,,,,125,131,,120',
'138,134,,,,,135,117,118,119,,,174,,,,167,,,,,,,174,124,,133,167,121',
'122,123,,,,,124,,133,125,,,120,138,134,,,,,135,117,118,119,120,138,134',
',121,122,123,135,117,118,119,,,174,125,,,167,193,194,195,196,197,198',
',124,,133,,,,,,,,,199,200,201,202,203,132,120,138,134,167,121,122,123',
'135,117,118,119,124,,133,125,,,121,122,123,128,,,,,,131,125,120,138',
'134,,,,,135,117,118,119,,,174,,,,167,,,,,,,,124,132,133,,,167,121,122',
'123,,,,,124,,133,125,120,138,134,,,128,,135,117,118,119,131,,120,138',
'134,,121,122,123,135,117,118,119,,,132,125,,,167,,,,,,,,124,,133,,,',
',,,128,,,,,,131,132,120,138,134,167,121,122,123,135,117,118,119,124',
',133,125,,,,,,128,,,,,,131,,120,138,134,,121,122,123,135,117,118,119',
',,132,125,,,167,,,,,,,,124,,133,,,,,,,128,,,,,,131,132,120,138,134,167',
'121,122,123,135,117,118,119,124,,133,125,,,,,,128,,,,,,131,,120,138',
'134,,121,122,123,135,117,118,119,,,132,125,,,167,,,,,,,,124,,133,,,',
',,,128,,,,,,131,132,120,138,134,167,121,122,123,135,117,118,119,124',
',133,125,121,122,123,,,128,,,,,125,131,,120,138,134,,,,,135,117,118',
'119,,,132,,,,167,,,,,,,174,124,,133,167,121,122,123,,,128,,124,,133',
'125,131,,120,138,134,,,,,135,117,118,119,120,138,134,,121,122,123,135',
'117,118,119,,,174,125,,,167,193,194,195,196,197,198,,124,,133,,,,,,',
',,199,200,201,202,203,174,120,138,134,167,121,122,123,135,117,118,119',
'124,,133,125,121,122,123,,,,,,,,125,,,120,138,134,,,,,135,117,118,119',
',,174,,,,167,,,,,,,174,124,,133,167,121,122,123,,,,,124,,133,125,,,120',
'138,134,,,,,135,117,118,119,120,138,134,,121,122,123,135,117,118,119',
',,174,125,,,167,193,194,195,196,197,198,,124,,133,,,,,,,,,199,200,201',
'202,203,174,120,138,134,167,121,122,123,135,117,118,119,124,,133,125',
'121,122,123,,,,,,,,125,,,120,138,134,,,,,135,117,118,119,,,174,,,,167',
',,,,,,174,124,,133,167,121,122,123,,,,,124,,133,125,,,120,138,134,,',
',,135,117,118,119,120,138,134,,121,122,123,135,117,118,119,,,174,125',
',,167,193,194,195,196,197,198,,124,,133,,,,,,,,,199,200,201,202,203',
'174,120,138,134,167,121,122,123,135,117,118,119,124,,133,125,121,122',
'123,,,,,,,,125,,,120,138,134,,,,,135,117,118,119,,,174,,,,167,,,,,,',
'174,124,,133,167,121,122,123,,,,,124,,133,125,,,120,138,134,,,,,135',
'117,118,119,120,138,134,,121,122,123,135,117,118,119,,,174,125,,,167',
'193,194,195,196,197,198,,124,,133,,,,,,,,,199,200,201,202,203,174,120',
'138,134,167,121,122,123,135,117,118,119,124,,133,125,121,122,123,,,',
',,,,125,,,120,138,134,,,,,135,117,118,119,,,174,,,,167,,,,,,,174,124',
',133,167,121,122,123,,,,,124,,133,125,,,120,138,134,,,,,135,117,118',
'119,120,138,134,,,,,135,117,118,119,,,132,,,,167,121,122,123,,,,,124',
',133,125,,,,,,128,,,,,,131,,120,138,134,,121,122,123,135,117,118,119',
',,132,125,309,,167,,,,,,,,124,,133,,,,,,,128,,,,,,131,132,120,138,134',
'167,121,122,123,135,117,118,119,124,,133,125,121,122,123,,,128,,,,,125',
'131,,120,138,134,,,,,135,117,118,119,,,132,,,,167,,,,,,,174,124,,133',
'167,121,122,123,,,128,,124,,133,125,131,,120,138,134,,,,,135,117,118',
'119,120,138,134,,121,122,123,135,117,118,119,,,174,125,,,167,193,194',
'195,196,197,198,,124,,133,,,,,,,,,199,200,201,202,203,132,120,138,134',
'167,,,,135,117,118,119,124,,133,,,228,,,,128,,,,,,131,,120,138,134,13',
',90,,135,117,118,119,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,283,,,,,22,,,23,,,,193,194,195,196,197,198',
',204,206,207,208,209,283,,,,,,199,200,201,202,203,,193,194,195,196,197',
'198,205,,,,,,,13,,90,,,199,200,201,202,203,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,297,,,,,,,,,,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,',
'22,,,23,193,194,195,196,197,198,,204,206,207,208,209,,,,,,,199,200,201',
'202,203,,,,,,,,205,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,,-25,,,,,-25,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,,,,,142,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,142,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,193,194,195,196,197,198,,,244,245,246,247,193,194,195,196,197',
'198,199,200,201,202,203,193,194,195,196,197,198,,199,200,201,202,203',
',,,,,,199,200,201,202,203' ]
        racc_action_table = arr = ::Array.new(2572, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'76,76,76,171,175,335,313,76,76,25,264,76,76,76,76,167,76,167,264,1,313',
'76,76,11,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,66,68,171,76,335,12,25,13,114,90,114,76,68,76,90,16,66',
'211,175,175,76,18,171,171,335,335,76,114,76,76,76,20,162,162,162,76',
'76,76,76,162,162,211,211,162,162,162,162,20,162,26,20,20,20,162,162',
'27,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,254,261,116,162,162,20,149,162,20,254',
'139,162,95,162,222,139,95,149,28,222,162,116,29,261,261,254,162,95,162',
'162,162,24,225,225,225,162,162,162,162,225,225,110,110,225,225,225,225',
'24,225,59,260,24,24,225,225,260,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,290',
'112,0,225,290,24,233,2,24,317,2,225,61,225,341,290,62,233,0,112,225',
'0,0,0,317,341,225,65,225,225,225,145,238,238,238,225,225,225,225,238',
'238,164,164,238,238,238,238,145,238,170,170,145,145,238,238,70,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,80,69,83,238,5,145,73,5,145,73,91,238,82,238',
'93,82,84,69,96,84,238,69,69,98,97,111,238,97,238,238,238,147,241,241',
'241,238,238,238,238,241,241,236,236,241,241,241,241,147,241,253,253',
'147,147,241,241,115,241,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,259,259,138,241',
'271,271,271,271,271,271,141,241,144,241,272,272,272,272,272,272,241',
'146,227,271,271,227,241,150,241,241,241,157,249,249,249,241,241,241',
'241,249,249,262,262,249,249,249,249,158,249,265,265,265,265,249,249',
'165,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,263,263,168,249,274,274,274,274',
'274,274,169,249,172,249,273,273,273,273,273,273,249,178,274,274,274',
'180,249,181,249,249,249,182,323,323,323,249,249,249,249,323,323,299',
'299,323,323,323,323,213,323,266,266,266,266,323,323,214,323,323,323',
'323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323,323',
'323,323,323,323,323,300,300,218,323,275,275,275,275,275,275,230,323',
'328,323,235,328,302,302,303,303,323,242,275,275,275,243,323,251,323',
'323,323,267,342,342,342,323,323,323,323,342,342,308,308,342,342,342',
'342,268,342,329,329,343,343,342,342,269,342,342,342,342,342,342,342',
'342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342,342',
'342,270,293,293,342,100,100,100,346,346,292,297,342,298,342,100,301',
'304,293,306,319,342,293,293,320,332,344,342,347,342,342,342,,101,101',
'101,342,342,342,342,,,100,101,,,100,,,,,,,,100,,100,293,,,293,,,100',
',,,,,100,101,100,100,100,101,103,103,103,100,100,100,100,101,,101,103',
'104,104,104,,,101,,,,,104,101,,101,101,101,,,,,101,101,101,101,,,103',
',,,103,,,,,,,104,103,,103,104,105,105,105,,,103,,104,,104,105,103,,103',
'103,103,,,,,103,103,103,103,104,104,104,,127,127,127,104,104,104,104',
',,105,127,,,105,,,,,,,,105,,105,,,,,,,105,,,,,,105,127,105,105,105,127',
'131,131,131,105,105,105,105,127,,127,131,,,,,,,,,,,,127,,127,127,127',
',132,132,132,127,127,127,127,,,131,132,,,131,,,,,,,,131,,131,,,,,,,131',
',,,,,131,132,131,131,131,132,133,133,133,131,131,131,131,132,,132,133',
'134,134,134,,,132,,,,,134,132,,132,132,132,,,,,132,132,132,132,,,133',
',,,133,,,,,,,134,133,,133,134,135,135,135,,,,,134,,134,135,,,133,133',
'133,,,,,133,133,133,133,134,134,134,,163,163,163,134,134,134,134,,,135',
'163,,,135,276,276,276,276,276,276,,135,,135,,,,,,,,,276,276,276,276',
'276,163,135,135,135,163,174,174,174,135,135,135,135,163,,163,174,,,176',
'176,176,163,,,,,,163,176,163,163,163,,,,,163,163,163,163,,,174,,,,174',
',,,,,,,174,176,174,,,176,177,177,177,,,,,176,,176,177,174,174,174,,',
'176,,174,174,174,174,176,,176,176,176,,179,179,179,176,176,176,176,',
',177,179,,,177,,,,,,,,177,,177,,,,,,,177,,,,,,177,179,177,177,177,179',
'184,184,184,177,177,177,177,179,,179,184,,,,,,179,,,,,,179,,179,179',
'179,,186,186,186,179,179,179,179,,,184,186,,,184,,,,,,,,184,,184,,,',
',,,184,,,,,,184,186,184,184,184,186,187,187,187,184,184,184,184,186',
',186,187,,,,,,186,,,,,,186,,186,186,186,,188,188,188,186,186,186,186',
',,187,188,,,187,,,,,,,,187,,187,,,,,,,187,,,,,,187,188,187,187,187,188',
'189,189,189,187,187,187,187,188,,188,189,193,193,193,,,188,,,,,193,188',
',188,188,188,,,,,188,188,188,188,,,189,,,,189,,,,,,,193,189,,189,193',
'194,194,194,,,189,,193,,193,194,189,,189,189,189,,,,,189,189,189,189',
'193,193,193,,195,195,195,193,193,193,193,,,194,195,,,194,277,277,277',
'277,277,277,,194,,194,,,,,,,,,277,277,277,277,277,195,194,194,194,195',
'196,196,196,194,194,194,194,195,,195,196,197,197,197,,,,,,,,197,,,195',
'195,195,,,,,195,195,195,195,,,196,,,,196,,,,,,,197,196,,196,197,198',
'198,198,,,,,197,,197,198,,,196,196,196,,,,,196,196,196,196,197,197,197',
',199,199,199,197,197,197,197,,,198,199,,,198,278,278,278,278,278,278',
',198,,198,,,,,,,,,278,278,278,278,278,199,198,198,198,199,200,200,200',
'198,198,198,198,199,,199,200,201,201,201,,,,,,,,201,,,199,199,199,,',
',,199,199,199,199,,,200,,,,200,,,,,,,201,200,,200,201,202,202,202,,',
',,201,,201,202,,,200,200,200,,,,,200,200,200,200,201,201,201,,203,203',
'203,201,201,201,201,,,202,203,,,202,279,279,279,279,279,279,,202,,202',
',,,,,,,,279,279,279,279,279,203,202,202,202,203,204,204,204,202,202',
'202,202,203,,203,204,205,205,205,,,,,,,,205,,,203,203,203,,,,,203,203',
'203,203,,,204,,,,204,,,,,,,205,204,,204,205,206,206,206,,,,,205,,205',
'206,,,204,204,204,,,,,204,204,204,204,205,205,205,,207,207,207,205,205',
'205,205,,,206,207,,,206,280,280,280,280,280,280,,206,,206,,,,,,,,,280',
'280,280,280,280,207,206,206,206,207,208,208,208,206,206,206,206,207',
',207,208,209,209,209,,,,,,,,209,,,207,207,207,,,,,207,207,207,207,,',
'208,,,,208,,,,,,,209,208,,208,209,237,237,237,,,,,209,,209,237,,,208',
'208,208,,,,,208,208,208,208,209,209,209,,,,,209,209,209,209,,,237,,',
',237,258,258,258,,,,,237,,237,258,,,,,,237,,,,,,237,,237,237,237,,309',
'309,309,237,237,237,237,,,258,309,258,,258,,,,,,,,258,,258,,,,,,,258',
',,,,,258,309,258,258,258,309,322,322,322,258,258,258,258,309,,309,322',
'325,325,325,,,309,,,,,325,309,,309,309,309,,,,,309,309,309,309,,,322',
',,,322,,,,,,,325,322,,322,325,326,326,326,,,322,,325,,325,326,322,,322',
'322,322,,,,,322,322,322,322,325,325,325,,340,340,340,325,325,325,325',
',,326,340,,,326,281,281,281,281,281,281,,326,,326,,,,,,,,,281,281,281',
'281,281,340,326,326,326,340,,,,326,326,326,326,340,,340,,,148,,,,340',
',,,,,340,,340,340,340,148,,148,,340,340,340,340,,,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,212,,,,,148,,,148,,,,212,212,212,212,212,212,,212,212,212,212',
'212,248,,,,,,212,212,212,212,212,,248,248,248,248,248,248,212,,,,,,',
'72,,72,,,248,248,248,248,248,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,72,72,72,72,72,72,72,72,72,72,231,,,,,,,,,,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,,,,,,92,,,92,129,129,129,129,129,129,,129,129,129,129,129,,,,',
',,129,129,129,129,129,,,,,,,,129,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,,143,,,',
',143,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,,,,,77,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,,,,,219,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,128,128,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,173,173,173,173,173,173,,,173,173,173,173,337,337,337,337,337',
'337,173,173,173,173,173,338,338,338,338,338,338,,337,337,337,337,337',
',,,,,,338,338,338,338,338' ]
        racc_action_check = arr = ::Array.new(2572, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   211,    19,   161,   nil,   nil,   239,   nil,   nil,   nil,   nil,
   nil,   -33,   -27,     0,   nil,   nil,    40,  2354,    70,   nil,
    78,   nil,   nil,   nil,   159,   -18,    84,    47,    92,    90,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,
  2378,   167,   170,  2402,   nil,   186,   -14,   nil,    -6,   291,
   193,   nil,  2143,   241,   nil,   nil,    -4,  2296,   nil,   nil,
   240,   nil,   247,   237,   251,   nil,   nil,   nil,   nil,   nil,
     7,   299,  2201,   248,   nil,    90,   307,   259,   309,   nil,
   605,   633,   nil,   675,   686,   728,   nil,   nil,   nil,   nil,
    94,   299,   150,   nil,     5,   276,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   756,  2426,  2197,
   nil,   798,   826,   868,   879,   921,   nil,   nil,   323,    87,
   nil,   327,   nil,  2265,   328,   240,   391,   321,  2060,    80,
   329,   nil,   nil,   nil,   nil,   nil,   nil,   352,   366,   nil,
   nil,   nil,    77,   949,   175,   366,   nil,   -37,   404,   406,
   183,    -6,   452,  2461,   991,   -10,  1004,  1046,   419,  1074,
   423,   423,   414,   nil,  1116,   nil,  1144,  1186,  1214,  1256,
   nil,   nil,   nil,  1267,  1309,  1337,  1379,  1390,  1432,  1460,
  1502,  1513,  1555,  1583,  1625,  1636,  1678,  1706,  1748,  1759,
   nil,    13,  2059,   448,   440,   nil,   nil,  2450,   480,  2325,
   nil,   nil,    91,   nil,   nil,   158,   nil,   338,   nil,   nil,
   493,  2177,   nil,   161,   nil,   543,   256,  1801,   239,   nil,
   nil,   320,   500,   504,   nil,   nil,   nil,   nil,  2083,   401,
   nil,   485,   nil,   264,    76,   nil,   nil,   nil,  1843,   296,
   127,    76,   337,   377,   -57,   355,   436,   497,   513,   521,
   547,   312,   322,   403,   393,   474,   913,  1301,  1424,  1547,
  1670,  1958,   nil,   nil,   nil,   nil,   nil,   nil,  2474,   nil,
   159,   nil,   622,   615,   nil,   nil,   nil,   570,   575,   418,
   528,   628,   478,   478,   629,   nil,   563,   nil,   499,  1871,
   nil,   nil,   nil,   -47,   nil,   nil,   nil,   168,   nil,   583,
   636,   nil,  1913,   482,   nil,  1924,  1966,   nil,   492,   507,
   nil,   nil,   573,   nil,   nil,    -4,   nil,  2473,  2484,   nil,
  1994,   169,   563,   509,   588,   nil,   616,   591,   nil,   nil ]

racc_action_default = [
    -6,  -200,  -193,    -2,    -4,  -200,    -7,    -9,   -10,   -11,
   -12,  -200,  -200,  -200,   -45,   -46,   -52,  -200,  -200,    -1,
  -194,  -195,  -197,  -198,    -5,   -15,   -18,  -200,  -200,  -200,
   -97,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,   350,    -3,  -196,    -8,  -200,
  -200,  -200,  -200,   -31,  -199,  -117,  -116,   -53,  -200,    -6,
   -15,   -16,  -200,  -193,   -32,   -97,   -55,  -200,  -114,  -115,
   -28,   -98,  -193,  -200,  -200,   -19,   -21,   -22,   -23,   -97,
  -200,  -200,  -194,   -34,   -36,  -200,  -200,  -193,   -56,   -58,
  -200,  -165,   -61,  -200,  -200,  -200,   -66,   -67,   -68,   -69,
   -70,  -200,  -147,   -97,  -163,  -155,  -163,  -105,  -106,  -107,
  -108,  -109,  -110,  -111,  -112,  -113,  -123,  -200,  -200,  -128,
  -129,  -200,  -200,  -200,  -200,  -200,  -156,  -158,  -200,  -200,
  -119,  -200,  -122,   -97,  -200,  -194,  -200,    -6,  -200,  -200,
  -200,   -38,   -39,   -30,   -33,   -97,   -97,   -28,   -92,   -93,
   -47,   -54,  -194,  -200,   -59,  -147,  -155,  -163,  -163,   -60,
  -166,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,
  -200,   -85,   -88,   -89,  -200,  -157,  -165,  -200,  -200,  -200,
  -160,  -124,   -97,  -200,  -200,  -200,  -200,  -200,  -200,  -200,
  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,  -200,
  -130,  -200,  -128,  -129,  -143,  -144,  -145,  -200,  -200,  -200,
  -121,   -26,  -200,   -97,   -51,   -55,   -13,  -200,   -17,   -20,
   -28,  -200,   -35,  -200,   -91,   -57,   -63,  -200,   -55,   -79,
   -80,   -55,  -200,  -200,   -75,   -76,   -77,   -78,  -200,   -55,
  -125,  -126,   -71,   -72,  -116,  -161,  -162,   -97,  -200,  -102,
  -200,  -200,  -103,  -104,  -200,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -148,  -149,  -150,  -151,
  -152,  -153,  -131,  -146,  -154,   -97,  -118,  -120,   -97,   -29,
   -49,   -50,  -200,  -200,   -24,   -37,   -97,  -200,  -200,  -167,
   -81,  -200,  -200,  -200,  -200,   -86,   -87,   -94,   -95,   -99,
  -164,  -168,  -127,  -200,   -27,   -48,   -14,   -40,   -97,   -28,
  -200,   -82,  -200,   -55,   -64,  -200,  -200,   -65,  -200,  -100,
  -159,   -97,   -41,   -90,   -62,  -200,   -84,   -73,   -74,   -96,
  -200,   -43,   -55,  -101,  -200,   -44,   -81,   -28,   -83,   -42 ]

racc_goto_table = [
    68,    10,    57,    30,    58,   144,    57,   238,   221,    94,
    96,   112,   115,   243,    20,    65,   116,    24,   242,    63,
    19,    10,   183,   169,   190,    10,   140,    82,    85,     1,
    88,   159,    59,   320,     2,    74,     3,    84,   222,    73,
    93,   150,   295,   344,    28,    76,    70,   182,   235,    75,
   172,    69,   181,   298,    72,   307,    56,   328,    89,   149,
   139,   191,   213,   141,   154,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,    87,    57,   147,   190,    83,    75,   348,
   nil,   nil,   234,   nil,   nil,    92,   nil,   nil,   nil,   232,
   nil,    91,   nil,   nil,   145,   nil,   148,   112,   115,   nil,
   146,   nil,   116,   nil,   229,   227,    88,   nil,   260,   162,
   nil,   nil,   nil,   nil,   192,   161,   256,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    58,   233,    57,   nil,   223,
    57,   nil,   164,   170,    89,   171,   225,   175,   nil,   nil,
   nil,   nil,   nil,   326,    57,   nil,    10,   325,    10,    87,
   nil,   nil,   nil,   314,   nil,   294,   nil,   291,   nil,   292,
   112,   115,   264,   210,   211,   116,   305,   255,   287,   159,
   nil,   342,   300,   112,   115,   301,   112,   115,   116,   nil,
   nil,   116,   nil,   304,   112,   115,   nil,   nil,   nil,   116,
   nil,   306,   nil,   290,   nil,   236,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   285,   nil,   141,   nil,   nil,   250,   251,
   286,   253,   nil,   nil,   nil,   nil,   259,   296,   170,   261,
   262,   263,   173,   nil,   nil,   nil,   159,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   293,
   nil,   nil,   nil,   nil,   333,   nil,   nil,   nil,   nil,   nil,
   212,   214,   215,   216,   nil,   313,   nil,   336,   112,   115,
   nil,   nil,   nil,   116,   nil,   nil,   317,   nil,   nil,   299,
   nil,   nil,   349,    58,   223,    57,   346,   112,   115,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,   nil,   332,   nil,
   308,   nil,   248,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   329,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   335,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   343,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   337,   338 ]

racc_goto_check = [
    20,    12,    68,    15,     8,    21,    68,    43,    23,    27,
    36,    48,    56,    51,     5,    34,    59,     5,    50,    14,
     3,    12,    54,    41,    66,    12,    62,     7,    17,     1,
    19,    56,    13,    44,     2,    25,     4,    16,    22,    24,
    26,    28,    29,    30,    33,    35,    15,    27,    38,    15,
    45,    14,    53,    55,    14,    57,     4,    58,    15,    20,
    61,    63,    65,    15,    25,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,    12,    68,    14,    66,    13,    15,    44,
   nil,   nil,    21,   nil,   nil,     5,   nil,   nil,   nil,    27,
   nil,     3,   nil,   nil,     5,   nil,     5,    48,    56,   nil,
     3,   nil,    59,   nil,    17,     7,    19,   nil,    41,     5,
   nil,   nil,   nil,   nil,    15,     3,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,    20,    68,   nil,    15,
    68,   nil,    40,    40,    15,    40,    14,    40,   nil,   nil,
   nil,   nil,   nil,    51,    68,   nil,    12,    50,    12,    12,
   nil,   nil,   nil,    23,   nil,    21,   nil,    27,   nil,    36,
    48,    56,    20,    40,    40,    59,    54,    34,    62,    56,
   nil,    43,    36,    48,    56,    36,    48,    56,    59,   nil,
   nil,    59,   nil,    36,    48,    56,   nil,   nil,   nil,    59,
   nil,    27,   nil,    20,   nil,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,    15,   nil,   nil,    40,    40,
    14,    40,   nil,   nil,   nil,   nil,    40,    15,    40,    40,
    40,    40,    49,   nil,   nil,   nil,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
    49,    49,    49,    49,   nil,    20,   nil,    36,    48,    56,
   nil,   nil,   nil,    59,   nil,   nil,    20,   nil,   nil,    40,
   nil,   nil,    21,     8,    15,    68,    36,    48,    56,   nil,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,    20,   nil,
    40,   nil,    49,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,    49 ]

racc_goto_pointer = [
   nil,    29,    34,    18,    36,    12,   nil,   -42,   -20,   nil,
   nil,   nil,     1,     7,    -8,   -14,   -35,   -44,   nil,   -42,
   -30,   -75,  -105,  -135,   -24,   -28,   -35,   -66,   -49,  -189,
  -298,   nil,   nil,    28,   -13,   -20,   -66,   nil,  -114,   nil,
    32,   -78,   nil,  -164,  -267,   -54,   nil,   nil,   -65,   118,
  -155,  -160,   nil,   -61,   -91,  -180,   -64,  -203,  -252,   -60,
   nil,   -17,   -51,   -66,   nil,   -70,   -92,   nil,   -18 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   107,   nil,   240,   113,   nil,   nil,    86,   109,
    95,   nil,   nil,   nil,   nil,   nil,   nil,   224,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    97,    98,    99,
   110,   nil,   102,   nil,   nil,   nil,   106,   108,   165,   129,
   nil,   nil,   321,   nil,   nil,   157,   166,   nil,   nil,   168,
   136,   nil,   nil,   126,   127,   130,   185,   137,    21 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 97, :_reduce_1,
  1, 98, :_reduce_2,
  3, 98, :_reduce_3,
  1, 100, :_reduce_4,
  2, 100, :_reduce_5,
  0, 103, :_reduce_6,
  1, 103, :_reduce_7,
  3, 103, :_reduce_8,
  1, 104, :_reduce_9,
  1, 104, :_reduce_10,
  1, 104, :_reduce_11,
  1, 104, :_reduce_12,
  7, 106, :_reduce_13,
  9, 107, :_reduce_14,
  0, 109, :_reduce_15,
  2, 109, :_reduce_16,
  7, 102, :_reduce_17,
  2, 102, :_reduce_18,
  1, 112, :_reduce_19,
  3, 112, :_reduce_20,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  4, 114, :_reduce_24,
  0, 118, :_reduce_25,
  1, 118, :_reduce_26,
  3, 118, :_reduce_27,
  0, 117, :_reduce_28,
  3, 117, :_reduce_29,
  6, 108, :_reduce_30,
  0, 120, :_reduce_31,
  1, 120, :_reduce_32,
  3, 120, :_reduce_33,
  2, 121, :_reduce_34,
  3, 122, :_reduce_35,
  1, 122, :_reduce_36,
  4, 115, :_reduce_37,
  1, 124, :_reduce_none,
  1, 124, :_reduce_39,
  2, 125, :_reduce_40,
  3, 125, :_reduce_41,
  7, 125, :_reduce_42,
  0, 126, :_reduce_43,
  1, 126, :_reduce_44,
  1, 105, :_reduce_45,
  1, 105, :_reduce_46,
  6, 127, :_reduce_47,
  8, 128, :_reduce_48,
  2, 119, :_reduce_49,
  2, 119, :_reduce_50,
  1, 119, :_reduce_51,
  0, 129, :_reduce_52,
  2, 129, :_reduce_53,
  2, 132, :_reduce_54,
  0, 133, :_reduce_55,
  1, 133, :_reduce_56,
  3, 133, :_reduce_57,
  1, 134, :_reduce_58,
  2, 134, :_reduce_59,
  2, 134, :_reduce_60,
  1, 134, :_reduce_61,
  6, 134, :_reduce_62,
  3, 134, :_reduce_63,
  5, 134, :_reduce_64,
  5, 134, :_reduce_65,
  1, 134, :_reduce_66,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_70,
  3, 143, :_reduce_71,
  3, 142, :_reduce_72,
  5, 141, :_reduce_73,
  5, 141, :_reduce_74,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 140, :_reduce_81,
  1, 140, :_reduce_82,
  5, 140, :_reduce_83,
  2, 148, :_reduce_84,
  2, 135, :_reduce_85,
  3, 149, :_reduce_86,
  3, 149, :_reduce_87,
  1, 149, :_reduce_88,
  1, 149, :_reduce_89,
  6, 123, :_reduce_90,
  3, 123, :_reduce_91,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 150, :_reduce_94,
  1, 153, :_reduce_none,
  3, 153, :_reduce_96,
  0, 116, :_reduce_97,
  2, 116, :_reduce_98,
  0, 154, :_reduce_99,
  1, 154, :_reduce_100,
  3, 154, :_reduce_101,
  3, 138, :_reduce_102,
  3, 138, :_reduce_103,
  3, 138, :_reduce_104,
  1, 156, :_reduce_105,
  1, 156, :_reduce_106,
  1, 156, :_reduce_107,
  1, 156, :_reduce_108,
  1, 156, :_reduce_109,
  1, 156, :_reduce_110,
  1, 156, :_reduce_111,
  1, 156, :_reduce_112,
  1, 156, :_reduce_113,
  2, 130, :_reduce_114,
  2, 130, :_reduce_115,
  1, 130, :_reduce_116,
  0, 131, :_reduce_117,
  4, 131, :_reduce_118,
  1, 157, :_reduce_119,
  3, 157, :_reduce_120,
  2, 158, :_reduce_121,
  1, 158, :_reduce_122,
  1, 136, :_reduce_123,
  2, 136, :_reduce_124,
  3, 136, :_reduce_125,
  3, 136, :_reduce_126,
  4, 160, :_reduce_127,
  1, 159, :_reduce_128,
  1, 159, :_reduce_129,
  2, 159, :_reduce_130,
  3, 159, :_reduce_131,
  3, 145, :_reduce_132,
  3, 145, :_reduce_133,
  3, 145, :_reduce_134,
  3, 145, :_reduce_135,
  3, 145, :_reduce_136,
  3, 145, :_reduce_137,
  3, 145, :_reduce_138,
  3, 145, :_reduce_139,
  3, 145, :_reduce_140,
  3, 145, :_reduce_141,
  3, 145, :_reduce_142,
  2, 145, :_reduce_143,
  2, 145, :_reduce_144,
  2, 145, :_reduce_145,
  3, 145, :_reduce_146,
  1, 145, :_reduce_147,
  3, 161, :_reduce_148,
  3, 161, :_reduce_149,
  3, 161, :_reduce_150,
  3, 161, :_reduce_151,
  3, 161, :_reduce_152,
  3, 161, :_reduce_153,
  3, 161, :_reduce_154,
  1, 144, :_reduce_155,
  1, 144, :_reduce_156,
  2, 144, :_reduce_157,
  1, 144, :_reduce_none,
  5, 144, :_reduce_159,
  2, 163, :_reduce_160,
  3, 155, :_reduce_161,
  3, 155, :_reduce_162,
  0, 162, :_reduce_163,
  3, 162, :_reduce_164,
  0, 137, :_reduce_165,
  1, 137, :_reduce_166,
  3, 137, :_reduce_167,
  4, 152, :_reduce_168,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_192,
  0, 99, :_reduce_193,
  1, 99, :_reduce_194,
  1, 101, :_reduce_195,
  2, 101, :_reduce_196,
  1, 164, :_reduce_197,
  1, 164, :_reduce_none,
  1, 110, :_reduce_199 ]

racc_reduce_n = 200

racc_shift_n = 350

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :kDTYPE_SIZE_T => 48,
  :kDTYPE_RB_STR => 49,
  :kDTYPE_UCHAR => 50,
  :tCUSTOM_DTYPE => 51,
  :tLPAREN => 52,
  :tRPAREN => 53,
  :tLSQUARE => 54,
  :tRSQUARE => 55,
  :tIDENTIFIER => 56,
  :tNL => 57,
  :tCOMMA => 58,
  :tSQUOTE => 59,
  :tSCOLON => 60,
  :EOF => 61,
  :tDOT => 62,
  :tQMARK => 63,
  :tSYMBOL => 64,
  :tPLUS => 65,
  :tMINUS => 66,
  :tSTAR => 67,
  :tDIVIDE => 68,
  :tEXPO => 69,
  :tMODULUS => 70,
  :tASSIGN => 71,
  :tEQ => 72,
  :tLT => 73,
  :tLTEQ => 74,
  :tGT => 75,
  :tGTEQ => 76,
  :tANDOP => 77,
  :tOROP => 78,
  :tBANG => 79,
  :tOP_ASSIGN => 80,
  :tSTRING => 81,
  :kSIZEOF => 82,
  :tBIT_AND => 83,
  :tBIT_OR => 84,
  :tBIT_XOR => 85,
  :tBIT_LSHIFT => 86,
  :tBIT_RSHIFT => 87,
  :tBIT_NOT => 88,
  :tINTEGER => 89,
  :tFLOAT => 90,
  :tSINGLE_CHAR => 91,
  :ADDRESS_OF => 92,
  :TYPECAST => 93,
  :UMINUS => 94,
  :tNEQ => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_94(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_96(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_97(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_98(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_99(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_100(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_101(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_102(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_103(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_104(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 427)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_114(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_115(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_117(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_118(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_119(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_120(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_121(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_122(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_123(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_124(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_127(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 493)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 494)
  def _reduce_130(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 495)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 498)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 503)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 507)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 508)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_143(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_144(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_145(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_146(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_155(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_156(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_157(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_159(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_160(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_161(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_162(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_164(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 564)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 565)
  def _reduce_166(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_167(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_168(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_192(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_193(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_194(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 589)
  def _reduce_195(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_196(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 593)
  def _reduce_197(val, _values, result)
    
    result
  end
.,.,

# reduce 198 omitted

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_199(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
