#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 388)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def next_token
  t = @lexer.next_token

  if !t.nil? && @custom_dtypes.has_key?(t[1])
    if t[0] == :tIDENTIFIER && !(@prev_token[0] == :kSTRUCT)
      return [:tCUSTOM_DTYPE, t[1]]
    end
  end

  @prev_token = t
  t
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

def op_assign val # expr, op_assign, expr => expr = expr op expr
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]))
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value])
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value])
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    33,    34,    36,   147,   254,   147,   158,    37,    38,   209,
     9,    50,    51,    52,    40,   162,   135,     8,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,    26,
     8,   149,    44,   149,   135,   111,   135,   112,   135,   112,
    13,   136,    56,    14,   111,    27,   137,   207,    26,     6,
    13,    16,   208,    14,   109,    58,     8,    47,    48,    49,
    33,    34,    36,   114,    27,   232,    13,    37,    38,    14,
   233,    50,    51,    52,    40,     6,   221,   222,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,   153,
   154,    13,    44,    13,    14,   188,    14,    13,    13,    18,
    14,    14,    56,   118,   119,   120,   121,   116,   117,   118,
   119,   120,   121,    13,    19,    58,    14,    47,    48,    49,
    33,    34,    36,   118,   119,   120,   121,    37,    38,   155,
   156,    50,    51,    52,    40,   111,    22,   112,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,    25,
    13,    13,    44,    14,    14,    90,   116,   117,   118,   119,
   120,   121,    56,   122,   124,   125,   126,   127,   128,   129,
    13,    13,    93,    14,    14,    58,   123,    47,    48,    49,
    33,    34,    36,   257,   221,   222,   258,    37,    38,   105,
   106,    50,    51,    52,    40,   108,   113,   135,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,   138,
    13,    13,    44,    14,    14,   141,   116,   117,   118,   119,
   120,   121,    56,   122,   124,   125,   126,   127,   128,   129,
   142,   143,   135,   111,   135,    58,   123,    47,    48,    49,
    33,    34,    36,   150,   159,   120,   189,    37,    38,   190,
   149,    50,    51,    52,    40,   195,   196,   197,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,    93,
   135,   200,    44,   201,   135,   116,   117,   118,   119,   120,
   121,   205,    56,   153,   154,   155,   156,   116,   117,   118,
   119,   120,   121,   135,   135,    58,   135,    47,    48,    49,
    33,    34,    36,   135,   120,   120,   120,    37,    38,   120,
   223,    50,    51,    52,    40,   226,   234,   108,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,   239,
   240,   245,    44,   116,   117,   118,   119,   120,   121,   135,
   135,   259,    56,   116,   117,   118,   119,   120,   121,   116,
   117,   118,   119,   120,   121,    58,   112,    47,    48,    49,
    33,    34,    36,   254,   135,   nil,   nil,    37,    38,   nil,
   nil,    50,    51,    52,    40,   nil,   nil,   nil,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    57,    50,
    51,    52,    44,   nil,    50,    51,    52,   nil,   nil,   nil,
   nil,   nil,    56,   116,   117,   118,   119,   120,   121,   116,
   117,   118,   119,   120,   121,    58,    57,    47,    48,    49,
    97,    57,    50,    51,    52,    97,   nil,    50,    51,    52,
    56,   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,
    50,    51,    52,    58,   nil,    47,    48,    49,    58,    57,
    47,    48,    49,    97,   103,   nil,   nil,   nil,    97,    50,
    51,    52,   nil,    56,    50,    51,    52,    57,    56,   nil,
   nil,    97,    50,    51,    52,   nil,    58,   nil,    47,    48,
    49,    56,   nil,    47,    48,    49,   103,   nil,   nil,   nil,
    97,    57,   nil,   nil,    58,    97,    47,    48,    49,    57,
    56,   nil,   nil,    97,   nil,    56,    50,    51,    52,    50,
    51,    52,   nil,    56,   nil,    47,    48,    49,    58,   nil,
    47,    48,    49,   nil,   nil,   nil,    58,   nil,    47,    48,
    49,   nil,   nil,    57,   nil,   nil,   103,    97,   nil,   nil,
    97,    50,    51,    52,   nil,   nil,   nil,    56,   nil,   nil,
    56,   nil,    50,    51,    52,   nil,   nil,   nil,   nil,   nil,
    58,   nil,    47,    48,    49,    47,    48,    49,    57,   nil,
   nil,   nil,    97,    50,    51,    52,   nil,   nil,   nil,    57,
   nil,   nil,    56,   165,    50,    51,    52,   116,   117,   118,
   119,   120,   121,    56,   162,    58,   nil,    47,    48,    49,
    57,   nil,   nil,   nil,    97,   nil,    58,   nil,    47,    48,
    49,    57,   nil,   nil,    56,    97,    50,    51,    52,   nil,
   nil,    50,    51,    52,   nil,    56,   nil,    58,   nil,    47,
    48,    49,   116,   117,   118,   119,   120,   121,    58,   nil,
    47,    48,    49,    57,   nil,   nil,   nil,    97,    57,    50,
    51,    52,    97,   nil,    50,    51,    52,    56,   nil,   nil,
   nil,   nil,    56,   nil,   nil,   nil,   nil,    50,    51,    52,
    58,   nil,    47,    48,    49,    58,    57,    47,    48,    49,
    97,   103,   nil,   nil,   nil,    97,    50,    51,    52,   nil,
    56,    50,    51,    52,   103,    56,   nil,   nil,    97,    50,
    51,    52,   nil,    58,   nil,    47,    48,    49,    56,   nil,
    47,    48,    49,   103,   nil,   nil,   nil,    97,   103,    50,
    51,    52,    97,    47,    48,    49,   103,    56,   nil,   nil,
    97,   nil,    56,   nil,   nil,   nil,   nil,    50,    51,    52,
    56,   nil,    47,    48,    49,   nil,   103,    47,    48,    49,
    97,   nil,   nil,   nil,   nil,    47,    48,    49,   nil,   nil,
    56,    50,    51,    52,   103,   nil,   nil,   nil,    97,    50,
    51,    52,    50,    51,    52,    47,    48,    49,    56,   nil,
    50,    51,    52,   nil,   nil,   nil,   nil,   nil,   103,   nil,
   nil,   nil,    97,    47,    48,    49,   103,   nil,   nil,   103,
    97,   nil,    56,    97,    50,    51,    52,   103,   nil,   nil,
    56,    97,   nil,    56,   nil,   nil,   nil,    47,    48,    49,
   nil,    56,    50,    51,    52,    47,    48,    49,    47,    48,
    49,   103,   nil,   nil,   nil,    97,    47,    48,    49,   nil,
    50,    51,    52,   -65,   nil,    56,   -65,   -65,   -65,   103,
   nil,   nil,   nil,    97,   116,   117,   118,   119,   120,   121,
    47,    48,    49,    56,   nil,   -66,   nil,   103,   -66,   -66,
   -66,    97,    50,    51,    52,   nil,   nil,   nil,    47,    48,
    49,    56,   111,   nil,   112,   nil,   nil,   -65,   -65,   nil,
   -65,    50,    51,    52,   nil,   nil,    47,    48,    49,    57,
   nil,   109,   nil,   165,   nil,   nil,   nil,   nil,   nil,   -66,
   -66,   nil,   -66,    56,   nil,    50,    51,    52,    57,   nil,
   230,   nil,    97,   206,   nil,   nil,    58,   nil,    47,    48,
    49,   nil,    56,    50,    51,    52,    50,    51,    52,    50,
    51,    52,    57,   nil,   nil,    58,    97,    47,    48,    49,
   116,   117,   118,   119,   120,   121,    56,    50,    51,    52,
    57,   nil,   nil,   103,    97,   nil,   103,    97,   nil,    58,
    97,    47,    48,    49,    56,   nil,   nil,    56,   nil,   nil,
    56,    50,    51,    52,    57,   nil,   nil,    58,    97,    47,
    48,    49,    47,    48,    49,    47,    48,    49,    56,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,    58,    97,    47,    48,    49,   nil,   nil,   nil,   nil,
   nil,   nil,    56,   nil,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    58,   nil,    47,    48,    49,
    88,   nil,    89,   nil,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    88,   nil,    89,   nil,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,   188,   nil,
   nil,   nil,   nil,    13,   nil,   nil,    14,   nil,   nil,   nil,
   116,   117,   118,   119,   120,   121,   nil,   122,   124,   125,
   126,   127,   128,   129,   nil,   nil,   nil,   nil,   nil,   nil,
   123,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
   nil,   nil,   nil,   nil,    84,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,   nil,   218,   nil,   nil,    84,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80 ]

racc_action_check = [
    23,    23,    23,   100,   237,   241,   104,    23,    23,   171,
     1,    23,    23,    23,    23,   237,   171,     5,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    18,
     0,   100,    23,   241,   104,    44,   100,    44,   241,   190,
     2,    81,    23,     2,    46,    18,    81,   170,   190,     0,
    22,     6,   170,    22,    44,    23,    11,    23,    23,    23,
    92,    92,    92,    46,   190,   210,    30,    92,    92,    30,
   210,    92,    92,    92,    92,    11,   198,   198,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,   200,
   200,    11,    92,    92,    11,   157,    92,   159,   204,     8,
   159,   204,    92,   174,   174,   174,   174,   157,   157,   157,
   157,   157,   157,   213,     9,    92,   213,    92,    92,    92,
   146,   146,   146,   175,   175,   175,   175,   146,   146,   201,
   201,   146,   146,   146,   146,    97,    16,    97,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,    17,
   216,   232,   146,   216,   232,    29,    54,    54,    54,    54,
    54,    54,   146,    54,    54,    54,    54,    54,    54,    54,
   234,   238,    31,   234,   238,   146,    54,   146,   146,   146,
   150,   150,   150,   246,   260,   260,   246,   150,   150,    40,
    42,   150,   150,   150,   150,    43,    45,    60,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,    83,
   248,   250,   150,   248,   250,    87,   133,   133,   133,   133,
   133,   133,   150,   133,   133,   133,   133,   133,   133,   133,
    88,    89,    94,    98,    99,   150,   133,   150,   150,   150,
   158,   158,   158,   101,   105,   130,   132,   158,   158,   135,
   136,   158,   158,   158,   158,   141,   142,   143,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   144,
   145,   151,   158,   152,   160,   102,   102,   102,   102,   102,
   102,   161,   158,   102,   102,   102,   102,   180,   180,   180,
   180,   180,   180,   168,   169,   158,   172,   158,   158,   158,
   222,   222,   222,   173,   176,   177,   178,   222,   222,   179,
   199,   222,   222,   222,   222,   202,   212,   215,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   222,   222,   222,   222,   222,   222,   222,   222,   218,
   219,   227,   222,   181,   181,   181,   181,   181,   181,   231,
   247,   252,   222,   182,   182,   182,   182,   182,   182,   183,
   183,   183,   183,   183,   183,   222,   254,   222,   222,   222,
   256,   256,   256,   259,   261,   nil,   nil,   256,   256,   nil,
   nil,   256,   256,   256,   256,   nil,   nil,   nil,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,    33,
    33,    33,   256,   nil,    34,    34,    34,   nil,   nil,   nil,
   nil,   nil,   256,   184,   184,   184,   184,   184,   184,   185,
   185,   185,   185,   185,   185,   256,    33,   256,   256,   256,
    33,    34,    36,    36,    36,    34,   nil,    37,    37,    37,
    33,   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,
    38,    38,    38,    33,   nil,    33,    33,    33,    34,    36,
    34,    34,    34,    36,    37,   nil,   nil,   nil,    37,    56,
    56,    56,   nil,    36,    57,    57,    57,    38,    37,   nil,
   nil,    38,    58,    58,    58,   nil,    36,   nil,    36,    36,
    36,    38,   nil,    37,    37,    37,    56,   nil,   nil,   nil,
    56,    57,   nil,   nil,    38,    57,    38,    38,    38,    58,
    56,   nil,   nil,    58,   nil,    57,    93,    93,    93,   103,
   103,   103,   nil,    58,   nil,    56,    56,    56,    57,   nil,
    57,    57,    57,   nil,   nil,   nil,    58,   nil,    58,    58,
    58,   nil,   nil,    93,   nil,   nil,   103,    93,   nil,   nil,
   103,   106,   106,   106,   nil,   nil,   nil,    93,   nil,   nil,
   103,   nil,   107,   107,   107,   nil,   nil,   nil,   nil,   nil,
    93,   nil,    93,    93,    93,   103,   103,   103,   106,   nil,
   nil,   nil,   106,   109,   109,   109,   nil,   nil,   nil,   107,
   nil,   nil,   106,   107,   111,   111,   111,   186,   186,   186,
   186,   186,   186,   107,   107,   106,   nil,   106,   106,   106,
   109,   nil,   nil,   nil,   109,   nil,   107,   nil,   107,   107,
   107,   111,   nil,   nil,   109,   111,   112,   112,   112,   nil,
   nil,   113,   113,   113,   nil,   111,   nil,   109,   nil,   109,
   109,   109,   187,   187,   187,   187,   187,   187,   111,   nil,
   111,   111,   111,   112,   nil,   nil,   nil,   112,   113,   114,
   114,   114,   113,   nil,   116,   116,   116,   112,   nil,   nil,
   nil,   nil,   113,   nil,   nil,   nil,   nil,   117,   117,   117,
   112,   nil,   112,   112,   112,   113,   114,   113,   113,   113,
   114,   116,   nil,   nil,   nil,   116,   118,   118,   118,   nil,
   114,   119,   119,   119,   117,   116,   nil,   nil,   117,   120,
   120,   120,   nil,   114,   nil,   114,   114,   114,   117,   nil,
   116,   116,   116,   118,   nil,   nil,   nil,   118,   119,   121,
   121,   121,   119,   117,   117,   117,   120,   118,   nil,   nil,
   120,   nil,   119,   nil,   nil,   nil,   nil,   122,   122,   122,
   120,   nil,   118,   118,   118,   nil,   121,   119,   119,   119,
   121,   nil,   nil,   nil,   nil,   120,   120,   120,   nil,   nil,
   121,   123,   123,   123,   122,   nil,   nil,   nil,   122,   124,
   124,   124,   125,   125,   125,   121,   121,   121,   122,   nil,
   126,   126,   126,   nil,   nil,   nil,   nil,   nil,   123,   nil,
   nil,   nil,   123,   122,   122,   122,   124,   nil,   nil,   125,
   124,   nil,   123,   125,   127,   127,   127,   126,   nil,   nil,
   124,   126,   nil,   125,   nil,   nil,   nil,   123,   123,   123,
   nil,   126,   128,   128,   128,   124,   124,   124,   125,   125,
   125,   127,   nil,   nil,   nil,   127,   126,   126,   126,   nil,
   129,   129,   129,   165,   nil,   127,   165,   165,   165,   128,
   nil,   nil,   nil,   128,   243,   243,   243,   243,   243,   243,
   127,   127,   127,   128,   nil,   166,   nil,   129,   166,   166,
   166,   129,   205,   205,   205,   nil,   nil,   nil,   128,   128,
   128,   129,   165,   nil,   165,   nil,   nil,   165,   165,   nil,
   165,   206,   206,   206,   nil,   nil,   129,   129,   129,   205,
   nil,   165,   nil,   205,   nil,   nil,   nil,   nil,   nil,   166,
   166,   nil,   166,   205,   nil,   208,   208,   208,   206,   nil,
   206,   nil,   206,   166,   nil,   nil,   205,   nil,   205,   205,
   205,   nil,   206,   221,   221,   221,   224,   224,   224,   225,
   225,   225,   208,   nil,   nil,   206,   208,   206,   206,   206,
   244,   244,   244,   244,   244,   244,   208,   230,   230,   230,
   221,   nil,   nil,   224,   221,   nil,   225,   224,   nil,   208,
   225,   208,   208,   208,   221,   nil,   nil,   224,   nil,   nil,
   225,   258,   258,   258,   230,   nil,   nil,   221,   230,   221,
   221,   221,   224,   224,   224,   225,   225,   225,   230,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,
   nil,   230,   258,   230,   230,   230,   nil,   nil,   nil,   nil,
   nil,   nil,   258,   nil,   nil,    85,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   258,   nil,   258,   258,   258,
    85,   nil,    85,   nil,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    28,   nil,    28,   nil,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,   131,   nil,
   nil,   nil,   nil,    28,   nil,   nil,    28,   nil,   nil,   nil,
   131,   131,   131,   131,   131,   131,   nil,   131,   131,   131,
   131,   131,   131,   131,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   236,   nil,   nil,   nil,   nil,   nil,   236,   nil,   nil,   236,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
   nil,   nil,   nil,   nil,    25,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   nil,   197,   nil,   nil,   137,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   233,   233,   233 ]

racc_action_pointer = [
    38,    10,     3,   nil,   nil,    15,    15,   nil,    73,   134,
   nil,    64,   nil,   nil,   nil,   nil,   142,   137,   -14,   nil,
   nil,   nil,    13,    -4,   nil,  1198,   nil,   nil,  1116,   182,
    29,   196,   nil,   444,   449,   nil,   477,   482,   495,   nil,
   173,   nil,   150,   168,     3,   165,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   131,   nil,   514,   519,   527,   nil,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   203,   nil,  1092,   nil,   209,   224,   225,
   nil,   nil,    66,   561,   220,   nil,   nil,   113,   231,   222,
    -6,   269,   270,   564,    -8,   270,   596,   607,   nil,   628,
   nil,   639,   671,   676,   704,   nil,   709,   722,   741,   746,
   754,   774,   792,   816,   824,   827,   835,   859,   877,   895,
   226,  1115,   243,   201,   nil,   243,   243,  1223,   nil,   nil,
   nil,   253,   282,   236,   313,   268,   136,   nil,   nil,   nil,
   206,   275,   277,   nil,   nil,   nil,   nil,    72,   276,    70,
   272,   283,   nil,   nil,   nil,   910,   932,   nil,   291,   292,
    14,   -36,   294,   301,    66,    86,   295,   296,   297,   300,
   282,   338,   348,   354,   418,   424,   602,   647,   nil,   nil,
     5,   nil,   nil,   nil,   nil,  1268,  1288,  1248,    79,   357,
    46,    84,   362,  1308,    71,   927,   946,   nil,   970,   nil,
    32,   nil,   363,    86,   nil,   310,   133,   nil,   343,   387,
   nil,   988,   346,   nil,   991,   994,   nil,   388,   nil,   nil,
  1012,   347,   134,  1328,   153,   nil,  1169,   -42,   154,   nil,
   nil,    -4,   nil,   869,   965,   nil,   168,   348,   203,   nil,
   204,   nil,   353,   nil,   372,   nil,   416,   nil,  1036,   377,
   207,   372,   nil,   nil ]

racc_action_default = [
    -2,  -153,  -146,    -3,    -5,    -6,  -153,   -18,  -153,  -153,
    -1,  -147,  -148,  -150,  -151,   -19,  -153,   -84,   -83,   264,
    -4,  -149,  -153,   -22,   -85,  -153,   -81,   -82,  -153,  -153,
  -146,   -23,   -25,  -153,  -153,   -28,  -153,  -153,  -153,   -33,
  -153,   -35,  -102,   -58,  -120,  -114,  -120,   -75,   -76,   -77,
   -78,   -79,   -80,   -91,   -92,   -93,  -153,  -153,  -153,  -115,
  -153,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -153,   -87,  -153,   -90,  -153,    -8,  -153,  -153,  -153,
   -20,   -21,  -147,  -153,   -26,  -102,  -114,  -120,  -120,   -27,
  -153,  -153,  -153,  -153,  -153,   -36,  -153,  -153,   -59,  -153,
  -116,  -122,  -153,  -153,  -153,  -117,  -153,  -153,  -153,  -153,
  -153,  -153,  -153,  -153,  -153,  -153,  -153,  -153,  -153,  -153,
  -100,  -153,  -153,  -112,  -113,  -153,  -153,  -153,   -89,    -7,
    -9,  -153,  -153,  -153,   -24,   -30,   -22,   -51,   -52,  -152,
   -22,  -153,  -153,   -47,   -48,   -49,   -50,  -153,   -22,  -146,
   -44,   -57,   -60,   -63,   -64,  -120,  -114,   -67,   -72,  -123,
  -153,  -153,   -73,   -74,   -94,   -95,   -96,   -97,   -98,   -99,
  -103,  -104,  -105,  -106,  -107,  -108,  -109,  -110,  -101,  -111,
   -83,  -118,  -119,   -86,   -88,   -15,   -38,  -153,   -53,  -153,
  -153,  -153,  -153,   -38,  -147,  -153,  -153,  -121,  -153,  -125,
  -153,   -16,  -153,  -146,   -39,   -58,  -153,   -13,  -153,  -153,
   -54,  -153,   -22,   -31,  -153,  -153,   -32,  -153,   -61,   -62,
   -69,  -124,  -153,  -153,  -153,   -37,  -147,  -153,   -12,   -14,
   -29,  -153,   -56,   -45,   -46,   -34,  -153,   -70,   -10,   -17,
   -11,   -40,   -41,   -42,   -65,   -66,   -22,   -68,  -153,  -153,
   -53,   -71,   -43,   -55 ]

racc_goto_table = [
    21,    29,    45,    42,    10,   107,    17,    82,    46,    83,
    11,   163,    87,   152,   219,   167,    86,    21,   151,   164,
     3,   146,    94,    99,     1,   100,   115,   104,   212,     2,
    28,    20,    91,   132,   134,   227,    85,   210,    92,   216,
    15,    23,   144,   101,   251,   252,   193,   161,   246,    24,
    81,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   102,    87,
   nil,    45,    42,   140,   nil,   nil,   263,    46,   115,   nil,
   nil,    21,   145,   nil,   nil,   nil,   166,   130,   131,   133,
   nil,   nil,    46,   nil,   nil,   160,   nil,   nil,   168,   nil,
   169,   171,   172,   173,   nil,   nil,   nil,   nil,   nil,   229,
   nil,   nil,   225,   167,   192,   nil,   224,   228,   nil,   194,
   nil,    83,   nil,   nil,   198,    45,    42,   nil,   199,    45,
    42,    46,   nil,   191,   157,    46,   202,    45,    42,   nil,
   nil,   253,   nil,    46,   nil,   nil,   nil,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   203,   256,   262,   nil,   nil,   nil,   204,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   237,   nil,   211,
   215,   217,   nil,   nil,   166,   nil,   nil,   215,   nil,   nil,
    46,   nil,   nil,    21,   nil,   172,   nil,   231,   nil,   nil,
   242,    45,    42,   nil,   nil,   nil,   nil,    46,   nil,   nil,
   241,   nil,   nil,   nil,   nil,   235,   255,   249,   nil,   247,
   215,   236,   nil,   nil,   238,    21,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   260,    45,    42,    21,   255,    21,
   248,    46,   250,   nil,   nil,   nil,   nil,   261,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   243,   244 ]

racc_goto_check = [
    52,    17,    41,    33,     3,    30,    15,    47,    43,    10,
     5,    32,    10,    36,    24,    22,     9,    52,    35,    40,
     4,    23,    21,    21,     1,    21,    50,    21,    12,     2,
     5,     4,     3,    49,    49,    12,     8,    11,     5,    13,
    14,    16,    19,    25,    29,    31,    37,    39,    42,    45,
    46,    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,    10,
   nil,    41,    33,     9,   nil,   nil,    24,    43,    50,   nil,
   nil,    52,    21,   nil,   nil,   nil,    41,    34,    34,    34,
   nil,   nil,    43,   nil,   nil,    21,   nil,   nil,    21,   nil,
    21,    21,    21,    21,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,    36,    22,    41,   nil,    35,    40,   nil,    47,
   nil,    10,   nil,   nil,    17,    41,    33,   nil,    17,    41,
    33,    43,   nil,    15,    34,    43,    17,    41,    33,   nil,
   nil,    32,   nil,    43,   nil,   nil,   nil,    34,    34,    34,
    34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
    34,     3,    23,    32,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,   nil,    10,
    10,    10,   nil,   nil,    41,   nil,   nil,    10,   nil,   nil,
    43,   nil,   nil,    52,   nil,    21,   nil,    21,   nil,   nil,
    17,    41,    33,   nil,   nil,   nil,   nil,    43,   nil,   nil,
    21,   nil,   nil,   nil,   nil,     3,    41,    10,   nil,    21,
    10,     5,   nil,   nil,     5,    52,   nil,    52,   nil,   nil,
   nil,   nil,   nil,   nil,    17,    41,    33,    52,    41,    52,
     5,    43,     5,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34,    34 ]

racc_goto_pointer = [
   nil,    24,    29,     2,    20,     8,   nil,   nil,     8,   -12,
   -16,  -158,  -168,  -158,    35,    -2,    24,   -22,   nil,   -50,
   nil,   -11,   -92,   -79,  -184,     6,   nil,   nil,   nil,  -192,
   -38,  -192,   -96,   -20,    31,   -84,   -89,   -90,   nil,   -60,
   -88,   -21,  -182,   -15,   nil,    32,    25,   -18,   nil,   -24,
   -20,   -60,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,   nil,   nil,
    43,   nil,   nil,   nil,     7,   nil,   nil,   nil,    30,    31,
    32,    60,    35,   nil,   nil,   nil,    39,    41,   213,   214,
   nil,   nil,   nil,    95,    54,   nil,   nil,   148,   220,   nil,
   nil,    96,   nil,    98,    59,   nil,   nil,   nil,    53,    55,
   110,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 77, :_reduce_1,
  0, 78, :_reduce_2,
  1, 78, :_reduce_3,
  3, 78, :_reduce_4,
  1, 80, :_reduce_5,
  1, 80, :_reduce_6,
  6, 82, :_reduce_7,
  1, 84, :_reduce_8,
  2, 84, :_reduce_9,
  6, 85, :_reduce_10,
  6, 85, :_reduce_11,
  5, 85, :_reduce_12,
  1, 89, :_reduce_none,
  2, 89, :_reduce_14,
  0, 87, :_reduce_15,
  1, 87, :_reduce_16,
  3, 87, :_reduce_17,
  1, 83, :_reduce_18,
  2, 83, :_reduce_19,
  5, 90, :_reduce_20,
  2, 93, :_reduce_21,
  0, 94, :_reduce_22,
  1, 94, :_reduce_23,
  3, 94, :_reduce_24,
  1, 95, :_reduce_25,
  2, 95, :_reduce_26,
  2, 95, :_reduce_27,
  1, 95, :_reduce_28,
  6, 95, :_reduce_29,
  3, 95, :_reduce_30,
  5, 95, :_reduce_31,
  5, 95, :_reduce_32,
  1, 95, :_reduce_33,
  6, 95, :_reduce_34,
  1, 95, :_reduce_35,
  2, 103, :_reduce_36,
  2, 88, :_reduce_37,
  0, 104, :_reduce_38,
  1, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 105, :_reduce_41,
  1, 107, :_reduce_42,
  3, 107, :_reduce_43,
  3, 102, :_reduce_44,
  5, 101, :_reduce_45,
  5, 101, :_reduce_46,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  0, 100, :_reduce_53,
  1, 100, :_reduce_54,
  5, 100, :_reduce_55,
  2, 114, :_reduce_56,
  3, 96, :_reduce_57,
  0, 106, :_reduce_58,
  1, 106, :_reduce_59,
  2, 106, :_reduce_60,
  3, 115, :_reduce_61,
  3, 115, :_reduce_62,
  1, 115, :_reduce_63,
  1, 115, :_reduce_64,
  1, 108, :_reduce_65,
  1, 108, :_reduce_66,
  1, 116, :_reduce_none,
  5, 116, :_reduce_68,
  0, 118, :_reduce_69,
  1, 118, :_reduce_70,
  3, 118, :_reduce_71,
  3, 98, :_reduce_72,
  3, 98, :_reduce_73,
  3, 98, :_reduce_74,
  1, 120, :_reduce_75,
  1, 120, :_reduce_76,
  1, 120, :_reduce_77,
  1, 120, :_reduce_78,
  1, 120, :_reduce_79,
  1, 120, :_reduce_80,
  2, 91, :_reduce_81,
  2, 91, :_reduce_82,
  1, 91, :_reduce_83,
  0, 92, :_reduce_84,
  1, 92, :_reduce_none,
  4, 121, :_reduce_86,
  1, 122, :_reduce_87,
  3, 122, :_reduce_88,
  2, 123, :_reduce_89,
  1, 123, :_reduce_90,
  1, 97, :_reduce_91,
  1, 97, :_reduce_92,
  1, 97, :_reduce_93,
  3, 110, :_reduce_94,
  3, 110, :_reduce_95,
  3, 110, :_reduce_96,
  3, 110, :_reduce_97,
  3, 110, :_reduce_98,
  3, 110, :_reduce_99,
  2, 110, :_reduce_100,
  3, 110, :_reduce_101,
  1, 110, :_reduce_102,
  3, 125, :_reduce_103,
  3, 125, :_reduce_104,
  3, 125, :_reduce_105,
  3, 125, :_reduce_106,
  3, 125, :_reduce_107,
  3, 125, :_reduce_108,
  3, 125, :_reduce_109,
  3, 125, :_reduce_110,
  3, 125, :_reduce_111,
  2, 125, :_reduce_112,
  2, 125, :_reduce_113,
  1, 109, :_reduce_114,
  1, 109, :_reduce_115,
  2, 109, :_reduce_116,
  2, 124, :_reduce_117,
  3, 119, :_reduce_118,
  3, 119, :_reduce_119,
  0, 126, :_reduce_120,
  3, 126, :_reduce_121,
  0, 127, :_reduce_122,
  1, 127, :_reduce_123,
  3, 127, :_reduce_124,
  4, 117, :_reduce_125,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_145,
  0, 79, :_reduce_146,
  1, 79, :_reduce_147,
  1, 81, :_reduce_148,
  2, 81, :_reduce_149,
  1, 128, :_reduce_150,
  1, 128, :_reduce_none,
  1, 113, :_reduce_152 ]

racc_reduce_n = 153

racc_shift_n = 264

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kDTYPE_UINT => 22,
  :kDTYPE_LINT => 23,
  :kDTYPE_LLINT => 24,
  :kDTYPE_CHAR => 25,
  :kDTYPE_I8 => 26,
  :kDTYPE_I16 => 27,
  :kDTYPE_I32 => 28,
  :kDTYPE_I64 => 29,
  :kDTYPE_UI8 => 30,
  :kDTYPE_UI16 => 31,
  :kDTYPE_UI32 => 32,
  :kDTYPE_UI64 => 33,
  :kDTYPE_INT => 34,
  :kDTYPE_F32 => 35,
  :kDTYPE_F64 => 36,
  :kDTYPE_LF64 => 37,
  :kDTYPE_ROBJ => 38,
  :kDTYPE_ULINT => 39,
  :kDTYPE_ULLINT => 40,
  :tCUSTOM_DTYPE => 41,
  :tLPAREN => 42,
  :tRPAREN => 43,
  :tLSQUARE => 44,
  :tRSQUARE => 45,
  :tIDENTIFIER => 46,
  :tNL => 47,
  :tCOMMA => 48,
  :tSQUOTE => 49,
  :tSCOLON => 50,
  :EOF => 51,
  :tDOT => 52,
  :tQMARK => 53,
  :tSTART_LINE => 54,
  :tPLUS => 55,
  :tMINUS => 56,
  :tSTAR => 57,
  :tDIVIDE => 58,
  :tEXPO => 59,
  :tMODULUS => 60,
  :tASSIGN => 61,
  :tEQ => 62,
  :tLT => 63,
  :tLTEQ => 64,
  :tGT => 65,
  :tGTEQ => 66,
  :tANDOP => 67,
  :tOROP => 68,
  :tBANG => 69,
  :tOP_ASSIGN => 70,
  :tINTEGER => 71,
  :tFLOAT => 72,
  :tSINGLE_CHAR => 73,
  :UMINUS => 74,
  :tNEQ => 75 }

racc_nt_base = 76

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "c_declarations",
  "c_declaration",
  "dtype",
  "dtype_list",
  "var_decl_stmts",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "command_call",
  "expr_cmp",
  "command_opt_args",
  "command_arg_list",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_7(val, _values, result)
            result = Statement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
            result = Statement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
            result = Statement::CStructOrUnionDef.new val[0], val[1], val[3] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_12(val, _values, result)
            result = Statement::Alias.new val[1], val[3]
      
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_14(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_15(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_20(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_23(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_24(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_25(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_26(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_27(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_28(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_29(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_30(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_31(val, _values, result)
            result = Statement::For.new *val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_32(val, _values, result)
     result = Statement::While.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_33(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_36(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_37(val, _values, result)
            declarations = []
        val[0].each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_39(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_40(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_41(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = { 
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_43(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_44(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_45(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_46(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_55(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_56(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_57(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_58(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_59(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_60(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_61(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_62(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_63(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_65(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_66(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_68(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_69(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_70(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_71(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_72(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_73(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_74(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_75(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_76(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_77(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_78(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_79(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_80(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_81(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_82(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_83(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_84(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_86(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_87(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_88(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_89(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_90(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_91(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_92(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_93(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_94(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_95(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_96(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_97(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_98(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_99(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_100(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_101(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_102(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_103(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_104(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_111(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_112(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_113(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_116(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args          
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_117(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_118(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_119(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_121(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_122(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_124(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_125(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_145(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_146(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_147(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_152(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
