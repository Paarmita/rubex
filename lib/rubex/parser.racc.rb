#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 503)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      return_type = type + ident[:return_ptr_level].to_s
      func_decl = Statement::CFunctionDecl.new(return_type,
        ident[:return_ptr_level], ident[:name], ident[:arg_list])
      ptr_level == "*" if ptr_level.empty?

      Statement::CPtrDecl.new(func_decl, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'93,94,96,224,234,224,211,97,98,143,142,113,114,115,88,141,84,76,164',
'165,267,117,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,121,164,165,66,106,66,209,17,202,173,211,174,116,203,122,21,164',
'165,22,164,165,76,173,164,165,164,165,120,171,112,123,15,93,94,96,124',
'109,110,111,97,98,176,24,113,114,115,88,12,84,25,11,10,16,117,30,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,174,290',
'167,106,305,21,72,318,22,72,-40,116,208,122,26,-40,289,207,76,76,166',
'222,73,164,165,73,120,28,112,123,15,93,94,96,124,109,110,111,97,98,164',
'165,113,114,115,88,12,84,164,165,10,16,117,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,121,15,52,15,106,21,21,21,22,22',
'22,57,116,21,122,21,22,12,22,12,11,10,16,10,16,21,58,120,22,112,123',
'59,93,94,96,124,109,110,111,97,98,164,165,113,114,115,88,21,84,311,22',
'61,312,117,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,121,173,62,174,106,178,179,180,181,182,183,63,116,66,122,178,179',
'180,181,182,183,67,184,185,186,187,188,120,66,112,123,66,93,94,96,124',
'109,110,111,97,98,164,165,113,114,115,88,71,84,180,181,182,183,117,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,164',
'165,75,106,178,179,180,181,182,183,76,116,66,122,178,179,180,181,182',
'183,139,184,185,186,187,188,120,147,112,123,148,93,94,96,124,109,110',
'111,97,98,164,165,113,114,115,88,151,84,180,181,182,183,117,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,164,165,175',
'106,178,179,180,181,182,183,204,116,75,122,296,297,229,230,231,232,217',
'184,185,186,187,188,120,219,112,123,59,93,94,96,124,109,110,111,97,98',
'164,165,113,114,115,88,167,84,164,165,164,165,117,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,296,297,173,106,178',
'179,180,181,182,183,222,116,226,122,238,241,242,266,182,66,270,184,185',
'186,187,188,120,75,112,123,174,93,94,96,124,109,110,111,97,98,151,281',
'113,114,115,88,282,84,164,182,182,182,117,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,121,182,15,213,106,293,298,113,114',
'115,301,242,116,304,122,306,75,117,12,320,75,,10,16,,,,120,,112,123',
',,,,124,109,110,111,121,,,,155,,,113,114,115,,,116,21,122,,22,117,113',
'114,115,,,,,,,120,117,112,123,,,,,124,109,110,111,121,,,,155,,,113,114',
'115,,162,116,,122,155,,117,,,,,,116,,122,,120,,112,123,,,,,124,109,110',
'111,121,112,123,,155,,,124,109,110,111,,116,,122,113,114,115,,,,,,,',
'117,,120,,112,123,,,,,124,109,110,111,,,,,113,114,115,,121,,,,155,,117',
',,,,,116,,122,113,114,115,,,,,,,,117,,120,121,112,123,,155,,,124,109',
'110,111,,116,,122,113,114,115,,121,,,,155,,117,,120,,112,123,116,,122',
',124,109,110,111,,,,113,114,115,,120,162,112,123,,155,117,,124,109,110',
'111,,116,,122,113,114,115,,,,,,,,117,,162,,112,123,155,,,,124,109,110',
'111,116,,122,113,114,115,,,162,,,,155,117,,,,112,123,,116,,122,124,109',
'110,111,,,,,113,114,115,,121,,112,123,155,,117,,124,109,110,111,116',
',122,113,114,115,,,,,,,,117,,120,162,112,123,,155,,,124,109,110,111',
',116,,122,113,114,115,,121,,,,155,,117,,,,112,123,116,,122,,124,109',
'110,111,,,,,113,114,115,120,121,112,123,,155,,117,124,109,110,111,,116',
',122,113,114,115,,,,,,,,117,,120,121,112,123,,155,,,124,109,110,111',
',116,,122,113,114,115,,121,,,,155,,117,,120,,112,123,116,,122,,124,109',
'110,111,,,,,113,114,115,120,121,112,123,,155,,117,124,109,110,111,,116',
',122,113,114,115,,,,,,,,117,,120,121,112,123,,155,,,124,109,110,111',
',116,,122,113,114,115,,121,,,,155,,117,,120,,112,123,116,,122,,124,109',
'110,111,,,,,113,114,115,120,121,112,123,,155,,117,124,109,110,111,,116',
',122,113,114,115,,,,,,,,117,,120,162,112,123,,155,,,124,109,110,111',
',116,,122,113,114,115,,162,,,,155,,117,,,,112,123,116,,122,,124,109',
'110,111,,,,113,114,115,,,162,112,123,,155,117,,124,109,110,111,,116',
',122,113,114,115,,,,,,,,117,,162,,112,123,155,,,,124,109,110,111,116',
',122,113,114,115,,,162,,,,155,117,,,,112,123,,116,,122,124,109,110,111',
',,,113,114,115,,,162,,112,123,155,117,,,124,109,110,111,116,,122,113',
'114,115,,,,,,,,117,,162,,112,123,155,,,,124,109,110,111,116,,122,113',
'114,115,,,162,,,,155,117,,,,112,123,,116,,122,124,109,110,111,,,,113',
'114,115,,,162,,112,123,155,117,,,124,109,110,111,116,,122,113,114,115',
',,,,,,,117,,162,,112,123,155,,,,124,109,110,111,116,,122,113,114,115',
',,162,,,,155,117,,,,112,123,,116,,122,124,109,110,111,,,,113,114,115',
',,162,,112,123,155,117,,,124,109,110,111,116,,122,113,114,115,,,,,,',
',117,,162,,112,123,155,,,,124,109,110,111,116,,122,113,114,115,,,162',
',,,155,117,,,,112,123,,116,,122,124,109,110,111,,,,113,114,115,,,162',
',112,123,155,117,,,124,109,110,111,116,,122,113,114,115,,,,,,,,117,',
'162,,112,123,155,,,,124,109,110,111,116,,122,113,114,115,,,162,,,,155',
'117,,,,112,123,,116,,122,124,109,110,111,,,,,113,114,115,,121,,112,123',
'155,,117,,124,109,110,111,116,,122,113,114,115,,,,,,,,117,,120,121,112',
'123,,155,,,124,109,110,111,,116,,122,113,114,115,,121,,288,,155,,117',
',120,,112,123,116,,122,,124,109,110,111,,,,,113,114,115,120,121,112',
'123,,155,,117,124,109,110,111,,116,,122,113,114,115,,,,,,,,117,,120',
'162,112,123,,155,,,124,109,110,111,,116,,122,113,114,115,,162,,,,155',
',117,,,,112,123,116,,122,,124,109,110,111,,,,,,,,,121,112,123,,155,',
',124,109,110,111,,116,,122,,214,,,,,,,,,,,120,,112,123,12,,84,,124,109',
'110,111,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,265,,,,,21,,,22,,,,178,179,180,181,182,183,,189,191,192,193,194,',
',,,,184,185,186,187,188,265,,,,,,190,,,,,,178,179,180,181,182,183,,',
',,,,,,,,,184,185,186,187,188,30,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,,12,,84,,21,,,22,30,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,178,179,180,181,182,183,,189,191',
'192,193,194,,,,,,184,185,186,187,188,276,,,,,,190,,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,,-43,,,,,-43,30,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130,30,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,130,178,179,180',
'181,182,183,,,229,230,231,232,,,,,,184,185,186,187,188,178,179,180,181',
'182,183,178,179,180,181,182,183,,,,,,184,185,186,187,188,,184,185,186',
'187,188,178,179,180,181,182,183,178,179,180,181,182,183,,,,,,184,185',
'186,187,188,,184,185,186,187,188,30,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,178,179,180,181,182,183,178,179,180,181,182,183,178,179',
'180,181,182,183,185,186,,,,184,185,186,,,,184,185,186' ]
        racc_action_table = arr = ::Array.new(2184, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,70,70,159,163,307,272,70,70,85,84,70,70,70,70,84,70,272,103,103,198',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'198,198,159,70,307,136,1,127,106,136,106,70,127,70,85,152,152,85,163',
'163,136,108,159,159,307,307,70,106,70,70,19,131,131,131,70,70,70,70',
'131,131,108,10,131,131,131,131,19,131,11,19,19,19,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,238,245,104,131,292,19,61,314,19,238,132,131,135,131,12,132,244',
'135,314,292,104,244,61,245,245,238,131,15,131,131,23,150,150,150,131',
'131,131,131,150,150,158,158,150,150,150,150,23,150,221,221,23,23,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,150,0,17,65,150,150,23,2,150,23,2,24,150,5,150,77,5',
'0,77,65,0,0,0,65,65,78,25,150,78,150,150,26,223,223,223,150,150,150',
'150,223,223,237,237,223,223,223,223,90,223,302,90,27,302,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,155,28,155,223,259,259,259,259,259,259,29,223,56,223,255',
'255,255,255,255,255,57,259,259,259,259,259,223,58,223,223,59,226,226',
'226,223,223,223,223,226,226,243,243,226,226,226,226,60,226,248,248,248',
'248,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,246,246,63,226,260,260,260,260,260,260,64',
'226,74,226,256,256,256,256,256,256,83,260,260,260,260,260,226,88,226',
'226,89,234,234,234,226,226,226,226,234,234,247,247,234,234,234,234,91',
'234,249,249,249,249,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,278,278,107,234,261,261',
'261,261,261,261,129,234,139,234,279,279,281,281,282,282,140,261,261',
'261,261,261,234,145,234,234,147,297,297,297,234,234,234,234,297,297',
'287,287,297,297,297,297,153,297,303,303,316,316,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,319,319,156,297,262,262,262,262,262,262,157,297,160,297,167,168',
'169,197,199,202,205,262,262,262,262,262,297,210,297,297,211,315,315',
'315,297,297,297,297,315,315,220,227,315,315,315,315,228,315,236,250',
'251,252,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,253,137,137,315,276,280,93,93,93,283',
'285,315,291,315,294,304,93,137,317,320,,137,137,,,,315,,315,315,,,,',
'315,315,315,315,93,,,,93,,,94,94,94,,,93,137,93,,137,94,97,97,97,,,',
',,,93,97,93,93,,,,,93,93,93,93,94,,,,94,,,96,96,96,,97,94,,94,97,,96',
',,,,,97,,97,,94,,94,94,,,,,94,94,94,94,96,97,97,,96,,,97,97,97,97,,96',
',96,98,98,98,,,,,,,,98,,96,,96,96,,,,,96,96,96,96,,,,,120,120,120,,98',
',,,98,,120,,,,,,98,,98,121,121,121,,,,,,,,121,,98,120,98,98,,120,,,98',
'98,98,98,,120,,120,122,122,122,,121,,,,121,,122,,120,,120,120,121,,121',
',120,120,120,120,,,,123,123,123,,121,122,121,121,,122,123,,121,121,121',
'121,,122,,122,124,124,124,,,,,,,,124,,123,,122,122,123,,,,122,122,122',
'122,123,,123,151,151,151,,,124,,,,124,151,,,,123,123,,124,,124,123,123',
'123,123,,,,,162,162,162,,151,,124,124,151,,162,,124,124,124,124,151',
',151,164,164,164,,,,,,,,164,,151,162,151,151,,162,,,151,151,151,151',
',162,,162,165,165,165,,164,,,,164,,165,,,,162,162,164,,164,,162,162',
'162,162,,,,,166,166,166,164,165,164,164,,165,,166,164,164,164,164,,165',
',165,171,171,171,,,,,,,,171,,165,166,165,165,,166,,,165,165,165,165',
',166,,166,173,173,173,,171,,,,171,,173,,166,,166,166,171,,171,,166,166',
'166,166,,,,,174,174,174,171,173,171,171,,173,,174,171,171,171,171,,173',
',173,175,175,175,,,,,,,,175,,173,174,173,173,,174,,,173,173,173,173',
',174,,174,176,176,176,,175,,,,175,,176,,174,,174,174,175,,175,,174,174',
'174,174,,,,,178,178,178,175,176,175,175,,176,,178,175,175,175,175,,176',
',176,179,179,179,,,,,,,,179,,176,178,176,176,,178,,,176,176,176,176',
',178,,178,180,180,180,,179,,,,179,,180,,,,178,178,179,,179,,178,178',
'178,178,,,,181,181,181,,,180,179,179,,180,181,,179,179,179,179,,180',
',180,182,182,182,,,,,,,,182,,181,,180,180,181,,,,180,180,180,180,181',
',181,183,183,183,,,182,,,,182,183,,,,181,181,,182,,182,181,181,181,181',
',,,184,184,184,,,183,,182,182,183,184,,,182,182,182,182,183,,183,185',
'185,185,,,,,,,,185,,184,,183,183,184,,,,183,183,183,183,184,,184,186',
'186,186,,,185,,,,185,186,,,,184,184,,185,,185,184,184,184,184,,,,187',
'187,187,,,186,,185,185,186,187,,,185,185,185,185,186,,186,188,188,188',
',,,,,,,188,,187,,186,186,187,,,,186,186,186,186,187,,187,189,189,189',
',,188,,,,188,189,,,,187,187,,188,,188,187,187,187,187,,,,190,190,190',
',,189,,188,188,189,190,,,188,188,188,188,189,,189,191,191,191,,,,,,',
',191,,190,,189,189,190,,,,189,189,189,189,190,,190,192,192,192,,,191',
',,,191,192,,,,190,190,,191,,191,190,190,190,190,,,,193,193,193,,,192',
',191,191,192,193,,,191,191,191,191,192,,192,194,194,194,,,,,,,,194,',
'193,,192,192,193,,,,192,192,192,192,193,,193,222,222,222,,,194,,,,194',
'222,,,,193,193,,194,,194,193,193,193,193,,,,,288,288,288,,222,,194,194',
'222,,288,,194,194,194,194,222,,222,242,242,242,,,,,,,,242,,222,288,222',
'222,,288,,,222,222,222,222,,288,,288,296,296,296,,242,,242,,242,,296',
',288,,288,288,242,,242,,288,288,288,288,,,,,299,299,299,242,296,242',
'242,,296,,299,242,242,242,242,,296,,296,300,300,300,,,,,,,,300,,296',
'299,296,296,,299,,,296,296,296,296,,299,,299,312,312,312,,300,,,,300',
',312,,,,299,299,300,,300,,299,299,299,299,,,,,,,,,312,300,300,,312,',
',300,300,300,300,,312,,312,,138,,,,,,,,,,,312,,312,312,138,,138,,312',
'312,312,312,138,138,138,138,138,138,138,138,138,138,138,138,138,138',
'138,138,138,138,138,138,138,196,,,,,138,,,138,,,,196,196,196,196,196',
'196,,196,196,196,196,196,,,,,,196,196,196,196,196,233,,,,,,196,,,,,',
'233,233,233,233,233,233,,,,,,,,,,,,233,233,233,233,233,144,144,144,144',
'144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144',
',68,,68,,144,,,144,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'68,68,68,68,118,118,118,118,118,118,,118,118,118,118,118,,,,,,118,118',
'118,118,118,217,,,,,,118,,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,75,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,,75,,,,,75,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,,,,,71,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,,,,,203',
'161,161,161,161,161,161,,,161,161,161,161,,,,,,161,161,161,161,161,263',
'263,263,263,263,263,264,264,264,264,264,264,,,,,,263,263,263,263,263',
',264,264,264,264,264,309,309,309,309,309,309,310,310,310,310,310,310',
',,,,,309,309,309,309,309,,310,310,310,310,310,16,16,16,16,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,207,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,207,254,254,254,254,254',
'254,257,257,257,257,257,257,258,258,258,258,258,258,254,254,,,,257,257',
'257,,,,258,258,258' ]
        racc_action_check = arr = ::Array.new(2184, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   192,    50,   148,   nil,   nil,   154,   nil,   nil,   nil,   nil,
    34,    16,    82,   nil,   nil,   122,  2063,   195,   nil,    72,
   nil,   nil,   nil,   147,   136,   205,   210,   193,   213,   228,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   229,   238,   244,   247,
   268,    67,   nil,   299,   292,   194,   nil,   nil,  1833,  2084,
    -4,  1933,   nil,   nil,   304,  1905,   nil,   156,   166,   nil,
   nil,   nil,   nil,   313,   -36,     6,   nil,   nil,   320,   371,
   188,   384,   nil,   560,   599,   nil,   638,   610,   685,   nil,
   nil,   nil,   nil,   -54,    64,   nil,     5,   355,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1820,   nil,
   713,   732,   760,   787,   807,   nil,   nil,     3,   nil,   378,
   nil,    71,    81,   nil,   nil,    83,     2,   568,  1714,   384,
   373,   nil,   nil,   nil,  1803,   393,   nil,   435,   nil,   nil,
   146,   834,   -13,   408,   nil,   222,   449,   451,    87,    -6,
   492,  1951,   862,   -10,   881,   909,   937,   457,   456,   444,
   nil,   956,   nil,   984,  1012,  1031,  1059,   nil,  1087,  1106,
  1134,  1161,  1181,  1208,  1235,  1255,  1282,  1309,  1329,  1356,
  1383,  1403,  1430,  1457,  1477,   nil,  1713,   463,   -28,   448,
   nil,   nil,   461,  1959,   nil,   511,   nil,  2105,   nil,   nil,
   474,   475,   nil,   nil,   nil,   nil,   nil,  1884,   nil,   nil,
   528,    95,  1504,   221,   nil,   nil,   296,   484,   489,   nil,
   nil,   nil,   nil,  1747,   371,   nil,   470,   162,    70,   nil,
   nil,   nil,  1551,   237,    87,    70,   272,   312,   255,   330,
   479,   480,   481,   505,  2092,   223,   298,  2098,  2104,   213,
   288,   363,   438,  1973,  1979,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -45,   nil,   nil,   nil,   522,   nil,   347,   426,
   571,   367,   367,   575,   nil,   513,   nil,   387,  1532,   nil,
   nil,   533,    76,   nil,   580,   nil,  1579,   446,   nil,  1607,
  1626,   nil,   192,   395,   537,   nil,   nil,    -4,   nil,  2001,
  2007,   nil,  1654,   nil,    75,   521,   397,   539,   nil,   487,
   541,   nil,   nil ]

racc_action_default = [
    -6,  -190,  -183,    -2,    -4,  -190,    -7,    -9,   -10,   -11,
  -190,  -190,  -190,   -36,   -37,   -48,  -190,  -190,    -1,  -184,
  -185,  -187,  -188,    -5,   -13,  -190,  -190,  -190,  -190,  -190,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,   -93,   323,    -3,  -186,    -8,  -190,  -190,  -190,  -190,
  -113,  -112,   -49,   -46,  -182,    -6,  -189,   -14,  -190,  -190,
   -51,  -190,  -110,  -111,  -190,   -93,   -94,  -190,  -190,   -16,
   -18,   -19,   -20,  -190,  -190,  -190,   -23,   -93,  -190,  -190,
  -183,   -52,   -54,  -190,  -157,   -57,  -190,  -190,  -190,   -62,
   -63,   -64,   -65,   -66,  -140,   -93,  -155,  -148,  -155,  -101,
  -102,  -103,  -104,  -105,  -106,  -107,  -108,  -109,  -119,  -120,
  -190,  -190,  -190,  -190,  -190,  -149,  -151,  -190,  -115,  -190,
  -118,   -51,   -93,   -42,   -44,  -190,  -190,  -190,  -190,   -46,
  -190,   -29,   -30,   -22,  -190,   -25,   -27,   -67,   -38,   -50,
  -184,  -190,   -55,  -140,  -148,  -155,  -155,   -56,  -158,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,   -81,   -84,
   -85,  -190,  -150,  -157,  -190,  -190,  -190,  -152,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -123,  -119,  -120,  -190,  -136,
  -137,  -138,  -190,  -190,  -117,  -190,   -41,   -93,   -47,   -93,
   -46,   -88,   -89,   -12,   -15,   -17,   -21,  -190,   -24,   -93,
   -53,   -59,  -190,   -51,   -75,   -76,   -51,  -190,  -190,   -71,
   -72,   -73,   -74,  -190,   -51,  -121,  -122,   -68,  -112,  -153,
  -154,   -93,  -190,   -98,  -190,  -190,   -99,  -100,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -141,
  -142,  -143,  -144,  -145,  -146,  -139,  -147,  -124,  -114,  -116,
   -39,   -45,  -190,   -87,   -28,   -93,  -190,   -26,  -159,   -77,
  -190,  -190,  -190,  -190,   -82,   -83,   -90,   -91,   -95,  -156,
  -160,  -190,   -31,   -32,  -190,   -78,  -190,   -51,   -60,  -190,
  -190,   -61,  -190,   -96,   -46,   -93,   -58,  -190,   -80,   -69,
   -70,   -92,  -190,   -86,   -34,   -51,   -97,  -190,   -35,   -77,
   -46,   -79,   -33 ]

racc_goto_table = [
    74,    64,    89,    51,   104,    29,   223,   134,   107,   108,
    65,    60,    68,    69,   152,   158,   146,   159,   128,   163,
   228,    55,   227,   157,    86,   161,     3,   177,   131,     1,
    79,   170,     2,   210,   169,    18,    77,   294,    56,    78,
    85,   195,   198,   145,   140,    53,   274,   317,    27,   196,
   199,   200,   201,    70,   135,    51,    87,   220,    51,     9,
   129,   206,   132,   205,    54,   104,    82,   160,    54,   107,
   108,   168,   221,   286,   212,   177,   216,   321,     9,   302,
   127,   197,     9,   nil,   104,   235,   236,   237,   107,   108,
   233,   nil,   243,   nil,   158,   245,   246,   247,   nil,   218,
   215,   nil,   244,   nil,   nil,   240,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   149,     9,    51,   nil,    81,   nil,   nil,
    19,    87,   nil,    23,   nil,    55,    82,   nil,   nil,   271,
   nil,   300,   299,   278,   nil,   nil,   nil,   273,   277,   nil,
   269,   239,   nil,   nil,   315,   279,   268,   104,   280,   272,
   104,   107,   108,   287,   107,   108,   283,   284,   104,   291,
   285,   nil,   107,   108,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,    54,   nil,   nil,   nil,   nil,   nil,    54,
    51,   nil,   129,   nil,   132,    54,     9,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   275,   137,   138,   nil,   nil,   303,
   212,   nil,   nil,   144,   nil,   nil,   nil,   307,   150,   nil,
   nil,   nil,   nil,   nil,   nil,   292,   nil,   309,   310,   308,
   nil,   104,   nil,   316,   nil,   107,   108,   nil,   nil,   nil,
   nil,   313,   nil,   nil,   nil,   nil,   nil,   319,   nil,   104,
   nil,   nil,   nil,   107,   108,   314,   nil,   322 ]

racc_goto_check = [
    19,    27,    34,    22,    48,    18,    43,    35,    56,    59,
    13,    32,    13,    13,    40,    40,    24,    40,    62,    40,
    51,     8,    50,    41,    21,    49,     4,    64,    13,     1,
    15,    54,     2,    55,    24,     3,     7,    44,    12,    14,
    20,    40,    40,    23,    25,     4,    26,    28,    31,    49,
    49,    49,    49,    33,    36,    22,    22,    38,    22,    11,
    18,    24,    22,    34,    66,    48,    17,    45,    66,    56,
    59,    53,    40,    57,    56,    64,    19,    44,    11,    58,
    61,    63,    11,   nil,    48,    40,    40,    40,    56,    59,
    49,   nil,    40,   nil,    40,    40,    40,    40,   nil,    21,
    15,   nil,    41,   nil,   nil,    56,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,     3,    11,    22,   nil,    11,   nil,   nil,
     5,    22,   nil,     5,   nil,     8,    17,   nil,   nil,    35,
   nil,    51,    50,    40,   nil,   nil,   nil,    19,    24,   nil,
    62,    32,   nil,   nil,    43,    34,    13,    48,    34,    27,
    48,    56,    59,    40,    56,    59,    34,    54,    48,    55,
    24,   nil,    56,    59,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,    66,   nil,   nil,   nil,   nil,   nil,    66,
    22,   nil,    18,   nil,    22,    66,    11,    11,   nil,   nil,
   nil,   nil,   nil,   nil,    22,     5,     5,   nil,   nil,    40,
    56,   nil,   nil,     5,   nil,   nil,   nil,    40,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    27,   nil,    49,    49,    34,
   nil,    48,   nil,    40,   nil,    56,    59,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,    34,   nil,    48,
   nil,   nil,   nil,    56,    59,    27,   nil,    19 ]

racc_goto_pointer = [
   nil,    29,    32,    33,    26,   128,   nil,   -29,    -2,   nil,
   nil,    59,    14,   -46,   -29,   -38,   nil,    -2,   -11,   -63,
   -29,   -45,   -13,   -44,   -71,   -40,  -171,   -50,  -267,   nil,
   nil,    33,   -16,    -7,   -68,   -68,   -21,   nil,   -93,   nil,
   -79,   -71,   nil,  -153,  -242,   -30,   nil,   nil,   -66,   -72,
  -139,  -141,   nil,   -34,   -74,  -103,   -62,  -169,  -209,   -61,
   nil,     9,   -53,   -40,   -81,   nil,    45 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   100,   nil,   225,   nil,   nil,    80,   102,    83,   nil,
   nil,   nil,   105,   nil,   133,   nil,   nil,   136,   nil,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,    90,    91,    92,
   103,   nil,    95,   nil,   nil,   nil,    99,   101,   153,   118,
   nil,   nil,   295,   nil,   nil,   nil,   154,   nil,   nil,   156,
   125,   nil,   nil,   119,   172,   126,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 90, :_reduce_1,
  1, 91, :_reduce_2,
  3, 91, :_reduce_3,
  1, 93, :_reduce_4,
  2, 93, :_reduce_5,
  0, 96, :_reduce_6,
  1, 96, :_reduce_7,
  3, 96, :_reduce_8,
  1, 97, :_reduce_9,
  1, 97, :_reduce_10,
  1, 97, :_reduce_11,
  7, 99, :_reduce_12,
  0, 101, :_reduce_13,
  2, 101, :_reduce_14,
  7, 95, :_reduce_15,
  1, 103, :_reduce_16,
  3, 103, :_reduce_17,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 105, :_reduce_21,
  6, 100, :_reduce_22,
  1, 109, :_reduce_23,
  3, 109, :_reduce_24,
  2, 110, :_reduce_25,
  3, 112, :_reduce_26,
  1, 112, :_reduce_27,
  4, 106, :_reduce_28,
  1, 114, :_reduce_none,
  1, 114, :_reduce_30,
  2, 115, :_reduce_31,
  2, 115, :_reduce_32,
  7, 115, :_reduce_33,
  0, 117, :_reduce_34,
  1, 117, :_reduce_35,
  1, 98, :_reduce_36,
  1, 98, :_reduce_37,
  6, 118, :_reduce_38,
  7, 119, :_reduce_39,
  1, 124, :_reduce_40,
  2, 124, :_reduce_41,
  1, 124, :_reduce_42,
  0, 125, :_reduce_43,
  1, 125, :_reduce_44,
  3, 125, :_reduce_45,
  0, 108, :_reduce_46,
  3, 108, :_reduce_47,
  0, 120, :_reduce_48,
  2, 120, :_reduce_49,
  2, 123, :_reduce_50,
  0, 126, :_reduce_51,
  1, 126, :_reduce_52,
  3, 126, :_reduce_53,
  1, 127, :_reduce_54,
  2, 127, :_reduce_55,
  2, 127, :_reduce_56,
  1, 127, :_reduce_57,
  6, 127, :_reduce_58,
  3, 127, :_reduce_59,
  5, 127, :_reduce_60,
  5, 127, :_reduce_61,
  1, 127, :_reduce_62,
  1, 127, :_reduce_none,
  1, 127, :_reduce_64,
  1, 127, :_reduce_none,
  1, 127, :_reduce_66,
  2, 136, :_reduce_67,
  3, 135, :_reduce_68,
  5, 134, :_reduce_69,
  5, 134, :_reduce_70,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  0, 133, :_reduce_77,
  1, 133, :_reduce_78,
  5, 133, :_reduce_79,
  2, 141, :_reduce_80,
  2, 128, :_reduce_81,
  3, 142, :_reduce_82,
  3, 142, :_reduce_83,
  1, 142, :_reduce_84,
  1, 142, :_reduce_85,
  6, 113, :_reduce_86,
  3, 113, :_reduce_87,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 143, :_reduce_90,
  1, 146, :_reduce_none,
  3, 146, :_reduce_92,
  0, 116, :_reduce_93,
  2, 116, :_reduce_94,
  0, 147, :_reduce_95,
  1, 147, :_reduce_96,
  3, 147, :_reduce_97,
  3, 131, :_reduce_98,
  3, 131, :_reduce_99,
  3, 131, :_reduce_100,
  1, 149, :_reduce_101,
  1, 149, :_reduce_102,
  1, 149, :_reduce_103,
  1, 149, :_reduce_104,
  1, 149, :_reduce_105,
  1, 149, :_reduce_106,
  1, 149, :_reduce_107,
  1, 149, :_reduce_108,
  1, 149, :_reduce_109,
  2, 121, :_reduce_110,
  2, 121, :_reduce_111,
  1, 121, :_reduce_112,
  0, 122, :_reduce_113,
  4, 122, :_reduce_114,
  1, 150, :_reduce_115,
  3, 150, :_reduce_116,
  2, 151, :_reduce_117,
  1, 151, :_reduce_118,
  1, 129, :_reduce_119,
  1, 129, :_reduce_120,
  3, 129, :_reduce_121,
  3, 129, :_reduce_122,
  2, 129, :_reduce_123,
  3, 129, :_reduce_124,
  3, 138, :_reduce_125,
  3, 138, :_reduce_126,
  3, 138, :_reduce_127,
  3, 138, :_reduce_128,
  3, 138, :_reduce_129,
  3, 138, :_reduce_130,
  3, 138, :_reduce_131,
  3, 138, :_reduce_132,
  3, 138, :_reduce_133,
  3, 138, :_reduce_134,
  3, 138, :_reduce_135,
  2, 138, :_reduce_136,
  2, 138, :_reduce_137,
  2, 138, :_reduce_138,
  3, 138, :_reduce_139,
  1, 138, :_reduce_140,
  3, 152, :_reduce_141,
  3, 152, :_reduce_142,
  3, 152, :_reduce_143,
  3, 152, :_reduce_144,
  3, 152, :_reduce_145,
  3, 152, :_reduce_146,
  3, 152, :_reduce_147,
  1, 137, :_reduce_148,
  1, 137, :_reduce_149,
  2, 137, :_reduce_150,
  1, 137, :_reduce_none,
  2, 154, :_reduce_152,
  3, 148, :_reduce_153,
  3, 148, :_reduce_154,
  0, 153, :_reduce_155,
  3, 153, :_reduce_156,
  0, 130, :_reduce_157,
  1, 130, :_reduce_158,
  3, 130, :_reduce_159,
  4, 145, :_reduce_160,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_181,
  2, 107, :_reduce_182,
  0, 92, :_reduce_183,
  1, 92, :_reduce_184,
  1, 94, :_reduce_185,
  2, 94, :_reduce_186,
  1, 155, :_reduce_187,
  1, 155, :_reduce_none,
  1, 102, :_reduce_189 ]

racc_reduce_n = 190

racc_shift_n = 323

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kDTYPE_UINT => 26,
  :kDTYPE_LINT => 27,
  :kDTYPE_LLINT => 28,
  :kDTYPE_CHAR => 29,
  :kDTYPE_I8 => 30,
  :kDTYPE_I16 => 31,
  :kDTYPE_I32 => 32,
  :kDTYPE_I64 => 33,
  :kDTYPE_UI8 => 34,
  :kDTYPE_UI16 => 35,
  :kDTYPE_UI32 => 36,
  :kDTYPE_UI64 => 37,
  :kDTYPE_INT => 38,
  :kDTYPE_F32 => 39,
  :kDTYPE_F64 => 40,
  :kDTYPE_LF64 => 41,
  :kDTYPE_ROBJ => 42,
  :kDTYPE_ULINT => 43,
  :kDTYPE_ULLINT => 44,
  :kDTYPE_VOID => 45,
  :tCUSTOM_DTYPE => 46,
  :tLPAREN => 47,
  :tRPAREN => 48,
  :tLSQUARE => 49,
  :tRSQUARE => 50,
  :tIDENTIFIER => 51,
  :tNL => 52,
  :tCOMMA => 53,
  :tSQUOTE => 54,
  :tSCOLON => 55,
  :EOF => 56,
  :tDOT => 57,
  :tQMARK => 58,
  :tSYMBOL => 59,
  :tPLUS => 60,
  :tMINUS => 61,
  :tSTAR => 62,
  :tDIVIDE => 63,
  :tEXPO => 64,
  :tMODULUS => 65,
  :tASSIGN => 66,
  :tEQ => 67,
  :tLT => 68,
  :tLTEQ => 69,
  :tGT => 70,
  :tGTEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tBANG => 74,
  :tOP_ASSIGN => 75,
  :tSTRING => 76,
  :tBIT_AND => 77,
  :tBIT_OR => 78,
  :tBIT_XOR => 79,
  :tBIT_LSHIFT => 80,
  :tBIT_RSHIFT => 81,
  :tBIT_NOT => 82,
  :tINTEGER => 83,
  :tFLOAT => 84,
  :tSINGLE_CHAR => 85,
  :ADDRESS_OF => 86,
  :UMINUS => 87,
  :tNEQ => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "dtype",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_star",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_22(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[4],
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
            result = variable_decl_nodes val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_26(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_31(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_32(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_33(val, _values, result)
            result = {
          dtype: val[0],
          ptr_level: val[3],
          ident:{
            return_ptr_level: val[1], 
            arg_list: val[6],
            name: val[4]
          }
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_38(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_39(val, _values, result)
            val[3].each do |arg|
          if !arg[:variables]
            raise Rubex::SyntaxError, "All function arguments must have var names."
          end
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_40(val, _values, result)
     result = { dtype: val[0]  , variables: nil    } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_41(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_42(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_43(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_44(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_45(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_46(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_47(val, _values, result)
     result = Statement::ArgumentList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_48(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_49(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_52(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_53(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_54(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_55(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_56(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_57(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_58(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_59(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_60(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_61(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_66(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_67(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_68(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_69(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_77(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_79(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_80(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_81(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_86(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_87(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        else
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        end
      
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_90(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_93(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_94(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_96(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_97(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_98(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_100(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_110(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_111(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_113(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_114(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_116(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_117(val, _values, result)
     result = { dtype: val[0]  , ident: val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_118(val, _values, result)
     result = { dtype: 'object', ident: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_123(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 394)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 397)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_136(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 406)
  def _reduce_138(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_140(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_150(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_152(val, _values, result)
            args = Statement::ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_153(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_154(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_157(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_158(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_159(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_160(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_181(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_182(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 480)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_189(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
