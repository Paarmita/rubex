#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 459)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'83,84,86,192,202,192,210,87,88,15,125,103,104,105,90,124,78,70,143,144',
'262,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,110',
'143,144,62,96,62,151,285,178,150,22,261,263,179,108,68,190,264,70,143',
'144,13,23,143,144,143,144,111,153,102,13,69,83,84,86,109,99,100,101',
'87,88,9,14,103,104,105,90,25,78,10,9,14,48,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,110,13,151,19,96,19,20,150,20,151,149',
'53,68,150,108,151,54,149,56,147,57,9,14,149,143,144,147,111,69,102,143',
'144,83,84,86,109,99,100,101,87,88,143,144,103,104,105,90,19,78,19,20',
'59,20,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,110',
'13,182,19,96,19,20,19,20,19,20,60,20,62,108,155,156,157,158,159,160',
'9,14,157,158,159,160,111,19,102,63,20,83,84,86,109,99,100,101,87,88',
'143,144,103,104,105,90,297,78,19,298,62,20,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,110,13,143,144,96,155,156,157,158,159',
'160,143,144,67,108,157,158,159,160,70,10,9,14,162,163,143,144,111,67',
'102,143,144,83,84,86,109,99,100,101,87,88,271,272,103,104,105,90,121',
'78,197,198,199,200,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,110,143,144,122,96,155,156,157,158,159,160,271,272,126,108',
'155,156,157,158,159,160,129,161,162,163,164,165,111,142,102,143,144',
'83,84,86,109,99,100,101,87,88,145,59,103,104,105,90,152,78,180,181,185',
'186,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,110',
'187,150,190,96,155,156,157,158,159,160,194,203,215,108,159,240,62,129',
'255,256,62,161,162,163,164,165,111,143,102,259,260,83,84,86,109,99,100',
'101,87,88,153,159,103,104,105,90,159,78,159,159,265,59,28,29,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,110,268,273,276,96,155',
'156,157,158,159,160,210,287,292,108,295,151,285,,,,,161,162,163,164',
'165,111,,102,,,83,84,86,109,99,100,101,87,88,,,103,104,105,90,,78,,',
',,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,110,,',
',96,,,,,103,104,105,,,108,155,156,157,158,159,160,103,104,105,,,,111',
',102,,,161,162,163,109,99,100,101,110,,,,133,,,,,,,,110,,108,,133,,',
',,103,104,105,,,108,111,,102,,,103,104,105,109,99,100,101,111,,102,',
',,,,109,99,100,101,110,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,,',
'108,,111,,102,,103,104,105,,109,99,100,101,,102,,,,,,109,99,100,101',
'110,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,,,108,,111,,102,,,103',
'104,105,109,99,100,101,,102,,,,,,109,99,100,101,140,,,,133,,,,,,,,110',
',108,,133,,,,,103,104,105,,,108,,,102,,,,,,109,99,100,101,111,,102,',
',,,,109,99,100,101,110,,,,133,,,,,103,104,105,,,108,,,,,,103,104,105',
',,,,111,,102,,,,,,109,99,100,101,110,,,,133,,,,,,,140,,,108,133,,,,',
'103,104,105,,,108,,111,,102,,,103,104,105,109,99,100,101,,102,,,,,,109',
'99,100,101,110,,,,133,,,,,,,,110,,108,,133,,,,,103,104,105,,,108,111',
',102,,,,,,109,99,100,101,111,,102,,,,,,109,99,100,101,110,,,,133,,,',
',103,104,105,,,108,155,156,157,158,159,160,103,104,105,,,,111,,102,',
',161,162,163,109,99,100,101,110,,,,133,,,,,,,,110,,108,,133,,,,,103',
'104,105,,,108,111,,102,,,,,,109,99,100,101,111,,102,,,,,,109,99,100',
'101,110,,,,133,,,,,103,104,105,,,108,,,,,,,103,104,105,,,,111,,102,',
',,,,109,99,100,101,110,,,,133,,,,,,,,110,,108,,133,,,,,103,104,105,',
',108,111,,102,,,103,104,105,109,99,100,101,111,,102,,,,,,109,99,100',
'101,140,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,,,108,,,,102,,103',
'104,105,,109,99,100,101,,102,,,,,,109,99,100,101,140,,,,133,,,,,,,140',
',,108,133,,,,,103,104,105,,,108,,,,102,,103,104,105,,109,99,100,101',
',102,,,,,,109,99,100,101,140,,,,133,,,,,,,140,,,108,133,,,,,103,104',
'105,,,108,,,,102,,103,104,105,,109,99,100,101,,102,,,,,,109,99,100,101',
'140,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,,,108,,,,102,,103,104',
'105,,109,99,100,101,,102,,,,,,109,99,100,101,140,,,,133,,,,,,,140,,',
'108,133,,,,,103,104,105,,,108,,,,102,,103,104,105,,109,99,100,101,,102',
',,,,,109,99,100,101,140,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,',
',108,,,,102,,103,104,105,,109,99,100,101,,102,,,,,,109,99,100,101,140',
',,,133,,,,,,,140,,,108,133,,,,,103,104,105,,,108,,,,102,,103,104,105',
',109,99,100,101,,102,,,,,,109,99,100,101,140,,,,133,,,,,,,140,,,108',
'133,,,,,103,104,105,,,108,,,,102,,,103,104,105,109,99,100,101,,102,',
',,,,109,99,100,101,140,,,,133,,,,,,,,110,,108,,133,,,,,103,104,105,',
',108,,,102,,,,,,109,99,100,101,111,,102,,,,,,109,99,100,101,110,,280',
',133,,,,,103,104,105,,,108,,,,,,103,104,105,,,,,111,,102,,,,,,109,99',
'100,101,110,,,,133,,,,,,,140,,,108,133,,,,,103,104,105,,,108,,111,,102',
',,103,104,105,109,99,100,101,,102,,,,,,109,99,100,101,140,,,,133,,,',
',,,,110,,108,,133,,,,,103,104,105,,,108,,,102,,,,,,109,99,100,101,111',
',102,,,239,,,109,99,100,101,110,,,,133,155,156,157,158,159,160,,,,108',
',,183,,,,,161,162,163,164,165,111,,102,,,76,,78,109,99,100,101,28,29',
'30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,239,,,,,19,,,20',
',,,155,156,157,158,159,160,,166,168,169,170,171,,,,,,161,162,163,164',
'165,,,,,,167,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,,,,,,19,,,20,155,156,157,158,159,160,,166,168,169,170,171,,,,,,161',
'162,163,164,165,,,,,,167,155,156,157,158,159,160,,166,168,169,170,171',
',,,,,161,162,163,164,165,76,,78,,,167,,28,29,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,251,,,,,,,28,29,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,28,29,30,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,,,,,117,28,29,30,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,,,,,117,155,156,157,158,159,160,,,197,198,199,200',
',,,,,161,162,163,164,165,155,156,157,158,159,160,155,156,157,158,159',
'160,,,,,,161,162,163,164,165,,161,162,163,164,165,155,156,157,158,159',
'160,155,156,157,158,159,160,,,,,,161,162,163,164,165,,161,162,163,164',
'165,155,156,157,158,159,160,,,,,,,,,,,,161,162,163,164,165,28,29,30',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,28,29,30,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,28,29,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,28,29,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47' ]
        racc_action_table = arr = ::Array.new(2186, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'65,65,65,137,141,288,146,65,65,1,78,65,65,65,65,78,65,146,93,93,219',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,219,219',
'137,65,288,215,267,114,98,9,218,243,114,65,215,218,243,267,141,141,61',
'10,137,137,288,288,65,98,65,17,215,71,71,71,65,65,65,65,71,71,61,61',
'71,71,71,71,13,71,17,17,17,15,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,21,210,2,71,17,2,96,17,96,210,22,56,133,71,133',
'23,96,24,210,25,21,21,133,130,130,96,71,56,71,136,136,128,128,128,71',
'71,71,71,128,128,189,189,128,128,128,128,5,128,21,5,26,21,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,119,119,72,128,128,72,73,128,80,73,27,80,52,128,229,229,229,229',
'229,229,119,119,222,222,222,222,128,246,128,53,246,191,191,191,128,128',
'128,128,191,191,206,206,191,191,191,191,293,191,119,293,54,119,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,0,214,214,191,228,228,228,228,228,228,220,220,55,191,223,223',
'223,223,58,0,0,0,228,228,221,221,191,60,191,252,252,194,194,194,191',
'191,191,191,194,194,253,253,194,194,194,194,75,194,255,255,256,256,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,294,294,76,194,233,233,233,233,233,233,300,300,79,194,230',
'230,230,230,230,230,81,233,233,233,233,233,194,90,194,301,301,202,202',
'202,194,194,194,194,202,202,94,95,202,202,202,202,97,202,116,118,121',
'122,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,123,134,135,202,234,234,234,234,234,234,138,142',
'149,202,172,175,178,188,195,196,203,234,234,234,234,234,202,205,202',
'207,211,272,272,272,202,202,202,202,272,272,213,224,272,272,272,272',
'225,272,226,227,245,248,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,251,254,257,272,235,235,235',
'235,235,235,259,269,277,272,283,285,295,,,,,235,235,235,235,235,272',
',272,,,296,296,296,272,272,272,272,296,296,,,296,296,296,296,,296,,',
',,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,,,,296,,,,,83,83,83,,,296,231,231,231,231,231,231,84',
'84,84,,,,296,,296,,,231,231,231,296,296,296,296,83,,,,83,,,,,,,,84,',
'83,,84,,,,,86,86,86,,,84,83,,83,,,87,87,87,83,83,83,83,84,,84,,,,,,84',
'84,84,84,86,,,,86,,,,,,,87,,,86,87,,,,,88,88,88,,,87,,86,,86,,108,108',
'108,,86,86,86,86,,87,,,,,,87,87,87,87,88,,,,88,,,,,,,108,,,88,108,,',
',,109,109,109,,,108,,88,,88,,,110,110,110,88,88,88,88,,108,,,,,,108',
'108,108,108,109,,,,109,,,,,,,,110,,109,,110,,,,,111,111,111,,,110,,',
'109,,,,,,109,109,109,109,110,,110,,,,,,110,110,110,110,111,,,,111,,',
',,129,129,129,,,111,,,,,,140,140,140,,,,,111,,111,,,,,,111,111,111,111',
'129,,,,129,,,,,,,140,,,129,140,,,,,143,143,143,,,140,,129,,129,,,144',
'144,144,129,129,129,129,,140,,,,,,140,140,140,140,143,,,,143,,,,,,,',
'144,,143,,144,,,,,145,145,145,,,144,143,,143,,,,,,143,143,143,143,144',
',144,,,,,,144,144,144,144,145,,,,145,,,,,147,147,147,,,145,232,232,232',
'232,232,232,150,150,150,,,,145,,145,,,232,232,232,145,145,145,145,147',
',,,147,,,,,,,,150,,147,,150,,,,,151,151,151,,,150,147,,147,,,,,,147',
'147,147,147,150,,150,,,,,,150,150,150,150,151,,,,151,,,,,152,152,152',
',,151,,,,,,,153,153,153,,,,151,,151,,,,,,151,151,151,151,152,,,,152',
',,,,,,,153,,152,,153,,,,,155,155,155,,,153,152,,152,,,156,156,156,152',
'152,152,152,153,,153,,,,,,153,153,153,153,155,,,,155,,,,,,,156,,,155',
'156,,,,,157,157,157,,,156,,,,155,,158,158,158,,155,155,155,155,,156',
',,,,,156,156,156,156,157,,,,157,,,,,,,158,,,157,158,,,,,159,159,159',
',,158,,,,157,,160,160,160,,157,157,157,157,,158,,,,,,158,158,158,158',
'159,,,,159,,,,,,,160,,,159,160,,,,,161,161,161,,,160,,,,159,,162,162',
'162,,159,159,159,159,,160,,,,,,160,160,160,160,161,,,,161,,,,,,,162',
',,161,162,,,,,163,163,163,,,162,,,,161,,164,164,164,,161,161,161,161',
',162,,,,,,162,162,162,162,163,,,,163,,,,,,,164,,,163,164,,,,,165,165',
'165,,,164,,,,163,,166,166,166,,163,163,163,163,,164,,,,,,164,164,164',
'164,165,,,,165,,,,,,,166,,,165,166,,,,,167,167,167,,,166,,,,165,,168',
'168,168,,165,165,165,165,,166,,,,,,166,166,166,166,167,,,,167,,,,,,',
'168,,,167,168,,,,,169,169,169,,,168,,,,167,,170,170,170,,167,167,167',
'167,,168,,,,,,168,168,168,168,169,,,,169,,,,,,,170,,,169,170,,,,,171',
'171,171,,,170,,,,169,,,190,190,190,169,169,169,169,,170,,,,,,170,170',
'170,170,171,,,,171,,,,,,,,190,,171,,190,,,,,260,260,260,,,190,,,171',
',,,,,171,171,171,171,190,,190,,,,,,190,190,190,190,260,,260,,260,,,',
',271,271,271,,,260,,,,,,274,274,274,,,,,260,,260,,,,,,260,260,260,260',
'271,,,,271,,,,,,,274,,,271,274,,,,,275,275,275,,,274,,271,,271,,,280',
'280,280,271,271,271,271,,274,,,,,,274,274,274,274,275,,,,275,,,,,,,',
'280,,275,,280,,,,,298,298,298,,,280,,,275,,,,,,275,275,275,275,280,',
'280,,,201,,,280,280,280,280,298,,,,298,201,201,201,201,201,201,,,,298',
',,120,,,,,201,201,201,201,201,298,,298,,,120,,120,298,298,298,298,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,120,174,,,,,120,,,120,,,,174,174,174,174,174,174,,174,174,174,174',
'174,,,,,,174,174,174,174,174,,,,,,174,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,,,,,,266,,,266,106,106',
'106,106,106,106,,106,106,106,106,106,,,,,,106,106,106,106,106,,,,,,106',
'176,176,176,176,176,176,,176,176,176,176,176,,,,,,176,176,176,176,176',
'64,,64,,,176,,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64',
'64,64,187,,,,,,,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,,,,,67,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,,,,,179,139,139,139,139,139,139',
',,139,139,139,139,,,,,,139,139,139,139,139,236,236,236,236,236,236,237',
'237,237,237,237,237,,,,,,236,236,236,236,236,,237,237,237,237,237,238',
'238,238,238,238,238,290,290,290,290,290,290,,,,,,238,238,238,238,238',
',290,290,290,290,290,291,291,291,291,291,291,,,,,,,,,,,,291,291,291',
'291,291,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264' ]
        racc_action_check = arr = ::Array.new(2186, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   259,     9,    67,   nil,   nil,   111,   nil,   nil,   nil,     2,
   -11,   nil,   nil,    64,  2061,    93,   nil,    69,   nil,   nil,
   nil,   113,    59,   116,    83,    79,   105,   149,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   150,   168,   188,   228,    70,   nil,   219,   nil,
   243,    60,   nil,   nil,  1864,    -4,   nil,  1911,   nil,   nil,
   nil,    69,   140,   144,   nil,   258,   287,   nil,   -34,   343,
   146,   348,   nil,   546,   558,   nil,   597,   608,   647,   nil,
   312,   nil,   nil,   -52,   301,   315,    76,   316,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1774,   nil,   658,   697,
   709,   748,   nil,   nil,     3,   nil,   333,   nil,   380,   186,
  1718,   339,   371,   343,   nil,   nil,   nil,   nil,   142,   787,
    68,   nil,   nil,    82,   363,   358,    74,    -6,   403,  1928,
   798,   -10,   404,   837,   849,   888,   -43,   927,   nil,   370,
   939,   978,  1017,  1029,   nil,  1068,  1079,  1118,  1129,  1168,
  1179,  1218,  1229,  1268,  1279,  1318,  1329,  1368,  1379,  1418,
  1429,  1468,   359,   nil,  1717,   376,  1802,   nil,   373,  1936,
   nil,   nil,   nil,   nil,   nil,  2081,  2101,  1891,   418,    85,
  1480,   215,   nil,   nil,   288,   376,   377,   nil,   nil,   nil,
   nil,  1651,   361,   377,   nil,   364,   158,   385,   nil,   nil,
    69,   373,   nil,   383,   192,     0,   nil,   nil,     6,   -28,
   201,   215,   150,   215,   386,   391,   393,   394,   207,   144,
   290,   509,   890,   280,   353,   426,  1950,  1956,  1978,   nil,
   nil,   nil,   nil,     7,   nil,   454,   165,   nil,   398,   nil,
   nil,   431,   220,   294,   478,   243,   243,   479,  2121,   441,
  1519,   nil,   nil,   nil,  2141,   nil,  1778,    -1,   nil,   488,
   nil,  1558,   434,   nil,  1569,  1608,   nil,   489,   nil,   nil,
  1620,   nil,   nil,   443,   nil,   448,   nil,   nil,    -4,   nil,
  1984,  2006,   nil,   186,   264,   447,   507,   nil,  1659,   nil,
   337,   293,   nil ]

racc_action_default = [
    -6,  -176,  -169,    -2,    -4,  -176,    -7,    -9,   -10,  -176,
  -176,   -29,   -30,   -32,  -176,  -176,    -1,  -170,  -171,  -173,
  -174,    -5,   -12,  -176,  -176,  -176,   -74,  -176,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,   303,    -3,
  -172,    -8,  -176,  -176,  -176,  -101,  -100,   -33,   -20,   -75,
  -101,    -6,  -175,   -13,  -176,   -36,  -102,  -176,   -98,   -99,
   -76,   -36,  -176,  -176,   -15,  -176,  -176,   -19,  -176,  -176,
  -169,   -37,   -39,  -176,  -145,   -42,  -176,  -176,  -176,   -47,
  -176,   -49,   -50,   -51,  -126,   -74,  -143,  -136,  -143,   -91,
   -92,   -93,   -94,   -95,   -96,   -97,  -108,  -109,  -176,  -176,
  -176,  -176,  -137,  -139,  -176,  -104,  -176,  -107,  -176,  -176,
  -176,  -176,  -176,  -176,   -22,   -23,   -31,   -35,  -170,  -176,
   -40,  -126,  -136,  -143,  -143,   -41,  -146,  -176,  -176,  -176,
  -176,  -176,   -52,  -176,  -176,  -176,  -176,  -176,  -138,  -176,
  -145,  -176,  -176,  -176,  -140,  -176,  -176,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,  -176,  -176,  -176,  -176,  -176,
  -176,  -176,  -123,  -124,  -176,  -176,  -134,  -135,  -176,  -176,
  -106,   -34,   -11,   -14,   -16,   -26,   -54,  -176,   -38,   -44,
  -176,   -36,   -67,   -68,   -36,  -176,  -176,   -63,   -64,   -65,
   -66,  -176,   -36,  -176,  -110,  -111,   -60,   -73,   -79,   -80,
   -81,   -82,   -83,  -176,   -88,  -100,  -141,  -142,  -176,  -176,
   -89,   -90,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -127,  -128,  -129,  -130,  -131,  -132,  -125,
  -133,  -103,  -105,  -176,   -27,  -176,  -176,   -55,   -74,   -21,
   -24,  -176,  -147,   -69,  -176,  -176,  -176,  -176,   -54,  -176,
  -176,  -144,  -148,   -17,  -176,   -18,   -53,  -176,   -25,  -176,
   -70,  -176,   -36,   -45,  -176,  -176,   -46,  -176,   -77,   -78,
   -85,   -28,   -56,   -57,   -58,   -81,   -82,   -43,  -176,   -72,
   -61,   -62,   -48,  -176,   -86,  -176,   -36,   -84,  -176,   -59,
   -69,   -87,   -71 ]

racc_goto_table = [
    26,    17,    50,    27,    21,    79,    50,    94,    58,   191,
    55,   118,   196,    94,   195,   212,    51,    97,    16,    61,
   115,    64,   245,    97,   209,   135,    98,    74,    77,   269,
   154,     3,    98,    65,   175,   177,     1,   208,    71,     2,
    72,    52,    73,   243,   123,   249,    24,   188,    49,   138,
    26,   282,   283,   116,   207,   293,   114,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   154,   nil,   nil,   nil,
    94,   119,   120,   nil,   nil,   nil,   302,   146,   nil,   128,
    97,   nil,   nil,   184,    77,   nil,   nil,   nil,   nil,    98,
   nil,   218,   nil,   nil,   277,   nil,   127,   nil,   211,   nil,
   nil,   217,   nil,   nil,    50,    50,    26,   213,   nil,   nil,
   nil,   nil,   nil,    50,    51,   130,   136,   nil,   137,   nil,
   141,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   212,   275,
   274,   253,   242,    94,   254,   216,    94,   278,   nil,   nil,
   nil,   nil,   257,    97,    94,   241,    97,   nil,   nil,   nil,
   279,   nil,    98,   nil,    97,    98,   nil,   nil,   284,   nil,
   296,   189,   nil,    98,   nil,   116,   nil,   nil,   nil,   nil,
   258,    26,   248,   250,   244,   204,   205,   206,   nil,   214,
   nil,   nil,   136,   219,   220,   221,   299,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   211,   289,   nil,    94,   nil,   nil,   nil,   nil,   286,
   213,   nil,   252,   nil,    97,   nil,   172,   173,   174,   176,
   267,   nil,   nil,    98,   nil,   nil,   300,   nil,    94,   nil,
   nil,   nil,   nil,   nil,   248,   266,   nil,   286,    97,   nil,
    26,    50,   248,   281,   nil,   nil,   nil,    98,   201,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
   nil,   nil,   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   301,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   290,   291 ]

racc_goto_check = [
    19,     5,    61,    15,     5,    28,    61,    44,    20,    35,
    26,    28,    47,    44,    46,    34,     8,    51,     3,    12,
    57,    12,    17,    51,    50,    33,    53,    14,    18,    36,
    59,     4,    53,    27,    58,    58,     1,    43,    27,     2,
     7,    11,    13,    16,    21,    22,    25,    30,     4,    37,
    19,    41,    42,    19,    49,    52,    56,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,
    44,     5,     5,   nil,   nil,   nil,    36,    20,   nil,     5,
    51,   nil,   nil,    14,    18,   nil,   nil,   nil,   nil,    53,
   nil,    33,   nil,   nil,    17,   nil,     3,   nil,    51,   nil,
   nil,    51,   nil,   nil,    61,    61,    19,    53,   nil,   nil,
   nil,   nil,   nil,    61,     8,    32,    32,   nil,    32,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,    47,
    46,    28,    57,    44,    28,    26,    44,    50,   nil,   nil,
   nil,   nil,    28,    51,    44,    12,    51,   nil,   nil,   nil,
    43,   nil,    53,   nil,    51,    53,   nil,   nil,    43,   nil,
    35,    32,   nil,    53,   nil,    19,   nil,   nil,   nil,   nil,
    12,    19,    19,    19,    15,    32,    32,    32,   nil,    32,
   nil,   nil,    32,    32,    32,    32,    43,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,    51,    28,   nil,    44,   nil,   nil,   nil,   nil,    51,
    53,   nil,    32,   nil,    51,   nil,    45,    45,    45,    45,
    20,   nil,   nil,    53,   nil,   nil,    28,   nil,    44,   nil,
   nil,   nil,   nil,   nil,    19,     5,   nil,    51,    51,   nil,
    19,    61,    19,    15,   nil,   nil,   nil,    53,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,    45,    45,    45,    45,    45,    45,
    45,    45,    45,    45,    45,    45,    45,    45,    45,    45,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    45 ]

racc_goto_pointer = [
   nil,    36,    39,    16,    31,    -1,   nil,   -21,    -5,   nil,
   nil,    19,   -33,   -22,   -37,   -11,  -142,  -164,   -36,   -14,
   -18,   -34,  -142,   nil,   nil,    33,   -14,   -22,   -60,   nil,
   -81,   nil,    32,   -59,  -131,  -128,  -224,   -38,   nil,   nil,
   nil,  -215,  -215,  -109,   -58,   118,  -125,  -127,   nil,   -92,
  -122,   -48,  -225,   -39,   nil,   nil,   -11,   -47,   -76,   -68,
   nil,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   nil,   193,   nil,   nil,    75,   nil,   nil,    92,    95,
   nil,   nil,   nil,    11,    12,   nil,   nil,   nil,   nil,    80,
    81,    82,    93,   nil,    85,   nil,   nil,   nil,    89,    91,
   246,   247,   nil,   nil,   131,   106,   nil,   nil,   270,   nil,
   nil,   132,   nil,   134,   112,    66,   nil,   nil,   107,   148,
   113,    18 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 87, :_reduce_1,
  1, 88, :_reduce_2,
  3, 88, :_reduce_3,
  1, 90, :_reduce_4,
  2, 90, :_reduce_5,
  0, 93, :_reduce_6,
  1, 93, :_reduce_7,
  3, 93, :_reduce_8,
  1, 94, :_reduce_9,
  1, 94, :_reduce_10,
  7, 96, :_reduce_11,
  0, 97, :_reduce_12,
  2, 97, :_reduce_13,
  7, 92, :_reduce_14,
  1, 99, :_reduce_15,
  3, 99, :_reduce_16,
  5, 100, :_reduce_17,
  5, 100, :_reduce_18,
  1, 100, :_reduce_none,
  2, 101, :_reduce_20,
  4, 104, :_reduce_21,
  1, 107, :_reduce_none,
  1, 107, :_reduce_23,
  1, 108, :_reduce_none,
  2, 108, :_reduce_25,
  0, 102, :_reduce_26,
  1, 102, :_reduce_27,
  3, 102, :_reduce_28,
  1, 95, :_reduce_29,
  1, 95, :_reduce_30,
  6, 109, :_reduce_31,
  0, 111, :_reduce_32,
  2, 111, :_reduce_33,
  6, 110, :_reduce_34,
  2, 114, :_reduce_35,
  0, 115, :_reduce_36,
  1, 115, :_reduce_37,
  3, 115, :_reduce_38,
  1, 116, :_reduce_39,
  2, 116, :_reduce_40,
  2, 116, :_reduce_41,
  1, 116, :_reduce_42,
  6, 116, :_reduce_43,
  3, 116, :_reduce_44,
  5, 116, :_reduce_45,
  5, 116, :_reduce_46,
  1, 116, :_reduce_47,
  6, 116, :_reduce_48,
  1, 116, :_reduce_49,
  1, 116, :_reduce_none,
  1, 116, :_reduce_51,
  2, 125, :_reduce_52,
  2, 103, :_reduce_53,
  0, 126, :_reduce_54,
  1, 126, :_reduce_55,
  3, 126, :_reduce_56,
  3, 127, :_reduce_57,
  1, 128, :_reduce_58,
  3, 128, :_reduce_59,
  3, 124, :_reduce_60,
  5, 123, :_reduce_61,
  5, 123, :_reduce_62,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  0, 122, :_reduce_69,
  1, 122, :_reduce_70,
  5, 122, :_reduce_71,
  2, 134, :_reduce_72,
  3, 117, :_reduce_73,
  0, 106, :_reduce_74,
  1, 106, :_reduce_75,
  2, 106, :_reduce_76,
  3, 135, :_reduce_77,
  3, 135, :_reduce_78,
  1, 135, :_reduce_79,
  1, 135, :_reduce_80,
  1, 129, :_reduce_81,
  1, 129, :_reduce_82,
  1, 136, :_reduce_none,
  5, 136, :_reduce_84,
  0, 138, :_reduce_85,
  1, 138, :_reduce_86,
  3, 138, :_reduce_87,
  3, 120, :_reduce_88,
  3, 120, :_reduce_89,
  3, 120, :_reduce_90,
  1, 140, :_reduce_91,
  1, 140, :_reduce_92,
  1, 140, :_reduce_93,
  1, 140, :_reduce_94,
  1, 140, :_reduce_95,
  1, 140, :_reduce_96,
  1, 140, :_reduce_97,
  2, 112, :_reduce_98,
  2, 112, :_reduce_99,
  1, 112, :_reduce_100,
  0, 113, :_reduce_101,
  1, 113, :_reduce_none,
  4, 141, :_reduce_103,
  1, 142, :_reduce_104,
  3, 142, :_reduce_105,
  2, 143, :_reduce_106,
  1, 143, :_reduce_107,
  1, 118, :_reduce_108,
  1, 118, :_reduce_109,
  3, 118, :_reduce_110,
  3, 118, :_reduce_111,
  3, 131, :_reduce_112,
  3, 131, :_reduce_113,
  3, 131, :_reduce_114,
  3, 131, :_reduce_115,
  3, 131, :_reduce_116,
  3, 131, :_reduce_117,
  3, 131, :_reduce_118,
  3, 131, :_reduce_119,
  3, 131, :_reduce_120,
  3, 131, :_reduce_121,
  3, 131, :_reduce_122,
  2, 131, :_reduce_123,
  2, 131, :_reduce_124,
  3, 131, :_reduce_125,
  1, 131, :_reduce_126,
  3, 144, :_reduce_127,
  3, 144, :_reduce_128,
  3, 144, :_reduce_129,
  3, 144, :_reduce_130,
  3, 144, :_reduce_131,
  3, 144, :_reduce_132,
  3, 144, :_reduce_133,
  2, 144, :_reduce_134,
  2, 144, :_reduce_135,
  1, 130, :_reduce_136,
  1, 130, :_reduce_137,
  2, 130, :_reduce_138,
  1, 130, :_reduce_none,
  2, 146, :_reduce_140,
  3, 139, :_reduce_141,
  3, 139, :_reduce_142,
  0, 145, :_reduce_143,
  3, 145, :_reduce_144,
  0, 119, :_reduce_145,
  1, 119, :_reduce_146,
  3, 119, :_reduce_147,
  4, 137, :_reduce_148,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_168,
  0, 89, :_reduce_169,
  1, 89, :_reduce_170,
  1, 91, :_reduce_171,
  2, 91, :_reduce_172,
  1, 147, :_reduce_173,
  1, 147, :_reduce_none,
  1, 98, :_reduce_175 ]

racc_reduce_n = 176

racc_shift_n = 303

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :tCUSTOM_DTYPE => 44,
  :tLPAREN => 45,
  :tRPAREN => 46,
  :tLSQUARE => 47,
  :tRSQUARE => 48,
  :tIDENTIFIER => 49,
  :tNL => 50,
  :tCOMMA => 51,
  :tSQUOTE => 52,
  :tSCOLON => 53,
  :EOF => 54,
  :tDOT => 55,
  :tQMARK => 56,
  :tSTART_LINE => 57,
  :tPLUS => 58,
  :tMINUS => 59,
  :tSTAR => 60,
  :tDIVIDE => 61,
  :tEXPO => 62,
  :tMODULUS => 63,
  :tASSIGN => 64,
  :tEQ => 65,
  :tLT => 66,
  :tLTEQ => 67,
  :tGT => 68,
  :tGTEQ => 69,
  :tANDOP => 70,
  :tOROP => 71,
  :tBANG => 72,
  :tOP_ASSIGN => 73,
  :tSTRING => 74,
  :tBIT_AND => 75,
  :tBIT_OR => 76,
  :tBIT_XOR => 77,
  :tBIT_LSHIFT => 78,
  :tBIT_RSHIFT => 79,
  :tBIT_NOT => 80,
  :tINTEGER => 81,
  :tFLOAT => 82,
  :tSINGLE_CHAR => 83,
  :UMINUS => 84,
  :tNEQ => 85 }

racc_nt_base = 86

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "c_method",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_14(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_15(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_16(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_25(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_31(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_32(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_33(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_34(val, _values, result)
            result = TopStatement::CMethodDef.new(val[1], val[2], val[3], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_37(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_38(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_39(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_40(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_41(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_42(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_43(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_44(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_45(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_46(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_48(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_51(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_52(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_53(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_54(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_55(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_56(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_57(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_58(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_59(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_60(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_61(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_62(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_69(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_71(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_72(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_73(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_74(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_75(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_76(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_77(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_78(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_79(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_80(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_81(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_82(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_84(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_85(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_86(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_88(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_89(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_90(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_91(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_92(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_93(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_94(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_95(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_96(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_97(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_98(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_99(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_100(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_101(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_103(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_104(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_105(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_106(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_107(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_108(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_109(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_113(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_114(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_123(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_124(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_126(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_133(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_134(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_135(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_136(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_137(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_138(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_140(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_141(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_142(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_143(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_145(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_146(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_147(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_148(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_168(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_170(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_171(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_172(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_173(val, _values, result)
    
    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_175(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
