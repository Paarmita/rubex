#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 410)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      end
      t = check_for_primitive_dtype(t)
      t = check_for_keyword(t)
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

def op_assign val # expr, op_assign, expr => expr = expr op expr
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    34,    35,    37,   150,   168,   150,   256,    38,    39,   225,
   226,    52,    53,    54,    41,   165,    29,   165,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,   115,     8,
   114,   152,    46,   152,   115,   119,    26,    26,   213,   236,
   120,     9,   113,   214,   237,   156,   157,     8,     6,   117,
     8,   111,    27,    27,    34,    35,    37,    16,    49,    50,
    51,    38,    39,   158,   159,    52,    53,    54,    41,     6,
    29,    18,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,   114,   202,   115,    13,    46,    13,    14,    19,
    14,    13,   113,    22,    14,   130,   131,   132,   133,   134,
   135,   111,   130,   131,   132,   133,   134,   135,    34,    35,
    37,    25,    49,    50,    51,    38,    39,   225,   226,    52,
    53,    54,    41,    86,    29,    87,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    13,    90,   107,    14,
    46,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,   108,    34,    35,    37,    80,    49,    50,    51,    38,
    39,   110,   116,    52,    53,    54,    41,   121,    29,   124,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    13,   125,   127,    14,    46,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,   114,    34,    35,    37,    80,
    49,    50,    51,    38,    39,   153,   161,    52,    53,    54,
    41,   162,    29,   173,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    13,   187,   152,    14,    46,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,   183,
    34,    35,    37,   184,    49,    50,    51,    38,    39,    90,
   134,    52,    53,    54,    41,   203,    29,   206,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    13,   207,
    13,    14,    46,    14,   211,   212,   130,   131,   132,   133,
   134,   135,   117,   136,   138,   139,   140,   141,   142,   143,
   132,   133,   134,   135,    34,    35,    37,   137,    49,    50,
    51,    38,    39,   215,   222,    52,    53,    54,    41,   134,
    29,   134,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,   114,   134,   115,   134,    46,   227,    52,    53,
    54,   230,   113,   168,    52,    53,    54,   238,   110,   242,
    52,    53,    54,    52,    53,    54,   247,   261,   115,    52,
    53,    54,    49,    50,    51,    95,   256,    13,   nil,    99,
    14,    95,   nil,    13,   nil,    99,    14,    95,   nil,    94,
   105,    99,   nil,   nil,    99,    94,    95,   nil,   nil,   nil,
    99,    94,    97,   nil,    94,    49,    50,    51,    97,   nil,
    94,    49,    50,    51,    97,   nil,   nil,    49,    50,    51,
    49,    50,    51,    97,   nil,   nil,    49,    50,    51,    52,
    53,    54,    52,    53,    54,   nil,   nil,   nil,    52,    53,
    54,   nil,   nil,   nil,    52,    53,    54,   130,   131,   132,
   133,   134,   135,    52,    53,    54,    95,   nil,    13,   105,
    99,    14,   nil,    99,    13,    95,   nil,    14,   nil,    99,
    94,    95,   nil,    94,   259,    99,   nil,   260,    13,    94,
   105,    14,   nil,    97,    99,    94,    49,    50,    51,    49,
    50,    51,    97,   nil,    94,    49,    50,    51,    97,   nil,
   nil,    49,    50,    51,    52,    53,    54,   nil,   nil,   nil,
    49,    50,    51,    52,    53,    54,   nil,   nil,   nil,    52,
    53,    54,   nil,   nil,   nil,    52,    53,    54,   nil,    13,
   nil,    95,    14,   nil,   nil,    99,   132,   133,   134,   135,
    95,   nil,   nil,   nil,    99,    94,    95,   nil,   nil,   nil,
    99,   nil,    95,   nil,    94,   nil,    99,   nil,    97,   nil,
    94,    49,    50,    51,   nil,   nil,    94,    97,   nil,   nil,
    49,    50,    51,    97,   nil,   nil,    49,    50,    51,    97,
   nil,   nil,    49,    50,    51,    52,    53,    54,   nil,   nil,
   nil,    52,    53,    54,    52,    53,    54,    52,    53,    54,
    52,    53,    54,   nil,   nil,   nil,    52,    53,    54,   nil,
   nil,   nil,    95,   nil,   nil,   nil,    99,   nil,    95,   nil,
   nil,   105,    99,   nil,   105,    99,    94,   105,    99,   nil,
   nil,    99,    94,   105,   nil,    94,   nil,    99,    94,    97,
   nil,    94,    49,    50,    51,    97,   nil,    94,    49,    50,
    51,    49,    50,    51,    49,    50,    51,    49,    50,    51,
    52,    53,    54,    49,    50,    51,    52,    53,    54,    52,
    53,    54,    52,    53,    54,    52,    53,    54,   nil,   nil,
   nil,    52,    53,    54,   nil,   nil,   nil,   105,   nil,   nil,
   nil,    99,   nil,   105,   nil,   nil,   105,    99,   nil,   105,
    99,    94,   105,    99,   nil,   nil,    99,    94,   105,   nil,
    94,   nil,    99,    94,   nil,   nil,    94,    49,    50,    51,
   nil,   nil,    94,    49,    50,    51,    49,    50,    51,    49,
    50,    51,    49,    50,    51,    52,    53,    54,    49,    50,
    51,    52,    53,    54,    52,    53,    54,    52,    53,    54,
   130,   131,   132,   133,   134,   135,    52,    53,    54,   nil,
   nil,   nil,   105,   nil,   nil,   nil,    99,   nil,   105,   nil,
   nil,   105,    99,   nil,   105,    99,    94,   nil,    99,   nil,
   nil,   nil,    94,    95,   nil,    94,   nil,    99,    94,    52,
    53,    54,    49,    50,    51,   nil,   nil,    94,    49,    50,
    51,    49,    50,    51,    49,    50,    51,   nil,   nil,   nil,
    97,   nil,   nil,    49,    50,    51,    95,   nil,   234,   nil,
    99,   nil,    52,    53,    54,    52,    53,    54,   nil,   nil,
    94,    52,    53,    54,   nil,   nil,   nil,    52,    53,    54,
   nil,   nil,   nil,    97,   nil,   nil,    49,    50,    51,    95,
   nil,   nil,   105,    99,   nil,   nil,    99,   nil,   105,   nil,
   nil,   nil,    99,    94,    95,   nil,    94,   nil,    99,   nil,
   nil,   nil,    94,    52,    53,    54,    97,   nil,    94,    49,
    50,    51,    49,    50,    51,   nil,   nil,   nil,    49,    50,
    51,    97,   nil,   nil,    49,    50,    51,   nil,   nil,   nil,
    95,   nil,   nil,   nil,    99,   130,   131,   132,   133,   134,
   135,   nil,   nil,   nil,    94,   nil,   nil,   nil,   122,   130,
   131,   132,   133,   134,   135,   nil,   nil,    97,   nil,   nil,
    49,    50,    51,    84,   nil,    29,   nil,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,   202,   130,   131,
   132,   133,   134,   135,   nil,   nil,   nil,   nil,   nil,   130,
   131,   132,   133,   134,   135,   nil,   136,   138,   139,   140,
   141,   142,   143,   nil,   nil,   nil,   nil,    84,   nil,    29,
   137,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14,   130,
   131,   132,   133,   134,   135,   nil,   136,   138,   139,   140,
   141,   142,   143,   130,   131,   132,   133,   134,   135,   nil,
   137,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,   130,   131,   132,   133,   134,   135,   nil,   nil,   156,
   157,   158,   159,   130,   131,   132,   133,   134,   135,   130,
   131,   132,   133,   134,   135,   130,   131,   132,   133,   134,
   135 ]

racc_action_check = [
    23,    23,    23,   102,   109,   243,   241,    23,    23,   204,
   204,    23,    23,    23,    23,   109,    23,   241,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,   173,     0,
    48,   102,    23,   243,   168,    77,    18,   173,   176,   216,
    77,     1,   168,   176,   216,   206,   206,     5,     0,    48,
    11,   168,    18,   173,    89,    89,    89,     6,    23,    23,
    23,    89,    89,   207,   207,    89,    89,    89,    89,    11,
    89,     8,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    46,   160,    46,    11,    89,    89,    11,     9,
    89,     2,    46,    16,     2,   160,   160,   160,   160,   160,
   160,    46,   194,   194,   194,   194,   194,   194,   149,   149,
   149,    17,    89,    89,    89,   149,   149,   262,   262,   149,
   149,   149,   149,    29,   149,    30,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,    22,    32,    41,    22,
   149,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    44,   153,   153,   153,    25,   149,   149,   149,   153,
   153,    45,    47,   153,   153,   153,   153,    79,   153,    83,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
    31,    84,    86,    31,   153,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   100,   161,   161,   161,   120,
   153,   153,   153,   161,   161,   103,   106,   161,   161,   161,
   161,   107,   161,   113,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,    85,   127,   119,    85,   161,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   124,
   226,   226,   226,   125,   161,   161,   161,   226,   226,   128,
   144,   226,   226,   226,   226,   146,   226,   154,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   126,   155,
   162,   126,   226,   162,   164,   169,    92,    92,    92,    92,
    92,    92,   171,    92,    92,    92,    92,    92,    92,    92,
   188,   188,   188,   188,   258,   258,   258,    92,   226,   226,
   226,   258,   258,   178,   187,   258,   258,   258,   258,   190,
   258,   191,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   258,    99,   192,    99,   193,   258,   205,    34,    34,
    34,   208,    99,   211,    35,    35,    35,   218,   221,   223,
    37,    37,    37,    38,    38,    38,   231,   254,   256,    39,
    39,    39,   258,   258,   258,    34,   261,   210,   nil,    34,
   210,    35,   nil,   219,   nil,    35,   219,    37,   nil,    34,
    38,    37,   nil,   nil,    38,    35,    39,   nil,   nil,   nil,
    39,    37,    34,   nil,    38,    34,    34,    34,    35,   nil,
    39,    35,    35,    35,    37,   nil,   nil,    37,    37,    37,
    38,    38,    38,    39,   nil,   nil,    39,    39,    39,    90,
    90,    90,    94,    94,    94,   nil,   nil,   nil,    95,    95,
    95,   nil,   nil,   nil,    97,    97,    97,   195,   195,   195,
   195,   195,   195,   105,   105,   105,    90,   nil,   236,    94,
    90,   236,   nil,    94,   238,    95,   nil,   238,   nil,    95,
    90,    97,   nil,    94,   248,    97,   nil,   248,   250,    95,
   105,   250,   nil,    90,   105,    97,    90,    90,    90,    94,
    94,    94,    95,   nil,   105,    95,    95,    95,    97,   nil,
   nil,    97,    97,    97,   108,   108,   108,   nil,   nil,   nil,
   105,   105,   105,   111,   111,   111,   nil,   nil,   nil,   114,
   114,   114,   nil,   nil,   nil,   115,   115,   115,   nil,   252,
   nil,   108,   252,   nil,   nil,   108,   189,   189,   189,   189,
   111,   nil,   nil,   nil,   111,   108,   114,   nil,   nil,   nil,
   114,   nil,   115,   nil,   111,   nil,   115,   nil,   108,   nil,
   114,   108,   108,   108,   nil,   nil,   115,   111,   nil,   nil,
   111,   111,   111,   114,   nil,   nil,   114,   114,   114,   115,
   nil,   nil,   115,   115,   115,   116,   116,   116,   nil,   nil,
   nil,   117,   117,   117,   130,   130,   130,   131,   131,   131,
   132,   132,   132,   nil,   nil,   nil,   133,   133,   133,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   116,   nil,   117,   nil,
   nil,   130,   117,   nil,   131,   130,   116,   132,   131,   nil,
   nil,   132,   117,   133,   nil,   130,   nil,   133,   131,   116,
   nil,   132,   116,   116,   116,   117,   nil,   133,   117,   117,
   117,   130,   130,   130,   131,   131,   131,   132,   132,   132,
   134,   134,   134,   133,   133,   133,   135,   135,   135,   136,
   136,   136,   137,   137,   137,   138,   138,   138,   nil,   nil,
   nil,   139,   139,   139,   nil,   nil,   nil,   134,   nil,   nil,
   nil,   134,   nil,   135,   nil,   nil,   136,   135,   nil,   137,
   136,   134,   138,   137,   nil,   nil,   138,   135,   139,   nil,
   136,   nil,   139,   137,   nil,   nil,   138,   134,   134,   134,
   nil,   nil,   139,   135,   135,   135,   136,   136,   136,   137,
   137,   137,   138,   138,   138,   140,   140,   140,   139,   139,
   139,   141,   141,   141,   142,   142,   142,   143,   143,   143,
   196,   196,   196,   196,   196,   196,   214,   214,   214,   nil,
   nil,   nil,   140,   nil,   nil,   nil,   140,   nil,   141,   nil,
   nil,   142,   141,   nil,   143,   142,   140,   nil,   143,   nil,
   nil,   nil,   141,   214,   nil,   142,   nil,   214,   143,   212,
   212,   212,   140,   140,   140,   nil,   nil,   214,   141,   141,
   141,   142,   142,   142,   143,   143,   143,   nil,   nil,   nil,
   214,   nil,   nil,   214,   214,   214,   212,   nil,   212,   nil,
   212,   nil,   225,   225,   225,   228,   228,   228,   nil,   nil,
   212,   229,   229,   229,   nil,   nil,   nil,   234,   234,   234,
   nil,   nil,   nil,   212,   nil,   nil,   212,   212,   212,   225,
   nil,   nil,   228,   225,   nil,   nil,   228,   nil,   229,   nil,
   nil,   nil,   229,   225,   234,   nil,   228,   nil,   234,   nil,
   nil,   nil,   229,   260,   260,   260,   225,   nil,   234,   225,
   225,   225,   228,   228,   228,   nil,   nil,   nil,   229,   229,
   229,   234,   nil,   nil,   234,   234,   234,   nil,   nil,   nil,
   260,   nil,   nil,   nil,   260,   197,   197,   197,   197,   197,
   197,   nil,   nil,   nil,   260,   nil,   nil,   nil,    81,   198,
   198,   198,   198,   198,   198,   nil,   nil,   260,   nil,   nil,
   260,   260,   260,    81,   nil,    81,   nil,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,   145,   199,   199,
   199,   199,   199,   199,   nil,   nil,   nil,   nil,   nil,   145,
   145,   145,   145,   145,   145,   nil,   145,   145,   145,   145,
   145,   145,   145,   nil,   nil,   nil,   nil,    28,   nil,    28,
   145,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,    28,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
   nil,   nil,   nil,   nil,   nil,   240,   nil,   nil,   240,   147,
   147,   147,   147,   147,   147,   nil,   147,   147,   147,   147,
   147,   147,   147,   200,   200,   200,   200,   200,   200,   nil,
   147,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   104,   104,   104,   104,   104,   104,   nil,   nil,   104,
   104,   104,   104,   201,   201,   201,   201,   201,   201,   245,
   245,   245,   245,   245,   245,   246,   246,   246,   246,   246,
   246 ]

racc_action_pointer = [
    37,    51,    64,   nil,   nil,    55,    -4,   nil,    35,   109,
   nil,    58,   nil,   nil,   nil,   nil,    99,    89,    -7,   nil,
   nil,   nil,   119,    -4,   nil,   149,   nil,   nil,  1049,    97,
   142,   183,   161,   nil,   413,   419,   nil,   425,   428,   434,
   nil,   122,   nil,   nil,   121,   144,    60,   141,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   161,
   nil,   995,   nil,   163,   185,   247,   171,   nil,   nil,    60,
   494,   nil,   311,   nil,   497,   503,   nil,   509,   nil,   380,
   213,   nil,    -6,   251,  1176,   518,   252,   257,   569,   -42,
   nil,   578,   nil,   227,   584,   590,   650,   656,   nil,   249,
   213,   nil,   nil,   nil,   277,   309,   311,   277,   323,   nil,
   659,   662,   665,   671,   725,   731,   734,   737,   740,   746,
   800,   806,   809,   812,   271,   994,   292,  1074,   nil,   124,
   nil,   nil,   nil,   188,   291,   313,   nil,   nil,   nil,   nil,
    60,   252,   313,   nil,   316,   nil,   nil,   nil,     0,   304,
   nil,   311,   nil,    -6,   nil,   nil,     5,   nil,   348,   nil,
   nil,   nil,   nil,  1129,  1149,   nil,   nil,   348,   323,   559,
   340,   342,   364,   366,    67,   472,   775,   930,   944,   983,
  1088,  1188,   nil,   nil,     2,   424,    -8,     8,   428,  1169,
   410,   387,   854,   nil,   821,   nil,     6,   nil,   434,   416,
   nil,   381,   nil,   436,   nil,   887,   316,   nil,   890,   896,
   nil,   443,   nil,   nil,   902,   nil,   491,  1189,   497,   nil,
  1078,   -40,   nil,    -4,   nil,  1194,  1200,   nil,   509,   nil,
   511,   nil,   562,   nil,   399,   nil,   404,   nil,   380,   nil,
   938,   410,   130,   nil,   nil,   nil ]

racc_action_default = [
    -2,  -155,  -148,    -3,    -5,    -6,  -155,   -19,  -155,  -155,
    -1,  -149,  -150,  -152,  -153,   -20,  -155,   -86,   -85,   266,
    -4,  -151,  -155,   -23,   -87,  -155,   -83,   -84,  -155,  -155,
  -155,  -148,   -24,   -26,  -155,  -155,   -29,  -155,  -155,  -155,
   -34,  -155,   -36,   -37,  -155,   -60,  -122,  -115,  -122,   -77,
   -78,   -79,   -80,   -81,   -82,  -116,  -118,  -128,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -155,   -89,  -155,
   -92,  -155,    -8,  -155,  -155,  -155,  -155,   -21,   -22,  -149,
  -155,   -27,   -93,   -94,  -155,  -155,  -103,  -155,  -115,  -122,
  -122,   -28,  -155,  -155,  -155,  -155,  -155,   -38,  -155,  -155,
   -61,  -155,  -117,  -155,  -124,  -155,  -155,  -155,  -119,  -155,
  -155,   -91,    -7,    -9,  -155,  -155,   -12,  -155,   -25,   -31,
  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,
  -155,  -155,  -155,  -155,  -101,  -155,  -155,  -113,  -114,   -23,
   -53,   -54,  -154,   -23,  -155,  -155,   -49,   -50,   -51,   -52,
  -155,   -23,  -148,   -46,   -59,   -62,   -65,   -66,   -67,   -68,
   -69,  -155,   -74,   -85,  -120,  -121,  -155,  -125,  -155,   -75,
   -76,   -88,   -90,   -16,   -40,   -13,   -14,  -155,   -95,   -96,
   -97,   -98,   -99,  -100,  -104,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -102,  -112,   -55,  -155,  -155,  -155,  -155,   -40,
  -149,  -155,  -155,  -123,  -155,  -127,  -155,   -17,  -155,  -148,
   -41,   -60,   -15,  -155,   -56,  -155,   -23,   -32,  -155,  -155,
   -33,  -155,   -63,   -64,   -71,  -126,  -155,  -155,  -155,   -39,
  -149,  -155,   -30,  -155,   -58,   -47,   -48,   -35,  -155,   -72,
   -10,   -18,   -11,   -42,   -43,   -44,   -67,   -68,   -23,   -70,
  -155,  -155,   -55,   -73,   -45,   -57 ]

racc_goto_table = [
    21,    30,    47,    44,    79,    17,    10,    83,    11,   109,
   149,   170,   166,   155,    78,   154,   167,    21,   223,    48,
    82,    91,   101,   118,   102,   218,   106,    85,    28,     3,
   146,     1,   148,     2,    81,    88,   216,    89,   185,    15,
    20,    23,   128,   103,   253,   254,   181,   164,   248,    24,
   231,    77,   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    44,
   nil,   nil,   nil,   123,   nil,   118,   265,   129,    21,   104,
    85,   nil,   nil,   nil,   nil,    48,   nil,   nil,   169,   nil,
   nil,   126,   175,   nil,   nil,   163,   nil,   nil,   172,    79,
   nil,   177,   178,   nil,   180,   171,   186,   nil,   nil,   182,
   174,   nil,   nil,   170,   233,    21,   229,   228,   232,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,    47,    44,
   nil,   205,    47,    44,   nil,   144,   145,   nil,   147,   208,
    47,    44,   nil,   nil,   255,    48,   160,   nil,   nil,    48,
   nil,   258,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   217,   221,   264,   nil,   209,   nil,   210,   nil,
   nil,   188,   189,   190,   191,   192,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   241,   nil,   nil,   221,   nil,
   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   235,   nil,   nil,   244,    47,    44,   171,   nil,   nil,
   nil,   nil,   243,   nil,   nil,   nil,   251,   nil,   nil,   221,
   257,   249,    48,   239,   nil,   240,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   262,    47,    44,    21,
   257,    21,   250,   nil,   252,   nil,   nil,   263,   nil,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,
   246 ]

racc_goto_check = [
    53,    18,    42,    34,    10,    16,     3,    10,     5,    31,
    24,    23,    33,    37,    48,    36,    41,    53,    25,    44,
     9,    22,    22,    50,    22,    12,    22,    13,     5,     4,
    49,     1,    49,     2,     8,     3,    11,     5,    14,    15,
     4,    17,    20,    26,    30,    32,    38,    40,    43,    46,
    12,    47,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    34,
   nil,   nil,   nil,     9,   nil,    50,    25,    22,    53,    35,
    13,   nil,   nil,   nil,   nil,    44,   nil,   nil,    42,   nil,
   nil,     5,    42,   nil,   nil,    22,   nil,   nil,    22,    10,
   nil,    22,    22,   nil,    22,    44,    10,   nil,   nil,    48,
    16,   nil,   nil,    23,    33,    53,    37,    36,    41,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    42,    34,
   nil,    18,    42,    34,   nil,    35,    35,   nil,    35,    18,
    42,    34,   nil,   nil,    33,    44,    35,   nil,   nil,    44,
   nil,    24,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,
   nil,   nil,    10,    10,    33,   nil,     3,   nil,     5,   nil,
   nil,    35,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    31,   nil,   nil,    10,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   nil,    22,   nil,   nil,    18,    42,    34,    44,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,    10,   nil,   nil,    10,
    42,    22,    44,     3,   nil,     5,   nil,   nil,   nil,    53,
   nil,   nil,   nil,   nil,   nil,   nil,    18,    42,    34,    53,
    42,    53,     5,   nil,     5,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,
    35 ]

racc_goto_pointer = [
   nil,    31,    33,     4,    29,     6,   nil,   nil,     6,    -8,
   -21,  -147,  -159,    -1,   -89,    34,    -3,    24,   -22,   nil,
   -47,   nil,   -13,   -98,   -92,  -186,     5,   nil,   nil,   nil,
  -196,   -36,  -196,   -97,   -20,    41,   -89,   -91,   -73,   nil,
   -62,   -93,   -21,  -186,    -4,   nil,    32,    26,   -11,   -65,
   -25,   nil,   -62,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,   nil,   nil,
    45,   nil,   nil,    43,   nil,     7,   nil,   nil,   nil,    31,
    32,    33,   179,    36,   nil,   nil,   nil,    40,    42,   219,
   220,   nil,   nil,   nil,    96,    92,   nil,   nil,   151,   224,
   nil,   nil,    98,   nil,   100,    55,   nil,   nil,   nil,    93,
   112,    56,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 78, :_reduce_1,
  0, 79, :_reduce_2,
  1, 79, :_reduce_3,
  3, 79, :_reduce_4,
  1, 81, :_reduce_5,
  1, 81, :_reduce_6,
  6, 83, :_reduce_7,
  1, 85, :_reduce_8,
  2, 85, :_reduce_9,
  6, 86, :_reduce_10,
  6, 86, :_reduce_11,
  2, 86, :_reduce_none,
  4, 90, :_reduce_13,
  1, 91, :_reduce_none,
  2, 91, :_reduce_15,
  0, 88, :_reduce_16,
  1, 88, :_reduce_17,
  3, 88, :_reduce_18,
  1, 84, :_reduce_19,
  2, 84, :_reduce_20,
  5, 92, :_reduce_21,
  2, 95, :_reduce_22,
  0, 96, :_reduce_23,
  1, 96, :_reduce_24,
  3, 96, :_reduce_25,
  1, 97, :_reduce_26,
  2, 97, :_reduce_27,
  2, 97, :_reduce_28,
  1, 97, :_reduce_29,
  6, 97, :_reduce_30,
  3, 97, :_reduce_31,
  5, 97, :_reduce_32,
  5, 97, :_reduce_33,
  1, 97, :_reduce_34,
  6, 97, :_reduce_35,
  1, 97, :_reduce_36,
  1, 97, :_reduce_none,
  2, 105, :_reduce_38,
  2, 89, :_reduce_39,
  0, 106, :_reduce_40,
  1, 106, :_reduce_41,
  3, 106, :_reduce_42,
  3, 107, :_reduce_43,
  1, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 104, :_reduce_46,
  5, 103, :_reduce_47,
  5, 103, :_reduce_48,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  0, 102, :_reduce_55,
  1, 102, :_reduce_56,
  5, 102, :_reduce_57,
  2, 116, :_reduce_58,
  3, 98, :_reduce_59,
  0, 108, :_reduce_60,
  1, 108, :_reduce_61,
  2, 108, :_reduce_62,
  3, 117, :_reduce_63,
  3, 117, :_reduce_64,
  1, 117, :_reduce_65,
  1, 117, :_reduce_66,
  1, 110, :_reduce_67,
  1, 110, :_reduce_68,
  1, 118, :_reduce_none,
  5, 118, :_reduce_70,
  0, 120, :_reduce_71,
  1, 120, :_reduce_72,
  3, 120, :_reduce_73,
  3, 100, :_reduce_74,
  3, 100, :_reduce_75,
  3, 100, :_reduce_76,
  1, 122, :_reduce_77,
  1, 122, :_reduce_78,
  1, 122, :_reduce_79,
  1, 122, :_reduce_80,
  1, 122, :_reduce_81,
  1, 122, :_reduce_82,
  2, 93, :_reduce_83,
  2, 93, :_reduce_84,
  1, 93, :_reduce_85,
  0, 94, :_reduce_86,
  1, 94, :_reduce_none,
  4, 123, :_reduce_88,
  1, 124, :_reduce_89,
  3, 124, :_reduce_90,
  2, 125, :_reduce_91,
  1, 125, :_reduce_92,
  1, 99, :_reduce_93,
  1, 99, :_reduce_94,
  3, 112, :_reduce_95,
  3, 112, :_reduce_96,
  3, 112, :_reduce_97,
  3, 112, :_reduce_98,
  3, 112, :_reduce_99,
  3, 112, :_reduce_100,
  2, 112, :_reduce_101,
  3, 112, :_reduce_102,
  1, 112, :_reduce_103,
  3, 126, :_reduce_104,
  3, 126, :_reduce_105,
  3, 126, :_reduce_106,
  3, 126, :_reduce_107,
  3, 126, :_reduce_108,
  3, 126, :_reduce_109,
  3, 126, :_reduce_110,
  3, 126, :_reduce_111,
  3, 126, :_reduce_112,
  2, 126, :_reduce_113,
  2, 126, :_reduce_114,
  1, 111, :_reduce_115,
  1, 111, :_reduce_116,
  2, 111, :_reduce_117,
  1, 111, :_reduce_none,
  2, 128, :_reduce_119,
  3, 121, :_reduce_120,
  3, 121, :_reduce_121,
  0, 127, :_reduce_122,
  3, 127, :_reduce_123,
  0, 129, :_reduce_124,
  1, 129, :_reduce_125,
  3, 129, :_reduce_126,
  4, 119, :_reduce_127,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_147,
  0, 80, :_reduce_148,
  1, 80, :_reduce_149,
  1, 82, :_reduce_150,
  2, 82, :_reduce_151,
  1, 130, :_reduce_152,
  1, 130, :_reduce_none,
  1, 115, :_reduce_154 ]

racc_reduce_n = 155

racc_shift_n = 266

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kDTYPE_UINT => 22,
  :kDTYPE_LINT => 23,
  :kDTYPE_LLINT => 24,
  :kDTYPE_CHAR => 25,
  :kDTYPE_I8 => 26,
  :kDTYPE_I16 => 27,
  :kDTYPE_I32 => 28,
  :kDTYPE_I64 => 29,
  :kDTYPE_UI8 => 30,
  :kDTYPE_UI16 => 31,
  :kDTYPE_UI32 => 32,
  :kDTYPE_UI64 => 33,
  :kDTYPE_INT => 34,
  :kDTYPE_F32 => 35,
  :kDTYPE_F64 => 36,
  :kDTYPE_LF64 => 37,
  :kDTYPE_ROBJ => 38,
  :kDTYPE_ULINT => 39,
  :kDTYPE_ULLINT => 40,
  :tCUSTOM_DTYPE => 41,
  :tLPAREN => 42,
  :tRPAREN => 43,
  :tLSQUARE => 44,
  :tRSQUARE => 45,
  :tIDENTIFIER => 46,
  :tNL => 47,
  :tCOMMA => 48,
  :tSQUOTE => 49,
  :tSCOLON => 50,
  :EOF => 51,
  :tDOT => 52,
  :tQMARK => 53,
  :tSTART_LINE => 54,
  :tPLUS => 55,
  :tMINUS => 56,
  :tSTAR => 57,
  :tDIVIDE => 58,
  :tEXPO => 59,
  :tMODULUS => 60,
  :tASSIGN => 61,
  :tEQ => 62,
  :tLT => 63,
  :tLTEQ => 64,
  :tGT => 65,
  :tGTEQ => 66,
  :tANDOP => 67,
  :tOROP => 68,
  :tBANG => 69,
  :tOP_ASSIGN => 70,
  :tSTRING => 71,
  :tINTEGER => 72,
  :tFLOAT => 73,
  :tSINGLE_CHAR => 74,
  :UMINUS => 75,
  :tNEQ => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "c_declarations",
  "c_declaration",
  "dtype",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "opt_star",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_7(val, _values, result)
            puts ">>>>>> #{val[1]}"
        result = CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_10(val, _values, result)
            result = CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_11(val, _values, result)
            result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_13(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_15(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_18(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_24(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_25(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_26(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_28(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_29(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_30(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_31(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_32(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_33(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_35(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_36(val, _values, result)
    
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_38(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_39(val, _values, result)
            declarations = []
        val[0].each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_41(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_42(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_43(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_44(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_45(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_46(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_47(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_48(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_56(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_57(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_58(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_59(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_60(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_61(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_62(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_63(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_64(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_65(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_66(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_67(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_68(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_70(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_71(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_72(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_73(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_74(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_75(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_76(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_77(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_78(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_79(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_80(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_81(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_82(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_83(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_84(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_85(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_86(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_88(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_90(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_91(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_92(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_93(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_94(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_95(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_96(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_97(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_98(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_99(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_100(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_101(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_103(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_104(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_105(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_112(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_113(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_114(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_115(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_116(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_117(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_119(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_120(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_121(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_122(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_125(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_126(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_127(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_147(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_154(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
