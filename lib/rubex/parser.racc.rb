#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 556)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'91,92,94,221,231,221,72,95,96,138,136,111,112,113,86,135,81,73,160,161',
'264,115,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,119,160,161,64,104,64,213,17,198,169,215,170,114,199,120,21,160,161',
'22,160,161,73,169,160,161,160,161,118,167,110,121,15,91,92,94,122,107',
'108,109,95,96,172,24,111,112,113,86,12,81,25,11,10,16,115,30,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,119,170,290,163,104',
'21,21,70,22,22,70,215,114,213,120,271,21,215,26,22,270,162,73,71,160',
'161,71,118,73,110,121,15,91,92,94,122,107,108,109,95,96,160,161,111',
'112,113,86,12,81,160,161,10,16,115,30,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,119,15,321,15,104,21,21,28,22,22,306,289',
'114,73,120,21,219,12,22,12,11,10,16,10,16,73,51,118,21,110,121,22,91',
'92,94,122,107,108,109,95,96,160,161,111,112,113,86,21,81,314,22,56,315',
'115,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,119',
'169,57,170,104,174,175,176,177,178,179,58,114,60,120,174,175,176,177',
'178,179,61,180,181,182,183,184,118,64,110,121,65,91,92,94,122,107,108',
'109,95,96,160,161,111,112,113,86,64,81,176,177,178,179,115,30,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,119,160,161,64',
'104,174,175,176,177,178,179,69,114,130,120,174,175,176,177,178,179,133',
'180,181,182,183,184,118,143,110,121,144,91,92,94,122,107,108,109,95',
'96,160,161,111,112,113,86,147,81,176,177,178,179,115,30,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,119,160,161,171,104',
'174,175,176,177,178,179,200,114,64,120,298,299,226,227,228,229,130,180',
'181,182,183,184,118,210,110,121,73,91,92,94,122,107,108,109,95,96,160',
'161,111,112,113,86,212,81,160,161,160,161,115,30,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,119,298,299,58,104,174,175,176',
'177,178,179,163,114,169,120,219,223,235,238,239,263,178,180,181,182',
'183,184,118,64,110,121,130,91,92,94,122,107,108,109,95,96,170,147,111',
'112,113,86,281,81,282,160,178,178,115,30,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,119,178,15,206,104,178,291,111,112',
'113,294,300,114,303,120,239,308,115,12,309,73,130,10,16,323,130,,118',
',110,121,,,,,122,107,108,109,119,,,,151,,,111,112,113,,,114,21,120,',
'22,115,111,112,113,,,,,,,118,115,110,121,,,,,122,107,108,109,119,,,',
'151,,,111,112,113,,158,114,,120,151,,115,,,,,,114,,120,,118,,110,121',
',,,,122,107,108,109,119,110,121,,151,,,122,107,108,109,,114,,120,111',
'112,113,,,,,,,,115,,118,,110,121,,,,,122,107,108,109,,,,,111,112,113',
',119,,,,151,,115,,,,,,114,,120,111,112,113,,,,,,,,115,,118,119,110,121',
',151,,,122,107,108,109,,114,,120,111,112,113,,119,,,,151,,115,,118,',
'110,121,114,,120,,122,107,108,109,,,,111,112,113,,118,158,110,121,,151',
'115,,122,107,108,109,,114,,120,111,112,113,,,,,,,,115,,158,,110,121',
'151,,,,122,107,108,109,114,,120,111,112,113,,,158,,,,151,115,,,,110',
'121,,114,,120,122,107,108,109,,,,,111,112,113,,119,,110,121,151,,115',
',122,107,108,109,114,,120,111,112,113,,,,,,,,115,,118,158,110,121,,151',
',,122,107,108,109,,114,,120,111,112,113,,119,,,,151,,115,,,,110,121',
'114,,120,,122,107,108,109,,,,,111,112,113,118,119,110,121,,151,,115',
'122,107,108,109,,114,,120,111,112,113,,,,,,,,115,,118,119,110,121,,151',
',,122,107,108,109,,114,,120,111,112,113,,119,,,,151,,115,,118,,110,121',
'114,,120,,122,107,108,109,,,,,111,112,113,118,119,110,121,,151,,115',
'122,107,108,109,,114,,120,111,112,113,,,,,,,,115,,118,119,110,121,,151',
',,122,107,108,109,,114,,120,111,112,113,,119,,,,151,,115,,118,,110,121',
'114,,120,,122,107,108,109,,,,,111,112,113,118,119,110,121,,151,,115',
'122,107,108,109,,114,,120,111,112,113,,,,,,,,115,,118,158,110,121,,151',
',,122,107,108,109,,114,,120,111,112,113,,158,,,,151,,115,,,,110,121',
'114,,120,,122,107,108,109,,,,111,112,113,,,158,110,121,,151,115,,122',
'107,108,109,,114,,120,111,112,113,,,,,,,,115,,158,,110,121,151,,,,122',
'107,108,109,114,,120,111,112,113,,,158,,,,151,115,,,,110,121,,114,,120',
'122,107,108,109,,,,111,112,113,,,158,,110,121,151,115,,,122,107,108',
'109,114,,120,111,112,113,,,,,,,,115,,158,,110,121,151,,,,122,107,108',
'109,114,,120,111,112,113,,,158,,,,151,115,,,,110,121,,114,,120,122,107',
'108,109,,,,111,112,113,,,158,,110,121,151,115,,,122,107,108,109,114',
',120,111,112,113,,,,,,,,115,,158,,110,121,151,,,,122,107,108,109,114',
',120,111,112,113,,,158,,,,151,115,,,,110,121,,114,,120,122,107,108,109',
',,,111,112,113,,,158,,110,121,151,115,,,122,107,108,109,114,,120,111',
'112,113,,,,,,,,115,,158,,110,121,151,,,,122,107,108,109,114,,120,111',
'112,113,,,158,,,,151,115,,,,110,121,,114,,120,122,107,108,109,,,,111',
'112,113,,,158,,110,121,151,115,,,122,107,108,109,114,,120,111,112,113',
',,,,,,,115,,158,,110,121,151,,,,122,107,108,109,114,,120,111,112,113',
',,158,,,,151,115,,,,110,121,,114,,120,122,107,108,109,,,,,111,112,113',
',119,,110,121,151,,115,,122,107,108,109,114,,120,111,112,113,,,,,,,',
'115,,118,119,110,121,,151,,,122,107,108,109,,114,,120,111,112,113,,119',
',288,,151,,115,,118,,110,121,114,,120,,122,107,108,109,,,,,111,112,113',
'118,119,110,121,,151,,115,122,107,108,109,,114,,120,111,112,113,,,,',
',,,115,,118,158,110,121,,151,,,122,107,108,109,,114,,120,111,112,113',
',158,,,,151,,115,,,,110,121,114,,120,,122,107,108,109,,,,,,,,,119,110',
'121,,151,,,122,107,108,109,,114,,120,,207,,,,,,,,,,,118,,110,121,12',
',81,,122,107,108,109,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,262,,,,,21,,,22,,,,174,175,176,177,178,179,,185,187,188',
'189,190,,,,,,180,181,182,183,184,262,,,,,,186,,,,,,174,175,176,177,178',
'179,,,,,,,,,,,,180,181,182,183,184,30,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,,12,,81,,21,,,22,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,174,175,176,177,178,179,,185',
'187,188,189,190,,,,,,180,181,182,183,184,274,,,,,,186,,30,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,,-43,,,,,-43,30,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,128,30,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,128,174,175,176',
'177,178,179,,,226,227,228,229,,,,,,180,181,182,183,184,174,175,176,177',
'178,179,174,175,176,177,178,179,,,,,,180,181,182,183,184,,180,181,182',
'183,184,174,175,176,177,178,179,174,175,176,177,178,179,,,,,,180,181',
'182,183,184,,180,181,182,183,184,30,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,174,175,176,177,178,179,174,175,176,177,178,179,174,175',
'176,177,178,179,181,182,,,,180,181,182,,,,180,181,182' ]
        racc_action_table = arr = ::Array.new(2184, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'68,68,68,155,159,310,62,68,68,83,81,68,68,68,68,81,68,62,101,101,194',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'194,194,155,68,310,142,1,125,104,142,104,68,125,68,83,148,148,83,159',
'159,142,106,155,155,310,310,68,104,68,68,19,146,146,146,68,68,68,68',
'146,146,106,10,146,146,146,146,19,146,11,19,19,19,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,235,242,102,146,146,19,60,146,19,235,276,146,268,146,205,2,268,12',
'2,205,102,276,60,242,242,235,146,268,146,146,23,201,201,201,146,146',
'146,146,201,201,154,154,201,201,201,201,23,201,218,218,23,23,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,0,316,63,201,5,23,15,5,23,293,241,201,316,201,74,241',
'0,74,63,0,0,0,63,63,293,17,201,75,201,201,75,220,220,220,201,201,201',
'201,220,220,234,234,220,220,220,220,88,220,304,88,24,304,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,151,25,151,220,256,256,256,256,256,256,26,220,27,220,252',
'252,252,252,252,252,28,256,256,256,256,256,220,55,220,220,56,223,223',
'223,220,220,220,220,223,223,240,240,223,223,223,223,57,223,245,245,245',
'245,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,243,243,58,223,257,257,257,257,257,257,59',
'223,72,223,253,253,253,253,253,253,80,257,257,257,257,257,223,86,223',
'223,87,231,231,231,223,223,223,223,231,231,244,244,231,231,231,231,89',
'231,246,246,246,246,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,278,278,105,231,258,258',
'258,258,258,258,127,231,129,231,279,279,281,281,282,282,133,258,258',
'258,258,258,231,134,231,231,137,299,299,299,231,231,231,231,299,299',
'287,287,299,299,299,299,140,299,305,305,319,319,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,322,322,143,299,259,259,259,259,259,259,149,299,152,299,153,156',
'163,164,165,193,195,259,259,259,259,259,299,198,299,299,214,318,318',
'318,299,299,299,299,318,318,215,217,318,318,318,318,224,318,225,233',
'247,248,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318',
'318,318,318,318,318,318,318,318,249,131,131,318,250,267,91,91,91,274',
'280,318,283,318,285,295,91,131,296,307,308,131,131,320,323,,318,,318',
'318,,,,,318,318,318,318,91,,,,91,,,92,92,92,,,91,131,91,,131,92,95,95',
'95,,,,,,,91,95,91,91,,,,,91,91,91,91,92,,,,92,,,94,94,94,,95,92,,92',
'95,,94,,,,,,95,,95,,92,,92,92,,,,,92,92,92,92,94,95,95,,94,,,95,95,95',
'95,,94,,94,96,96,96,,,,,,,,96,,94,,94,94,,,,,94,94,94,94,,,,,118,118',
'118,,96,,,,96,,118,,,,,,96,,96,119,119,119,,,,,,,,119,,96,118,96,96',
',118,,,96,96,96,96,,118,,118,120,120,120,,119,,,,119,,120,,118,,118',
'118,119,,119,,118,118,118,118,,,,121,121,121,,119,120,119,119,,120,121',
',119,119,119,119,,120,,120,122,122,122,,,,,,,,122,,121,,120,120,121',
',,,120,120,120,120,121,,121,147,147,147,,,122,,,,122,147,,,,121,121',
',122,,122,121,121,121,121,,,,,158,158,158,,147,,122,122,147,,158,,122',
'122,122,122,147,,147,160,160,160,,,,,,,,160,,147,158,147,147,,158,,',
'147,147,147,147,,158,,158,161,161,161,,160,,,,160,,161,,,,158,158,160',
',160,,158,158,158,158,,,,,162,162,162,160,161,160,160,,161,,162,160',
'160,160,160,,161,,161,167,167,167,,,,,,,,167,,161,162,161,161,,162,',
',161,161,161,161,,162,,162,169,169,169,,167,,,,167,,169,,162,,162,162',
'167,,167,,162,162,162,162,,,,,170,170,170,167,169,167,167,,169,,170',
'167,167,167,167,,169,,169,171,171,171,,,,,,,,171,,169,170,169,169,,170',
',,169,169,169,169,,170,,170,172,172,172,,171,,,,171,,172,,170,,170,170',
'171,,171,,170,170,170,170,,,,,174,174,174,171,172,171,171,,172,,174',
'171,171,171,171,,172,,172,175,175,175,,,,,,,,175,,172,174,172,172,,174',
',,172,172,172,172,,174,,174,176,176,176,,175,,,,175,,176,,,,174,174',
'175,,175,,174,174,174,174,,,,177,177,177,,,176,175,175,,176,177,,175',
'175,175,175,,176,,176,178,178,178,,,,,,,,178,,177,,176,176,177,,,,176',
'176,176,176,177,,177,179,179,179,,,178,,,,178,179,,,,177,177,,178,,178',
'177,177,177,177,,,,180,180,180,,,179,,178,178,179,180,,,178,178,178',
'178,179,,179,181,181,181,,,,,,,,181,,180,,179,179,180,,,,179,179,179',
'179,180,,180,182,182,182,,,181,,,,181,182,,,,180,180,,181,,181,180,180',
'180,180,,,,183,183,183,,,182,,181,181,182,183,,,181,181,181,181,182',
',182,184,184,184,,,,,,,,184,,183,,182,182,183,,,,182,182,182,182,183',
',183,185,185,185,,,184,,,,184,185,,,,183,183,,184,,184,183,183,183,183',
',,,186,186,186,,,185,,184,184,185,186,,,184,184,184,184,185,,185,187',
'187,187,,,,,,,,187,,186,,185,185,186,,,,185,185,185,185,186,,186,188',
'188,188,,,187,,,,187,188,,,,186,186,,187,,187,186,186,186,186,,,,189',
'189,189,,,188,,187,187,188,189,,,187,187,187,187,188,,188,190,190,190',
',,,,,,,190,,189,,188,188,189,,,,188,188,188,188,189,,189,219,219,219',
',,190,,,,190,219,,,,189,189,,190,,190,189,189,189,189,,,,,288,288,288',
',219,,190,190,219,,288,,190,190,190,190,219,,219,239,239,239,,,,,,,',
'239,,219,288,219,219,,288,,,219,219,219,219,,288,,288,298,298,298,,239',
',239,,239,,298,,288,,288,288,239,,239,,288,288,288,288,,,,,301,301,301',
'239,298,239,239,,298,,301,239,239,239,239,,298,,298,302,302,302,,,,',
',,,302,,298,301,298,298,,301,,,298,298,298,298,,301,,301,315,315,315',
',302,,,,302,,315,,,,301,301,302,,302,,301,301,301,301,,,,,,,,,315,302',
'302,,315,,,302,302,302,302,,315,,315,,132,,,,,,,,,,,315,,315,315,132',
',132,,315,315,315,315,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,192,,,,,132,,,132,,,,192,192,192',
'192,192,192,,192,192,192,192,192,,,,,,192,192,192,192,192,230,,,,,,192',
',,,,,230,230,230,230,230,230,,,,,,,,,,,,230,230,230,230,230,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,,66,,66,,139,,,139,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,66,66,66,116,116,116,116,116,116,,116,116,116,116,116,,',
',,,116,116,116,116,116,210,,,,,,116,,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130',
',130,,,,,130,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69',
'69,69,,,,,69,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,,,,,199,157,157,157,157,157,157,,,157,157',
'157,157,,,,,,157,157,157,157,157,260,260,260,260,260,260,261,261,261',
'261,261,261,,,,,,260,260,260,260,260,,261,261,261,261,261,312,312,312',
'312,312,312,313,313,313,313,313,313,,,,,,312,312,312,312,312,,313,313',
'313,313,313,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16',
'16,16,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,251,251,251,251,251,251,254,254,254,254,254,254,255',
'255,255,255,255,255,251,251,,,,254,254,254,,,,255,255,255' ]
        racc_action_check = arr = ::Array.new(2184, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   192,    50,    82,   nil,   nil,   146,   nil,   nil,   nil,   nil,
    34,    16,    85,   nil,   nil,   176,  2063,   219,   nil,    72,
   nil,   nil,   nil,   147,   176,   256,   265,   230,   232,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   248,   263,   294,   307,
    67,   nil,   -45,   194,   nil,   nil,  1833,  2084,    -4,  1933,
   nil,   nil,   309,   nil,   156,   169,   nil,   nil,   nil,   nil,
   313,   -36,   nil,     6,   nil,   nil,   320,   371,   188,   384,
   nil,   560,   599,   nil,   638,   610,   685,   nil,   nil,   nil,
   nil,   -54,    64,   nil,     5,   355,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1820,   nil,   713,   732,
   760,   787,   807,   nil,   nil,     3,   nil,   378,   nil,   379,
  1905,   568,  1714,   392,   380,   nil,   nil,   387,   nil,  1803,
   412,   nil,     2,   482,   nil,   nil,    71,   834,   -13,   447,
   nil,   222,   459,   455,    87,    -6,   495,  1951,   862,   -10,
   881,   909,   937,   459,   458,   446,   nil,   956,   nil,   984,
  1012,  1031,  1059,   nil,  1087,  1106,  1134,  1161,  1181,  1208,
  1235,  1255,  1282,  1309,  1329,  1356,  1383,  1403,  1430,  1457,
  1477,   nil,  1713,   465,   -28,   450,   nil,   nil,   469,  1959,
   nil,   146,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,
  1884,   nil,   nil,   nil,   477,   485,   nil,   529,    95,  1504,
   221,   nil,   nil,   296,   489,   491,   nil,   nil,   nil,   nil,
  1747,   371,   nil,   471,   162,    70,   nil,   nil,   nil,  1551,
   237,   156,    70,   272,   312,   255,   330,   480,   481,   505,
   509,  2092,   223,   298,  2098,  2104,   213,   288,   363,   438,
  1973,  1979,   nil,   nil,   nil,   nil,   nil,   571,    84,   nil,
  2105,   nil,   nil,   nil,   527,   nil,    78,   nil,   347,   426,
   576,   367,   367,   578,   nil,   517,   nil,   387,  1532,   nil,
   nil,   nil,   nil,   156,   nil,   536,   584,   nil,  1579,   446,
   nil,  1607,  1626,   nil,   192,   395,   nil,   526,   542,   nil,
    -4,   nil,  2001,  2007,   nil,  1654,   144,   nil,   521,   397,
   544,   nil,   487,   546,   nil,   nil ]

racc_action_default = [
    -6,  -190,  -183,    -2,    -4,  -190,    -7,    -9,   -10,   -11,
  -190,  -190,  -190,   -36,   -37,   -48,  -190,  -190,    -1,  -184,
  -185,  -187,  -188,    -5,   -13,  -190,  -190,  -190,  -190,   -93,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,   326,    -3,  -186,    -8,  -190,  -190,  -190,  -190,  -113,
  -112,   -49,  -190,    -6,  -189,   -14,  -190,  -190,   -51,  -190,
  -110,  -111,   -46,   -94,  -190,  -190,   -16,   -18,   -19,   -20,
  -190,  -190,   -93,  -190,   -23,   -93,  -190,  -190,  -183,   -52,
   -54,  -190,  -157,   -57,  -190,  -190,  -190,   -62,   -63,   -64,
   -65,   -66,  -140,   -93,  -155,  -148,  -155,  -101,  -102,  -103,
  -104,  -105,  -106,  -107,  -108,  -109,  -119,  -120,  -190,  -190,
  -190,  -190,  -190,  -149,  -151,  -190,  -115,  -190,  -118,  -190,
   -93,  -190,  -190,   -46,  -190,   -29,   -30,  -182,   -22,  -190,
   -25,   -27,  -190,   -67,   -38,   -50,  -184,  -190,   -55,  -140,
  -148,  -155,  -155,   -56,  -158,  -190,  -190,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,   -81,   -84,   -85,  -190,  -150,  -157,
  -190,  -190,  -190,  -152,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,  -190,
  -190,  -123,  -119,  -120,  -190,  -136,  -137,  -138,  -190,  -190,
  -117,   -51,   -93,   -42,   -44,  -190,   -12,   -15,   -17,   -21,
  -190,   -24,   -93,   -93,   -46,   -88,   -89,   -53,   -59,  -190,
   -51,   -75,   -76,   -51,  -190,  -190,   -71,   -72,   -73,   -74,
  -190,   -51,  -121,  -122,   -68,  -112,  -153,  -154,   -93,  -190,
   -98,  -190,  -190,   -99,  -100,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -141,  -142,  -143,  -144,
  -145,  -146,  -139,  -147,  -124,  -114,  -116,  -190,   -40,   -41,
   -93,   -47,   -28,   -93,  -190,   -26,  -190,   -87,  -159,   -77,
  -190,  -190,  -190,  -190,   -82,   -83,   -90,   -91,   -95,  -156,
  -160,   -39,   -45,   -31,   -93,  -190,  -190,   -78,  -190,   -51,
   -60,  -190,  -190,   -61,  -190,   -96,   -93,   -32,   -46,   -58,
  -190,   -80,   -69,   -70,   -92,  -190,   -34,   -86,   -51,   -97,
  -190,   -35,   -77,   -46,   -79,   -33 ]

racc_goto_table = [
    62,   129,   166,    87,    29,   102,   204,   105,   220,   106,
   225,   126,   141,    59,    54,    18,   153,   296,    76,   148,
   154,   224,   155,     3,   159,    79,   173,     1,     2,    74,
   165,    63,    84,    66,    67,    55,    75,    83,   140,   134,
    19,   272,    52,    23,     9,   320,   191,   194,    27,    68,
   205,   217,   156,   137,    82,    85,   164,   127,   295,   286,
   324,   304,   209,     9,   125,    53,   193,     9,   nil,    53,
   nil,   nil,   173,   nil,   nil,   218,   nil,   nil,   nil,   nil,
   nil,   216,   nil,   102,   208,   105,   nil,   106,   232,   233,
   234,    79,   nil,   241,   nil,   240,   nil,   154,   242,   243,
   244,   145,   237,   nil,   211,   201,   nil,     9,   nil,   nil,
    78,   nil,   131,   132,   nil,   nil,   nil,   nil,   202,   nil,
    82,   139,    54,   nil,   nil,   nil,   146,    85,   nil,   269,
   nil,   nil,   nil,   nil,   nil,   302,   267,   284,   102,   275,
   105,   266,   106,   277,   nil,   301,   292,   278,   nil,   236,
   nil,   nil,   nil,   nil,   nil,   279,   nil,   102,   280,   105,
   102,   106,   105,   318,   106,   285,   283,   287,   102,   nil,
   105,   nil,   106,   268,   265,     9,    78,    53,    53,   nil,
   nil,   nil,   nil,   nil,   276,    53,   nil,   127,   nil,   nil,
   nil,   nil,    53,   nil,   nil,   nil,   nil,   nil,   273,   nil,
   nil,   nil,   nil,   157,   nil,   nil,   nil,   216,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   216,   305,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   310,   192,   195,   196,
   197,   nil,   nil,   nil,   311,   nil,   102,   317,   105,   nil,
   106,   nil,   nil,   319,   293,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   325,   322,   nil,   102,   nil,   105,   202,   106,
   nil,   nil,   nil,   nil,   nil,   307,   230,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   316,   nil,   nil,
   nil,   nil,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   312,
   313 ]

racc_goto_check = [
    27,    19,    54,    34,    22,    48,    35,    56,    43,    59,
    51,    62,    24,    32,     8,     3,    41,    44,    15,    40,
    40,    50,    40,     4,    40,    17,    64,     1,     2,     7,
    24,    13,    21,    13,    13,    12,    14,    20,    23,    25,
     5,    26,     4,     5,    11,    28,    40,    40,    31,    33,
    36,    38,    45,    27,    22,    22,    53,    22,    55,    57,
    44,    58,    19,    11,    61,    66,    63,    11,   nil,    66,
   nil,   nil,    64,   nil,   nil,    40,   nil,   nil,   nil,   nil,
   nil,    56,   nil,    48,    15,    56,   nil,    59,    40,    40,
    40,    17,   nil,    41,   nil,    40,   nil,    40,    40,    40,
    40,     3,    56,   nil,    21,    13,   nil,    11,   nil,   nil,
    11,   nil,     5,     5,   nil,   nil,   nil,   nil,    22,   nil,
    22,     5,     8,   nil,   nil,   nil,     5,    22,   nil,    24,
   nil,   nil,   nil,   nil,   nil,    51,    34,    54,    48,    24,
    56,    62,    59,    19,   nil,    50,    35,    40,   nil,    32,
   nil,   nil,   nil,   nil,   nil,    34,   nil,    48,    34,    56,
    48,    59,    56,    43,    59,    24,    34,    40,    48,   nil,
    56,   nil,    59,    27,    13,    11,    11,    66,    66,   nil,
   nil,   nil,   nil,   nil,    27,    66,   nil,    22,   nil,   nil,
   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,    56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    56,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,    49,    49,    49,
    49,   nil,   nil,   nil,    34,   nil,    48,    19,    56,   nil,
    59,   nil,   nil,    40,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,    34,   nil,    48,   nil,    56,    22,    59,
   nil,   nil,   nil,   nil,   nil,    27,    49,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
   nil,   nil,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    49 ]

racc_goto_pointer = [
   nil,    27,    28,    13,    23,    38,   nil,   -34,    -9,   nil,
   nil,    44,    11,   -24,   -30,   -48,   nil,   -41,   nil,   -71,
   -30,   -35,   -12,   -47,   -73,   -42,  -169,   -29,  -271,   nil,
   nil,    33,   -14,   -10,   -65,  -124,   -80,   nil,   -95,   nil,
   -72,   -76,   nil,  -147,  -262,   -43,   nil,   nil,   -63,   108,
  -136,  -147,   nil,   -47,  -101,  -218,   -61,  -180,  -227,   -59,
   nil,    -5,   -58,   -53,   -80,   nil,    46 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,    98,   nil,   222,   nil,   nil,    77,   100,    80,   nil,
   nil,   nil,   103,   nil,   203,   nil,   nil,   142,   nil,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,    88,    89,    90,
   101,   nil,    93,   nil,   nil,   nil,    97,    99,   149,   116,
   nil,   nil,   297,   nil,   nil,   214,   150,   nil,   nil,   152,
   123,   nil,   nil,   117,   168,   124,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 90, :_reduce_1,
  1, 91, :_reduce_2,
  3, 91, :_reduce_3,
  1, 93, :_reduce_4,
  2, 93, :_reduce_5,
  0, 96, :_reduce_6,
  1, 96, :_reduce_7,
  3, 96, :_reduce_8,
  1, 97, :_reduce_9,
  1, 97, :_reduce_10,
  1, 97, :_reduce_11,
  7, 99, :_reduce_12,
  0, 101, :_reduce_13,
  2, 101, :_reduce_14,
  7, 95, :_reduce_15,
  1, 103, :_reduce_16,
  3, 103, :_reduce_17,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 105, :_reduce_21,
  6, 100, :_reduce_22,
  1, 109, :_reduce_23,
  3, 109, :_reduce_24,
  2, 110, :_reduce_25,
  3, 112, :_reduce_26,
  1, 112, :_reduce_27,
  4, 106, :_reduce_28,
  1, 114, :_reduce_none,
  1, 114, :_reduce_30,
  2, 115, :_reduce_31,
  3, 115, :_reduce_32,
  7, 115, :_reduce_33,
  0, 117, :_reduce_34,
  1, 117, :_reduce_35,
  1, 98, :_reduce_36,
  1, 98, :_reduce_37,
  6, 118, :_reduce_38,
  8, 119, :_reduce_39,
  2, 124, :_reduce_40,
  2, 124, :_reduce_41,
  1, 124, :_reduce_42,
  0, 125, :_reduce_43,
  1, 125, :_reduce_44,
  3, 125, :_reduce_45,
  0, 108, :_reduce_46,
  3, 108, :_reduce_47,
  0, 120, :_reduce_48,
  2, 120, :_reduce_49,
  2, 123, :_reduce_50,
  0, 126, :_reduce_51,
  1, 126, :_reduce_52,
  3, 126, :_reduce_53,
  1, 127, :_reduce_54,
  2, 127, :_reduce_55,
  2, 127, :_reduce_56,
  1, 127, :_reduce_57,
  6, 127, :_reduce_58,
  3, 127, :_reduce_59,
  5, 127, :_reduce_60,
  5, 127, :_reduce_61,
  1, 127, :_reduce_62,
  1, 127, :_reduce_none,
  1, 127, :_reduce_64,
  1, 127, :_reduce_none,
  1, 127, :_reduce_66,
  2, 136, :_reduce_67,
  3, 135, :_reduce_68,
  5, 134, :_reduce_69,
  5, 134, :_reduce_70,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  0, 133, :_reduce_77,
  1, 133, :_reduce_78,
  5, 133, :_reduce_79,
  2, 141, :_reduce_80,
  2, 128, :_reduce_81,
  3, 142, :_reduce_82,
  3, 142, :_reduce_83,
  1, 142, :_reduce_84,
  1, 142, :_reduce_85,
  6, 113, :_reduce_86,
  3, 113, :_reduce_87,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 143, :_reduce_90,
  1, 146, :_reduce_none,
  3, 146, :_reduce_92,
  0, 116, :_reduce_93,
  2, 116, :_reduce_94,
  0, 147, :_reduce_95,
  1, 147, :_reduce_96,
  3, 147, :_reduce_97,
  3, 131, :_reduce_98,
  3, 131, :_reduce_99,
  3, 131, :_reduce_100,
  1, 149, :_reduce_101,
  1, 149, :_reduce_102,
  1, 149, :_reduce_103,
  1, 149, :_reduce_104,
  1, 149, :_reduce_105,
  1, 149, :_reduce_106,
  1, 149, :_reduce_107,
  1, 149, :_reduce_108,
  1, 149, :_reduce_109,
  2, 121, :_reduce_110,
  2, 121, :_reduce_111,
  1, 121, :_reduce_112,
  0, 122, :_reduce_113,
  4, 122, :_reduce_114,
  1, 150, :_reduce_115,
  3, 150, :_reduce_116,
  2, 151, :_reduce_117,
  1, 151, :_reduce_118,
  1, 129, :_reduce_119,
  1, 129, :_reduce_120,
  3, 129, :_reduce_121,
  3, 129, :_reduce_122,
  2, 129, :_reduce_123,
  3, 129, :_reduce_124,
  3, 138, :_reduce_125,
  3, 138, :_reduce_126,
  3, 138, :_reduce_127,
  3, 138, :_reduce_128,
  3, 138, :_reduce_129,
  3, 138, :_reduce_130,
  3, 138, :_reduce_131,
  3, 138, :_reduce_132,
  3, 138, :_reduce_133,
  3, 138, :_reduce_134,
  3, 138, :_reduce_135,
  2, 138, :_reduce_136,
  2, 138, :_reduce_137,
  2, 138, :_reduce_138,
  3, 138, :_reduce_139,
  1, 138, :_reduce_140,
  3, 152, :_reduce_141,
  3, 152, :_reduce_142,
  3, 152, :_reduce_143,
  3, 152, :_reduce_144,
  3, 152, :_reduce_145,
  3, 152, :_reduce_146,
  3, 152, :_reduce_147,
  1, 137, :_reduce_148,
  1, 137, :_reduce_149,
  2, 137, :_reduce_150,
  1, 137, :_reduce_none,
  2, 154, :_reduce_152,
  3, 148, :_reduce_153,
  3, 148, :_reduce_154,
  0, 153, :_reduce_155,
  3, 153, :_reduce_156,
  0, 130, :_reduce_157,
  1, 130, :_reduce_158,
  3, 130, :_reduce_159,
  4, 145, :_reduce_160,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_181,
  2, 107, :_reduce_182,
  0, 92, :_reduce_183,
  1, 92, :_reduce_184,
  1, 94, :_reduce_185,
  2, 94, :_reduce_186,
  1, 155, :_reduce_187,
  1, 155, :_reduce_none,
  1, 102, :_reduce_189 ]

racc_reduce_n = 190

racc_shift_n = 326

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kDTYPE_UINT => 26,
  :kDTYPE_LINT => 27,
  :kDTYPE_LLINT => 28,
  :kDTYPE_CHAR => 29,
  :kDTYPE_I8 => 30,
  :kDTYPE_I16 => 31,
  :kDTYPE_I32 => 32,
  :kDTYPE_I64 => 33,
  :kDTYPE_UI8 => 34,
  :kDTYPE_UI16 => 35,
  :kDTYPE_UI32 => 36,
  :kDTYPE_UI64 => 37,
  :kDTYPE_INT => 38,
  :kDTYPE_F32 => 39,
  :kDTYPE_F64 => 40,
  :kDTYPE_LF64 => 41,
  :kDTYPE_ROBJ => 42,
  :kDTYPE_ULINT => 43,
  :kDTYPE_ULLINT => 44,
  :kDTYPE_VOID => 45,
  :tCUSTOM_DTYPE => 46,
  :tLPAREN => 47,
  :tRPAREN => 48,
  :tLSQUARE => 49,
  :tRSQUARE => 50,
  :tIDENTIFIER => 51,
  :tNL => 52,
  :tCOMMA => 53,
  :tSQUOTE => 54,
  :tSCOLON => 55,
  :EOF => 56,
  :tDOT => 57,
  :tQMARK => 58,
  :tSYMBOL => 59,
  :tPLUS => 60,
  :tMINUS => 61,
  :tSTAR => 62,
  :tDIVIDE => 63,
  :tEXPO => 64,
  :tMODULUS => 65,
  :tASSIGN => 66,
  :tEQ => 67,
  :tLT => 68,
  :tLTEQ => 69,
  :tGT => 70,
  :tGTEQ => 71,
  :tANDOP => 72,
  :tOROP => 73,
  :tBANG => 74,
  :tOP_ASSIGN => 75,
  :tSTRING => 76,
  :tBIT_AND => 77,
  :tBIT_OR => 78,
  :tBIT_XOR => 79,
  :tBIT_LSHIFT => 80,
  :tBIT_RSHIFT => 81,
  :tBIT_NOT => 82,
  :tINTEGER => 83,
  :tFLOAT => 84,
  :tSINGLE_CHAR => 85,
  :ADDRESS_OF => 86,
  :UMINUS => 87,
  :tNEQ => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "c_function_declaration",
  "alias_stmt",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "su_var_decl_stmts",
  "su_var_decl_stmt",
  "dtype",
  "var_decl_stmts",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_star",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "c_func_normal_arg",
  "c_func_args",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "expr_or_array",
  "array_list",
  "method_or_attr",
  "literal",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_21(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_22(val, _values, result)
     #TODO: Take the hash from var_decls and create nodes.
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[4],
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
            result = variable_decl_nodes val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_26(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_28(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_31(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_32(val, _values, result)
            result = {
          dtype: val[0].join(val[1]),
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_33(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_34(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_37(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_38(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_39(val, _values, result)
            result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_40(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_41(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_42(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_43(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_44(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_45(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_46(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_47(val, _values, result)
     result = Statement::ArgumentList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_48(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_49(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_52(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_53(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_54(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_55(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_56(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_57(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_58(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_59(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_60(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_61(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_62(val, _values, result)
    
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_64(val, _values, result)
    
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_66(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_67(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_68(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_69(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_70(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_77(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_78(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_79(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_80(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_81(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_83(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_85(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_86(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_87(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_90(val, _values, result)
            result = val[0]
        result[:value] = val[2]
      
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_93(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_94(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_96(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_97(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_98(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_99(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_100(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 385)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 393)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_110(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 397)
  def _reduce_111(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_113(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_114(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_115(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 411)
  def _reduce_116(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_117(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_118(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 439)
  def _reduce_119(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_120(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_123(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_128(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_129(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_136(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_137(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_138(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_140(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_148(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_149(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_150(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_152(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 497)
  def _reduce_153(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_154(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_157(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 510)
  def _reduce_158(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_159(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_160(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_181(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_182(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_183(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_184(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_185(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_186(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_187(val, _values, result)
    
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_189(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
