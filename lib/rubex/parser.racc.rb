#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 670)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'102,103,105,259,270,259,60,106,107,192,67,126,127,128,13,83,92,67,186',
'187,352,130,116,353,113,114,146,115,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,139,66,131,64,119,64,61,376,277',
'198,160,199,129,132,235,159,140,22,311,236,23,186,187,135,83,186,187',
'186,187,138,196,125,145,141,16,102,103,105,142,122,123,124,106,107,186',
'187,126,127,128,13,13,92,18,12,11,17,130,116,25,113,114,146,115,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,139',
'199,131,198,119,22,22,192,23,23,79,26,129,132,375,22,140,321,23,27,346',
'333,320,135,201,29,332,191,80,138,83,125,145,141,16,102,103,105,142',
'122,123,124,106,107,186,187,126,127,128,13,13,92,55,333,11,17,130,116',
'332,113,114,146,115,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,139,16,131,333,119,82,22,79,332,23,164,164,129',
'132,166,166,140,13,83,345,12,11,17,135,332,80,62,83,83,138,64,125,145',
'141,16,102,103,105,142,122,123,124,106,107,68,249,126,127,128,13,13',
'92,186,187,11,17,130,116,83,113,114,146,115,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,139,16,131,64,119,166',
'22,388,22,23,72,23,129,132,186,187,140,13,83,64,83,11,17,135,22,22,78',
'23,23,138,81,125,145,141,16,102,103,105,142,122,123,124,106,107,186',
'187,126,127,128,13,13,92,186,187,11,17,130,116,61,113,114,146,115,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'139,198,131,199,119,151,209,210,211,212,213,214,129,132,186,187,140',
'209,210,211,212,213,214,135,215,216,217,218,219,138,64,125,145,141,161',
'102,103,105,142,122,123,124,106,107,186,187,126,127,128,13,22,92,22',
'23,163,23,130,116,168,113,114,146,115,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,139,171,131,179,119,179,209',
'210,211,212,213,214,129,132,186,187,140,209,210,211,212,213,214,135',
'215,216,217,218,219,138,179,125,145,141,190,102,103,105,142,122,123',
'124,106,107,186,187,126,127,128,13,348,92,200,347,64,350,130,116,64',
'113,114,146,115,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,139,64,131,234,119,237,209,210,211,212,213,214,129',
'132,364,365,140,211,212,213,214,266,267,135,215,216,217,218,219,138',
'239,125,145,141,64,102,103,105,142,122,123,124,106,107,268,269,126,127',
'128,13,245,92,211,212,213,214,130,116,250,113,114,146,115,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,139,151',
'131,199,119,126,127,128,186,187,186,187,129,132,192,130,140,186,187',
'198,146,364,365,135,261,275,280,281,64,138,313,125,145,141,213,64,239',
'151,142,122,123,124,171,336,16,357,139,337,131,338,176,126,127,128,186',
'213,213,213,129,132,13,130,140,213,11,17,146,192,356,135,359,360,366',
'369,281,138,371,125,145,141,64,374,151,379,142,122,123,124,192,83,390',
'151,139,,131,,176,126,127,128,,,,22,129,132,23,130,140,,,,146,,,135',
',,,,,138,,125,145,141,,,,,142,122,123,124,,,,,182,,131,,176,126,127',
'128,,,,,129,132,,130,140,,,,146,,,209,210,211,212,213,214,,,125,145',
'141,,,,,142,122,123,124,216,217,,,139,,131,,176,126,127,128,,,,,129',
'132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124',
',,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,138',
',125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129',
'132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124',
',,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,135,,,,',
',138,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128',
',,,,129,132,,130,140,,,,146,,,,209,210,211,212,213,214,,125,145,141',
',,,,142,122,123,124,215,216,217,,231,,131,,176,126,127,128,,,,,129,132',
',130,140,,,,146,,,,209,210,211,212,213,214,,125,145,141,,,,,142,122',
'123,124,215,216,217,,231,,131,,176,126,127,128,,,,,129,132,,130,140',
',,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126',
'127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,',
'142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,',
',,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,,231,,131,',
'176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,',
',,142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129,132,,130,140',
',,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,,139,,131',
',176,126,127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145',
'141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129,132,,130',
'140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,,139,',
'131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125',
'145,141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129,132',
',130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,',
'139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138',
',125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128,,,,,129',
'132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122,123,124',
',,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,135,,,,',
',138,,125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128',
',,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122',
'123,124,,,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,',
'135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126',
'127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,',
'142,122,123,124,,,,,,,131,,176,126,127,128,,,,,129,132,,130,,,,,146',
',,,,,,,,,,125,145,,,,,,,122,123,124,,,,,231,,131,,176,126,127,128,,',
',,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124',
',,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,',
'125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128,,,,,129',
'132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231',
',131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145',
'141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130',
'140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176',
'126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142',
'122,123,124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146',
',,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127',
'128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123',
'124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,',
',,,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128,,',
',,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124',
',,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,',
'125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128,,,,,129',
'132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231',
',131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145',
'141,,,,,142,122,123,124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130',
'140,,,,146,,,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176',
'126,127,128,,,,,129,132,,130,140,,,,146,,,,,,,,,,,125,145,141,,,,,142',
'122,123,124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146',
',,,,,,,,,,125,145,141,,,,,142,122,123,124,,,,,231,,131,,176,126,127',
'128,,,,,129,132,,130,140,,,,146,,,,,,,126,127,128,,125,145,141,,,,130',
'142,122,123,124,146,,,,231,,131,,176,126,127,128,,,,,129,132,,130,140',
',,,146,,,,131,,176,126,127,128,,125,145,141,129,132,,130,142,122,123',
'124,146,,,,,,131,,176,,,125,145,,,,129,132,,122,123,124,,,,,139,,131',
',176,126,127,128,,125,145,,129,132,,130,140,122,123,124,146,,,135,,',
',,,138,,125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126,127,128',
',,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,,142,122',
'123,124,,,,,139,,131,,176,126,127,128,,,,,129,132,,130,140,,,,146,,',
'135,,,,,,138,,125,145,141,,,,,142,122,123,124,,,,,139,,131,,176,126',
'127,128,,,,,129,132,,130,140,,,,146,,,135,,,,,,138,,125,145,141,,,,',
'142,122,123,124,,,,,231,,131,,176,126,127,128,,,,,129,132,,130,140,',
',,146,,,,,,,126,127,128,,125,145,141,,,,130,142,122,123,124,146,,,,231',
',131,,176,,,,,,,,129,132,,,140,,,,,,,,131,,176,,,,,125,145,141,129,132',
',,142,122,123,124,247,,,,209,210,211,212,213,214,,125,145,,,13,,92,',
'122,123,124,215,216,217,218,219,,,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,312,,,,,22,,,23,,,,,,209,210,211',
'212,213,214,,220,222,223,224,225,,,,,,,215,216,217,218,219,13,,92,,',
',,221,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,329,,,,,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,312,,,,,,,,,,,,312,,209,210,211',
'212,213,214,,,266,267,268,269,209,210,211,212,213,214,215,216,217,218',
'219,,,,,,,,215,216,217,218,219,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,,,,,,22,,,23,209,210,211,212,213,214',
',220,222,223,224,225,,,,,,,215,216,217,218,219,,,,,,,,221,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,-25,,,',
',-25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,,,,,150,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,,,,,150,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,209,210,211,212,213',
'214,,,266,267,268,269,209,210,211,212,213,214,215,216,217,218,219,209',
'210,211,212,213,214,,215,216,217,218,219,209,210,211,212,213,214,215',
'216,217,218,219,209,210,211,212,213,214,,215,216,217,218,219,,,,,,,215',
'216,217,218,219' ]
        racc_action_table = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'77,77,77,180,185,380,25,77,77,292,28,77,77,77,77,293,77,192,112,112',
'292,77,77,293,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,77,77,77,28,77,180,77,380,25,358,192,119,92',
'119,77,77,147,92,77,2,227,147,2,185,185,77,358,180,180,380,380,77,119',
'77,77,77,20,170,170,170,77,77,77,77,170,170,227,227,170,170,170,170',
'20,170,1,20,20,20,170,170,11,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,277,170,121,170,170,20,117,170,20,277,12,170,170,354,5,170,241',
'5,13,284,256,241,170,121,16,256,117,277,170,354,170,170,170,24,244,244',
'244,170,170,170,170,244,244,284,284,244,244,244,244,24,244,18,273,24',
'24,244,244,273,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,244,274',
'244,69,24,66,274,24,97,322,244,244,97,322,244,0,69,283,0,0,0,244,283',
'66,26,97,322,244,27,244,244,244,153,258,258,258,244,244,244,244,258',
'258,29,157,258,258,258,258,153,258,173,173,153,153,258,258,157,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,70,258,59,258,252,153,385,74',
'153,61,74,258,258,255,255,258,70,252,62,385,70,70,258,84,86,65,84,86',
'258,67,258,258,258,155,261,261,261,258,258,258,258,261,261,257,257,261',
'261,261,261,155,261,276,276,155,155,261,261,71,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,176,261,176,261,82,305,305,305,305,305,305,261',
'261,282,282,261,301,301,301,301,301,301,261,305,305,305,305,305,261',
'85,261,261,261,93,270,270,270,261,261,261,261,270,270,285,285,270,270',
'270,270,99,270,246,99,95,246,270,270,98,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,100,270,103,270,113,306,306,306,306,306,306,270',
'270,286,286,270,302,302,302,302,302,302,270,306,306,306,306,306,270',
'115,270,270,270,116,365,365,365,270,270,270,270,365,365,287,287,365',
'365,365,365,288,365,120,288,290,290,365,365,131,365,365,365,365,365',
'365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365,365',
'365,365,365,365,365,365,365,132,365,145,365,149,307,307,307,307,307',
'307,365,365,334,334,365,294,294,294,294,337,337,365,307,307,307,307',
'307,365,150,365,365,365,152,386,386,386,365,365,365,365,386,386,338',
'338,386,386,386,386,154,386,295,295,295,295,386,386,158,386,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386,386',
'386,386,386,386,386,386,386,386,386,165,386,166,386,102,102,102,344',
'344,361,361,386,386,174,102,386,370,370,177,102,389,389,386,181,190',
'193,194,204,386,229,386,386,386,230,235,237,249,386,386,386,386,254',
'262,325,325,102,264,102,265,102,105,105,105,272,296,297,298,102,102',
'325,105,102,299,325,325,105,319,324,102,329,330,335,339,343,102,349',
'102,102,102,350,352,360,362,102,102,102,102,373,377,387,390,105,,105',
',105,106,106,106,,,,325,105,105,325,106,105,,,,106,,,105,,,,,,105,,105',
'105,105,,,,,105,105,105,105,,,,,106,,106,,106,107,107,107,,,,,106,106',
',107,106,,,,107,,,300,300,300,300,300,300,,,106,106,106,,,,,106,106',
'106,106,300,300,,,107,,107,,107,134,134,134,,,,,107,107,,134,107,,,',
'134,,,107,,,,,,107,,107,107,107,,,,,107,107,107,107,,,,,134,,134,,134',
'138,138,138,,,,,134,134,,138,134,,,,138,,,,,,,,,134,,134,134,134,,,',
',134,134,134,134,,,,,138,,138,,138,139,139,139,,,,,138,138,,139,138',
',,,139,,,138,,,,,,138,,138,138,138,,,,,138,138,138,138,,,,,139,,139',
',139,140,140,140,,,,,139,139,,140,139,,,,140,,,139,,,,,,139,,139,139',
'139,,,,,139,139,139,139,,,,,140,,140,,140,141,141,141,,,,,140,140,,141',
'140,,,,141,,,,303,303,303,303,303,303,,140,140,140,,,,,140,140,140,140',
'303,303,303,,141,,141,,141,142,142,142,,,,,141,141,,142,141,,,,142,',
',,304,304,304,304,304,304,,141,141,141,,,,,141,141,141,141,304,304,304',
',142,,142,,142,171,171,171,,,,,142,142,,171,142,,,,171,,,,,,,,,,,142',
'142,142,,,,,142,142,142,142,,,,,171,,171,,171,178,178,178,,,,,171,171',
',178,171,,,,178,,,171,,,,,,171,,171,171,171,,,,,171,171,171,171,,,,',
'178,,178,,178,182,182,182,,,,,178,178,,182,178,,,,182,,,178,,,,,,178',
',178,178,178,,,,,178,178,178,178,,,,,182,,182,,182,186,186,186,,,,,182',
'182,,186,182,,,,186,,,,,,,,,,,182,182,182,,,,,182,182,182,182,,,,,186',
',186,,186,187,187,187,,,,,186,186,,187,186,,,,187,,,186,,,,,,186,,186',
'186,186,,,,,186,186,186,186,,,,,187,,187,,187,188,188,188,,,,,187,187',
',188,187,,,,188,,,187,,,,,,187,,187,187,187,,,,,187,187,187,187,,,,',
'188,,188,,188,189,189,189,,,,,188,188,,189,188,,,,189,,,188,,,,,,188',
',188,188,188,,,,,188,188,188,188,,,,,189,,189,,189,191,191,191,,,,,189',
'189,,191,189,,,,191,,,189,,,,,,189,,189,189,189,,,,,189,189,189,189',
',,,,191,,191,,191,196,196,196,,,,,191,191,,196,191,,,,196,,,191,,,,',
',191,,191,191,191,,,,,191,191,191,191,,,,,196,,196,,196,198,198,198',
',,,,196,196,,198,196,,,,198,,,196,,,,,,196,,196,196,196,,,,,196,196',
'196,196,,,,,198,,198,,198,199,199,199,,,,,198,198,,199,198,,,,199,,',
'198,,,,,,198,,198,198,198,,,,,198,198,198,198,,,,,199,,199,,199,200',
'200,200,,,,,199,199,,200,199,,,,200,,,199,,,,,,199,,199,199,199,,,,',
'199,199,199,199,,,,,200,,200,,200,201,201,201,,,,,200,200,,201,200,',
',,201,,,200,,,,,,200,,200,200,200,,,,,200,200,200,200,,,,,201,,201,',
'201,203,203,203,,,,,201,201,,203,201,,,,203,,,201,,,,,,201,,201,201',
'201,,,,,201,201,201,201,,,,,203,,203,,203,206,206,206,,,,,203,203,,206',
'203,,,,206,,,203,,,,,,203,,203,203,203,,,,,203,203,203,203,,,,,,,206',
',206,209,209,209,,,,,206,206,,209,,,,,209,,,,,,,,,,,206,206,,,,,,,206',
'206,206,,,,,209,,209,,209,210,210,210,,,,,209,209,,210,209,,,,210,,',
',,,,,,,,209,209,209,,,,,209,209,209,209,,,,,210,,210,,210,211,211,211',
',,,,210,210,,211,210,,,,211,,,,,,,,,,,210,210,210,,,,,210,210,210,210',
',,,,211,,211,,211,212,212,212,,,,,211,211,,212,211,,,,212,,,,,,,,,,',
'211,211,211,,,,,211,211,211,211,,,,,212,,212,,212,213,213,213,,,,,212',
'212,,213,212,,,,213,,,,,,,,,,,212,212,212,,,,,212,212,212,212,,,,,213',
',213,,213,214,214,214,,,,,213,213,,214,213,,,,214,,,,,,,,,,,213,213',
'213,,,,,213,213,213,213,,,,,214,,214,,214,215,215,215,,,,,214,214,,215',
'214,,,,215,,,,,,,,,,,214,214,214,,,,,214,214,214,214,,,,,215,,215,,215',
'216,216,216,,,,,215,215,,216,215,,,,216,,,,,,,,,,,215,215,215,,,,,215',
'215,215,215,,,,,216,,216,,216,217,217,217,,,,,216,216,,217,216,,,,217',
',,,,,,,,,,216,216,216,,,,,216,216,216,216,,,,,217,,217,,217,218,218',
'218,,,,,217,217,,218,217,,,,218,,,,,,,,,,,217,217,217,,,,,217,217,217',
'217,,,,,218,,218,,218,219,219,219,,,,,218,218,,219,218,,,,219,,,,,,',
',,,,218,218,218,,,,,218,218,218,218,,,,,219,,219,,219,220,220,220,,',
',,219,219,,220,219,,,,220,,,,,,,,,,,219,219,219,,,,,219,219,219,219',
',,,,220,,220,,220,221,221,221,,,,,220,220,,221,220,,,,221,,,,,,,,,,',
'220,220,220,,,,,220,220,220,220,,,,,221,,221,,221,222,222,222,,,,,221',
'221,,222,221,,,,222,,,,,,,,,,,221,221,221,,,,,221,221,221,221,,,,,222',
',222,,222,223,223,223,,,,,222,222,,223,222,,,,223,,,,,,,,,,,222,222',
'222,,,,,222,222,222,222,,,,,223,,223,,223,224,224,224,,,,,223,223,,224',
'223,,,,224,,,,,,,,,,,223,223,223,,,,,223,223,223,223,,,,,224,,224,,224',
'225,225,225,,,,,224,224,,225,224,,,,225,,,,,,,,,,,224,224,224,,,,,224',
'224,224,224,,,,,225,,225,,225,231,231,231,,,,,225,225,,231,225,,,,231',
',,,,,,239,239,239,,225,225,225,,,,239,225,225,225,225,239,,,,231,,231',
',231,351,351,351,,,,,231,231,,351,231,,,,351,,,,239,,239,281,281,281',
',231,231,231,239,239,,281,231,231,231,231,281,,,,,,351,,351,,,239,239',
',,,351,351,,239,239,239,,,,,281,,281,,281,332,332,332,,351,351,,281',
'281,,332,281,351,351,351,332,,,281,,,,,,281,,281,281,281,,,,,281,281',
'281,281,,,,,332,,332,,332,347,347,347,,,,,332,332,,347,332,,,,347,,',
'332,,,,,,332,,332,332,332,,,,,332,332,332,332,,,,,347,,347,,347,364',
'364,364,,,,,347,347,,364,347,,,,364,,,347,,,,,,347,,347,347,347,,,,',
'347,347,347,347,,,,,364,,364,,364,367,367,367,,,,,364,364,,367,364,',
',,367,,,364,,,,,,364,,364,364,364,,,,,364,364,364,364,,,,,367,,367,',
'367,368,368,368,,,,,367,367,,368,367,,,,368,,,,,,,372,372,372,,367,367',
'367,,,,372,367,367,367,367,372,,,,368,,368,,368,,,,,,,,368,368,,,368',
',,,,,,,372,,372,,,,,368,368,368,372,372,,,368,368,368,368,156,,,,308',
'308,308,308,308,308,,372,372,,,156,,156,,372,372,372,308,308,308,308',
'308,,,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,228,,,,,156,,,156,,,,,,228,228,228,228',
'228,228,,228,228,228,228,228,,,,,,,228,228,228,228,228,73,,73,,,,,228',
',,,,,,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,73,250,,,,,,,,,,,,,,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,263,,,,,,,,,,,,314',
',263,263,263,263,263,263,,,263,263,263,263,314,314,314,314,314,314,263',
'263,263,263,263,,,,,,,,314,314,314,314,314,94,94,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,,,,,,94,,,94,136,136,136',
'136,136,136,,136,136,136,136,136,,,,,,,136,136,136,136,136,,,,,,,,136',
'151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151',
'151,151,151,151,151,151,151,,151,,,,,151,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,,,,,78,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236',
'236,236,236,,,,,236,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,320,320,320,320,320,320,320,320,320,320,320,320,320',
'320,320,320,320,320,320,320,320,320,320,320,184,184,184,184,184,184',
',,184,184,184,184,309,309,309,309,309,309,184,184,184,184,184,310,310',
'310,310,310,310,,309,309,309,309,309,382,382,382,382,382,382,310,310',
'310,310,310,383,383,383,383,383,383,,382,382,382,382,382,,,,,,,383,383',
'383,383,383' ]
        racc_action_check = arr = ::Array.new(3560, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   225,   104,     8,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   nil,    50,    63,    98,   nil,   nil,   140,  3315,   191,   nil,
    84,   nil,   nil,   nil,   171,   -21,   238,   195,    -7,   204,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,
  3339,   263,   271,  3363,   nil,   283,   166,   276,   nil,   171,
   312,   292,   nil,  3051,   260,   nil,   nil,    -4,  3257,   nil,
   nil,   nil,   349,   nil,   276,   369,   277,   nil,   nil,   nil,
   nil,   nil,     7,   431,  3162,   392,   nil,   180,   455,   389,
   482,   nil,   651,   434,   nil,   697,   743,   789,   nil,   nil,
   nil,   nil,   -65,   436,   nil,   461,   503,    80,   nil,     5,
   462,    86,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   484,   514,   nil,   835,  3387,  3156,   nil,   881,   927,
   973,  1019,  1065,   nil,   nil,   521,   nil,     9,   nil,   519,
   527,  3226,   547,   258,   621,   345,  2976,   211,   555,   nil,
   nil,   nil,   nil,   nil,   nil,   606,   606,   nil,   nil,   nil,
    83,  1111,   nil,   195,   609,   nil,   345,   624,  1157,   nil,
    -6,   671,  1203,   nil,  3420,   -10,  1249,  1295,  1341,  1387,
   626,  1433,     0,   625,   611,   nil,  1479,   nil,  1525,  1571,
  1617,  1663,   nil,  1709,   628,   nil,  1755,   nil,   nil,  1801,
  1847,  1893,  1939,  1985,  2031,  2077,  2123,  2169,  2215,  2261,
  2307,  2353,  2399,  2445,  2491,  2537,   nil,    13,  2975,   634,
   620,  2583,   nil,   nil,  3411,   635,  3286,   620,   nil,  2605,
   nil,    99,   nil,   nil,   170,   nil,   391,   nil,   nil,   642,
  3089,   nil,   258,   nil,   697,   244,   103,   274,   257,   nil,
   nil,   344,   647,  3088,   648,   650,   nil,   nil,   nil,   nil,
   431,   nil,   632,   135,   172,   nil,   282,    82,   nil,   nil,
   nil,  2651,   331,   188,   100,   361,   418,   448,   478,   nil,
   480,   nil,   -57,   -58,   518,   553,   641,   642,   643,   649,
   751,   346,   433,   982,  1028,   335,   422,   509,  2912,  3432,
  3443,   nil,   nil,   nil,  3100,   nil,   nil,   nil,   nil,   662,
  3435,   nil,   181,   nil,   726,   703,   nil,   nil,   nil,   671,
   675,   nil,  2697,   nil,   581,   730,   nil,   516,   537,   731,
   nil,   nil,   nil,   658,   586,   nil,   nil,  2743,   nil,   667,
   680,  2629,   661,   nil,    96,   nil,   nil,   nil,     3,   nil,
   687,   588,   741,   nil,  2789,   518,   nil,  2835,  2881,   nil,
   595,   nil,  2903,   683,   nil,   nil,   nil,   677,   nil,   nil,
    -4,   nil,  3455,  3466,   nil,   260,   605,   694,   nil,   675,
   696,   nil,   nil ]

racc_action_default = [
    -6,  -224,  -213,    -2,    -4,  -224,    -7,    -9,   -10,   -11,
   -12,  -224,  -224,  -224,   -45,   -46,   -52,  -224,  -224,    -1,
  -214,  -215,  -217,  -218,    -5,   -15,   -18,  -224,  -224,  -224,
  -100,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,  -201,
  -202,  -203,  -204,  -205,  -206,   393,    -3,  -216,    -8,  -224,
  -224,  -224,  -224,   -31,  -223,  -128,  -126,  -224,   -53,  -224,
    -6,   -15,   -16,  -224,  -213,   -32,  -100,   -55,  -224,  -124,
  -125,  -127,   -28,  -101,  -213,  -224,  -224,   -19,   -21,   -22,
   -23,  -100,  -224,  -224,  -214,   -34,   -36,  -224,  -224,  -213,
   -56,   -58,  -207,  -209,   -61,  -224,  -224,  -224,   -66,   -67,
   -68,   -69,   -70,  -209,   -72,  -209,  -224,  -160,  -100,  -177,
  -168,  -177,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,
  -116,  -219,  -219,  -136,  -224,  -224,  -141,  -142,  -224,  -224,
  -224,  -224,  -224,  -169,  -171,  -224,  -173,  -224,  -130,  -224,
  -134,  -100,  -224,  -214,  -224,    -6,  -224,  -224,  -224,   -38,
   -39,   -30,   -33,  -100,  -100,   -28,   -97,   -98,   -47,   -54,
  -214,  -224,   -59,  -208,  -160,  -168,  -177,  -177,  -179,  -210,
  -224,  -224,  -224,   -77,  -224,  -224,  -224,  -224,  -179,  -179,
  -224,  -224,  -224,   -90,   -93,   -94,  -224,  -170,  -179,  -224,
  -224,  -224,  -174,  -102,  -220,  -221,  -119,  -137,  -100,  -224,
  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -224,  -224,  -224,  -224,  -224,  -224,  -143,  -224,  -141,  -142,
  -156,  -224,  -157,  -158,  -224,  -224,  -224,  -134,  -133,  -224,
   -26,  -224,  -100,   -51,   -55,   -13,  -224,   -17,   -20,   -28,
  -224,   -35,  -224,   -96,   -57,   -63,  -211,  -180,   -55,   -84,
   -85,   -55,  -224,  -224,  -224,  -224,   -80,   -81,   -82,   -83,
   -55,  -138,  -139,  -211,  -211,   -74,   -75,  -126,  -175,  -176,
  -100,  -224,  -105,  -224,  -224,  -106,  -107,  -103,  -224,  -222,
  -219,  -120,  -224,  -224,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -161,  -162,  -163,  -164,  -165,
  -166,  -144,  -159,  -167,  -224,  -100,  -129,  -131,  -132,  -135,
  -100,   -29,   -49,   -50,  -224,  -224,   -24,   -37,  -100,  -224,
  -224,   -60,  -224,  -212,   -86,  -224,   -76,  -224,  -224,  -224,
   -71,   -73,   -91,   -92,   -99,  -178,  -182,  -224,  -117,  -224,
  -219,  -224,  -224,  -140,  -224,   -27,   -48,   -14,   -40,  -100,
   -28,  -181,  -224,   -87,  -224,   -55,   -64,  -224,  -224,   -65,
  -104,  -118,  -224,  -122,  -123,  -172,  -100,   -41,   -95,   -62,
  -224,   -89,   -78,   -79,  -121,   -43,   -55,  -224,   -44,   -86,
   -28,   -88,   -42 ]

racc_goto_table = [
    63,    69,    10,    98,    57,   117,   258,   120,    57,   121,
    30,   152,   240,    20,    58,   148,    24,    96,   195,   291,
   238,    19,    10,    84,   202,   183,    10,   167,    65,    87,
    90,   362,    70,    59,    75,    73,   203,   206,   178,     1,
     3,   256,     2,    86,   241,    74,   331,    95,   188,   158,
   189,   273,   274,    71,   327,   387,    76,    28,   155,   194,
    56,   283,   157,   340,   341,   162,    91,    77,   254,   172,
   181,   149,    10,   367,   368,    89,   193,   330,    57,    85,
   202,   288,   290,   351,   147,    94,   391,    76,   207,   229,
   nil,   nil,   nil,    93,   253,   153,   nil,   156,   117,   nil,
   120,   262,   121,   154,   251,   nil,   nil,   318,   246,   nil,
   170,   nil,   248,    90,   nil,   nil,   nil,   nil,   169,   nil,
   nil,   nil,   279,   nil,   nil,   244,   nil,   nil,   208,   nil,
   nil,   nil,   nil,   nil,   292,   252,   nil,    57,   nil,   nil,
    57,   nil,   nil,    58,   242,   nil,   nil,   nil,   nil,    91,
   nil,   nil,   nil,   260,    57,    10,   nil,    10,    89,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,   nil,   nil,
   324,   nil,   117,   317,   120,   nil,   121,   289,   326,   293,
   342,   355,   167,   323,   334,   384,   117,   335,   120,   117,
   121,   120,   278,   121,   nil,   349,   339,   nil,   117,   nil,
   120,   nil,   121,   nil,   nil,   nil,   386,   nil,   316,   nil,
   nil,   nil,   nil,   322,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   343,   nil,   nil,   nil,   nil,   nil,   315,   nil,   149,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   167,   nil,   nil,   372,   nil,   325,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,   180,   nil,
   185,   nil,   184,   nil,   nil,   nil,   nil,   nil,   nil,   373,
   nil,   nil,   nil,   nil,   nil,   nil,   354,   nil,   nil,   378,
   nil,   381,   nil,   117,   nil,   120,   nil,   121,   nil,   358,
   292,   226,   227,   nil,   nil,   228,   230,   232,   233,    57,
   nil,   nil,   389,   242,   117,    58,   120,   nil,   121,   392,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   377,   nil,   nil,   nil,   255,   nil,   nil,   nil,   nil,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   385,   263,   271,
   272,   257,   257,   260,   276,   nil,   nil,   nil,   nil,   282,
   nil,   257,   284,   285,   286,   nil,   287,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   nil,   nil,   nil,   nil,   nil,   314,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   361,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   370,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,   nil,   nil,
   nil,   nil,   nil,   382,   383 ]

racc_goto_check = [
    14,    20,    12,    36,    76,    51,    46,    60,    76,    62,
    15,    21,    23,     5,     8,    69,     5,    27,    58,    66,
    70,     3,    12,     7,    74,    52,    12,    60,    34,    17,
    19,    47,    14,    13,    25,    14,    64,    64,    41,     1,
     4,    42,     2,    16,    22,    24,    43,    26,    41,    28,
    41,    42,    42,    15,    29,    30,    15,    33,    14,    27,
     4,    42,    20,    43,    43,    25,    15,    35,    38,    40,
    48,    15,    12,    54,    55,    12,    57,    59,    76,    13,
    74,    61,    65,    67,    68,     5,    47,    15,    71,    73,
   nil,   nil,   nil,     3,    21,     5,   nil,     5,    51,   nil,
    60,    52,    62,     3,    27,   nil,   nil,    70,     7,   nil,
     5,   nil,    17,    19,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,    60,   nil,   nil,    14,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,    51,    20,   nil,    76,   nil,   nil,
    76,   nil,   nil,     8,    15,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,    14,    76,    12,   nil,    12,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,   nil,   nil,
    36,   nil,    51,    69,    60,   nil,    62,    14,    21,    20,
    58,    23,    60,    27,    36,    66,    51,    36,    60,    51,
    62,    60,    34,    62,   nil,    64,    36,   nil,    51,   nil,
    60,   nil,    62,   nil,   nil,   nil,    46,   nil,    14,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,   nil,    15,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    60,   nil,   nil,    64,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,    45,   nil,
    45,   nil,    53,   nil,   nil,   nil,   nil,   nil,   nil,    51,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,    21,
   nil,    36,   nil,    51,   nil,    60,   nil,    62,   nil,    20,
    51,    45,    45,   nil,   nil,    53,    53,    53,    53,    76,
   nil,   nil,    36,    15,    51,     8,    60,   nil,    62,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
    20,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,   nil,    20,    53,    45,
    45,    45,    45,    14,    45,   nil,   nil,   nil,   nil,    45,
   nil,    45,    45,    45,    45,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,   nil,   nil,   nil,   nil,   nil,    53,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,    53,    53 ]

racc_goto_pointer = [
   nil,    39,    42,    19,    40,    11,   nil,   -47,   -10,   nil,
   nil,   nil,     2,     8,   -27,    -7,   -30,   -44,   nil,   -43,
   -29,   -71,  -107,  -139,   -18,   -29,   -29,   -59,   -43,  -196,
  -330,   nil,   nil,    41,     0,     2,   -74,   nil,  -102,   nil,
   -33,   -65,  -137,  -210,   nil,   163,  -174,  -303,   -36,   nil,
   nil,   -72,   -81,   166,  -264,  -264,   nil,   -42,  -100,  -175,
   -70,  -122,   -68,   nil,   -95,  -124,  -187,  -209,     6,   -63,
  -130,   -46,   nil,   -50,   -97,   nil,   -16,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   109,   nil,   205,   118,   nil,   nil,    88,   111,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    99,   100,   101,
   nil,   nil,   nil,   nil,   104,   112,   nil,   nil,   nil,   108,
   110,   174,   nil,   136,   264,   265,   363,   nil,   nil,   165,
   175,   nil,   177,   143,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   133,   134,   137,   197,   144,    21,   204 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 103, :_reduce_1,
  1, 104, :_reduce_2,
  3, 104, :_reduce_3,
  1, 106, :_reduce_4,
  2, 106, :_reduce_5,
  0, 109, :_reduce_6,
  1, 109, :_reduce_7,
  3, 109, :_reduce_8,
  1, 110, :_reduce_9,
  1, 110, :_reduce_10,
  1, 110, :_reduce_11,
  1, 110, :_reduce_12,
  7, 112, :_reduce_13,
  9, 113, :_reduce_14,
  0, 115, :_reduce_15,
  2, 115, :_reduce_16,
  7, 108, :_reduce_17,
  2, 108, :_reduce_18,
  1, 118, :_reduce_19,
  3, 118, :_reduce_20,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  4, 120, :_reduce_24,
  0, 124, :_reduce_25,
  1, 124, :_reduce_26,
  3, 124, :_reduce_27,
  0, 123, :_reduce_28,
  3, 123, :_reduce_29,
  6, 114, :_reduce_30,
  0, 126, :_reduce_31,
  1, 126, :_reduce_32,
  3, 126, :_reduce_33,
  2, 127, :_reduce_34,
  3, 128, :_reduce_35,
  1, 128, :_reduce_36,
  4, 121, :_reduce_37,
  1, 130, :_reduce_none,
  1, 130, :_reduce_39,
  2, 131, :_reduce_40,
  3, 131, :_reduce_41,
  7, 131, :_reduce_42,
  0, 132, :_reduce_43,
  1, 132, :_reduce_44,
  1, 111, :_reduce_45,
  1, 111, :_reduce_46,
  6, 133, :_reduce_47,
  8, 134, :_reduce_48,
  2, 125, :_reduce_49,
  2, 125, :_reduce_50,
  1, 125, :_reduce_51,
  0, 135, :_reduce_52,
  2, 135, :_reduce_53,
  2, 138, :_reduce_54,
  0, 139, :_reduce_55,
  1, 139, :_reduce_56,
  3, 139, :_reduce_57,
  1, 140, :_reduce_58,
  2, 140, :_reduce_59,
  4, 140, :_reduce_60,
  1, 140, :_reduce_61,
  6, 140, :_reduce_62,
  3, 140, :_reduce_63,
  5, 140, :_reduce_64,
  5, 140, :_reduce_65,
  1, 140, :_reduce_66,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_70,
  4, 140, :_reduce_71,
  1, 140, :_reduce_72,
  4, 140, :_reduce_73,
  3, 152, :_reduce_74,
  3, 151, :_reduce_75,
  3, 150, :_reduce_76,
  1, 150, :_reduce_none,
  5, 154, :_reduce_78,
  5, 154, :_reduce_79,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 149, :_reduce_86,
  1, 149, :_reduce_87,
  5, 149, :_reduce_88,
  2, 158, :_reduce_89,
  2, 141, :_reduce_90,
  3, 159, :_reduce_91,
  3, 159, :_reduce_92,
  1, 159, :_reduce_93,
  1, 159, :_reduce_94,
  6, 129, :_reduce_95,
  3, 129, :_reduce_96,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 160, :_reduce_99,
  0, 122, :_reduce_100,
  2, 122, :_reduce_101,
  0, 163, :_reduce_102,
  1, 163, :_reduce_103,
  3, 163, :_reduce_104,
  3, 146, :_reduce_105,
  3, 146, :_reduce_106,
  3, 146, :_reduce_107,
  1, 165, :_reduce_108,
  1, 165, :_reduce_109,
  1, 165, :_reduce_110,
  1, 165, :_reduce_111,
  1, 165, :_reduce_112,
  1, 165, :_reduce_113,
  1, 165, :_reduce_114,
  1, 165, :_reduce_115,
  1, 165, :_reduce_116,
  4, 165, :_reduce_117,
  5, 165, :_reduce_118,
  0, 167, :_reduce_119,
  1, 167, :_reduce_120,
  4, 167, :_reduce_121,
  3, 168, :_reduce_122,
  2, 169, :_reduce_none,
  2, 136, :_reduce_124,
  2, 136, :_reduce_125,
  1, 136, :_reduce_126,
  2, 136, :_reduce_127,
  0, 137, :_reduce_128,
  4, 137, :_reduce_129,
  1, 170, :_reduce_130,
  3, 170, :_reduce_131,
  3, 171, :_reduce_132,
  2, 171, :_reduce_133,
  0, 172, :_reduce_134,
  2, 172, :_reduce_135,
  1, 147, :_reduce_136,
  2, 147, :_reduce_137,
  3, 147, :_reduce_138,
  3, 147, :_reduce_139,
  4, 174, :_reduce_140,
  1, 173, :_reduce_141,
  1, 173, :_reduce_142,
  2, 173, :_reduce_143,
  3, 173, :_reduce_144,
  3, 155, :_reduce_145,
  3, 155, :_reduce_146,
  3, 155, :_reduce_147,
  3, 155, :_reduce_148,
  3, 155, :_reduce_149,
  3, 155, :_reduce_150,
  3, 155, :_reduce_151,
  3, 155, :_reduce_152,
  3, 155, :_reduce_153,
  3, 155, :_reduce_154,
  3, 155, :_reduce_155,
  2, 155, :_reduce_156,
  2, 155, :_reduce_157,
  2, 155, :_reduce_158,
  3, 155, :_reduce_159,
  1, 155, :_reduce_160,
  3, 175, :_reduce_161,
  3, 175, :_reduce_162,
  3, 175, :_reduce_163,
  3, 175, :_reduce_164,
  3, 175, :_reduce_165,
  3, 175, :_reduce_166,
  3, 175, :_reduce_167,
  1, 153, :_reduce_168,
  1, 153, :_reduce_169,
  2, 153, :_reduce_170,
  1, 153, :_reduce_none,
  5, 153, :_reduce_172,
  1, 153, :_reduce_173,
  2, 177, :_reduce_174,
  3, 164, :_reduce_175,
  3, 164, :_reduce_176,
  0, 176, :_reduce_177,
  3, 176, :_reduce_178,
  0, 144, :_reduce_179,
  1, 144, :_reduce_180,
  3, 144, :_reduce_181,
  4, 162, :_reduce_182,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_206,
  0, 142, :_reduce_207,
  1, 142, :_reduce_none,
  0, 143, :_reduce_209,
  1, 143, :_reduce_none,
  0, 145, :_reduce_211,
  1, 145, :_reduce_none,
  0, 105, :_reduce_213,
  1, 105, :_reduce_214,
  1, 107, :_reduce_215,
  2, 107, :_reduce_216,
  1, 178, :_reduce_217,
  1, 178, :_reduce_none,
  0, 166, :_reduce_219,
  1, 166, :_reduce_none,
  1, 179, :_reduce_none,
  2, 179, :_reduce_none,
  1, 116, :_reduce_223 ]

racc_reduce_n = 224

racc_shift_n = 393

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kBLOCK_GIVEN => 30,
  :kYIELD => 31,
  :kDTYPE_UINT => 32,
  :kDTYPE_LINT => 33,
  :kDTYPE_LLINT => 34,
  :kDTYPE_CHAR => 35,
  :kDTYPE_I8 => 36,
  :kDTYPE_I16 => 37,
  :kDTYPE_I32 => 38,
  :kDTYPE_I64 => 39,
  :kDTYPE_UI8 => 40,
  :kDTYPE_UI16 => 41,
  :kDTYPE_UI32 => 42,
  :kDTYPE_UI64 => 43,
  :kDTYPE_INT => 44,
  :kDTYPE_F32 => 45,
  :kDTYPE_F64 => 46,
  :kDTYPE_LF64 => 47,
  :kDTYPE_ROBJ => 48,
  :kDTYPE_ULINT => 49,
  :kDTYPE_ULLINT => 50,
  :kDTYPE_VOID => 51,
  :kDTYPE_SIZE_T => 52,
  :kDTYPE_RB_STR => 53,
  :kDTYPE_UCHAR => 54,
  :tCUSTOM_DTYPE => 55,
  :tLPAREN => 56,
  :tRPAREN => 57,
  :tLSQUARE => 58,
  :tRSQUARE => 59,
  :tIDENTIFIER => 60,
  :tNL => 61,
  :tCOMMA => 62,
  :tSQUOTE => 63,
  :tSCOLON => 64,
  :EOF => 65,
  :tDOT => 66,
  :tQMARK => 67,
  :tSYMBOL => 68,
  :tLBRACE => 69,
  :tRBRACE => 70,
  :tPLUS => 71,
  :tMINUS => 72,
  :tSTAR => 73,
  :tDIVIDE => 74,
  :tEXPO => 75,
  :tMODULUS => 76,
  :tASSIGN => 77,
  :tEQ => 78,
  :tLT => 79,
  :tLTEQ => 80,
  :tGT => 81,
  :tGTEQ => 82,
  :tANDOP => 83,
  :tOROP => 84,
  :tBANG => 85,
  :tOP_ASSIGN => 86,
  :tSTRING => 87,
  :kSIZEOF => 88,
  :tBIT_AND => 89,
  :tBIT_OR => 90,
  :tBIT_XOR => 91,
  :tBIT_LSHIFT => 92,
  :tBIT_RSHIFT => 93,
  :tBIT_NOT => 94,
  :tINTEGER => 95,
  :tFLOAT => 96,
  :tSINGLE_CHAR => 97,
  :ADDRESS_OF => 98,
  :TYPECAST => 99,
  :UMINUS => 100,
  :tNEQ => 101 }

racc_nt_base = 102

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_71(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_72(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_73(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_74(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_75(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_76(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_78(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_79(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_86(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_88(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_89(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_90(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_91(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_92(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_95(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_96(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_99(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_100(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_101(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_102(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_103(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_104(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_105(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_106(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_107(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 452)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_121(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_122(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_124(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_127(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 476)
  def _reduce_128(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_129(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 482)
  def _reduce_130(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_131(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 492)
  def _reduce_132(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 504)
  def _reduce_133(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 516)
  def _reduce_134(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_135(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_136(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_137(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_140(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_141(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_143(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_156(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_157(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_158(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_168(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 570)
  def _reduce_170(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_172(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 583)
  def _reduce_173(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_174(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_175(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_176(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_177(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_178(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_179(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_180(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_181(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_182(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_206(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_207(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_209(val, _values, result)
    
    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_211(val, _values, result)
    
    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_213(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 640)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_215(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 644)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 647)
  def _reduce_217(val, _values, result)
    
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_219(val, _values, result)
    
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'parser.racc', 659)
  def _reduce_223(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
