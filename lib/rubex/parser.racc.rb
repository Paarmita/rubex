#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 464)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ElementRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'93,94,96,209,219,209,203,97,98,17,135,113,114,115,88,134,83,75,156,157',
'275,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121',
'156,157,66,106,66,73,226,24,163,191,163,116,164,119,192,156,157,75,156',
'157,162,74,156,157,156,157,122,166,112,160,15,93,94,96,120,109,110,111',
'97,98,156,157,113,114,115,88,12,83,25,11,10,16,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,121,15,26,15,106,163,21,164,274',
'22,156,157,116,207,119,162,164,12,28,12,51,10,16,10,16,73,276,122,56',
'112,57,277,93,94,96,120,109,110,111,97,98,74,58,113,114,115,88,21,83',
'21,22,60,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,121,15,195,164,106,21,21,21,22,22,22,162,116,21,119,21,22,12,22,61',
'160,10,16,21,63,301,22,122,302,112,156,157,93,94,96,120,109,110,111',
'97,98,156,157,113,114,115,88,64,83,21,156,157,22,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,121,15,156,157,106,168,169,170',
'171,172,173,66,116,67,119,156,157,12,283,284,11,10,16,175,176,214,215',
'122,66,112,216,217,93,94,96,120,109,110,111,97,98,156,157,113,114,115',
'88,66,83,170,171,172,173,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,121,283,284,72,106,168,169,170,171,172,173,75,116,72',
'119,168,169,170,171,172,173,132,174,175,176,177,178,122,136,112,156',
'157,93,94,96,120,109,110,111,97,98,63,139,113,114,115,88,140,83,170',
'171,172,173,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,121,143,158,63,106,168,169,170,171,172,173,165,116,193,119,168,169',
'170,171,172,173,194,174,175,176,177,178,122,198,112,199,58,93,94,96',
'120,109,110,111,97,98,163,207,113,114,115,88,211,83,231,172,256,66,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,265,164',
'143,106,168,169,170,171,172,173,269,116,270,119,156,272,273,166,172',
'172,172,174,175,176,177,178,122,172,112,278,279,93,94,96,120,109,110',
'111,97,98,203,285,113,114,115,88,288,83,226,293,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,121,,,,106,,,,,113,114,115',
'116,,119,168,169,170,171,172,173,,,,,,,122,,112,,,174,175,176,120,109',
'110,111,121,,,,147,,,,,113,114,115,116,,119,168,169,170,171,172,173',
',,,,,,122,,112,,,174,175,176,120,109,110,111,121,,,,147,,,,,113,114',
'115,116,,119,,,,,,113,114,115,,,,,122,,112,,,,,,120,109,110,111,121',
',,,147,,,,,,,154,116,,119,147,,,,,113,114,115,116,,119,,122,,112,,113',
'114,115,,120,109,110,111,,112,,,,,,120,109,110,111,121,,,,147,,,,,,',
'154,116,,119,147,,,,,113,114,115,116,,119,,122,,112,,,,,,120,109,110',
'111,,112,,,,,,120,109,110,111,154,,,,147,,,,,113,114,115,116,,119,,',
',,,113,114,115,,,113,114,115,,112,,,,,,120,109,110,111,121,,,,147,,',
',,,,154,116,,119,147,121,,,,147,,,116,,119,,122,116,112,119,113,114',
'115,,120,109,110,111,,112,,,122,,112,120,109,110,111,,120,109,110,111',
',,,,,,121,,,,147,,,,,113,114,115,116,,119,,,,,,,,,,,,,122,,112,,,,,',
'120,109,110,111,121,,,,147,,,,,113,114,115,116,,119,,,,,,,,,,,,,122',
',112,,,,,,120,109,110,111,121,,,,147,,,,,113,114,115,116,,119,,,,,,',
',,,,,,122,,112,,,,,,120,109,110,111,121,,,,147,,,,,113,114,115,116,',
'119,,,,,,,,,,,,,122,,112,,,,,,120,109,110,111,121,,,,147,,,,,113,114',
'115,116,,119,,,,,,,,,,,,,122,,112,,,,,,120,109,110,111,121,,,,147,,',
',,113,114,115,116,,119,,,,,,,,,,,,,122,,112,,,,,,120,109,110,111,121',
',,,147,,,,,113,114,115,116,,119,,,,,,,,,,,,,122,,112,,,,,,120,109,110',
'111,121,,,,147,,,,,113,114,115,116,,119,,,,,,113,114,115,,,,,122,,112',
',,,,,120,109,110,111,121,,,,147,,,,,,,154,116,,119,147,,,,,113,114,115',
'116,,119,,122,,112,,113,114,115,,120,109,110,111,,112,,,,,,120,109,110',
'111,154,,,,147,,,,,,,154,116,,119,147,,,,,113,114,115,116,,119,,,,112',
',113,114,115,,120,109,110,111,,112,,,,,,120,109,110,111,154,,,,147,',
',,,,,154,116,,119,147,,,,,113,114,115,116,,119,,,,112,,113,114,115,',
'120,109,110,111,,112,,,,,,120,109,110,111,154,,,,147,,,,,,,154,116,',
'119,147,,,,,113,114,115,116,,119,,,,112,,113,114,115,,120,109,110,111',
',112,,,,,,120,109,110,111,154,,,,147,,,,,,,154,116,,119,147,,,,,113',
'114,115,116,,119,,,,112,,113,114,115,,120,109,110,111,,112,,,,,,120',
'109,110,111,154,,,,147,,,,,,,154,116,,119,147,,,,,113,114,115,116,,119',
',,,112,,113,114,115,,120,109,110,111,,112,,,,,,120,109,110,111,154,',
',,147,,,,,,,154,116,,119,147,,,,,113,114,115,116,,119,,,,112,,113,114',
'115,,120,109,110,111,,112,,,,,,120,109,110,111,154,,,,147,,,,,,,154',
'116,,119,147,,,,,113,114,115,116,,119,,,,112,,113,114,115,,120,109,110',
'111,,112,,,,,,120,109,110,111,154,,,,147,,,,,,,154,116,,119,147,,,,',
'113,114,115,116,,119,,,,112,,,,,,120,109,110,111,,112,,,,,,120,109,110',
'111,121,,,,147,,,,,113,114,115,116,,119,,,,,,,,,,,,,122,,112,,,,,,120',
'109,110,111,121,,291,,147,,,,,113,114,115,116,,119,,,,,,113,114,115',
',,,,122,,112,,,,,,120,109,110,111,121,,,,147,,,,,,,154,116,,119,147',
',,,,113,114,115,116,,119,,122,,112,,,,,,120,109,110,111,,112,,,,,,120',
'109,110,111,154,,,,147,,,,,113,114,115,116,,119,,,,,,,,,,,113,114,115',
',112,,,255,,,120,109,110,111,121,,,,147,168,169,170,171,172,173,,116',
',119,,121,,,,147,,174,175,176,177,178,122,116,112,119,,,196,,120,109',
'110,111,,,,,122,,112,,,12,,83,120,109,110,111,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,255,,,,,21,,,22,,,,168,169,170,171',
'172,173,,179,181,182,183,184,,,,,,174,175,176,177,178,,,,,,180,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,,,,,,21,,,22,168',
'169,170,171,172,173,,179,181,182,183,184,,,,,,174,175,176,177,178,,',
',,,180,168,169,170,171,172,173,,179,181,182,183,184,,,,,,174,175,176',
'177,178,12,,83,,,180,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,264,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,,,,,128,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,,,,,128,168,169,170,171,172,173,,,214,215,216,217,,,,,,174,175,176',
'177,178,168,169,170,171,172,173,168,169,170,171,172,173,,,,,,174,175',
'176,177,178,,174,175,176,177,178,168,169,170,171,172,173,168,169,170',
'171,172,173,,,,,,174,175,176,177,178,,174,175,176,177,178,168,169,170',
'171,172,173,,,,,,,,,,,,174,175,176,177,178,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50' ]
        racc_action_table = arr = ::Array.new(2276, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'70,70,70,151,155,294,138,70,70,1,83,70,70,70,70,83,70,138,103,103,235',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,235,235',
'151,70,294,60,159,10,108,125,106,70,106,70,125,144,144,159,155,155,106',
'60,151,151,294,294,70,108,70,106,19,76,76,76,70,70,70,70,76,76,150,150',
'76,76,76,76,19,76,11,19,19,19,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,76,76,76,23,12,65,76,147,19,147,234,19,206,206,76,234',
'76,147,231,23,15,65,17,23,23,65,65,231,259,76,24,76,25,259,142,142,142',
'76,76,76,76,142,142,231,26,142,142,142,142,2,142,23,2,27,23,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,130,130,226,142,142,5,77,142,5,77,226,142,78,142,85,78,130,85',
'28,226,130,130,90,29,298,90,142,298,142,222,222,208,208,208,142,142',
'142,142,208,208,230,230,208,208,208,208,30,208,130,236,236,130,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
'208,208,0,237,237,208,244,244,244,244,244,244,55,208,56,208,266,266',
'0,267,267,0,0,0,244,244,269,269,208,57,208,270,270,211,211,211,208,208',
'208,208,211,211,299,299,211,211,211,211,58,211,238,238,238,238,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,303,303,59,211,249,249,249,249,249,249,62,211,64,211,245,245',
'245,245,245,245,80,249,249,249,249,249,211,84,211,304,304,219,219,219',
'211,211,211,211,219,219,87,88,219,219,219,219,89,219,239,239,239,239',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,91,104,105,219,250,250,250,250,250,250,107,219,127,219',
'246,246,246,246,246,246,129,250,250,250,250,250,219,132,219,133,139',
'284,284,284,219,219,219,219,284,284,148,149,284,284,284,284,152,284',
'162,185,188,191,284,284,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,201,203,205,284,251,251,251,251,251',
'251,212,284,213,284,221,223,227,229,240,241,242,251,251,251,251,251',
'284,243,284,260,264,300,300,300,284,284,284,284,300,300,265,268,300',
'300,300,300,271,300,272,281,,,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,,,,300,,,,,93,93,93,300',
',300,247,247,247,247,247,247,,,,,,,300,,300,,,247,247,247,300,300,300',
'300,93,,,,93,,,,,94,94,94,93,,93,248,248,248,248,248,248,,,,,,,93,,93',
',,248,248,248,93,93,93,93,94,,,,94,,,,,96,96,96,94,,94,,,,,,97,97,97',
',,,,94,,94,,,,,,94,94,94,94,96,,,,96,,,,,,,97,96,,96,97,,,,,98,98,98',
'97,,97,,96,,96,,119,119,119,,96,96,96,96,,97,,,,,,97,97,97,97,98,,,',
'98,,,,,,,119,98,,98,119,,,,,120,120,120,119,,119,,98,,98,,,,,,98,98',
'98,98,,119,,,,,,119,119,119,119,120,,,,120,,,,,121,121,121,120,,120',
',,,,,154,154,154,,,122,122,122,,120,,,,,,120,120,120,120,121,,,,121',
',,,,,,154,121,,121,154,122,,,,122,,,154,,154,,121,122,121,122,143,143',
'143,,121,121,121,121,,154,,,122,,122,154,154,154,154,,122,122,122,122',
',,,,,,143,,,,143,,,,,156,156,156,143,,143,,,,,,,,,,,,,143,,143,,,,,',
'143,143,143,143,156,,,,156,,,,,157,157,157,156,,156,,,,,,,,,,,,,156',
',156,,,,,,156,156,156,156,157,,,,157,,,,,158,158,158,157,,157,,,,,,',
',,,,,,157,,157,,,,,,157,157,157,157,158,,,,158,,,,,160,160,160,158,',
'158,,,,,,,,,,,,,158,,158,,,,,,158,158,158,158,160,,,,160,,,,,163,163',
'163,160,,160,,,,,,,,,,,,,160,,160,,,,,,160,160,160,160,163,,,,163,,',
',,164,164,164,163,,163,,,,,,,,,,,,,163,,163,,,,,,163,163,163,163,164',
',,,164,,,,,165,165,165,164,,164,,,,,,,,,,,,,164,,164,,,,,,164,164,164',
'164,165,,,,165,,,,,166,166,166,165,,165,,,,,,168,168,168,,,,,165,,165',
',,,,,165,165,165,165,166,,,,166,,,,,,,168,166,,166,168,,,,,169,169,169',
'168,,168,,166,,166,,170,170,170,,166,166,166,166,,168,,,,,,168,168,168',
'168,169,,,,169,,,,,,,170,169,,169,170,,,,,171,171,171,170,,170,,,,169',
',172,172,172,,169,169,169,169,,170,,,,,,170,170,170,170,171,,,,171,',
',,,,,172,171,,171,172,,,,,173,173,173,172,,172,,,,171,,174,174,174,',
'171,171,171,171,,172,,,,,,172,172,172,172,173,,,,173,,,,,,,174,173,',
'173,174,,,,,175,175,175,174,,174,,,,173,,176,176,176,,173,173,173,173',
',174,,,,,,174,174,174,174,175,,,,175,,,,,,,176,175,,175,176,,,,,177',
'177,177,176,,176,,,,175,,178,178,178,,175,175,175,175,,176,,,,,,176',
'176,176,176,177,,,,177,,,,,,,178,177,,177,178,,,,,179,179,179,178,,178',
',,,177,,180,180,180,,177,177,177,177,,178,,,,,,178,178,178,178,179,',
',,179,,,,,,,180,179,,179,180,,,,,181,181,181,180,,180,,,,179,,182,182',
'182,,179,179,179,179,,180,,,,,,180,180,180,180,181,,,,181,,,,,,,182',
'181,,181,182,,,,,183,183,183,182,,182,,,,181,,184,184,184,,181,181,181',
'181,,182,,,,,,182,182,182,182,183,,,,183,,,,,,,184,183,,183,184,,,,',
'207,207,207,184,,184,,,,183,,,,,,183,183,183,183,,184,,,,,,184,184,184',
'184,207,,,,207,,,,,273,273,273,207,,207,,,,,,,,,,,,,207,,207,,,,,,207',
'207,207,207,273,,273,,273,,,,,283,283,283,273,,273,,,,,,286,286,286',
',,,,273,,273,,,,,,273,273,273,273,283,,,,283,,,,,,,286,283,,283,286',
',,,,287,287,287,286,,286,,283,,283,,,,,,283,283,283,283,,286,,,,,,286',
'286,286,286,287,,,,287,,,,,291,291,291,287,,287,,,,,,,,,,,302,302,302',
',287,,,218,,,287,287,287,287,291,,,,291,218,218,218,218,218,218,,291',
',291,,302,,,,302,,218,218,218,218,218,291,302,291,302,,,131,,291,291',
'291,291,,,,,302,,302,,,131,,131,302,302,302,302,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,187,,,,',
'131,,,131,,,,187,187,187,187,187,187,,187,187,187,187,187,,,,,,187,187',
'187,187,187,,,,,,187,137,137,137,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,,,,,,137,,,137,117,117,117,117,117,117',
',117,117,117,117,117,,,,,,117,117,117,117,117,,,,,,117,189,189,189,189',
'189,189,,189,189,189,189,189,,,,,,189,189,189,189,189,68,,68,,,189,',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,199,,,,',
',,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,,,,,72,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,,,,,192,153,153,153,153,153,153,,,153,153,153,153',
',,,,,153,153,153,153,153,252,252,252,252,252,252,253,253,253,253,253',
'253,,,,,,252,252,252,252,252,,253,253,253,253,253,254,254,254,254,254',
'254,296,296,296,296,296,296,,,,,,254,254,254,254,254,,296,296,296,296',
'296,297,297,297,297,297,297,,,,,,,,,,,,297,297,297,297,297,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277' ]
        racc_action_check = arr = ::Array.new(2276, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   259,     9,   111,   nil,   nil,   143,   nil,   nil,   nil,   nil,
     0,    16,    67,   nil,   nil,   108,  2171,   134,   nil,    70,
   nil,   nil,   nil,   113,    76,   130,   142,   116,   151,   151,
   185,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   221,   224,   238,   257,   291,
    -9,   nil,   284,   nil,   301,   115,   nil,   nil,  1974,  2191,
    -4,   nil,  2021,   nil,   nil,   nil,    69,   144,   150,   nil,
   305,   nil,   nil,   -34,   358,   152,   nil,   314,   326,   377,
   160,   401,   nil,   546,   585,   nil,   624,   635,   674,   nil,
   nil,   nil,   nil,   -52,   335,   349,     7,   353,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1884,   nil,   685,
   724,   763,   779,   nil,   nil,     5,   nil,   370,   nil,   424,
   186,  1828,   389,   372,   nil,   nil,   nil,  1888,   -43,   423,
   nil,   nil,   142,   824,   -13,   nil,   nil,    74,   402,   397,
    12,    -6,   439,  2038,   774,   -10,   863,   902,   941,    -1,
   980,   nil,   406,  1019,  1058,  1097,  1136,   nil,  1147,  1186,
  1197,  1236,  1247,  1286,  1297,  1336,  1347,  1386,  1397,  1436,
  1447,  1486,  1497,  1536,  1547,   394,   nil,  1827,   411,  1912,
   nil,   408,  2046,   nil,   nil,   nil,   nil,   nil,  2211,  2001,
   nil,   429,   nil,   434,   nil,   476,    54,  1586,   215,   nil,
   nil,   288,   441,   443,   nil,   nil,   nil,   nil,  1745,   361,
   nil,   424,   147,   444,   nil,   nil,   143,   432,   nil,   433,
   158,    83,   nil,   nil,    76,   -28,   167,   192,   249,   322,
   436,   437,   438,   445,   207,   290,   363,   509,   548,   280,
   353,   426,  2060,  2066,  2088,   nil,   nil,   nil,   nil,    94,
   460,   nil,   nil,   nil,   461,   471,   205,   271,   518,   219,
   222,   523,   479,  1625,   nil,   nil,   nil,  2231,   nil,   nil,
   nil,   526,   nil,  1664,   434,   nil,  1675,  1714,   nil,   nil,
   nil,  1753,   nil,   nil,    -4,   nil,  2094,  2116,   164,   231,
   507,   nil,  1769,   327,   293,   nil ]

racc_action_default = [
    -6,  -181,  -174,    -2,    -4,  -181,    -7,    -9,   -10,   -11,
  -181,  -181,  -181,   -33,   -34,   -36,  -181,  -181,    -1,  -175,
  -176,  -178,  -179,    -5,   -13,  -181,  -181,  -181,  -181,   -78,
  -181,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,
  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,
  -173,   306,    -3,  -177,    -8,  -181,  -181,  -181,  -181,  -106,
  -105,   -37,   -29,   -79,  -106,    -6,  -180,   -14,  -181,   -58,
   -40,  -107,  -181,  -103,  -104,   -80,   -40,  -181,  -181,   -16,
  -181,   -19,   -20,  -181,  -181,  -181,   -59,   -78,  -181,  -181,
  -174,   -41,   -43,  -181,  -150,   -46,  -181,  -181,  -181,   -51,
   -52,   -53,   -54,   -55,  -131,   -78,  -148,  -141,  -148,   -95,
   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -113,  -114,  -181,
  -181,  -181,  -181,  -142,  -144,  -181,  -109,  -181,  -112,  -181,
  -181,  -181,  -181,  -181,   -23,   -24,   -21,   -57,  -181,   -56,
   -35,   -39,  -175,  -181,   -44,  -131,  -141,  -148,  -148,   -45,
  -151,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -143,  -181,  -150,  -181,  -181,  -181,  -145,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -128,  -129,  -181,  -181,  -139,
  -140,  -181,  -181,  -111,   -38,   -12,   -15,   -17,   -30,  -181,
   -60,   -61,   -62,   -85,   -86,   -42,   -48,  -181,   -40,   -71,
   -72,   -40,  -181,  -181,   -67,   -68,   -69,   -70,  -181,   -40,
  -115,  -116,   -64,   -77,   -83,   -84,   -85,   -86,   -87,  -181,
   -92,  -105,  -146,  -147,  -181,  -181,   -93,   -94,  -117,  -118,
  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -132,
  -133,  -134,  -135,  -136,  -137,  -130,  -138,  -108,  -110,  -181,
   -27,   -31,   -22,   -25,  -181,  -181,  -152,   -73,  -181,  -181,
  -181,  -181,  -181,  -181,  -149,  -153,   -18,  -181,   -28,   -26,
   -63,  -181,   -74,  -181,   -40,   -49,  -181,  -181,   -50,   -81,
   -82,   -89,   -32,   -47,  -181,   -76,   -65,   -66,  -181,   -90,
   -40,   -88,  -181,   -73,   -91,   -75 ]

racc_goto_table = [
    30,    29,    89,   104,   107,   208,     9,   126,   129,   104,
   107,    65,   202,    68,    69,   144,   150,   108,   151,    59,
   155,   213,   228,   108,    54,     9,    18,    19,   261,     9,
    23,   149,    62,   224,    79,    82,    86,   167,    53,     3,
     1,   212,    53,    70,     2,   281,   225,    77,    76,   188,
   190,    55,    78,    29,    87,   259,    84,   127,    52,   133,
   262,    27,   205,   152,    85,   206,   201,   223,   298,   125,
   nil,     9,   204,   nil,    81,   104,   107,   167,   220,   221,
   222,   305,   230,   nil,   nil,   150,   235,   236,   237,   108,
   138,   nil,   nil,   227,   nil,   nil,   233,   197,    82,   nil,
   234,   nil,   130,   131,   200,   nil,   229,   292,   159,   nil,
   137,   nil,   nil,   nil,   141,   142,    29,   nil,   nil,   nil,
   nil,   nil,    87,   nil,   nil,   nil,   nil,   258,   nil,   266,
   nil,    54,   nil,   nil,   nil,   228,     9,    81,   287,   280,
   267,   104,   107,   268,   104,   107,   290,   257,   300,    53,
    53,   271,   104,   107,   232,   108,    53,   286,   108,   289,
   nil,    53,   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,
   nil,   nil,   260,    29,   263,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   236,   nil,   nil,   153,   204,
   nil,   nil,   nil,   nil,   nil,   294,   227,   nil,   nil,   nil,
   nil,   nil,   nil,   299,   nil,   nil,   295,   104,   107,   229,
   185,   186,   187,   189,   304,   nil,   nil,   nil,   nil,   nil,
   nil,   108,   303,   104,   107,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   nil,
   nil,   260,    29,   nil,   nil,   nil,   nil,   nil,   nil,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   296,   297 ]

racc_goto_check = [
    16,    22,    30,    46,    53,    37,    11,    59,    30,    46,
    53,    13,    45,    13,    13,    34,    34,    55,    34,    28,
    34,    49,    36,    55,     8,    11,     3,     5,    23,    11,
     5,    35,    24,    45,    15,    18,    43,    61,    63,     4,
     1,    48,    63,    29,     2,    38,    52,     7,    29,    60,
    60,    12,    14,    22,    22,    17,    19,    22,     4,    20,
    21,    27,    32,    39,    42,    34,    44,    51,    54,    58,
   nil,    11,    53,   nil,    11,    46,    53,    61,    34,    34,
    34,    38,    34,   nil,   nil,    34,    34,    34,    34,    55,
    24,   nil,   nil,    53,   nil,   nil,    53,    15,    18,   nil,
    35,   nil,     5,     5,    43,   nil,    55,    23,    24,   nil,
     5,   nil,   nil,   nil,     3,     5,    22,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,    59,   nil,    34,
   nil,     8,   nil,   nil,   nil,    36,    11,    11,    49,    45,
    30,    46,    53,    30,    46,    53,    45,    13,    37,    63,
    63,    30,    46,    53,    28,    55,    63,    48,    55,    52,
   nil,    63,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,    16,    22,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,    47,    53,
   nil,   nil,   nil,   nil,   nil,    34,    53,   nil,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,    30,    46,    53,    55,
    47,    47,    47,    47,    34,   nil,   nil,   nil,   nil,   nil,
   nil,    55,    30,    46,    53,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,
   nil,    16,    22,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    47 ]

racc_goto_pointer = [
   nil,    40,    44,    24,    39,    25,   nil,   -18,     1,   nil,
   nil,     6,    27,   -44,   -16,   -34,   -16,  -143,   -33,   -13,
   -24,  -139,   -15,  -170,     3,   nil,   nil,    46,    -8,   -16,
   -68,   nil,   -80,   nil,   -78,   -63,  -137,  -146,  -222,   -34,
   nil,   nil,    -5,   -33,   -72,  -126,   -67,   101,  -112,  -132,
   nil,   -92,  -113,   -66,  -223,   -53,   nil,   nil,    -3,   -65,
   -72,   -71,   nil,    19 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   100,   nil,   210,   nil,   nil,    80,   nil,   102,   nil,
   nil,   nil,   105,   nil,   nil,    13,    14,   nil,   nil,   nil,
   nil,    90,    91,    92,   103,   nil,    95,   nil,   nil,   nil,
    99,   101,   nil,   nil,   nil,   nil,   145,   117,   nil,   nil,
   282,   nil,   nil,   146,   nil,   148,   123,    71,   nil,   nil,
   118,   161,   124,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 87, :_reduce_1,
  1, 88, :_reduce_2,
  3, 88, :_reduce_3,
  1, 90, :_reduce_4,
  2, 90, :_reduce_5,
  0, 93, :_reduce_6,
  1, 93, :_reduce_7,
  3, 93, :_reduce_8,
  1, 94, :_reduce_9,
  1, 94, :_reduce_10,
  1, 94, :_reduce_11,
  7, 96, :_reduce_12,
  0, 98, :_reduce_13,
  2, 98, :_reduce_14,
  7, 92, :_reduce_15,
  1, 100, :_reduce_16,
  3, 100, :_reduce_17,
  5, 101, :_reduce_18,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  6, 97, :_reduce_21,
  4, 104, :_reduce_22,
  1, 106, :_reduce_none,
  1, 106, :_reduce_24,
  1, 107, :_reduce_none,
  2, 107, :_reduce_26,
  1, 109, :_reduce_27,
  2, 109, :_reduce_28,
  2, 102, :_reduce_29,
  0, 103, :_reduce_30,
  1, 103, :_reduce_31,
  3, 103, :_reduce_32,
  1, 95, :_reduce_33,
  1, 95, :_reduce_34,
  6, 111, :_reduce_35,
  0, 113, :_reduce_36,
  2, 113, :_reduce_37,
  6, 112, :_reduce_38,
  2, 116, :_reduce_39,
  0, 117, :_reduce_40,
  1, 117, :_reduce_41,
  3, 117, :_reduce_42,
  1, 118, :_reduce_43,
  2, 118, :_reduce_44,
  2, 118, :_reduce_45,
  1, 118, :_reduce_46,
  6, 118, :_reduce_47,
  3, 118, :_reduce_48,
  5, 118, :_reduce_49,
  5, 118, :_reduce_50,
  1, 118, :_reduce_51,
  1, 118, :_reduce_none,
  1, 118, :_reduce_53,
  1, 118, :_reduce_none,
  1, 118, :_reduce_55,
  2, 127, :_reduce_56,
  2, 105, :_reduce_57,
  0, 128, :_reduce_58,
  1, 128, :_reduce_59,
  3, 128, :_reduce_60,
  3, 129, :_reduce_61,
  1, 130, :_reduce_62,
  3, 130, :_reduce_63,
  3, 126, :_reduce_64,
  5, 125, :_reduce_65,
  5, 125, :_reduce_66,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  0, 124, :_reduce_73,
  1, 124, :_reduce_74,
  5, 124, :_reduce_75,
  2, 136, :_reduce_76,
  3, 119, :_reduce_77,
  0, 110, :_reduce_78,
  1, 110, :_reduce_79,
  2, 110, :_reduce_80,
  3, 137, :_reduce_81,
  3, 137, :_reduce_82,
  1, 137, :_reduce_83,
  1, 137, :_reduce_84,
  1, 131, :_reduce_85,
  1, 131, :_reduce_86,
  1, 138, :_reduce_none,
  5, 138, :_reduce_88,
  0, 140, :_reduce_89,
  1, 140, :_reduce_90,
  3, 140, :_reduce_91,
  3, 122, :_reduce_92,
  3, 122, :_reduce_93,
  3, 122, :_reduce_94,
  1, 142, :_reduce_95,
  1, 142, :_reduce_96,
  1, 142, :_reduce_97,
  1, 142, :_reduce_98,
  1, 142, :_reduce_99,
  1, 142, :_reduce_100,
  1, 142, :_reduce_101,
  1, 142, :_reduce_102,
  2, 114, :_reduce_103,
  2, 114, :_reduce_104,
  1, 114, :_reduce_105,
  0, 115, :_reduce_106,
  1, 115, :_reduce_none,
  4, 143, :_reduce_108,
  1, 144, :_reduce_109,
  3, 144, :_reduce_110,
  2, 145, :_reduce_111,
  1, 145, :_reduce_112,
  1, 120, :_reduce_113,
  1, 120, :_reduce_114,
  3, 120, :_reduce_115,
  3, 120, :_reduce_116,
  3, 133, :_reduce_117,
  3, 133, :_reduce_118,
  3, 133, :_reduce_119,
  3, 133, :_reduce_120,
  3, 133, :_reduce_121,
  3, 133, :_reduce_122,
  3, 133, :_reduce_123,
  3, 133, :_reduce_124,
  3, 133, :_reduce_125,
  3, 133, :_reduce_126,
  3, 133, :_reduce_127,
  2, 133, :_reduce_128,
  2, 133, :_reduce_129,
  3, 133, :_reduce_130,
  1, 133, :_reduce_131,
  3, 146, :_reduce_132,
  3, 146, :_reduce_133,
  3, 146, :_reduce_134,
  3, 146, :_reduce_135,
  3, 146, :_reduce_136,
  3, 146, :_reduce_137,
  3, 146, :_reduce_138,
  2, 146, :_reduce_139,
  2, 146, :_reduce_140,
  1, 132, :_reduce_141,
  1, 132, :_reduce_142,
  2, 132, :_reduce_143,
  1, 132, :_reduce_none,
  2, 148, :_reduce_145,
  3, 141, :_reduce_146,
  3, 141, :_reduce_147,
  0, 147, :_reduce_148,
  3, 147, :_reduce_149,
  0, 121, :_reduce_150,
  1, 121, :_reduce_151,
  3, 121, :_reduce_152,
  4, 139, :_reduce_153,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_173,
  0, 89, :_reduce_174,
  1, 89, :_reduce_175,
  1, 91, :_reduce_176,
  2, 91, :_reduce_177,
  1, 149, :_reduce_178,
  1, 149, :_reduce_none,
  1, 99, :_reduce_180 ]

racc_reduce_n = 181

racc_shift_n = 306

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kDTYPE_UINT => 25,
  :kDTYPE_LINT => 26,
  :kDTYPE_LLINT => 27,
  :kDTYPE_CHAR => 28,
  :kDTYPE_I8 => 29,
  :kDTYPE_I16 => 30,
  :kDTYPE_I32 => 31,
  :kDTYPE_I64 => 32,
  :kDTYPE_UI8 => 33,
  :kDTYPE_UI16 => 34,
  :kDTYPE_UI32 => 35,
  :kDTYPE_UI64 => 36,
  :kDTYPE_INT => 37,
  :kDTYPE_F32 => 38,
  :kDTYPE_F64 => 39,
  :kDTYPE_LF64 => 40,
  :kDTYPE_ROBJ => 41,
  :kDTYPE_ULINT => 42,
  :kDTYPE_ULLINT => 43,
  :tCUSTOM_DTYPE => 44,
  :tLPAREN => 45,
  :tRPAREN => 46,
  :tLSQUARE => 47,
  :tRSQUARE => 48,
  :tIDENTIFIER => 49,
  :tNL => 50,
  :tCOMMA => 51,
  :tSQUOTE => 52,
  :tSCOLON => 53,
  :EOF => 54,
  :tDOT => 55,
  :tQMARK => 56,
  :tSYMBOL => 57,
  :tPLUS => 58,
  :tMINUS => 59,
  :tSTAR => 60,
  :tDIVIDE => 61,
  :tEXPO => 62,
  :tMODULUS => 63,
  :tASSIGN => 64,
  :tEQ => 65,
  :tLT => 66,
  :tLTEQ => 67,
  :tGT => 68,
  :tGTEQ => 69,
  :tANDOP => 70,
  :tOROP => 71,
  :tBANG => 72,
  :tOP_ASSIGN => 73,
  :tSTRING => 74,
  :tBIT_AND => 75,
  :tBIT_OR => 76,
  :tBIT_XOR => 77,
  :tBIT_LSHIFT => 78,
  :tBIT_RSHIFT => 79,
  :tBIT_NOT => 80,
  :tINTEGER => 81,
  :tFLOAT => 82,
  :tSINGLE_CHAR => 83,
  :UMINUS => 84,
  :tNEQ => 85 }

racc_nt_base = 86

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "opt_c_func_arg_list",
  "alias_stmt",
  "var_decl_stmts",
  "ident_or_custom_dtype",
  "aliased_type",
  "dtype",
  "c_func_normal_arg",
  "opt_star",
  "ruby_method",
  "c_method",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_14(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_15(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_17(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_18(val, _values, result)
            result = Statement::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_22(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_26(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_27(val, _values, result)
     result = val[0]  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_29(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_31(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_32(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_35(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_36(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_37(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_38(val, _values, result)
            result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_39(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_40(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_41(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_42(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_43(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_44(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_45(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_46(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_47(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_48(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_49(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_50(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_51(val, _values, result)
    
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_53(val, _values, result)
    
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_55(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_56(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_57(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_58(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_60(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_61(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_63(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_64(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_65(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_66(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_73(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_74(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_75(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_76(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_77(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_78(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_79(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_80(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_81(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_82(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_83(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_84(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_85(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_86(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_88(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_89(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_90(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_91(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_92(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_93(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_94(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_95(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_96(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_97(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_98(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_99(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_100(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_101(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_102(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_103(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_104(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_108(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_109(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_110(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_111(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_112(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_113(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 350)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_116(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_117(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_118(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_125(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_126(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_127(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_128(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_129(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_131(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_132(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_133(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_134(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 375)
  def _reduce_135(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 376)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_139(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_140(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_141(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_143(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 400)
  def _reduce_145(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_146(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 412)
  def _reduce_147(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_148(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_149(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_150(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_151(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_152(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 428)
  def _reduce_153(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_173(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_174(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_175(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_176(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_177(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_178(val, _values, result)
    
    result
  end
.,.,

# reduce 179 omitted

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_180(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
