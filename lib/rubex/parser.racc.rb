#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 684)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  elsif match == "yield"
    return [:kYIELD, match]
  elsif match == "bool"
    return [:kDTYPE_BOOL, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'113,114,116,269,280,269,61,117,118,93,70,137,138,139,13,70,83,22,196',
'197,23,141,127,94,124,125,157,126,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,150,69,142,67,130,67,287,62,383',
'208,102,209,140,143,245,101,331,151,321,246,18,330,196,197,146,94,196',
'197,196,197,149,206,136,156,152,16,113,114,116,153,133,134,135,117,118',
'196,197,137,138,139,13,13,83,25,12,11,17,141,127,26,124,125,157,126',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,150,209,142,208,130,22,22,16,23,23,90,341,140,143,94,22,340,151',
'23,202,354,27,361,13,146,211,12,11,17,91,149,360,136,156,152,16,113',
'114,116,153,133,134,135,117,118,196,197,137,138,139,13,13,83,29,341',
'11,17,141,127,340,124,125,157,126,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,150,202,142,341,130,16,22,16',
'340,23,90,353,140,143,56,22,340,151,23,196,197,13,201,13,146,11,17,11',
'17,91,149,169,136,156,152,16,113,114,116,153,133,134,135,117,118,94',
'65,137,138,139,13,13,83,196,197,11,17,141,127,67,124,125,157,126,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'55,150,174,142,174,130,176,22,176,366,23,71,176,140,143,393,22,67,151',
'23,94,22,94,75,23,146,94,94,208,94,209,149,84,136,156,152,89,113,114',
'116,153,133,134,135,117,118,196,197,137,138,139,13,22,83,22,23,92,23',
'141,127,62,124,125,157,126,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,55,150,65,142,103,130,162,219,220,221',
'222,223,224,140,143,196,197,67,151,219,220,221,222,223,224,146,226,227',
'170,356,171,149,355,136,156,152,173,113,114,116,153,133,134,135,117',
'118,196,197,137,138,139,13,178,83,221,222,223,224,141,127,181,124,125',
'157,126,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,55,150,189,142,189,130,219,220,221,222,223,224,189,140,143',
'196,197,200,151,221,222,223,224,196,197,146,196,197,67,358,210,149,67',
'136,156,152,67,113,114,116,153,133,134,135,117,118,372,373,137,138,139',
'13,244,83,276,277,278,279,141,127,247,124,125,157,126,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,150,249',
'142,67,130,196,197,196,197,196,197,255,140,143,372,373,162,151,162,209',
'202,208,271,285,146,290,291,67,323,223,149,67,136,156,152,249,113,114',
'116,153,133,134,135,117,118,337,181,137,138,139,13,344,83,345,346,196',
'223,141,127,223,124,125,157,126,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,150,223,142,223,130,137,138,139',
'202,364,368,374,140,143,377,141,291,151,379,67,157,382,94,162,146,386',
'202,395,162,,149,,136,156,152,,,,,153,133,134,135,,,16,365,150,,142',
',186,137,138,139,,,,,140,143,13,141,,151,11,17,157,,,,146,,,,,,149,',
'136,156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,22',
'140,143,23,141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134',
'135,,,,,192,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,219',
'220,221,222,223,224,,136,156,152,,,,,153,133,134,135,225,226,227,,150',
',142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136',
'156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140,143',
',141,,151,,,157,,,,,,,,,,149,,136,156,152,,,,,153,133,134,135,,,,,150',
',142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136',
'156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140,143',
',141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134,135,,,',
',241,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,219,220,221',
'222,223,224,,136,156,152,,,,,153,133,134,135,225,226,227,,241,,142,',
'186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,',
',,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151',
',,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,150,,142,,186,137',
'138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,',
',153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140,143,,141,,151',
',,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134,135,,,,,241,,142',
',186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152',
',,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140,143,,141,',
'151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134,135,,,,,150,',
'142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136',
'156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140,143',
',141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134,135,,,',
',150,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149',
',136,156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139,,,,,140',
'143,,141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133,134,135',
',,,,150,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,',
',,149,,136,156,152,,,,,153,133,134,135,,,,,150,,142,,186,137,138,139',
',,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,,,153,133',
'134,135,,,,,150,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,',
',146,,,,,,149,,136,156,152,,,,,153,133,134,135,,,,,150,,142,,186,137',
'138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136,156,152,,,',
',153,133,134,135,,,,,150,,142,,186,137,138,139,137,138,139,,140,143',
',141,,151,141,,157,,,157,146,,,,,,149,,136,156,152,,,,,153,133,134,135',
',,,,150,,142,,186,142,,186,137,138,139,,140,143,,140,143,151,141,,,',
',157,146,,,,,,149,,136,156,152,136,156,,,153,133,134,135,133,134,135',
',,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,',
',136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140',
'143,,141,,151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241',
',142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156',
'152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141',
',151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142,',
'186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,',
',,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151',
',,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137',
'138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133',
'134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,',
',,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139',
',,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135',
',,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,',
',136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140',
'143,,141,,151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241',
',142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156',
'152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141',
',151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142,',
'186,137,138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,',
',,,153,133,134,135,,,,,241,,142,,186,137,138,139,,,,,140,143,,141,,151',
',,157,,,,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137',
'138,139,,,,,140,143,,141,,151,,,157,,,,,,,,,,,,136,156,152,,,,,153,133',
'134,135,,,,,241,,142,,186,137,138,139,137,138,139,,140,143,,141,,151',
'141,,157,,,157,,,,,,,,,136,156,152,,,,,153,133,134,135,,,,,241,,142',
',186,142,,186,137,138,139,,140,143,,140,143,151,141,,,,,157,,,,,,,,',
'136,156,152,136,156,,,153,133,134,135,133,134,135,,,,,150,,142,,186',
'137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,,,,149,,136,156,152',
',,,,153,133,134,135,,,,,150,,142,,186,137,138,139,137,138,139,,140,143',
',141,,151,141,,157,,,157,146,,,,,,149,,136,156,152,,,,,153,133,134,135',
',,,,150,,142,,186,142,,186,137,138,139,,140,143,,140,143,151,141,,,',
',157,146,,,,,,149,,136,156,152,136,156,,,153,133,134,135,133,134,135',
',,,,150,,142,,186,137,138,139,,,,,140,143,,141,,151,,,157,,,,146,,,',
',,149,,136,156,152,,,,,153,133,134,135,,,,,241,,142,,186,137,138,139',
'137,138,139,,140,143,,141,,151,141,,157,,,157,,,,,,,,,136,156,152,,',
',,153,133,134,135,,,,,241,,142,,186,142,,186,,,,,140,143,,140,143,151',
',,,,,,,,,,,,,167,136,156,152,136,156,,,153,133,134,135,133,134,135,13',
',83,,,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48',
'49,50,51,52,53,54,55,13,,83,,,22,,,23,,,,,,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,322,,,,,,77,,,219,220',
'221,222,223,224,219,220,221,222,223,224,,230,232,233,234,235,225,226',
'227,228,229,260,225,226,227,228,229,,,,,,,,231,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,322,,,,,,,,,,',
',322,,,219,220,221,222,223,224,,,276,277,278,279,219,220,221,222,223',
'224,225,226,227,228,229,,,,,,,,225,226,227,228,229,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,,,,,,22,,,23',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,,-29,,,,,-29,219,220,221,222,223,224,,230,232,233,234,235,,,,',
',,225,226,227,228,229,,,,,,,,231,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,55,,,,,161,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,,,,,161,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55',
'31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53',
'54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,55,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,55,219,220,221,222,223,224,,,276,277,278',
'279,219,220,221,222,223,224,225,226,227,228,229,219,220,221,222,223',
'224,,225,226,227,228,229,219,220,221,222,223,224,225,226,227,228,229',
'219,220,221,222,223,224,,225,226,227,228,229,219,220,221,222,223,224',
'225,226,227,228,229,219,220,221,222,223,224,,225,226,227,228,229,219',
'220,221,222,223,224,225,226,227,228,229,,,,,,,,225,226,227,228,229' ]
        racc_action_table = arr = ::Array.new(3597, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'88,88,88,190,195,387,25,88,88,72,28,88,88,88,88,202,88,2,123,123,2,88',
'88,72,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,28,88,190,88,387,202,25,362,130,83,130,88',
'88,158,83,251,88,237,158,1,251,195,195,88,362,190,190,387,387,88,130',
'88,88,88,20,180,180,180,88,88,88,88,180,180,237,237,180,180,180,180',
'20,180,11,20,20,20,180,180,12,180,180,180,180,180,180,180,180,180,180',
'180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180',
'180,180,180,287,180,132,180,180,20,0,180,20,287,266,180,180,303,5,266',
'180,5,302,294,13,303,0,180,132,0,0,0,287,180,302,180,180,180,24,254',
'254,254,180,180,180,180,254,254,294,294,254,254,254,254,24,254,16,283',
'24,24,254,254,283,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'128,254,284,254,73,24,166,284,24,69,293,254,254,18,76,293,254,76,183',
'183,73,128,166,254,73,73,166,166,69,254,99,254,254,254,164,268,268,268',
'254,254,254,254,268,268,99,26,268,268,268,268,164,268,265,265,164,164',
'268,268,27,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,108,268',
'332,268,108,164,332,336,164,29,262,268,268,384,85,60,268,85,108,95,332',
'62,95,268,262,336,186,384,186,268,65,268,268,268,68,271,271,271,268',
'268,268,268,271,271,267,267,271,271,271,271,110,271,256,110,70,256,271',
'271,74,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,77,271,84,271',
'93,310,310,310,310,310,310,271,271,286,286,96,271,311,311,311,311,311',
'311,271,310,310,100,298,104,271,298,271,271,271,106,280,280,280,271',
'271,271,271,280,280,292,292,280,280,280,280,109,280,304,304,304,304',
'280,280,111,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,114',
'280,124,280,312,312,312,312,312,312,126,280,280,295,295,127,280,305',
'305,305,305,296,296,280,297,297,300,300,131,280,142,280,280,280,143',
'373,373,373,280,280,280,280,373,373,342,342,373,373,373,373,156,373',
'345,345,346,346,373,373,160,373,373,373,373,373,373,373,373,373,373',
'373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373',
'373,373,373,161,373,163,373,352,352,369,369,378,378,165,373,373,396',
'396,169,373,175,176,184,187,191,200,373,203,204,214,239,240,373,245',
'373,373,373,247,394,394,394,373,373,373,373,394,394,260,264,394,394',
'394,394,272,394,274,275,282,306,394,394,307,394,394,394,394,394,394',
'394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,394,394,308,394,309,394,113,113,113,329,334,338',
'343,394,394,347,113,351,394,357,358,113,360,367,368,394,370,381,392',
'395,,394,,394,394,394,,,,,394,394,394,394,,,335,335,113,,113,,113,116',
'116,116,,,,,113,113,335,116,,113,335,335,116,,,,113,,,,,,113,,113,113',
'113,,,,,113,113,113,113,,,,,116,,116,,116,117,117,117,,,,335,116,116',
'335,117,,116,,,117,,,,116,,,,,,116,,116,116,116,,,,,116,116,116,116',
',,,,117,,117,,117,118,118,118,,,,,117,117,,118,,117,,,118,,,,,313,313',
'313,313,313,313,,117,117,117,,,,,117,117,117,117,313,313,313,,118,,118',
',118,145,145,145,,,,,118,118,,145,,118,,,145,,,,118,,,,,,118,,118,118',
'118,,,,,118,118,118,118,,,,,145,,145,,145,149,149,149,,,,,145,145,,149',
',145,,,149,,,,,,,,,,145,,145,145,145,,,,,145,145,145,145,,,,,149,,149',
',149,150,150,150,,,,,149,149,,150,,149,,,150,,,,149,,,,,,149,,149,149',
'149,,,,,149,149,149,149,,,,,150,,150,,150,151,151,151,,,,,150,150,,151',
',150,,,151,,,,150,,,,,,150,,150,150,150,,,,,150,150,150,150,,,,,151',
',151,,151,152,152,152,,,,,151,151,,152,,151,,,152,,,,,314,314,314,314',
'314,314,,151,151,151,,,,,151,151,151,151,314,314,314,,152,,152,,152',
'153,153,153,,,,,152,152,,153,,152,,,153,,,,,,,,,,,,152,152,152,,,,,152',
'152,152,152,,,,,153,,153,,153,181,181,181,,,,,153,153,,181,,153,,,181',
',,,,,,,,,,,153,153,153,,,,,153,153,153,153,,,,,181,,181,,181,188,188',
'188,,,,,181,181,,188,,181,,,188,,,,181,,,,,,181,,181,181,181,,,,,181',
'181,181,181,,,,,188,,188,,188,192,192,192,,,,,188,188,,192,,188,,,192',
',,,188,,,,,,188,,188,188,188,,,,,188,188,188,188,,,,,192,,192,,192,196',
'196,196,,,,,192,192,,196,,192,,,196,,,,,,,,,,,,192,192,192,,,,,192,192',
'192,192,,,,,196,,196,,196,197,197,197,,,,,196,196,,197,,196,,,197,,',
',196,,,,,,196,,196,196,196,,,,,196,196,196,196,,,,,197,,197,,197,198',
'198,198,,,,,197,197,,198,,197,,,198,,,,197,,,,,,197,,197,197,197,,,',
',197,197,197,197,,,,,198,,198,,198,199,199,199,,,,,198,198,,199,,198',
',,199,,,,198,,,,,,198,,198,198,198,,,,,198,198,198,198,,,,,199,,199',
',199,201,201,201,,,,,199,199,,201,,199,,,201,,,,199,,,,,,199,,199,199',
'199,,,,,199,199,199,199,,,,,201,,201,,201,206,206,206,,,,,201,201,,206',
',201,,,206,,,,201,,,,,,201,,201,201,201,,,,,201,201,201,201,,,,,206',
',206,,206,208,208,208,,,,,206,206,,208,,206,,,208,,,,206,,,,,,206,,206',
'206,206,,,,,206,206,206,206,,,,,208,,208,,208,209,209,209,,,,,208,208',
',209,,208,,,209,,,,208,,,,,,208,,208,208,208,,,,,208,208,208,208,,,',
',209,,209,,209,210,210,210,,,,,209,209,,210,,209,,,210,,,,209,,,,,,209',
',209,209,209,,,,,209,209,209,209,,,,,210,,210,,210,211,211,211,,,,,210',
'210,,211,,210,,,211,,,,210,,,,,,210,,210,210,210,,,,,210,210,210,210',
',,,,211,,211,,211,213,213,213,216,216,216,,211,211,,213,,211,216,,213',
',,216,211,,,,,,211,,211,211,211,,,,,211,211,211,211,,,,,213,,213,,213',
'216,,216,219,219,219,,213,213,,216,216,213,219,,,,,219,213,,,,,,213',
',213,213,213,216,216,,,213,213,213,213,216,216,216,,,,,219,,219,,219',
'220,220,220,,,,,219,219,,220,,219,,,220,,,,,,,,,,,,219,219,219,,,,,219',
'219,219,219,,,,,220,,220,,220,221,221,221,,,,,220,220,,221,,220,,,221',
',,,,,,,,,,,220,220,220,,,,,220,220,220,220,,,,,221,,221,,221,222,222',
'222,,,,,221,221,,222,,221,,,222,,,,,,,,,,,,221,221,221,,,,,221,221,221',
'221,,,,,222,,222,,222,223,223,223,,,,,222,222,,223,,222,,,223,,,,,,',
',,,,,222,222,222,,,,,222,222,222,222,,,,,223,,223,,223,224,224,224,',
',,,223,223,,224,,223,,,224,,,,,,,,,,,,223,223,223,,,,,223,223,223,223',
',,,,224,,224,,224,225,225,225,,,,,224,224,,225,,224,,,225,,,,,,,,,,',
',224,224,224,,,,,224,224,224,224,,,,,225,,225,,225,226,226,226,,,,,225',
'225,,226,,225,,,226,,,,,,,,,,,,225,225,225,,,,,225,225,225,225,,,,,226',
',226,,226,227,227,227,,,,,226,226,,227,,226,,,227,,,,,,,,,,,,226,226',
'226,,,,,226,226,226,226,,,,,227,,227,,227,228,228,228,,,,,227,227,,228',
',227,,,228,,,,,,,,,,,,227,227,227,,,,,227,227,227,227,,,,,228,,228,',
'228,229,229,229,,,,,228,228,,229,,228,,,229,,,,,,,,,,,,228,228,228,',
',,,228,228,228,228,,,,,229,,229,,229,230,230,230,,,,,229,229,,230,,229',
',,230,,,,,,,,,,,,229,229,229,,,,,229,229,229,229,,,,,230,,230,,230,231',
'231,231,,,,,230,230,,231,,230,,,231,,,,,,,,,,,,230,230,230,,,,,230,230',
'230,230,,,,,231,,231,,231,232,232,232,,,,,231,231,,232,,231,,,232,,',
',,,,,,,,,231,231,231,,,,,231,231,231,231,,,,,232,,232,,232,233,233,233',
',,,,232,232,,233,,232,,,233,,,,,,,,,,,,232,232,232,,,,,232,232,232,232',
',,,,233,,233,,233,234,234,234,,,,,233,233,,234,,233,,,234,,,,,,,,,,',
',233,233,233,,,,,233,233,233,233,,,,,234,,234,,234,235,235,235,,,,,234',
'234,,235,,234,,,235,,,,,,,,,,,,234,234,234,,,,,234,234,234,234,,,,,235',
',235,,235,241,241,241,249,249,249,,235,235,,241,,235,249,,241,,,249',
',,,,,,,,235,235,235,,,,,235,235,235,235,,,,,241,,241,,241,249,,249,291',
'291,291,,241,241,,249,249,241,291,,,,,291,,,,,,,,,241,241,241,249,249',
',,241,241,241,241,249,249,249,,,,,291,,291,,291,340,340,340,,,,,291',
'291,,340,,291,,,340,,,,291,,,,,,291,,291,291,291,,,,,291,291,291,291',
',,,,340,,340,,340,355,355,355,359,359,359,,340,340,,355,,340,359,,355',
',,359,340,,,,,,340,,340,340,340,,,,,340,340,340,340,,,,,355,,355,,355',
'359,,359,372,372,372,,355,355,,359,359,355,372,,,,,372,355,,,,,,355',
',355,355,355,359,359,,,355,355,355,355,359,359,359,,,,,372,,372,,372',
'375,375,375,,,,,372,372,,375,,372,,,375,,,,372,,,,,,372,,372,372,372',
',,,,372,372,372,372,,,,,375,,375,,375,376,376,376,380,380,380,,375,375',
',376,,375,380,,376,,,380,,,,,,,,,375,375,375,,,,,375,375,375,375,,,',
',376,,376,,376,380,,380,,,,,376,376,,380,380,376,,,,,,,,,,,,,,97,376',
'376,376,380,380,,,376,376,376,376,380,380,380,97,,97,,,,,,,,,,,,97,97',
'97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97',
'63,,63,,,97,,,97,,,,,,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,238,,,,,,63,,,315,315,315,315,315,315,238',
'238,238,238,238,238,,238,238,238,238,238,315,315,315,315,315,170,238',
'238,238,238,238,,,,,,,,238,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,273,,,,,,,,',
',,,324,,,273,273,273,273,273,273,,,273,273,273,273,324,324,324,324,324',
'324,273,273,273,273,273,,,,,,,,324,324,324,324,324,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,,,,,,105,,,105,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,,162,,,,,162',
'147,147,147,147,147,147,,147,147,147,147,147,,,,,,,147,147,147,147,147',
',,,,,,,147,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89',
'89,89,89,89,89,89,,,,,89,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,,,,,246,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61',
'61,61,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,66,66,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,330,330,330,330,330,330,330,330,330,330,330,330,330,330,330',
'330,330,330,330,330,330,330,330,330,330,194,194,194,194,194,194,,,194',
'194,194,194,316,316,316,316,316,316,194,194,194,194,194,317,317,317',
'317,317,317,,316,316,316,316,316,318,318,318,318,318,318,317,317,317',
'317,317,319,319,319,319,319,319,,318,318,318,318,318,320,320,320,320',
'320,320,319,319,319,319,319,389,389,389,389,389,389,,320,320,320,320',
'320,390,390,390,390,390,390,389,389,389,389,389,,,,,,,,390,390,390,390',
'390' ]
        racc_action_check = arr = ::Array.new(3597, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   147,    73,   -45,   nil,   nil,    95,   nil,   nil,   nil,   nil,
   nil,    45,    23,   102,   nil,   nil,   171,  3311,   245,   nil,
    86,   nil,   nil,   nil,   175,   -21,   216,   228,    -7,   263,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   274,  3336,   281,  3008,   nil,   279,  3361,   nil,   298,   173,
   307,   nil,   -52,   234,   298,   nil,   184,   349,   nil,   nil,
   nil,   nil,   nil,     7,   323,   273,   nil,   nil,    -4,  3251,
   nil,   nil,   nil,   357,   nil,   278,   363,  2969,   nil,   201,
   357,   nil,   nil,   nil,   435,  3154,   381,   nil,   264,   457,
   309,   462,   nil,   666,   442,   nil,   713,   760,   807,   nil,
   nil,   nil,   nil,   -67,   444,   nil,   452,   496,   165,   nil,
     5,   448,    88,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   467,   471,   nil,   854,  3386,  3179,   nil,   901,
   948,   995,  1042,  1089,   nil,   nil,   492,   nil,     9,   nil,
   496,   509,  3188,   528,   264,   595,   236,   nil,   nil,   546,
  3079,   nil,   nil,   nil,   nil,   548,   547,   nil,   nil,   nil,
    85,  1136,   nil,   165,   540,   nil,   290,   551,  1183,   nil,
    -6,   595,  1230,   nil,  3420,   -10,  1277,  1324,  1371,  1418,
   549,  1465,    -2,   549,   534,   nil,  1512,   nil,  1559,  1606,
  1653,  1700,   nil,  1747,   552,   nil,  1750,   nil,   nil,  1797,
  1844,  1891,  1938,  1985,  2032,  2079,  2126,  2173,  2220,  2267,
  2314,  2361,  2408,  2455,  2502,  2549,   nil,    13,  3007,   557,
   539,  2596,   nil,   nil,  3411,   556,  3281,   543,   nil,  2599,
   nil,    11,   nil,   nil,   174,   nil,   311,   nil,   nil,   nil,
   571,   nil,   270,   nil,   627,   199,    95,   280,   263,   nil,
   nil,   352,   580,  3078,   579,   580,   nil,   nil,   nil,   nil,
   441,   nil,   557,   138,   176,   nil,   338,    84,   nil,   nil,
   nil,  2646,   369,   184,   102,   427,   435,   438,   377,   nil,
   463,   nil,    94,    81,   387,   441,   566,   569,   600,   602,
   342,   354,   430,   769,  1004,  3001,  3432,  3443,  3455,  3466,
  3478,   nil,   nil,   nil,  3090,   nil,   nil,   nil,   nil,   617,
  3436,   nil,   266,   nil,   682,   719,   271,   nil,   628,   nil,
  2693,   nil,   536,   684,   nil,   470,   470,   687,   nil,   nil,
   nil,   613,   507,   nil,   nil,  2740,   nil,   623,   633,  2743,
   614,   nil,     3,   nil,   nil,   nil,   nil,   623,   642,   509,
   698,   nil,  2790,   530,   nil,  2837,  2884,   nil,   511,   nil,
  2887,   635,   nil,   nil,   273,   nil,   nil,    -4,   nil,  3489,
  3501,   nil,   645,   nil,   619,   647,   594,   nil,   nil ]

racc_action_default = [
    -6,  -229,  -218,    -2,    -4,  -229,    -7,    -9,   -10,   -11,
   -12,  -229,  -229,  -229,   -49,   -50,   -56,  -229,  -229,    -1,
  -219,  -220,  -222,  -223,    -5,   -15,   -20,  -229,  -229,  -229,
  -104,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,  -195,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,   399,    -3,  -221,    -8,
  -229,  -229,  -229,   -22,   -18,  -229,   -35,  -228,  -132,  -130,
  -229,   -57,  -229,    -6,   -15,   -16,  -229,   -20,   -23,   -25,
   -26,   -27,  -104,  -229,  -229,  -218,   -36,  -104,   -59,  -229,
  -128,  -129,  -131,   -32,  -105,  -218,  -229,  -229,   -19,  -229,
  -229,   -42,   -43,   -21,  -229,  -219,   -38,   -40,  -229,  -229,
  -218,   -60,   -62,  -212,  -214,   -65,  -229,  -229,  -229,   -70,
   -71,   -72,   -73,   -74,  -214,   -76,  -214,  -229,  -164,  -104,
  -181,  -172,  -181,  -112,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -224,  -224,  -140,  -229,  -229,  -145,  -146,  -229,
  -229,  -229,  -229,  -229,  -173,  -175,  -229,  -177,  -229,  -134,
  -229,  -138,  -104,  -229,  -219,  -229,    -6,   -17,   -24,   -32,
  -229,   -34,   -37,  -104,  -104,   -32,  -101,  -102,   -51,   -58,
  -219,  -229,   -63,  -213,  -164,  -172,  -181,  -181,  -183,  -215,
  -229,  -229,  -229,   -81,  -229,  -229,  -229,  -229,  -183,  -183,
  -229,  -229,  -229,   -94,   -97,   -98,  -229,  -174,  -183,  -229,
  -229,  -229,  -178,  -106,  -225,  -226,  -123,  -141,  -104,  -229,
  -229,  -229,  -229,  -229,  -229,  -229,  -229,  -229,  -229,  -229,
  -229,  -229,  -229,  -229,  -229,  -229,  -147,  -229,  -145,  -146,
  -160,  -229,  -161,  -162,  -229,  -229,  -229,  -138,  -137,  -229,
   -30,  -229,  -104,   -55,   -59,   -13,  -229,   -28,   -41,  -104,
  -229,   -39,  -229,  -100,   -61,   -67,  -216,  -184,   -59,   -88,
   -89,   -59,  -229,  -229,  -229,  -229,   -84,   -85,   -86,   -87,
   -59,  -142,  -143,  -216,  -216,   -78,   -79,  -130,  -179,  -180,
  -104,  -229,  -109,  -229,  -229,  -110,  -111,  -107,  -229,  -227,
  -224,  -124,  -229,  -229,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -165,  -166,  -167,  -168,  -169,
  -170,  -148,  -163,  -171,  -229,  -104,  -133,  -135,  -136,  -139,
  -104,   -33,   -53,   -54,  -229,  -229,   -44,  -104,  -229,   -64,
  -229,  -217,   -90,  -229,   -80,  -229,  -229,  -229,   -75,   -77,
   -95,   -96,  -103,  -182,  -186,  -229,  -121,  -229,  -224,  -229,
  -229,  -144,  -229,   -31,   -52,   -14,  -104,   -45,   -32,  -185,
  -229,   -91,  -229,   -59,   -68,  -229,  -229,   -69,  -108,  -122,
  -229,  -126,  -127,  -176,   -47,   -99,   -66,  -229,   -93,   -82,
   -83,  -125,  -229,   -48,   -59,   -32,   -90,   -46,   -92 ]

racc_goto_table = [
    66,    72,    58,    10,    59,    30,    58,   163,   109,    68,
   128,   250,    20,   159,   132,    24,   268,   107,   131,    95,
   213,   216,   301,    10,   205,    19,   193,    10,   248,   212,
    64,    60,    86,    73,   370,     3,    78,   266,   177,    81,
   188,     1,     2,   339,    63,    76,   251,   283,   284,    74,
   198,    82,   199,    99,    87,    57,    85,   293,   106,   204,
   348,   349,   100,   258,   392,    28,    80,    88,   264,   166,
   168,   172,   182,    81,   191,   375,    10,   160,   376,    58,
    96,    98,   203,   257,   212,    82,    97,    58,   398,   263,
   338,   298,   300,    87,   359,   105,   158,   217,   239,   nil,
    80,   272,   128,   261,   nil,   164,   132,   nil,   104,   nil,
   131,   nil,   256,   nil,   328,   nil,   nil,   nil,   165,   nil,
   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   289,   179,   218,   nil,   254,   nil,   302,   nil,
   nil,   nil,   nil,   nil,    59,   262,    58,   nil,   nil,   nil,
   252,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   259,   nil,
   nil,   nil,    58,   270,   nil,   nil,   nil,    10,   nil,    10,
   327,   329,   183,   nil,   334,   190,   128,   195,   357,   363,
   132,   nil,   333,   288,   131,   350,   391,   299,   342,   303,
   128,   343,   177,   128,   132,   nil,   nil,   132,   131,   nil,
   347,   131,   128,   nil,   nil,   nil,   132,   nil,   236,   237,
   131,   nil,   nil,   394,   nil,   nil,   nil,   nil,   326,   nil,
   351,   nil,   nil,   332,   nil,   nil,   nil,   nil,   nil,   nil,
   336,   nil,   325,   nil,   160,   nil,   380,   nil,   nil,   nil,
   265,   nil,   nil,   nil,   nil,   nil,   nil,   267,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   281,   282,   267,   267,   nil,
   286,   nil,   177,   nil,   nil,   292,   335,   267,   294,   295,
   296,   194,   297,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   381,   385,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   388,   nil,   128,   362,   nil,   nil,   132,
   nil,   nil,   302,   131,   238,   240,   242,   243,   367,   397,
   nil,   nil,   nil,   nil,   396,    59,   128,    58,   252,   nil,
   132,   nil,   nil,   nil,   131,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,   nil,   nil,
   352,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   270,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
   nil,   nil,   nil,   nil,   nil,   324,   nil,   nil,   nil,   369,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   378,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   387,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   389,
   390 ]

racc_goto_check = [
    14,    22,    78,    12,     8,    15,    78,    23,    38,    36,
    53,    25,     5,    71,    64,     5,    48,    29,    62,     7,
    66,    66,    68,    12,    60,     3,    54,    12,    72,    76,
    18,    13,    27,    14,    49,     4,    19,    44,    62,    21,
    43,     1,     2,    45,    16,    17,    24,    44,    44,    15,
    43,    15,    43,    22,    15,     4,    26,    44,    28,    29,
    45,    45,    30,    31,    32,    35,    12,    37,    40,    14,
    19,    27,    42,    21,    50,    56,    12,    15,    57,    78,
    13,    18,    59,    23,    76,    15,     5,    78,    49,    23,
    61,    63,    67,    15,    69,     5,    70,    73,    75,   nil,
    12,    54,    53,    29,   nil,     5,    64,   nil,     3,   nil,
    62,   nil,     7,   nil,    72,   nil,   nil,   nil,     3,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    62,     3,    15,   nil,    14,   nil,    53,   nil,
   nil,   nil,   nil,   nil,     8,    22,    78,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    78,    14,   nil,   nil,   nil,    12,   nil,    12,
    71,    53,    47,   nil,    38,    47,    53,    47,    66,    25,
    64,   nil,    29,    36,    62,    60,    68,    14,    38,    22,
    53,    38,    62,    53,    64,   nil,   nil,    64,    62,   nil,
    38,    62,    53,   nil,   nil,   nil,    64,   nil,    47,    47,
    62,   nil,   nil,    48,   nil,   nil,   nil,   nil,    14,   nil,
    29,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,    15,   nil,    15,   nil,    66,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    47,    47,    47,   nil,
    47,   nil,    62,   nil,   nil,    47,     5,    47,    47,    47,
    47,    55,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    53,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38,   nil,    53,    22,   nil,   nil,    64,
   nil,   nil,    53,    62,    55,    55,    55,    55,    22,    23,
   nil,   nil,   nil,   nil,    38,     8,    53,    78,    15,   nil,
    64,   nil,   nil,   nil,    62,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,    47,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,
    55 ]

racc_goto_pointer = [
   nil,    41,    42,    23,    35,    10,   nil,   -54,   -20,   nil,
   nil,   nil,     3,     6,   -27,   -12,    18,   -18,     4,   -27,
   nil,   -24,   -29,   -86,  -116,  -151,   -10,   -34,   -29,   -70,
   -21,  -107,  -320,   nil,   nil,    49,   -19,    -1,   -80,   nil,
  -112,   nil,   -41,   -74,  -151,  -223,   nil,    59,  -174,  -308,
   -43,   nil,   nil,   -78,   -91,   154,  -270,  -268,   nil,   -47,
  -105,  -172,   -70,  -122,   -74,   nil,  -122,  -124,  -194,  -208,
     7,   -76,  -133,   -48,   nil,   -52,  -103,   nil,   -18,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   120,   nil,   215,   129,   nil,   nil,   nil,   nil,
    79,   122,   108,   nil,   nil,   nil,   nil,   nil,   nil,   253,
   nil,   nil,   nil,    14,    15,   nil,   nil,   nil,   nil,   110,
   111,   112,   nil,   nil,   nil,   nil,   115,   123,   nil,   nil,
   nil,   119,   121,   184,   nil,   147,   274,   275,   371,   nil,
   nil,   175,   185,   nil,   187,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   144,   145,   148,   207,   155,    21,   214 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 105, :_reduce_1,
  1, 106, :_reduce_2,
  3, 106, :_reduce_3,
  1, 108, :_reduce_4,
  2, 108, :_reduce_5,
  0, 111, :_reduce_6,
  1, 111, :_reduce_7,
  3, 111, :_reduce_8,
  1, 112, :_reduce_9,
  1, 112, :_reduce_10,
  1, 112, :_reduce_11,
  1, 112, :_reduce_12,
  7, 114, :_reduce_13,
  9, 115, :_reduce_14,
  0, 117, :_reduce_15,
  2, 117, :_reduce_16,
  6, 110, :_reduce_17,
  1, 120, :_reduce_18,
  3, 120, :_reduce_19,
  0, 122, :_reduce_20,
  3, 122, :_reduce_21,
  0, 121, :_reduce_22,
  1, 121, :_reduce_23,
  3, 121, :_reduce_24,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  4, 124, :_reduce_28,
  0, 128, :_reduce_29,
  1, 128, :_reduce_30,
  3, 128, :_reduce_31,
  0, 127, :_reduce_32,
  3, 127, :_reduce_33,
  6, 116, :_reduce_34,
  0, 130, :_reduce_35,
  1, 130, :_reduce_36,
  3, 130, :_reduce_37,
  2, 131, :_reduce_38,
  3, 132, :_reduce_39,
  1, 132, :_reduce_40,
  4, 125, :_reduce_41,
  1, 134, :_reduce_none,
  1, 134, :_reduce_43,
  2, 135, :_reduce_44,
  3, 135, :_reduce_45,
  7, 135, :_reduce_46,
  0, 136, :_reduce_47,
  1, 136, :_reduce_48,
  1, 113, :_reduce_49,
  1, 113, :_reduce_50,
  6, 137, :_reduce_51,
  8, 138, :_reduce_52,
  2, 129, :_reduce_53,
  2, 129, :_reduce_54,
  1, 129, :_reduce_55,
  0, 139, :_reduce_56,
  2, 139, :_reduce_57,
  2, 142, :_reduce_58,
  0, 143, :_reduce_59,
  1, 143, :_reduce_60,
  3, 143, :_reduce_61,
  1, 144, :_reduce_62,
  2, 144, :_reduce_63,
  4, 144, :_reduce_64,
  1, 144, :_reduce_65,
  6, 144, :_reduce_66,
  3, 144, :_reduce_67,
  5, 144, :_reduce_68,
  5, 144, :_reduce_69,
  1, 144, :_reduce_70,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_74,
  4, 144, :_reduce_75,
  1, 144, :_reduce_76,
  4, 144, :_reduce_77,
  3, 156, :_reduce_78,
  3, 155, :_reduce_79,
  3, 154, :_reduce_80,
  1, 154, :_reduce_none,
  5, 158, :_reduce_82,
  5, 158, :_reduce_83,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 153, :_reduce_90,
  1, 153, :_reduce_91,
  5, 153, :_reduce_92,
  2, 162, :_reduce_93,
  2, 145, :_reduce_94,
  3, 163, :_reduce_95,
  3, 163, :_reduce_96,
  1, 163, :_reduce_97,
  1, 163, :_reduce_98,
  6, 133, :_reduce_99,
  3, 133, :_reduce_100,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  3, 164, :_reduce_103,
  0, 126, :_reduce_104,
  2, 126, :_reduce_105,
  0, 167, :_reduce_106,
  1, 167, :_reduce_107,
  3, 167, :_reduce_108,
  3, 150, :_reduce_109,
  3, 150, :_reduce_110,
  3, 150, :_reduce_111,
  1, 169, :_reduce_112,
  1, 169, :_reduce_113,
  1, 169, :_reduce_114,
  1, 169, :_reduce_115,
  1, 169, :_reduce_116,
  1, 169, :_reduce_117,
  1, 169, :_reduce_118,
  1, 169, :_reduce_119,
  1, 169, :_reduce_120,
  4, 169, :_reduce_121,
  5, 169, :_reduce_122,
  0, 171, :_reduce_123,
  1, 171, :_reduce_124,
  4, 171, :_reduce_125,
  3, 172, :_reduce_126,
  2, 173, :_reduce_none,
  2, 140, :_reduce_128,
  2, 140, :_reduce_129,
  1, 140, :_reduce_130,
  2, 140, :_reduce_131,
  0, 141, :_reduce_132,
  4, 141, :_reduce_133,
  1, 174, :_reduce_134,
  3, 174, :_reduce_135,
  3, 175, :_reduce_136,
  2, 175, :_reduce_137,
  0, 176, :_reduce_138,
  2, 176, :_reduce_139,
  1, 151, :_reduce_140,
  2, 151, :_reduce_141,
  3, 151, :_reduce_142,
  3, 151, :_reduce_143,
  4, 178, :_reduce_144,
  1, 177, :_reduce_145,
  1, 177, :_reduce_146,
  2, 177, :_reduce_147,
  3, 177, :_reduce_148,
  3, 159, :_reduce_149,
  3, 159, :_reduce_150,
  3, 159, :_reduce_151,
  3, 159, :_reduce_152,
  3, 159, :_reduce_153,
  3, 159, :_reduce_154,
  3, 159, :_reduce_155,
  3, 159, :_reduce_156,
  3, 159, :_reduce_157,
  3, 159, :_reduce_158,
  3, 159, :_reduce_159,
  2, 159, :_reduce_160,
  2, 159, :_reduce_161,
  2, 159, :_reduce_162,
  3, 159, :_reduce_163,
  1, 159, :_reduce_164,
  3, 179, :_reduce_165,
  3, 179, :_reduce_166,
  3, 179, :_reduce_167,
  3, 179, :_reduce_168,
  3, 179, :_reduce_169,
  3, 179, :_reduce_170,
  3, 179, :_reduce_171,
  1, 157, :_reduce_172,
  1, 157, :_reduce_173,
  2, 157, :_reduce_174,
  1, 157, :_reduce_none,
  5, 157, :_reduce_176,
  1, 157, :_reduce_177,
  2, 181, :_reduce_178,
  3, 168, :_reduce_179,
  3, 168, :_reduce_180,
  0, 180, :_reduce_181,
  3, 180, :_reduce_182,
  0, 148, :_reduce_183,
  1, 148, :_reduce_184,
  3, 148, :_reduce_185,
  4, 166, :_reduce_186,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_none,
  1, 119, :_reduce_211,
  0, 146, :_reduce_212,
  1, 146, :_reduce_none,
  0, 147, :_reduce_214,
  1, 147, :_reduce_none,
  0, 149, :_reduce_216,
  1, 149, :_reduce_none,
  0, 107, :_reduce_218,
  1, 107, :_reduce_219,
  1, 109, :_reduce_220,
  2, 109, :_reduce_221,
  1, 182, :_reduce_222,
  1, 182, :_reduce_none,
  0, 170, :_reduce_224,
  1, 170, :_reduce_none,
  1, 183, :_reduce_none,
  2, 183, :_reduce_none,
  1, 118, :_reduce_228 ]

racc_reduce_n = 229

racc_shift_n = 399

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kBLOCK_GIVEN => 30,
  :kYIELD => 31,
  :kDTYPE_UINT => 32,
  :kDTYPE_LINT => 33,
  :kDTYPE_LLINT => 34,
  :kDTYPE_CHAR => 35,
  :kDTYPE_I8 => 36,
  :kDTYPE_I16 => 37,
  :kDTYPE_I32 => 38,
  :kDTYPE_I64 => 39,
  :kDTYPE_UI8 => 40,
  :kDTYPE_UI16 => 41,
  :kDTYPE_UI32 => 42,
  :kDTYPE_UI64 => 43,
  :kDTYPE_INT => 44,
  :kDTYPE_F32 => 45,
  :kDTYPE_F64 => 46,
  :kDTYPE_LF64 => 47,
  :kDTYPE_ROBJ => 48,
  :kDTYPE_ULINT => 49,
  :kDTYPE_ULLINT => 50,
  :kDTYPE_VOID => 51,
  :kDTYPE_SIZE_T => 52,
  :kDTYPE_RB_STR => 53,
  :kDTYPE_UCHAR => 54,
  :kDTYPE_BOOL => 55,
  :tCUSTOM_DTYPE => 56,
  :tLPAREN => 57,
  :tRPAREN => 58,
  :tLSQUARE => 59,
  :tRSQUARE => 60,
  :tIDENTIFIER => 61,
  :tNL => 62,
  :tCOMMA => 63,
  :tSQUOTE => 64,
  :tSCOLON => 65,
  :EOF => 66,
  :tDOT => 67,
  :tQMARK => 68,
  :tSYMBOL => 69,
  :tLBRACE => 70,
  :tRBRACE => 71,
  :tCOLON => 72,
  :tPLUS => 73,
  :tMINUS => 74,
  :tSTAR => 75,
  :tDIVIDE => 76,
  :tEXPO => 77,
  :tMODULUS => 78,
  :tASSIGN => 79,
  :tEQ => 80,
  :tLT => 81,
  :tLTEQ => 82,
  :tGT => 83,
  :tGTEQ => 84,
  :tANDOP => 85,
  :tOROP => 86,
  :tBANG => 87,
  :tOP_ASSIGN => 88,
  :tSTRING => 89,
  :kSIZEOF => 90,
  :tBIT_AND => 91,
  :tBIT_OR => 92,
  :tBIT_XOR => 93,
  :tBIT_LSHIFT => 94,
  :tBIT_RSHIFT => 95,
  :tBIT_NOT => 96,
  :tINTEGER => 97,
  :tFLOAT => 98,
  :tSINGLE_CHAR => 99,
  :ADDRESS_OF => 100,
  :TYPECAST => 101,
  :UMINUS => 102,
  :tNEQ => 103 }

racc_nt_base = 104

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kBLOCK_GIVEN",
  "kYIELD",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "kDTYPE_BOOL",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tCOLON",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "opt_compilation_cmds",
  "c_declarations",
  "opt_compilation_cmd",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "opt_expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "expr",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[2], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_20(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_21(val, _values, result)
            if val[0] == 'link'
          result = { link: val[2] }
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_22(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_24(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_28(val, _values, result)
            if !val[3].empty? # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[3]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_30(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_31(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_32(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_33(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_35(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_36(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_37(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_38(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_39(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_40(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_41(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_43(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_44(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_45(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: ""
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_46(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_47(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_49(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_50(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_51(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_52(val, _values, result)
            if val[4].empty? # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ { ident: 'self' }] }
              )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_53(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: ""
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_54(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_55(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_56(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_57(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_59(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_60(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_61(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_62(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_63(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_64(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_65(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_67(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_68(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_69(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_70(val, _values, result)
    
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_74(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_75(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_76(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_77(val, _values, result)
            result = Statement::Yield.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_78(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 338)
  def _reduce_79(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_82(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_83(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_90(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_91(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_92(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_93(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_94(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_95(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_96(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 382)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_98(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 389)
  def _reduce_99(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_100(val, _values, result)
            result = {}

        if !val[2].empty?
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_103(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_104(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_105(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_107(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_108(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_109(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_110(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_111(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 460)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 463)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 464)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_119(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_120(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_121(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_122(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_123(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_124(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 475)
  def _reduce_125(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 478)
  def _reduce_126(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.racc', 484)
  def _reduce_128(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 485)
  def _reduce_129(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 486)
  def _reduce_130(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_131(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 490)
  def _reduce_132(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 491)
  def _reduce_133(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 496)
  def _reduce_134(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 500)
  def _reduce_135(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_136(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_137(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_138(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_140(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_141(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_144(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_145(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_146(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_147(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_148(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_157(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_158(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_159(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 564)
  def _reduce_160(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 565)
  def _reduce_161(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_162(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 568)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 571)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 573)
  def _reduce_167(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 574)
  def _reduce_168(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 575)
  def _reduce_169(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_170(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 577)
  def _reduce_171(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 580)
  def _reduce_172(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_173(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_174(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'parser.racc', 595)
  def _reduce_176(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_177(val, _values, result)
     result = Expression::BlockGiven.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_178(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 608)
  def _reduce_179(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 612)
  def _reduce_180(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 616)
  def _reduce_181(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 620)
  def _reduce_183(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_184(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 622)
  def _reduce_185(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_186(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_211(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.racc', 645)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'parser.racc', 649)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'parser.racc', 653)
  def _reduce_218(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 654)
  def _reduce_219(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 657)
  def _reduce_220(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 658)
  def _reduce_221(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 661)
  def _reduce_222(val, _values, result)
    
    result
  end
.,.,

# reduce 223 omitted

module_eval(<<'.,.,', 'parser.racc', 665)
  def _reduce_224(val, _values, result)
    
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

module_eval(<<'.,.,', 'parser.racc', 673)
  def _reduce_228(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
