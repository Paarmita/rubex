#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 255)

def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
  @yydebug = true
end

def next_token
  @lexer.next_token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    19,    21,   109,    81,     3,   109,    22,    23,    82,
    54,   159,   160,    55,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    12,     5,    79,   111,    25,    54,   111,
     6,    55,    18,    19,    21,   125,   115,   116,    13,    22,
    23,    78,   117,   118,     8,   122,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    18,    19,    21,    54,    25,
    11,    55,    22,    23,    54,   176,    50,    55,   177,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    18,    19,
    21,    56,    25,   159,   160,    22,    23,    91,    92,    93,
    94,    77,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    18,    19,    21,    80,    25,    83,    79,    22,    23,
    91,    92,    93,    94,   112,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    18,    19,    21,   120,    25,   111,
    56,    22,    23,    93,   148,   151,   152,   154,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    18,    19,    21,
   155,    25,   156,    93,    22,    23,    93,    93,    93,   161,
   164,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
   147,    79,   125,   168,    25,    89,    90,    91,    92,    93,
    94,    89,    90,    91,    92,    93,    94,    78,    95,    97,
    98,    99,   100,   101,   102,    64,   nil,   nil,   nil,    69,
    96,    64,   nil,   nil,   nil,    69,    64,   nil,    63,   nil,
    69,   nil,    74,   nil,    63,   nil,    69,   nil,   nil,    63,
   nil,    66,    58,    59,    60,    63,   nil,    66,    58,    59,
    60,   nil,    66,    58,    59,    60,   nil,   nil,    64,    58,
    59,    60,    69,    64,   nil,   nil,    74,    69,   nil,   nil,
    69,    63,   nil,   nil,   nil,   nil,    63,   nil,   nil,    63,
   nil,   nil,   nil,   nil,    66,    58,    59,    60,   nil,    66,
    58,    59,    60,    58,    59,    60,    64,   nil,   nil,   nil,
    69,    64,   nil,   nil,    74,    69,   nil,   nil,    69,    63,
   nil,   nil,   nil,   nil,    63,   nil,   nil,    63,   nil,   nil,
   nil,   nil,    66,    58,    59,    60,   nil,    66,    58,    59,
    60,    58,    59,    60,    64,   nil,   nil,   nil,    69,    64,
   nil,   nil,   nil,    69,    64,   nil,   nil,    63,    69,   nil,
   nil,    74,    63,   nil,   nil,    69,   nil,    63,   nil,   nil,
    66,    58,    59,    60,    63,    66,    58,    59,    60,   nil,
    66,    58,    59,    60,   nil,   nil,   nil,    74,    58,    59,
    60,    69,    74,   nil,   nil,    74,    69,   nil,    74,    69,
    63,   nil,    69,   nil,   nil,    63,   nil,   nil,    63,   nil,
   nil,    63,   nil,   nil,    58,    59,    60,   nil,   nil,    58,
    59,    60,    58,    59,    60,    58,    59,    60,    74,   nil,
   nil,    74,    69,   nil,    74,    69,   nil,   nil,    69,    74,
   nil,    63,   nil,    69,    63,   nil,   nil,    63,   nil,   nil,
   nil,   nil,    63,   nil,   nil,    58,    59,    60,    58,    59,
    60,    58,    59,    60,   nil,    74,    58,    59,    60,    69,
    74,   nil,   nil,    74,    69,   nil,    74,    69,    63,   nil,
    69,   nil,   nil,    63,   nil,   nil,    63,   nil,   nil,    63,
   nil,   nil,    58,    59,    60,   nil,   nil,    58,    59,    60,
    58,    59,    60,    58,    59,    60,    74,   nil,   nil,   nil,
    69,    64,   nil,   167,   nil,    69,    64,   nil,   nil,    63,
    69,   nil,   nil,    74,    63,   nil,   nil,    69,    74,    63,
   nil,   nil,    69,    58,    59,    60,    63,    66,    58,    59,
    60,    63,    66,    58,    59,    60,   nil,   nil,   nil,    64,
    58,    59,    60,    69,    64,    58,    59,    60,    69,   nil,
   nil,   nil,    63,   nil,   nil,   nil,   nil,    63,    89,    90,
    91,    92,    93,    94,   nil,    66,    58,    59,    60,   nil,
    66,    58,    59,    60,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,   nil,   nil,   nil,   nil,    49,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,   nil,   nil,   nil,
   nil,    49,    89,    90,    91,    92,    93,    94,   nil,    95,
    97,    98,    99,   100,   101,   102,   nil,   nil,   nil,   nil,
   nil,    96,    89,    90,    91,    92,    93,    94,   nil,    95,
    97,    98,    99,   100,   101,   102,   147,   nil,   nil,   nil,
   nil,    96,   nil,   nil,   nil,   nil,   nil,    89,    90,    91,
    92,    93,    94,    89,    90,    91,    92,    93,    94,   nil,
   nil,   115,   116,   117,   118,    89,    90,    91,    92,    93,
    94,    89,    90,    91,    92,    93,    94,    89,    90,    91,
    92,    93,    94,    89,    90,    91,    92,    93,    94,    89,
    90,    91,    92,    93,    94,    89,    90,    91,    92,    93,
    94,    89,    90,    91,    92,    93,    94,    89,    90,    91,
    92,    93,    94 ]

racc_action_check = [
    52,    52,    52,    71,    46,     1,   169,    52,    52,    46,
    15,   149,   149,    15,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,     8,     2,    25,    71,    52,    52,   169,
     3,    52,     9,     9,     9,    76,   151,   151,     8,     9,
     9,    25,   152,   152,     5,    76,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,   108,   108,   108,    50,     9,
     7,    50,   108,   108,    85,   173,    14,    85,   173,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   108,   112,   112,
   112,    16,   108,   178,   178,   112,   112,   133,   133,   133,
   133,    24,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   120,   120,   120,    26,   112,    48,    69,   120,   120,
   134,   134,   134,   134,    72,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   160,   160,   160,    75,   120,    81,
    86,   160,   160,   103,   105,   113,   114,   121,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   175,   175,   175,
   126,   160,   129,   135,   175,   175,   136,   137,   138,   150,
   153,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   104,   125,   154,   157,   175,   139,   139,   139,   139,   139,
   139,   104,   104,   104,   104,   104,   104,   125,   104,   104,
   104,   104,   104,   104,   104,    18,   nil,   nil,   nil,    18,
   104,    19,   nil,   nil,   nil,    19,    21,   nil,    18,   nil,
    21,   nil,    22,   nil,    19,   nil,    22,   nil,   nil,    21,
   nil,    18,    18,    18,    18,    22,   nil,    19,    19,    19,
    19,   nil,    21,    21,    21,    21,   nil,   nil,    23,    22,
    22,    22,    23,    56,   nil,   nil,    63,    56,   nil,   nil,
    63,    23,   nil,   nil,   nil,   nil,    56,   nil,   nil,    63,
   nil,   nil,   nil,   nil,    23,    23,    23,    23,   nil,    56,
    56,    56,    56,    63,    63,    63,    64,   nil,   nil,   nil,
    64,    66,   nil,   nil,    74,    66,   nil,   nil,    74,    64,
   nil,   nil,   nil,   nil,    66,   nil,   nil,    74,   nil,   nil,
   nil,   nil,    64,    64,    64,    64,   nil,    66,    66,    66,
    66,    74,    74,    74,    78,   nil,   nil,   nil,    78,    79,
   nil,   nil,   nil,    79,    80,   nil,   nil,    78,    80,   nil,
   nil,    89,    79,   nil,   nil,    89,   nil,    80,   nil,   nil,
    78,    78,    78,    78,    89,    79,    79,    79,    79,   nil,
    80,    80,    80,    80,   nil,   nil,   nil,    90,    89,    89,
    89,    90,    91,   nil,   nil,    92,    91,   nil,    93,    92,
    90,   nil,    93,   nil,   nil,    91,   nil,   nil,    92,   nil,
   nil,    93,   nil,   nil,    90,    90,    90,   nil,   nil,    91,
    91,    91,    92,    92,    92,    93,    93,    93,    94,   nil,
   nil,    95,    94,   nil,    96,    95,   nil,   nil,    96,    97,
   nil,    94,   nil,    97,    95,   nil,   nil,    96,   nil,   nil,
   nil,   nil,    97,   nil,   nil,    94,    94,    94,    95,    95,
    95,    96,    96,    96,   nil,    98,    97,    97,    97,    98,
    99,   nil,   nil,   100,    99,   nil,   101,   100,    98,   nil,
   101,   nil,   nil,    99,   nil,   nil,   100,   nil,   nil,   101,
   nil,   nil,    98,    98,    98,   nil,   nil,    99,    99,    99,
   100,   100,   100,   101,   101,   101,   102,   nil,   nil,   nil,
   102,   155,   nil,   155,   nil,   155,   159,   nil,   nil,   102,
   159,   nil,   nil,   162,   155,   nil,   nil,   162,   163,   159,
   nil,   nil,   163,   102,   102,   102,   162,   155,   155,   155,
   155,   163,   159,   159,   159,   159,   nil,   nil,   nil,   167,
   162,   162,   162,   167,   177,   163,   163,   163,   177,   nil,
   nil,   nil,   167,   nil,   nil,   nil,   nil,   177,   140,   140,
   140,   140,   140,   140,   nil,   167,   167,   167,   167,   nil,
   177,   177,   177,   177,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,   nil,   nil,   nil,   nil,    11,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,   nil,   nil,   nil,
   nil,    82,    61,    61,    61,    61,    61,    61,   nil,    61,
    61,    61,    61,    61,    61,    61,   nil,   nil,   nil,   nil,
   nil,    61,   106,   106,   106,   106,   106,   106,   nil,   106,
   106,   106,   106,   106,   106,   106,   119,   nil,   nil,   nil,
   nil,   106,   nil,   nil,   nil,   nil,   nil,   119,   119,   119,
   119,   119,   119,    73,    73,    73,    73,    73,    73,   nil,
   nil,    73,    73,    73,    73,   141,   141,   141,   141,   141,
   141,   142,   142,   142,   142,   142,   142,   143,   143,   143,
   143,   143,   143,   144,   144,   144,   144,   144,   144,   145,
   145,   145,   145,   145,   145,   146,   146,   146,   146,   146,
   146,   171,   171,   171,   171,   171,   171,   172,   172,   172,
   172,   172,   172 ]

racc_action_pointer = [
   nil,     5,    32,    40,   nil,    13,   nil,    43,   -15,    38,
   nil,   606,   nil,   nil,    83,   -32,   105,   nil,   228,   234,
   nil,   239,   245,   271,    70,    -4,    89,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -34,   nil,   105,   nil,
    36,   nil,    -4,   nil,   nil,   nil,   276,   nil,   nil,   nil,
   nil,   623,   nil,   279,   309,   nil,   314,   nil,   nil,   108,
   nil,    -6,   140,   674,   317,   163,     4,   nil,   347,   352,
   357,   137,   630,   nil,   nil,    42,   174,   nil,   nil,   364,
   390,   395,   398,   401,   431,   434,   437,   442,   468,   473,
   476,   479,   509,   130,   202,   146,   643,   nil,    71,   nil,
   nil,   nil,   104,   144,   145,   nil,   nil,   nil,   nil,   668,
   137,   144,   nil,   nil,   nil,   202,   155,   nil,   nil,   172,
   nil,   nil,   nil,    66,    99,   160,   163,   164,   165,   196,
   559,   686,   692,   698,   704,   710,   716,   nil,   nil,     4,
   216,   -11,    -7,   217,   201,   514,   nil,   240,   nil,   519,
   170,   nil,   526,   531,   nil,   nil,   nil,   552,   nil,    -3,
   nil,   722,   728,    45,   nil,   203,   nil,   557,   106,   nil,
   nil ]

racc_action_default = [
    -3,  -111,    -1,  -111,    -2,  -111,   181,   -52,   -51,    -6,
   -53,  -111,   -49,   -50,  -111,  -104,    -7,    -9,  -111,  -111,
   -12,  -111,  -111,  -111,   -30,  -111,  -111,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,   -97,
   -98,   -99,  -100,  -101,  -102,  -103,  -111,   -56,  -111,   -58,
  -104,    -5,  -105,  -106,  -108,  -109,  -111,   -10,   -46,   -47,
   -48,   -59,   -60,  -111,  -111,   -69,  -111,   -81,   -82,   -83,
   -11,  -111,  -111,  -111,  -111,  -111,  -111,   -31,  -111,  -111,
  -111,  -111,  -111,   -57,    -4,  -105,    -8,  -107,   -14,  -111,
  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,  -111,
  -111,  -111,  -111,   -67,  -111,  -111,   -79,   -80,    -6,   -23,
   -24,  -110,    -6,  -111,  -111,   -19,   -20,   -21,   -22,  -111,
    -6,   -29,   -32,   -35,   -36,   -37,   -38,   -39,   -44,  -111,
   -45,   -54,   -55,   -61,   -62,   -63,   -64,   -65,   -66,   -70,
   -71,   -72,   -73,   -74,   -75,   -76,   -77,   -68,   -78,   -25,
  -111,  -111,  -111,  -111,  -111,  -111,   -84,  -111,   -26,  -111,
    -6,   -15,  -111,  -111,   -16,   -33,   -34,   -41,   -13,  -111,
   -28,   -17,   -18,  -111,   -42,    -6,   -40,  -111,   -25,   -43,
   -27 ]

racc_goto_table = [
    14,    26,    48,   108,    57,    70,    51,    71,    73,    75,
   114,    52,   127,   113,   124,   123,   157,   105,    87,   107,
     1,     2,     4,    47,     7,     9,    86,    72,   131,    76,
   121,   173,    10,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    84,    88,   nil,    26,   180,    85,   nil,   nil,   103,
   104,    87,   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   119,   nil,   nil,   nil,   128,   129,   nil,   nil,   126,   nil,
   nil,   nil,   nil,    48,   nil,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   163,
   127,   162,   165,   166,   132,   nil,   nil,   nil,   nil,   149,
    26,   175,   nil,   150,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   153,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   169,   126,   nil,   171,   172,
   nil,   170,    26,   174,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   179,   nil,   nil,   178,    26 ]

racc_goto_check = [
     6,    27,    22,    14,    12,    12,     7,    12,    17,    12,
    19,    10,    13,    18,    25,    26,    15,    33,    35,    33,
     1,     2,     3,    32,     4,     5,     9,    16,    20,    23,
    24,    28,    30,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     7,    12,   nil,    27,    15,    10,   nil,   nil,    17,
    17,    35,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,    12,    12,   nil,   nil,    27,   nil,
   nil,   nil,   nil,    22,   nil,    17,    17,    17,    17,    17,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    19,
    13,    18,    25,    26,    32,   nil,   nil,   nil,   nil,     6,
    27,    14,   nil,     6,    27,   nil,   nil,   nil,   nil,   nil,
   nil,     6,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,    27,   nil,    17,    17,
   nil,     6,    27,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,     6,    27 ]

racc_goto_pointer = [
   nil,    20,    21,    20,    19,    18,    -9,    -9,   nil,   -26,
    -4,   nil,   -14,   -64,   -68,  -133,     5,   -14,   -60,   -63,
   -53,   nil,    -9,     5,   -46,   -62,   -61,    -8,  -136,   nil,
    25,    22,    12,   -47,   nil,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,    16,
   nil,    17,   130,    20,   nil,   nil,   nil,    61,   nil,   nil,
   110,   158,    24,   nil,   nil,   nil,   nil,    67,   nil,    68,
   nil,   nil,   nil,    62,    65,    53 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_1,
  2, 71, :_reduce_2,
  0, 71, :_reduce_3,
  6, 72, :_reduce_4,
  2, 75, :_reduce_5,
  0, 77, :_reduce_6,
  1, 77, :_reduce_7,
  3, 77, :_reduce_8,
  1, 78, :_reduce_9,
  2, 78, :_reduce_10,
  2, 78, :_reduce_11,
  1, 78, :_reduce_12,
  6, 78, :_reduce_13,
  3, 78, :_reduce_14,
  5, 78, :_reduce_15,
  5, 78, :_reduce_16,
  5, 85, :_reduce_17,
  5, 85, :_reduce_18,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  0, 84, :_reduce_25,
  1, 84, :_reduce_26,
  5, 84, :_reduce_27,
  2, 90, :_reduce_28,
  3, 80, :_reduce_29,
  0, 92, :_reduce_30,
  1, 92, :_reduce_31,
  2, 92, :_reduce_32,
  3, 93, :_reduce_33,
  3, 93, :_reduce_34,
  1, 93, :_reduce_35,
  1, 93, :_reduce_36,
  1, 95, :_reduce_37,
  1, 95, :_reduce_38,
  1, 94, :_reduce_none,
  5, 94, :_reduce_40,
  0, 97, :_reduce_41,
  1, 97, :_reduce_42,
  3, 97, :_reduce_43,
  3, 82, :_reduce_44,
  3, 82, :_reduce_45,
  1, 98, :_reduce_46,
  1, 98, :_reduce_47,
  1, 98, :_reduce_48,
  2, 73, :_reduce_49,
  2, 73, :_reduce_50,
  1, 73, :_reduce_51,
  0, 74, :_reduce_52,
  1, 74, :_reduce_none,
  4, 99, :_reduce_54,
  3, 100, :_reduce_55,
  1, 100, :_reduce_56,
  2, 101, :_reduce_57,
  1, 101, :_reduce_58,
  1, 81, :_reduce_59,
  1, 81, :_reduce_60,
  3, 86, :_reduce_61,
  3, 86, :_reduce_62,
  3, 86, :_reduce_63,
  3, 86, :_reduce_64,
  3, 86, :_reduce_65,
  3, 86, :_reduce_66,
  2, 86, :_reduce_67,
  3, 86, :_reduce_68,
  1, 86, :_reduce_69,
  3, 102, :_reduce_70,
  3, 102, :_reduce_71,
  3, 102, :_reduce_72,
  3, 102, :_reduce_73,
  3, 102, :_reduce_74,
  3, 102, :_reduce_75,
  3, 102, :_reduce_76,
  3, 102, :_reduce_77,
  3, 102, :_reduce_78,
  2, 102, :_reduce_79,
  2, 102, :_reduce_80,
  1, 103, :_reduce_81,
  1, 103, :_reduce_82,
  1, 103, :_reduce_83,
  4, 96, :_reduce_84,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_103,
  0, 76, :_reduce_104,
  1, 76, :_reduce_105,
  1, 79, :_reduce_106,
  2, 79, :_reduce_107,
  1, 104, :_reduce_108,
  1, 104, :_reduce_none,
  1, 89, :_reduce_110 ]

racc_reduce_n = 111

racc_shift_n = 181

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kDTYPE_UINT => 18,
  :kDTYPE_LINT => 19,
  :kDTYPE_LLINT => 20,
  :kDTYPE_CHAR => 21,
  :kDTYPE_I8 => 22,
  :kDTYPE_I16 => 23,
  :kDTYPE_I32 => 24,
  :kDTYPE_I64 => 25,
  :kDTYPE_UI8 => 26,
  :kDTYPE_UI16 => 27,
  :kDTYPE_UI32 => 28,
  :kDTYPE_UI64 => 29,
  :kDTYPE_INT => 30,
  :kDTYPE_F32 => 31,
  :kDTYPE_F64 => 32,
  :kDTYPE_LF64 => 33,
  :kDTYPE_ROBJ => 34,
  :kDTYPE_ULINT => 35,
  :kDTYPE_ULLINT => 36,
  :tLPAREN => 37,
  :tRPAREN => 38,
  :tLSQUARE => 39,
  :tRSQUARE => 40,
  :tIDENTIFIER => 41,
  :tNL => 42,
  :tCOMMA => 43,
  :tSQUOTE => 44,
  :tSCOLON => 45,
  :EOF => 46,
  :tDOT => 47,
  :tQMARK => 48,
  :tPLUS => 49,
  :tMINUS => 50,
  :tSTAR => 51,
  :tDIVIDE => 52,
  :tEXPO => 53,
  :tMODULUS => 54,
  :tASSIGN => 55,
  :tEQ => 56,
  :tLT => 57,
  :tLTEQ => 58,
  :tGT => 59,
  :tGTEQ => 60,
  :tANDOP => 61,
  :tOROP => 62,
  :tBANG => 63,
  :tINTEGER => 64,
  :tFLOAT => 65,
  :tSINGLE_CHAR => 66,
  :UMINUS => 67,
  :tNEQ => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "methods",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_terms",
  "stmts",
  "stmt",
  "terms",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "dtype",
  "opt_star",
  "decl_or_init",
  "var_init",
  "normal_decl",
  "array_ref",
  "array_list",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "atomic_value",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_4(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_7(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_9(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          if di[:name].is_a? Expression::ArrayRef
            var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
          else
            var = Statement::VarDecl.new(dtype, di[:name], di[:value])
          end
          variables << var
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_10(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_11(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_12(val, _values, result)
          match = val[0]
      result = Statement::Assign.new match[:name], match[:value]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_13(val, _values, result)
          result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_14(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_15(val, _values, result)
          result = Statement::For.new *val[1], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_16(val, _values, result)
     result = Statement::While.new val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_17(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_18(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_25(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_26(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_27(val, _values, result)
          result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_28(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_29(val, _values, result)
            result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_30(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_31(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_32(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_34(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_35(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_37(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_38(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 143)
  def _reduce_40(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_41(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_42(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_43(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_44(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_45(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_46(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_47(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_48(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_49(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_50(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_52(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_54(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_55(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_56(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_57(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_58(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_59(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_60(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_61(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_62(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_63(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_64(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_65(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_66(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_67(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_69(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_70(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_71(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_72(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_73(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_74(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_75(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_76(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_77(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_79(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_80(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_83(val, _values, result)
     result = Expression::Name.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_84(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_103(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_104(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_105(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_106(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_107(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_108(val, _values, result)
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_110(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
