#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 444)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cdef"
    return [:kCDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    72,    73,    75,   176,   186,   176,   194,    76,    77,    15,
   116,    92,    93,    94,    79,   115,    67,   106,   134,   135,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    98,    13,    58,    64,    85,    64,   278,   163,   240,   141,
    22,   261,   164,   174,    97,   241,   262,   106,    59,   134,
   135,     9,    14,   134,   135,   134,   135,    99,   144,    91,
    88,    89,    90,    72,    73,    75,    19,   134,   135,    20,
    76,    77,   134,   135,    92,    93,    94,    79,    19,    67,
    23,    20,    25,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    98,    13,   142,   142,    85,    13,    48,
   141,    19,   142,   140,    20,    58,    53,    97,    19,    13,
   140,    20,   138,    10,     9,    14,    54,    10,     9,    14,
    99,    59,    91,    88,    89,    90,    72,    73,    75,     9,
    14,    57,    19,    76,    77,    20,    61,    92,    93,    94,
    79,    19,    67,    62,    20,    64,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    98,    13,   223,    19,
    85,    19,    20,   141,    20,   142,   148,   149,   150,   151,
    97,    19,   281,   140,    20,   282,    65,     9,    14,   134,
   135,    64,   138,    99,   106,    91,    88,    89,    90,    72,
    73,    75,   148,   149,   150,   151,    76,    77,   134,   135,
    92,    93,    94,    79,    19,    67,    57,    20,   117,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    98,
   134,   135,   218,    85,   146,   147,   148,   149,   150,   151,
   134,   135,   120,    97,   146,   147,   148,   149,   150,   151,
   133,   152,   154,   155,   156,   157,    99,   136,    91,    88,
    89,    90,    72,    73,    75,   153,   134,   135,    61,    76,
    77,   134,   135,    92,    93,    94,    79,   143,    67,   134,
   135,   165,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    98,   251,   252,   169,    85,   146,   147,   148,
   149,   150,   151,   181,   182,   170,    97,   146,   147,   148,
   149,   150,   151,   171,   152,   154,   155,   156,   157,    99,
   141,    91,    88,    89,    90,    72,    73,    75,   153,   183,
   184,   174,    76,    77,   134,   135,    92,    93,    94,    79,
   178,    67,   251,   252,   187,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    98,   134,   135,   199,    85,
   146,   147,   148,   149,   150,   151,   150,   219,    64,    97,
   146,   147,   148,   149,   150,   151,   222,   152,   154,   155,
   156,   157,    99,   226,    91,    88,    89,    90,    72,    73,
    75,   153,   227,   120,   234,    76,    77,   235,    64,    92,
    93,    94,    79,   134,    67,   238,   239,   144,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    98,   150,
   150,   218,    85,   146,   147,   148,   149,   150,   151,   150,
   150,   248,    97,   146,   147,   148,   149,   150,   151,   146,
   147,   148,   149,   150,   151,    99,   253,    91,    88,    89,
    90,    72,    73,    75,   256,   194,   263,    61,    76,    77,
   266,   271,    92,    93,    94,    79,   283,    67,    92,    93,
    94,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    98,   142,   278,   nil,    85,   nil,    98,   nil,   nil,
   nil,   124,    92,    93,    94,    97,   nil,   nil,    92,    93,
    94,    97,   nil,    92,    93,    94,   nil,   nil,    99,   nil,
    91,    88,    89,    90,    99,   nil,    91,    88,    89,    90,
   nil,    98,   nil,   nil,   nil,   124,   nil,    98,   nil,   nil,
   nil,   124,   131,   nil,   nil,    97,   124,    92,    93,    94,
   nil,    97,    92,    93,    94,   nil,    97,   nil,    99,   nil,
    91,    88,    89,    90,    99,   nil,    91,    88,    89,    90,
   nil,    91,    88,    89,    90,   nil,    98,   nil,   nil,   nil,
   124,   131,   nil,   nil,   nil,   124,    92,    93,    94,   nil,
    97,   nil,    92,    93,    94,    97,   nil,   nil,    92,    93,
    94,   nil,   nil,    99,   nil,    91,    88,    89,    90,   nil,
    91,    88,    89,    90,   nil,    98,   nil,   nil,   nil,   124,
   nil,    98,   nil,   nil,   nil,   124,   nil,    98,   nil,    97,
   nil,   124,    92,    93,    94,    97,   nil,   nil,    92,    93,
    94,    97,    99,   nil,    91,    88,    89,    90,    99,   nil,
    91,    88,    89,    90,    99,   nil,    91,    88,    89,    90,
   nil,   131,   nil,   nil,   nil,   124,   nil,    98,   nil,   nil,
   nil,   124,    92,    93,    94,    97,   nil,   nil,    92,    93,
    94,    97,   nil,   nil,    92,    93,    94,   nil,   nil,   nil,
    91,    88,    89,    90,    99,   nil,    91,    88,    89,    90,
   nil,    98,   nil,   nil,   nil,   124,   nil,    98,   nil,   nil,
   nil,   124,   nil,    98,   nil,    97,   nil,   124,    92,    93,
    94,    97,   nil,   nil,    92,    93,    94,    97,    99,   nil,
    91,    88,    89,    90,    99,   nil,    91,    88,    89,    90,
    99,   nil,    91,    88,    89,    90,   nil,    98,   nil,   nil,
   nil,   124,   nil,    98,   nil,   nil,   nil,   124,    92,    93,
    94,    97,   nil,   nil,    92,    93,    94,    97,   nil,    92,
    93,    94,   nil,   nil,    99,   nil,    91,    88,    89,    90,
    99,   nil,    91,    88,    89,    90,   nil,    98,   nil,   nil,
   nil,   124,   nil,    98,   nil,   nil,   nil,   124,   131,   nil,
   nil,    97,   124,    92,    93,    94,   nil,    97,    92,    93,
    94,   nil,    97,   nil,    99,   nil,    91,    88,    89,    90,
    99,   nil,    91,    88,    89,    90,   nil,    91,    88,    89,
    90,   nil,   131,   nil,   nil,   nil,   124,   131,   nil,   nil,
   nil,   124,    92,    93,    94,   nil,    97,    92,    93,    94,
   nil,    97,   nil,    92,    93,    94,   nil,   nil,   nil,   nil,
   nil,    91,    88,    89,    90,   nil,    91,    88,    89,    90,
   nil,   131,   nil,   nil,   nil,   124,   131,   nil,   nil,   nil,
   124,   nil,   131,   nil,   nil,    97,   124,    92,    93,    94,
    97,   nil,    92,    93,    94,   nil,    97,   nil,   nil,   nil,
    91,    88,    89,    90,   nil,    91,    88,    89,    90,   nil,
   nil,    91,    88,    89,    90,   nil,   131,   nil,   nil,   nil,
   124,   131,   nil,   nil,   nil,   124,    92,    93,    94,   nil,
    97,    92,    93,    94,   nil,    97,   nil,    92,    93,    94,
   nil,   nil,   nil,   nil,   nil,    91,    88,    89,    90,   nil,
    91,    88,    89,    90,   nil,   131,   nil,   nil,   nil,   124,
   131,   nil,   nil,   nil,   124,   nil,   131,   nil,   nil,    97,
   124,    92,    93,    94,    97,   nil,   nil,    92,    93,    94,
    97,   nil,   nil,   nil,    91,    88,    89,    90,   nil,    91,
    88,    89,    90,   nil,   nil,    91,    88,    89,    90,   nil,
   131,   nil,   nil,   nil,   124,   nil,    98,   nil,   nil,   nil,
   124,    92,    93,    94,    97,   nil,   nil,    92,    93,    94,
    97,   nil,    92,    93,    94,   nil,   nil,   nil,   nil,    91,
    88,    89,    90,    99,   nil,    91,    88,    89,    90,   nil,
    98,   nil,   260,   nil,   124,   nil,    98,   nil,   nil,   nil,
   124,   131,   nil,   nil,    97,   124,    92,    93,    94,   nil,
    97,   nil,    92,    93,    94,    97,   nil,    99,   nil,    91,
    88,    89,    90,    99,   nil,    91,    88,    89,    90,   nil,
    91,    88,    89,    90,   nil,   131,   nil,   nil,   nil,   124,
   nil,    98,   nil,   nil,   nil,   124,    92,    93,    94,    97,
   nil,   nil,   nil,   nil,   nil,    97,   146,   147,   148,   149,
   150,   151,   nil,   nil,    91,    88,    89,    90,    99,   nil,
    91,    88,    89,    90,   nil,    98,   nil,   nil,   nil,   124,
   146,   147,   148,   149,   150,   151,   nil,   nil,   nil,    97,
   nil,   nil,   nil,   224,   146,   147,   148,   149,   150,   151,
   nil,   nil,    99,   nil,    91,    88,    89,    90,   112,   nil,
    67,   nil,   nil,   nil,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,    20,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,   nil,   nil,   nil,   nil,   112,    19,    67,
   nil,    20,   nil,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,   230,   nil,   nil,   nil,   nil,   nil,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,   nil,
   nil,   nil,   nil,   105,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,   nil,   nil,   nil,   nil,   105,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,   146,
   147,   148,   149,   150,   151,   nil,   nil,   181,   182,   183,
   184 ]

racc_action_check = [
    55,    55,    55,   128,   132,   267,   137,    55,    55,     1,
    67,    55,    55,    55,    55,    67,    55,   137,    82,    82,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    21,    25,   128,    55,   267,   265,   102,   202,    87,
     9,   242,   102,   202,    55,   203,   242,   265,    25,   132,
   132,    21,    21,   128,   128,   267,   267,    55,    87,    55,
    55,    55,    55,   107,   107,   107,     2,   203,   203,     2,
   107,   107,   121,   121,   107,   107,   107,   107,    21,   107,
    10,    21,    13,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,    17,   194,   199,   107,     0,    15,
   124,     5,   124,   194,     5,   199,    22,   107,    69,    63,
   124,    69,   194,    17,    17,    17,    23,     0,     0,     0,
   107,   199,   107,   107,   107,   107,   119,   119,   119,    63,
    63,    24,   108,   119,   119,   108,    26,   119,   119,   119,
   119,    17,   119,    27,    17,    52,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   167,   167,   109,
   119,   119,   109,    85,   119,    85,   206,   206,   206,   206,
   119,   245,   272,    85,   245,   272,    53,   167,   167,   127,
   127,    54,    85,   119,    60,   119,   119,   119,   119,   175,
   175,   175,   207,   207,   207,   207,   175,   175,   173,   173,
   175,   175,   175,   175,   167,   175,    62,   167,    68,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   190,   190,   159,   175,   212,   212,   212,   212,   212,   212,
   198,   198,    70,   175,   159,   159,   159,   159,   159,   159,
    79,   159,   159,   159,   159,   159,   175,    83,   175,   175,
   175,   175,   178,   178,   178,   159,   204,   204,    84,   178,
   178,   205,   205,   178,   178,   178,   178,    86,   178,   231,
   231,   104,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   232,   232,   111,   178,   213,   213,   213,
   213,   213,   213,   234,   234,   112,   178,    95,    95,    95,
    95,    95,    95,   114,    95,    95,    95,    95,    95,   178,
   125,   178,   178,   178,   178,   186,   186,   186,    95,   235,
   235,   126,   186,   186,   273,   273,   186,   186,   186,   186,
   129,   186,   284,   284,   133,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   285,   285,   140,   186,
   214,   214,   214,   214,   214,   214,   158,   160,   163,   186,
   161,   161,   161,   161,   161,   161,   166,   161,   161,   161,
   161,   161,   186,   169,   186,   186,   186,   186,   252,   252,
   252,   161,   170,   172,   179,   252,   252,   180,   187,   252,
   252,   252,   252,   189,   252,   191,   195,   197,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   252,
   252,   252,   252,   252,   252,   252,   252,   252,   252,   208,
   209,   185,   252,   215,   215,   215,   215,   215,   215,   210,
   211,   230,   252,   185,   185,   185,   185,   185,   185,   216,
   216,   216,   216,   216,   216,   252,   233,   252,   252,   252,
   252,   280,   280,   280,   236,   238,   244,   247,   280,   280,
   249,   257,   280,   280,   280,   280,   276,   280,    72,    72,
    72,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
   280,   280,   278,   283,   nil,   280,   nil,    72,   nil,   nil,
   nil,    72,    73,    73,    73,   280,   nil,   nil,    75,    75,
    75,    72,   nil,    76,    76,    76,   nil,   nil,   280,   nil,
   280,   280,   280,   280,    72,   nil,    72,    72,    72,    72,
   nil,    73,   nil,   nil,   nil,    73,   nil,    75,   nil,   nil,
   nil,    75,    76,   nil,   nil,    73,    76,    77,    77,    77,
   nil,    75,    97,    97,    97,   nil,    76,   nil,    73,   nil,
    73,    73,    73,    73,    75,   nil,    75,    75,    75,    75,
   nil,    76,    76,    76,    76,   nil,    77,   nil,   nil,   nil,
    77,    97,   nil,   nil,   nil,    97,    98,    98,    98,   nil,
    77,   nil,    99,    99,    99,    97,   nil,   nil,   120,   120,
   120,   nil,   nil,    77,   nil,    77,    77,    77,    77,   nil,
    97,    97,    97,    97,   nil,    98,   nil,   nil,   nil,    98,
   nil,    99,   nil,   nil,   nil,    99,   nil,   120,   nil,    98,
   nil,   120,   131,   131,   131,    99,   nil,   nil,   134,   134,
   134,   120,    98,   nil,    98,    98,    98,    98,    99,   nil,
    99,    99,    99,    99,   120,   nil,   120,   120,   120,   120,
   nil,   131,   nil,   nil,   nil,   131,   nil,   134,   nil,   nil,
   nil,   134,   135,   135,   135,   131,   nil,   nil,   136,   136,
   136,   134,   nil,   nil,   138,   138,   138,   nil,   nil,   nil,
   131,   131,   131,   131,   134,   nil,   134,   134,   134,   134,
   nil,   135,   nil,   nil,   nil,   135,   nil,   136,   nil,   nil,
   nil,   136,   nil,   138,   nil,   135,   nil,   138,   141,   141,
   141,   136,   nil,   nil,   142,   142,   142,   138,   135,   nil,
   135,   135,   135,   135,   136,   nil,   136,   136,   136,   136,
   138,   nil,   138,   138,   138,   138,   nil,   141,   nil,   nil,
   nil,   141,   nil,   142,   nil,   nil,   nil,   142,   143,   143,
   143,   141,   nil,   nil,   144,   144,   144,   142,   nil,   146,
   146,   146,   nil,   nil,   141,   nil,   141,   141,   141,   141,
   142,   nil,   142,   142,   142,   142,   nil,   143,   nil,   nil,
   nil,   143,   nil,   144,   nil,   nil,   nil,   144,   146,   nil,
   nil,   143,   146,   147,   147,   147,   nil,   144,   148,   148,
   148,   nil,   146,   nil,   143,   nil,   143,   143,   143,   143,
   144,   nil,   144,   144,   144,   144,   nil,   146,   146,   146,
   146,   nil,   147,   nil,   nil,   nil,   147,   148,   nil,   nil,
   nil,   148,   149,   149,   149,   nil,   147,   150,   150,   150,
   nil,   148,   nil,   151,   151,   151,   nil,   nil,   nil,   nil,
   nil,   147,   147,   147,   147,   nil,   148,   148,   148,   148,
   nil,   149,   nil,   nil,   nil,   149,   150,   nil,   nil,   nil,
   150,   nil,   151,   nil,   nil,   149,   151,   152,   152,   152,
   150,   nil,   153,   153,   153,   nil,   151,   nil,   nil,   nil,
   149,   149,   149,   149,   nil,   150,   150,   150,   150,   nil,
   nil,   151,   151,   151,   151,   nil,   152,   nil,   nil,   nil,
   152,   153,   nil,   nil,   nil,   153,   154,   154,   154,   nil,
   152,   155,   155,   155,   nil,   153,   nil,   156,   156,   156,
   nil,   nil,   nil,   nil,   nil,   152,   152,   152,   152,   nil,
   153,   153,   153,   153,   nil,   154,   nil,   nil,   nil,   154,
   155,   nil,   nil,   nil,   155,   nil,   156,   nil,   nil,   154,
   156,   157,   157,   157,   155,   nil,   nil,   174,   174,   174,
   156,   nil,   nil,   nil,   154,   154,   154,   154,   nil,   155,
   155,   155,   155,   nil,   nil,   156,   156,   156,   156,   nil,
   157,   nil,   nil,   nil,   157,   nil,   174,   nil,   nil,   nil,
   174,   239,   239,   239,   157,   nil,   nil,   251,   251,   251,
   174,   nil,   254,   254,   254,   nil,   nil,   nil,   nil,   157,
   157,   157,   157,   174,   nil,   174,   174,   174,   174,   nil,
   239,   nil,   239,   nil,   239,   nil,   251,   nil,   nil,   nil,
   251,   254,   nil,   nil,   239,   254,   255,   255,   255,   nil,
   251,   nil,   260,   260,   260,   254,   nil,   239,   nil,   239,
   239,   239,   239,   251,   nil,   251,   251,   251,   251,   nil,
   254,   254,   254,   254,   nil,   255,   nil,   nil,   nil,   255,
   nil,   260,   nil,   nil,   nil,   260,   282,   282,   282,   255,
   nil,   nil,   nil,   nil,   nil,   260,   217,   217,   217,   217,
   217,   217,   nil,   nil,   255,   255,   255,   255,   260,   nil,
   260,   260,   260,   260,   nil,   282,   nil,   nil,   nil,   282,
   269,   269,   269,   269,   269,   269,   nil,   nil,   nil,   282,
   nil,   nil,   nil,   168,   270,   270,   270,   270,   270,   270,
   nil,   nil,   282,   nil,   282,   282,   282,   282,   168,   nil,
   168,   nil,   nil,   nil,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,   nil,   nil,   nil,   nil,   nil,   168,
   nil,   nil,   168,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   264,   nil,   nil,   nil,   nil,    66,   264,    66,
   nil,   264,   nil,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,   171,   nil,   nil,   nil,   nil,   nil,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,   nil,
   nil,   nil,   nil,    57,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   nil,   nil,   nil,   nil,   164,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,    14,    14,    14,    14,    14,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
   226,   226,   226,   226,   226,   226,   226,   226,   226,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   262,
   262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   262,   262,   262,   262,   262,   130,
   130,   130,   130,   130,   130,   nil,   nil,   130,   130,   130,
   130 ]

racc_action_pointer = [
   116,     9,    27,   nil,   nil,    72,   nil,   nil,   nil,     2,
    17,   nil,   nil,    44,  1355,   119,   nil,   112,   nil,   nil,
   nil,    39,    61,   122,   107,   -13,    97,   115,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116,   158,   162,    -4,   nil,  1305,   nil,   nil,
   155,   nil,   192,   127,   nil,   nil,  1259,   -33,   235,    79,
   266,   nil,   513,   547,   nil,   553,   558,   592,   nil,   232,
   nil,   nil,   -51,   215,   239,   149,   244,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   290,   nil,   597,   631,   637,
   nil,   nil,     2,   nil,   263,   nil,   nil,    69,   103,   140,
   nil,   287,   297,   nil,   290,   nil,   nil,   nil,   nil,   142,
   643,    13,   nil,   nil,    76,   316,   321,   140,    -6,   366,
  1422,   677,   -10,   370,   683,   717,   723,   -42,   729,   nil,
   360,   763,   769,   803,   809,   nil,   814,   848,   853,   887,
   892,   898,   932,   937,   971,   976,   982,  1016,   355,   217,
   372,   363,   nil,   369,  1330,   nil,   423,   185,  1200,   389,
   428,  1285,   437,   159,  1022,   215,   nil,   nil,   288,   396,
   399,   nil,   nil,   nil,   nil,   436,   361,   399,   nil,   384,
   191,   405,   nil,   nil,    69,   393,   nil,   394,   201,    70,
   nil,   nil,     3,     8,   227,   232,   137,   163,   418,   419,
   428,   429,   207,   280,   353,   426,   442,  1109,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1375,  1395,   nil,   nil,
   443,   240,   326,   503,   278,   302,   511,  1415,   467,  1056,
   nil,   nil,     6,   nil,   513,   152,   nil,   458,   nil,   517,
   nil,  1062,   434,   nil,  1067,  1101,   nil,   518,   nil,   nil,
  1107,   nil,  1435,   nil,  1229,    -2,   nil,    -4,   nil,  1133,
  1147,   nil,   155,   305,   nil,   nil,   476,   nil,   506,   nil,
   507,   nil,  1141,   505,   375,   337,   nil,   nil ]

racc_action_default = [
    -6,  -168,  -161,    -2,    -4,  -168,    -7,    -9,   -10,  -168,
  -168,   -29,   -30,  -168,  -168,  -168,    -1,  -162,  -163,  -165,
  -166,    -5,   -12,  -168,   -99,   -98,   -72,  -168,  -141,  -142,
  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,
  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,   288,    -3,
  -164,    -8,  -168,  -168,  -168,   -34,  -100,  -168,   -96,   -97,
   -20,   -73,   -99,    -6,  -167,   -13,  -168,  -168,  -168,  -161,
   -35,   -37,  -168,  -137,   -40,  -168,  -168,  -168,   -45,  -168,
   -47,   -48,   -49,  -118,   -72,  -135,  -128,  -135,   -89,   -90,
   -91,   -92,   -93,   -94,   -95,  -106,  -107,  -168,  -168,  -168,
  -129,  -131,  -168,  -102,  -168,  -105,   -74,   -34,  -168,  -168,
   -15,  -168,  -168,   -19,  -168,   -22,   -23,   -31,   -33,  -162,
  -168,   -38,  -118,  -128,  -135,  -135,   -39,  -138,  -168,  -168,
  -168,  -168,  -168,   -50,  -168,  -168,  -168,  -168,  -168,  -130,
  -168,  -137,  -168,  -168,  -168,  -132,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -116,  -168,
  -168,  -126,  -127,  -168,  -168,  -104,  -168,  -168,  -168,  -168,
  -168,  -168,   -36,   -42,  -168,   -34,   -65,   -66,   -34,  -168,
  -168,   -61,   -62,   -63,   -64,  -168,   -34,  -168,  -108,  -109,
   -58,   -71,   -77,   -78,   -79,   -80,   -81,  -168,   -86,   -98,
  -133,  -134,  -168,  -168,   -87,   -88,  -110,  -111,  -112,  -113,
  -114,  -115,  -119,  -120,  -121,  -122,  -123,  -124,  -117,  -125,
  -101,  -103,   -32,   -11,   -14,   -16,   -26,   -52,   -21,   -24,
  -168,  -139,   -67,  -168,  -168,  -168,  -168,   -52,  -168,  -168,
  -136,  -140,  -168,   -27,  -168,  -168,   -53,   -72,   -25,  -168,
   -68,  -168,   -34,   -43,  -168,  -168,   -44,  -168,   -75,   -76,
   -83,   -17,  -168,   -18,   -51,  -168,   -41,  -168,   -70,   -59,
   -60,   -46,  -168,   -84,   -28,   -54,   -55,   -56,   -79,   -80,
   -34,   -82,  -168,  -168,   -67,   -85,   -57,   -69 ]

racc_goto_table = [
    26,    17,    50,    27,    21,    68,    50,    86,    60,    83,
    51,    87,   175,   103,    24,   192,   110,   113,   126,   180,
    16,     3,   179,   244,   249,     1,    55,   145,    63,     2,
    66,   108,   196,   257,   193,   160,   162,    52,    49,   109,
   242,   114,   228,   104,   172,   129,   275,   276,   191,   272,
   102,   nil,    26,   nil,   nil,   nil,   nil,   166,   nil,    86,
   nil,    83,   nil,    87,   107,   145,   137,   nil,   119,   nil,
   nil,    86,   nil,    83,   nil,    87,   287,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   202,   118,   nil,   195,
   nil,   nil,   201,   197,   nil,   nil,   121,   127,   nil,   128,
   130,   132,   nil,   nil,    50,   nil,   nil,   167,   168,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   259,   nil,   225,   113,
   221,   158,   159,   161,   255,   232,   254,    86,   233,    83,
    86,    87,    83,   196,    87,   258,   236,   nil,    86,   220,
    83,   200,    87,   277,   173,   nil,   nil,   nil,   nil,   nil,
   104,   280,    50,    50,    26,   185,    51,   229,   188,   189,
   190,   286,   198,   237,   nil,   127,   203,   204,   205,   nil,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   216,   217,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   195,   nil,   nil,   nil,   197,   nil,   nil,   nil,   231,   nil,
   nil,   nil,   268,   nil,    86,   nil,    83,   nil,    87,   nil,
   nil,   nil,    26,   247,   nil,   243,   nil,   279,   nil,   nil,
   nil,   nil,   nil,   247,   nil,   nil,   nil,   nil,   nil,   265,
   284,   nil,    86,   nil,    83,   279,    87,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,    26,    50,
   247,   274,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   204,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   267,   nil,   nil,   269,   270,
   nil,   nil,   nil,   nil,   273,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   285 ]

racc_goto_check = [
    19,     5,    60,    15,     5,    27,    60,    50,    20,    43,
     8,    52,    34,    56,    25,    42,    14,    18,    32,    46,
     3,     4,    45,    17,    35,     1,    26,    58,    12,     2,
    12,     7,    33,    17,    49,    57,    57,    11,     4,    13,
    16,    21,    22,    19,    29,    36,    40,    41,    48,    51,
    55,   nil,    19,   nil,   nil,   nil,   nil,    27,   nil,    50,
   nil,    43,   nil,    52,    26,    58,    20,   nil,     5,   nil,
   nil,    50,   nil,    43,   nil,    52,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    32,     3,   nil,    50,
   nil,   nil,    50,    52,   nil,   nil,    31,    31,   nil,    31,
    44,    31,   nil,   nil,    60,   nil,   nil,     5,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,    14,    18,
    56,    44,    44,    44,    46,    27,    45,    50,    27,    43,
    50,    52,    43,    33,    52,    49,    27,   nil,    50,    12,
    43,    25,    52,    42,    31,   nil,   nil,   nil,   nil,   nil,
    19,    34,    60,    60,    19,    44,     8,    19,    31,    31,
    31,    42,    31,    12,   nil,    31,    31,    31,    31,   nil,
    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
    44,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    50,   nil,   nil,   nil,    52,   nil,   nil,   nil,    31,   nil,
   nil,   nil,    27,   nil,    50,   nil,    43,   nil,    52,   nil,
   nil,   nil,    19,    19,   nil,    15,   nil,    50,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,    20,
    27,   nil,    50,   nil,    43,    50,    52,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,    19,    60,
    19,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    31,   nil,   nil,    44,    44,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31 ]

racc_goto_pointer = [
   nil,    25,    29,    18,    21,    -1,   nil,   -32,   -11,   nil,
   nil,    15,   -24,   -27,   -50,   -11,  -186,  -204,   -49,   -14,
   -18,   -26,  -129,   nil,   nil,     1,     2,   -50,   nil,   -75,
   nil,    24,   -55,  -105,  -116,  -208,   -31,   nil,   nil,   nil,
  -218,  -218,  -122,   -46,    24,  -108,  -111,   nil,   -89,  -103,
   -48,  -211,   -44,   nil,   nil,    -7,   -44,   -63,   -60,   nil,
   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,   nil,   177,   nil,   nil,   111,   nil,   nil,    81,    84,
   nil,   nil,   nil,    11,    12,   nil,   nil,   nil,    69,    70,
    71,    82,   nil,    74,   nil,   nil,   nil,    78,    80,   245,
   246,   nil,   nil,   122,    95,   nil,   nil,   250,   nil,   nil,
   123,   nil,   125,   100,    56,   nil,   nil,    96,   139,   101,
    18 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 80, :_reduce_1,
  1, 81, :_reduce_2,
  3, 81, :_reduce_3,
  1, 83, :_reduce_4,
  2, 83, :_reduce_5,
  0, 86, :_reduce_6,
  1, 86, :_reduce_7,
  3, 86, :_reduce_8,
  1, 87, :_reduce_9,
  1, 87, :_reduce_10,
  7, 89, :_reduce_11,
  0, 90, :_reduce_12,
  2, 90, :_reduce_13,
  7, 85, :_reduce_14,
  1, 92, :_reduce_15,
  3, 92, :_reduce_16,
  5, 93, :_reduce_17,
  5, 93, :_reduce_18,
  1, 93, :_reduce_none,
  2, 94, :_reduce_20,
  4, 97, :_reduce_21,
  1, 100, :_reduce_none,
  1, 100, :_reduce_23,
  1, 101, :_reduce_none,
  2, 101, :_reduce_25,
  0, 95, :_reduce_26,
  1, 95, :_reduce_27,
  3, 95, :_reduce_28,
  1, 88, :_reduce_29,
  1, 88, :_reduce_30,
  5, 102, :_reduce_31,
  6, 103, :_reduce_32,
  2, 106, :_reduce_33,
  0, 107, :_reduce_34,
  1, 107, :_reduce_35,
  3, 107, :_reduce_36,
  1, 108, :_reduce_37,
  2, 108, :_reduce_38,
  2, 108, :_reduce_39,
  1, 108, :_reduce_40,
  6, 108, :_reduce_41,
  3, 108, :_reduce_42,
  5, 108, :_reduce_43,
  5, 108, :_reduce_44,
  1, 108, :_reduce_45,
  6, 108, :_reduce_46,
  1, 108, :_reduce_47,
  1, 108, :_reduce_none,
  1, 108, :_reduce_49,
  2, 117, :_reduce_50,
  2, 96, :_reduce_51,
  0, 118, :_reduce_52,
  1, 118, :_reduce_53,
  3, 118, :_reduce_54,
  3, 119, :_reduce_55,
  1, 120, :_reduce_56,
  3, 120, :_reduce_57,
  3, 116, :_reduce_58,
  5, 115, :_reduce_59,
  5, 115, :_reduce_60,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  0, 114, :_reduce_67,
  1, 114, :_reduce_68,
  5, 114, :_reduce_69,
  2, 126, :_reduce_70,
  3, 109, :_reduce_71,
  0, 99, :_reduce_72,
  1, 99, :_reduce_73,
  2, 99, :_reduce_74,
  3, 127, :_reduce_75,
  3, 127, :_reduce_76,
  1, 127, :_reduce_77,
  1, 127, :_reduce_78,
  1, 121, :_reduce_79,
  1, 121, :_reduce_80,
  1, 128, :_reduce_none,
  5, 128, :_reduce_82,
  0, 130, :_reduce_83,
  1, 130, :_reduce_84,
  3, 130, :_reduce_85,
  3, 112, :_reduce_86,
  3, 112, :_reduce_87,
  3, 112, :_reduce_88,
  1, 132, :_reduce_89,
  1, 132, :_reduce_90,
  1, 132, :_reduce_91,
  1, 132, :_reduce_92,
  1, 132, :_reduce_93,
  1, 132, :_reduce_94,
  1, 132, :_reduce_95,
  2, 104, :_reduce_96,
  2, 104, :_reduce_97,
  1, 104, :_reduce_98,
  0, 105, :_reduce_99,
  1, 105, :_reduce_none,
  4, 133, :_reduce_101,
  1, 134, :_reduce_102,
  3, 134, :_reduce_103,
  2, 135, :_reduce_104,
  1, 135, :_reduce_105,
  1, 110, :_reduce_106,
  1, 110, :_reduce_107,
  3, 110, :_reduce_108,
  3, 110, :_reduce_109,
  3, 123, :_reduce_110,
  3, 123, :_reduce_111,
  3, 123, :_reduce_112,
  3, 123, :_reduce_113,
  3, 123, :_reduce_114,
  3, 123, :_reduce_115,
  2, 123, :_reduce_116,
  3, 123, :_reduce_117,
  1, 123, :_reduce_118,
  3, 136, :_reduce_119,
  3, 136, :_reduce_120,
  3, 136, :_reduce_121,
  3, 136, :_reduce_122,
  3, 136, :_reduce_123,
  3, 136, :_reduce_124,
  3, 136, :_reduce_125,
  2, 136, :_reduce_126,
  2, 136, :_reduce_127,
  1, 122, :_reduce_128,
  1, 122, :_reduce_129,
  2, 122, :_reduce_130,
  1, 122, :_reduce_none,
  2, 138, :_reduce_132,
  3, 131, :_reduce_133,
  3, 131, :_reduce_134,
  0, 137, :_reduce_135,
  3, 137, :_reduce_136,
  0, 111, :_reduce_137,
  1, 111, :_reduce_138,
  3, 111, :_reduce_139,
  4, 129, :_reduce_140,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_160,
  0, 82, :_reduce_161,
  1, 82, :_reduce_162,
  1, 84, :_reduce_163,
  2, 84, :_reduce_164,
  1, 139, :_reduce_165,
  1, 139, :_reduce_none,
  1, 91, :_reduce_167 ]

racc_reduce_n = 168

racc_shift_n = 288

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCDEF => 23,
  :kDTYPE_UINT => 24,
  :kDTYPE_LINT => 25,
  :kDTYPE_LLINT => 26,
  :kDTYPE_CHAR => 27,
  :kDTYPE_I8 => 28,
  :kDTYPE_I16 => 29,
  :kDTYPE_I32 => 30,
  :kDTYPE_I64 => 31,
  :kDTYPE_UI8 => 32,
  :kDTYPE_UI16 => 33,
  :kDTYPE_UI32 => 34,
  :kDTYPE_UI64 => 35,
  :kDTYPE_INT => 36,
  :kDTYPE_F32 => 37,
  :kDTYPE_F64 => 38,
  :kDTYPE_LF64 => 39,
  :kDTYPE_ROBJ => 40,
  :kDTYPE_ULINT => 41,
  :kDTYPE_ULLINT => 42,
  :tCUSTOM_DTYPE => 43,
  :tLPAREN => 44,
  :tRPAREN => 45,
  :tLSQUARE => 46,
  :tRSQUARE => 47,
  :tIDENTIFIER => 48,
  :tNL => 49,
  :tCOMMA => 50,
  :tSQUOTE => 51,
  :tSCOLON => 52,
  :EOF => 53,
  :tDOT => 54,
  :tQMARK => 55,
  :tSTART_LINE => 56,
  :tPLUS => 57,
  :tMINUS => 58,
  :tSTAR => 59,
  :tDIVIDE => 60,
  :tEXPO => 61,
  :tMODULUS => 62,
  :tASSIGN => 63,
  :tEQ => 64,
  :tLT => 65,
  :tLTEQ => 66,
  :tGT => 67,
  :tGTEQ => 68,
  :tANDOP => 69,
  :tOROP => 70,
  :tBANG => 71,
  :tOP_ASSIGN => 72,
  :tSTRING => 73,
  :tINTEGER => 74,
  :tFLOAT => 75,
  :tSINGLE_CHAR => 76,
  :UMINUS => 77,
  :tNEQ => 78 }

racc_nt_base = 79

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCDEF",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "opt_inheritance",
  "eol",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "ident_or_custom_dtype",
  "aliased_type",
  "ruby_method",
  "c_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_11(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_12(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_13(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_14(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_15(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_16(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_18(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_20(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_21(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_23(val, _values, result)
    
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_25(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_26(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_27(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_28(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_29(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_31(val, _values, result)
            result = TopStatement::RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_32(val, _values, result)
            result = TopStatement::CMethodDef.new(val[1], val[2], val[3], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_34(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_35(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_36(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_37(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_38(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_39(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_40(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_41(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_42(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_43(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_44(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_46(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_49(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_50(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_51(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_52(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_53(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_54(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_55(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_56(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_57(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_58(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_59(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_60(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_68(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_69(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_70(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_71(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_72(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_73(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_74(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_75(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_76(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_77(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_78(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_79(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_80(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_82(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_83(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_84(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_85(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_86(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_87(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_88(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_89(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_90(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_91(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_92(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_93(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_94(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_95(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_96(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_97(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_98(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_99(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_101(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_103(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_104(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_105(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_106(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_107(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_113(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_114(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_115(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 346)
  def _reduce_116(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_117(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_118(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_119(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_120(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_121(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_122(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_123(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_124(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_126(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 359)
  def _reduce_127(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_129(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_130(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 379)
  def _reduce_132(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_133(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_134(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 397)
  def _reduce_135(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 398)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 401)
  def _reduce_137(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 402)
  def _reduce_138(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_139(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_140(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_160(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 422)
  def _reduce_162(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 425)
  def _reduce_163(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_164(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_165(val, _values, result)
    
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_167(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
