#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 219)

def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
  @yydebug = true
end

def next_token
  @lexer.next_token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    96,    70,    57,    70,    72,    49,    60,    49,    50,    73,
    50,    49,     3,   135,    50,    69,   136,    69,   128,   129,
    96,    82,    83,    84,    85,     5,    98,    53,    54,    55,
     6,    80,    81,    82,    83,    84,    85,     8,    86,    87,
    88,    89,    90,    91,    92,    93,    98,    82,    83,    84,
    85,    80,    81,    82,    83,    84,    85,    11,    86,    87,
    88,    89,    90,    91,    92,    93,    16,    17,    19,   128,
   129,    45,    51,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    66,    71,    74,    70,    21,    49,    99,   100,
    50,    16,    17,    19,   102,    98,    51,    66,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    16,    17,    19,
   125,    21,    84,    84,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    16,    17,    19,    84,    21,    84,   132,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    16,
    17,    19,   nil,    21,   nil,   nil,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,   nil,    57,   nil,   nil,    21,
    60,    57,   nil,   nil,    57,    60,   nil,    57,    60,   nil,
    57,    60,   nil,    57,    60,   nil,    57,    60,   nil,   nil,
    60,    53,    54,    55,   nil,   nil,    53,    54,    55,    53,
    54,    55,    53,    54,    55,    53,    54,    55,    53,    54,
    55,    53,    54,    55,    57,   nil,   nil,    57,    60,   nil,
    57,    60,   nil,    57,    60,   nil,    57,    60,   nil,    57,
    60,   nil,    57,    60,   nil,   nil,    60,   nil,   nil,    53,
    54,    55,    53,    54,    55,    53,    54,    55,    53,    54,
    55,    53,    54,    55,    53,    54,    55,    53,    54,    55,
    57,   nil,   nil,    57,    60,   nil,    57,    60,   nil,    57,
    60,   nil,    57,    60,   nil,    57,    60,   nil,    57,    60,
   124,   nil,    60,   nil,   nil,    53,    54,    55,    53,    54,
    55,    53,    54,    55,    53,    54,    55,    53,    54,    55,
    53,    54,    55,    53,    54,    55,    57,   nil,   nil,    57,
    60,   nil,    57,    60,   nil,   nil,    60,    80,    81,    82,
    83,    84,    85,   nil,    86,    87,    88,    89,    90,    91,
    92,    53,    54,    55,    53,    54,    55,    53,    54,    55,
   120,    80,    81,    82,    83,    84,    85,   nil,   nil,    80,
    81,    82,    83,    84,    85,   nil,    86,    87,    88,    89,
    90,    91,    92,    93,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    80,    81,    82,    83,    84,    85,   nil,    86,
    87,    88,    89,    90,    91,    92,    93,    80,    81,    82,
    83,    84,    85,   nil,    86,    87,    88,    89,    90,    91,
    92,    93,    80,    81,    82,    83,    84,    85,   nil,    86,
    87,    88,    89,    90,    91,    92,    93,    80,    81,    82,
    83,    84,    85,   nil,    86,    87,    88,    89,    90,    91,
    92,    93,    80,    81,    82,    83,    84,    85,   nil,    86,
    87,    88,    89,    90,    91,    92,    93,    80,    81,    82,
    83,    84,    85,   nil,    86,    87,    88,    89,    90,    91,
    92,    93,    80,    81,    82,    83,    84,    85,   nil,    86,
    87,    88,    89,    90,    91,    92,    93,    80,    81,    82,
    83,    84,    85,   nil,   -91,    87,    88,    89,    90,   -91,
    80,    81,    82,    83,    84,    85,   nil,   -91,    87,    88,
    89,    90,   -91,    80,    81,    82,    83,    84,    85,   nil,
    86,    87,    88,    89,    90,    91,    80,    81,    82,    83,
    84,    85,    80,    81,    82,    83,    84,    85,    80,    81,
    82,    83,    84,    85 ]

racc_action_check = [
    62,    21,    16,    66,    42,    13,    16,    45,    13,    42,
    45,    76,     1,   130,    76,    21,   130,    66,   121,   121,
   133,   106,   106,   106,   106,     2,    62,    16,    16,    16,
     3,    62,    62,    62,    62,    62,    62,     5,    62,    62,
    62,    62,    62,    62,    62,    62,   133,   107,   107,   107,
   107,   133,   133,   133,   133,   133,   133,     7,   133,   133,
   133,   133,   133,   133,   133,   133,    47,    47,    47,   139,
   139,    12,    14,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    20,    22,    44,    60,    47,    47,    63,    67,
    47,     9,     9,     9,    70,    72,    77,    99,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,    95,    95,    95,
   102,     9,   108,   109,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,   129,   129,   129,   110,    95,   111,   126,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   137,
   137,   137,   nil,   129,   nil,   nil,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   nil,    17,   nil,   nil,   137,
    17,    19,   nil,   nil,    51,    19,   nil,    57,    51,   nil,
    69,    57,   nil,    71,    69,   nil,    80,    71,   nil,   nil,
    80,    17,    17,    17,   nil,   nil,    19,    19,    19,    51,
    51,    51,    57,    57,    57,    69,    69,    69,    71,    71,
    71,    80,    80,    80,    81,   nil,   nil,    82,    81,   nil,
    83,    82,   nil,    84,    83,   nil,    85,    84,   nil,    86,
    85,   nil,    87,    86,   nil,   nil,    87,   nil,   nil,    81,
    81,    81,    82,    82,    82,    83,    83,    83,    84,    84,
    84,    85,    85,    85,    86,    86,    86,    87,    87,    87,
    88,   nil,   nil,    89,    88,   nil,    90,    89,   nil,    91,
    90,   nil,    92,    91,   nil,    93,    92,   nil,   100,    93,
   100,   nil,   100,   nil,   nil,    88,    88,    88,    89,    89,
    89,    90,    90,    90,    91,    91,    91,    92,    92,    92,
    93,    93,    93,   100,   100,   100,   124,   nil,   nil,   128,
   124,   nil,   136,   128,   nil,   nil,   136,   119,   119,   119,
   119,   119,   119,   nil,   119,   119,   119,   119,   119,   119,
   119,   124,   124,   124,   128,   128,   128,   136,   136,   136,
    94,   113,   113,   113,   113,   113,   113,   nil,   nil,    94,
    94,    94,    94,    94,    94,   nil,    94,    94,    94,    94,
    94,    94,    94,    94,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    52,    52,    52,    52,    52,    52,   nil,    52,
    52,    52,    52,    52,    52,    52,    52,    61,    61,    61,
    61,    61,    61,   nil,    61,    61,    61,    61,    61,    61,
    61,    61,    79,    79,    79,    79,    79,    79,   nil,    79,
    79,    79,    79,    79,    79,    79,    79,   101,   101,   101,
   101,   101,   101,   nil,   101,   101,   101,   101,   101,   101,
   101,   101,   103,   103,   103,   103,   103,   103,   nil,   103,
   103,   103,   103,   103,   103,   103,   103,   131,   131,   131,
   131,   131,   131,   nil,   131,   131,   131,   131,   131,   131,
   131,   131,   138,   138,   138,   138,   138,   138,   nil,   138,
   138,   138,   138,   138,   138,   138,   138,   112,   112,   112,
   112,   112,   112,   nil,   112,   112,   112,   112,   112,   112,
   117,   117,   117,   117,   117,   117,   nil,   117,   117,   117,
   117,   117,   117,   118,   118,   118,   118,   118,   118,   nil,
   118,   118,   118,   118,   118,   118,   114,   114,   114,   114,
   114,   114,   115,   115,   115,   115,   115,   115,   116,   116,
   116,   116,   116,   116 ]

racc_action_pointer = [
   nil,    12,    23,    30,   nil,     3,   nil,    27,   nil,    97,
   nil,   393,    68,   -30,    66,   nil,   -28,   176,   nil,   181,
    58,   -31,    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -27,   nil,    60,   -28,   nil,    62,   nil,   nil,
   nil,   184,   402,   nil,   nil,   nil,   nil,   187,   nil,   nil,
    63,   417,    -9,    62,   nil,   nil,   -29,    53,   nil,   190,
    49,   193,    70,   412,   nil,   nil,   -24,   100,   nil,   432,
   196,   224,   227,   230,   233,   236,   239,   242,   270,   273,
   276,   279,   282,   285,   349,   123,   nil,   nil,   nil,    73,
   288,   447,    97,   462,   nil,   nil,   -21,     5,    88,    89,
   112,   114,   507,   341,   546,   552,   558,   520,   533,   317,
   nil,    11,   nil,   nil,   316,   nil,   156,   nil,   319,   149,
   -20,   477,   nil,    11,   nil,   nil,   322,   175,   492,    62,
   nil ]

racc_action_default = [
    -3,   -91,    -1,   -91,    -2,   -91,   141,   -39,   -38,    -6,
   -40,   -91,   -91,   -84,    -7,    -9,   -91,   -91,   -12,   -91,
   -91,   -91,   -91,   -51,   -52,   -53,   -54,   -55,   -56,   -57,
   -58,   -59,   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,
   -68,   -69,   -91,   -43,   -91,   -84,    -5,   -85,   -86,   -88,
   -89,   -91,   -10,   -35,   -36,   -37,   -45,   -91,   -47,   -48,
   -49,   -11,   -91,   -21,   -24,   -25,   -26,   -27,   -28,   -91,
   -91,   -91,   -91,   -91,   -44,    -4,   -85,    -8,   -87,   -14,
   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,   -91,
   -91,   -91,   -91,   -91,   -91,    -6,   -15,   -16,   -90,   -91,
   -91,   -33,   -91,   -34,   -41,   -42,   -70,   -71,   -72,   -73,
   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,   -82,   -83,
   -46,   -17,   -22,   -23,   -30,   -50,   -91,   -18,   -91,    -6,
   -91,   -31,   -13,   -91,   -20,   -29,   -91,    -6,   -32,   -17,
   -19 ]

racc_goto_table = [
    12,    22,    52,    61,    68,    62,    65,    78,    46,    64,
    95,   126,    67,    47,     1,     2,     4,     7,    44,     9,
    43,    77,   104,    63,   130,    10,    42,   nil,   nil,   140,
   nil,   nil,   nil,   nil,   nil,   nil,    78,    79,   nil,    22,
    75,   nil,   nil,    94,   nil,    76,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
    44,   137,   105,    68,   nil,   122,   121,    22,   123,   nil,
   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   nil,   nil,   nil,   133,   nil,   nil,   nil,   nil,   nil,
   134,    22,   138,   nil,   nil,   nil,   nil,   nil,   139,    22 ]

racc_goto_check = [
     6,    22,    12,    12,    13,    12,    20,    29,     7,    21,
    14,    15,    22,    10,     1,     2,     3,     4,    18,     5,
    27,     9,    16,    19,    23,    25,    26,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,    29,    12,   nil,    22,
     7,   nil,   nil,    12,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    18,    14,    27,    13,   nil,    20,     6,    22,    21,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
     6,    22,    12,   nil,   nil,   nil,   nil,   nil,     6,    22 ]

racc_goto_pointer = [
   nil,    14,    15,    14,    12,    12,    -9,    -5,   nil,   -26,
     0,   nil,   -14,   -16,   -52,  -110,   -50,   nil,     7,     3,
   -14,   -11,    -8,  -100,   nil,    18,    15,     9,   nil,   -40 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13,    14,
   nil,    15,   103,    18,   nil,   nil,    97,   127,    20,   nil,
   nil,   nil,    58,   nil,    59,   nil,   nil,   nil,    56,    48 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 60, :_reduce_1,
  2, 61, :_reduce_2,
  0, 61, :_reduce_3,
  6, 62, :_reduce_4,
  2, 65, :_reduce_5,
  0, 67, :_reduce_6,
  1, 67, :_reduce_7,
  3, 67, :_reduce_8,
  1, 68, :_reduce_9,
  2, 68, :_reduce_10,
  2, 68, :_reduce_11,
  1, 68, :_reduce_12,
  6, 68, :_reduce_13,
  3, 68, :_reduce_14,
  1, 73, :_reduce_15,
  1, 73, :_reduce_16,
  0, 74, :_reduce_17,
  1, 74, :_reduce_18,
  5, 74, :_reduce_19,
  2, 76, :_reduce_20,
  2, 70, :_reduce_21,
  3, 78, :_reduce_22,
  3, 78, :_reduce_23,
  1, 78, :_reduce_24,
  1, 78, :_reduce_25,
  1, 80, :_reduce_26,
  1, 80, :_reduce_27,
  1, 79, :_reduce_none,
  5, 79, :_reduce_29,
  0, 82, :_reduce_30,
  1, 82, :_reduce_31,
  3, 82, :_reduce_32,
  3, 72, :_reduce_33,
  3, 72, :_reduce_34,
  1, 83, :_reduce_35,
  1, 83, :_reduce_36,
  1, 83, :_reduce_37,
  1, 63, :_reduce_38,
  0, 64, :_reduce_39,
  1, 64, :_reduce_none,
  4, 84, :_reduce_41,
  3, 85, :_reduce_42,
  1, 85, :_reduce_43,
  2, 86, :_reduce_44,
  1, 71, :_reduce_45,
  3, 71, :_reduce_46,
  1, 71, :_reduce_47,
  1, 71, :_reduce_48,
  1, 71, :_reduce_49,
  4, 81, :_reduce_50,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_69,
  3, 87, :_reduce_70,
  3, 87, :_reduce_71,
  3, 87, :_reduce_72,
  3, 87, :_reduce_73,
  3, 87, :_reduce_74,
  3, 87, :_reduce_75,
  3, 87, :_reduce_76,
  3, 87, :_reduce_77,
  3, 87, :_reduce_78,
  3, 87, :_reduce_79,
  3, 87, :_reduce_80,
  3, 87, :_reduce_81,
  3, 87, :_reduce_82,
  3, 87, :_reduce_83,
  0, 66, :_reduce_84,
  1, 66, :_reduce_85,
  1, 69, :_reduce_86,
  2, 69, :_reduce_87,
  1, 88, :_reduce_88,
  1, 88, :_reduce_none,
  1, 75, :_reduce_90 ]

racc_reduce_n = 91

racc_shift_n = 141

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kDTYPE_UINT => 11,
  :kDTYPE_LINT => 12,
  :kDTYPE_LLINT => 13,
  :kDTYPE_CHAR => 14,
  :kDTYPE_I8 => 15,
  :kDTYPE_I16 => 16,
  :kDTYPE_I32 => 17,
  :kDTYPE_I64 => 18,
  :kDTYPE_UI8 => 19,
  :kDTYPE_UI16 => 20,
  :kDTYPE_UI32 => 21,
  :kDTYPE_UI64 => 22,
  :kDTYPE_INT => 23,
  :kDTYPE_F32 => 24,
  :kDTYPE_F64 => 25,
  :kDTYPE_LF64 => 26,
  :kDTYPE_ROBJ => 27,
  :kDTYPE_ULINT => 28,
  :kDTYPE_ULLINT => 29,
  :tLPAREN => 30,
  :tRPAREN => 31,
  :tLSQUARE => 32,
  :tRSQUARE => 33,
  :tIDENTIFIER => 34,
  :tNL => 35,
  :tCOMMA => 36,
  :tSQUOTE => 37,
  :tSCOLON => 38,
  :EOF => 39,
  :tPLUS => 40,
  :tMINUS => 41,
  :tMULTIPLY => 42,
  :tDIVIDE => 43,
  :tEXPO => 44,
  :tMODULUS => 45,
  :tASSIGN => 46,
  :tEQ => 47,
  :tLT => 48,
  :tLTEQ => 49,
  :tGT => 50,
  :tGTEQ => 51,
  :tCMP => 52,
  :tANDOP => 53,
  :tOROP => 54,
  :tINTEGER => 55,
  :tFLOAT => 56,
  :tSINGLE_CHAR => 57,
  :tNEQ => 58 }

racc_nt_base = 59

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tPLUS",
  "tMINUS",
  "tMULTIPLY",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tCMP",
  "tANDOP",
  "tOROP",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "tNEQ",
  "$start",
  "program",
  "methods",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "opt_terms",
  "stmts",
  "stmt",
  "terms",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "eol",
  "opt_else",
  "dtype",
  "decl_or_init",
  "var_init",
  "normal_decl",
  "array_ref",
  "array_list",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "binary_op",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_2(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_3(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_7(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_8(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_9(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          if di[:name].is_a? Expression::ArrayRef
            var = Statement::CArrayDecl.new(dtype, di[:name], di[:value])
          else
            var = Statement::VarDecl.new(dtype, di[:name], di[:value])
          end
          variables << var
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_10(val, _values, result)
     result = Statement::Return.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_11(val, _values, result)
     result = Statement::Print.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_12(val, _values, result)
          match = val[0]
      result = Statement::Assign.new match[:name], match[:value]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_13(val, _values, result)
          result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_14(val, _values, result)
     result = Statement::IfBlock.new val[2], [*val[0]], [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_17(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_18(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_19(val, _values, result)
          result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = Statement::IfBlock::Else.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_21(val, _values, result)
            result = {
          dtype: val[0],
          decl_or_init: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_22(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_23(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_24(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_26(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_27(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_29(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_30(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_31(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_32(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_33(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_34(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_35(val, _values, result)
     result = Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_36(val, _values, result)
     result = Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_37(val, _values, result)
     result = Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_38(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_39(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_41(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_42(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_44(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_45(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_46(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_47(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_48(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_49(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_50(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_69(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_70(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_71(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_72(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_73(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_74(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_75(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_76(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_77(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_78(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_79(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_80(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_81(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_82(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_83(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_84(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_85(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_86(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_88(val, _values, result)
    
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_90(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
