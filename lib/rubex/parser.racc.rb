#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 660)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'102,103,105,254,265,254,60,106,107,187,67,124,125,126,13,83,92,67,182',
'183,345,128,114,346,113,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,137,66,129,64,117,64,61,369,271,193,157,194',
'127,130,230,156,138,22,305,231,23,182,183,133,83,182,183,182,183,136',
'191,123,143,139,16,102,103,105,140,120,121,122,106,107,182,183,124,125',
'126,13,13,92,18,12,11,17,128,114,25,113,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,137,194,129,193,117,22,22',
'187,23,23,79,26,127,130,368,22,138,315,23,27,339,327,314,133,196,29',
'326,186,80,136,83,123,143,139,16,102,103,105,140,120,121,122,106,107',
'182,183,124,125,126,13,13,92,55,327,11,17,128,114,326,113,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,137,16,129',
'338,117,82,22,79,326,23,161,161,127,130,163,163,138,13,83,62,12,11,17',
'133,193,80,194,83,83,136,64,123,143,139,16,102,103,105,140,120,121,122',
'106,107,68,244,124,125,126,13,13,92,182,183,11,17,128,114,83,113,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'137,16,129,64,117,163,22,381,22,23,72,23,127,130,182,183,138,13,83,64',
'83,11,17,133,22,22,78,23,23,136,81,123,143,139,16,102,103,105,140,120',
'121,122,106,107,182,183,124,125,126,13,13,92,182,183,11,17,128,114,61',
'113,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,137,148,129,64,117,158,204,205,206,207,208,209,127,130,182,183',
'138,204,205,206,207,208,209,133,210,211,212,213,214,136,160,123,143',
'139,165,102,103,105,140,120,121,122,106,107,182,183,124,125,126,13,22',
'92,22,23,168,23,128,114,175,113,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,137,175,129,185,117,195,204,205',
'206,207,208,209,127,130,182,183,138,204,205,206,207,208,209,133,210',
'211,212,213,214,136,64,123,143,139,64,102,103,105,140,120,121,122,106',
'107,182,183,124,125,126,13,341,92,229,340,64,343,128,114,232,113,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'137,234,129,64,117,240,204,205,206,207,208,209,127,130,357,358,138,206',
'207,208,209,261,262,133,210,211,212,213,214,136,245,123,143,139,148',
'102,103,105,140,120,121,122,106,107,263,264,124,125,126,13,194,92,206',
'207,208,209,128,114,187,113,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,137,193,129,256,117,124,125,126,182,183',
'182,183,127,130,269,128,138,204,205,206,207,208,209,133,182,183,357',
'358,274,136,275,123,143,139,64,307,211,212,140,120,121,122,208,137,64',
'129,234,172,124,125,126,148,168,330,331,127,130,332,128,138,204,205',
'206,207,208,209,133,182,208,208,208,208,136,187,123,143,139,349,210',
'211,212,140,120,121,122,352,137,353,129,359,172,124,125,126,362,275',
'364,64,127,130,367,128,138,204,205,206,207,208,209,133,148,372,187,83',
'383,136,148,123,143,139,,210,211,212,140,120,121,122,,178,,129,,172',
'124,125,126,,,,,127,130,,128,138,,,,,,,,,,,124,125,126,,123,143,139',
',,,128,140,120,121,122,,137,,129,,172,124,125,126,,,,,127,130,,128,138',
',,,,,,133,129,,172,,,136,,123,143,139,127,130,,,140,120,121,122,,137',
',129,,172,124,125,126,,,123,143,127,130,,128,138,,120,121,122,,,,,,',
',,136,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124,125,126,,',
',,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140,120,121,122',
',137,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136,',
'123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130',
',128,138,,,,,,,,,,,124,125,126,,123,143,139,,,,128,140,120,121,122,',
'226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,129,,172,124,125',
'126,,123,143,139,127,130,,128,140,120,121,122,,226,,129,,172,124,125',
'126,,,123,143,127,130,,128,138,,120,121,122,,,,129,,172,124,125,126',
',123,143,139,127,130,,128,140,120,121,122,,137,,129,,172,124,125,126',
',,123,143,127,130,,128,138,,120,121,122,,,133,129,,172,,,136,,123,143',
'139,127,130,,,140,120,121,122,,137,,129,,172,124,125,126,,,123,143,127',
'130,,128,138,,120,121,122,,,133,,,,,,136,,123,143,139,,,,,140,120,121',
'122,,226,,129,,172,124,125,126,16,350,,,127,130,,128,138,,,,,,,,13,',
',,11,17,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124,125,126',
',,,,127,130,,128,138,,,,,22,,133,23,,,,,136,,123,143,139,,,,,140,120',
'121,122,,137,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133,,',
',,,136,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124,125,126,',
',,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140,120,121',
'122,,137,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136',
',123,143,139,,,,,140,120,121,122,,137,,129,,172,124,125,126,,,,,127',
'130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140,120,121,122,,137',
',129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143',
'139,,,,,140,120,121,122,,137,,129,,172,124,125,126,,,,,127,130,,128',
'138,,,,,,,133,,,,,,136,,123,143,139,,,,,140,120,121,122,,137,,129,,172',
'124,125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,',
',140,120,121,122,,137,,129,,172,124,125,126,,,,,127,130,,128,138,,,',
',,,133,,,,,,136,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124',
'125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140',
'120,121,122,,226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,',
',,,,,,123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,',
',127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,226',
',129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139',
',,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130,,128,138',
',,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125',
'126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122',
',226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143',
'139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130,,128',
'138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,226,,129,,172,124',
'125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121',
'122,,226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123',
'143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130,',
'128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,226,,129,,172',
'124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120',
'121,122,,226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,',
',,123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127',
'130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,226,,129',
',172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,',
'140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,',
',,,,,,,,,,123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126',
',,,,127,130,,128,138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,',
'226,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,,,,,,,,,123,143',
'139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127,130,,128',
'138,,,,,,,,,,,,,,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124',
'125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140',
'120,121,122,,137,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133',
',,,,,136,,123,143,139,,,,,140,120,121,122,,137,,129,,172,124,125,126',
',,,,127,130,,128,138,,,,,,,133,,,,,,136,,123,143,139,,,,,140,120,121',
'122,,137,,129,,172,124,125,126,,,,,127,130,,128,138,,,,,,,133,,,,,,136',
',123,143,139,,,,,140,120,121,122,,226,,129,,172,124,125,126,,,,,127',
'130,,128,138,,,,,,,,,,,,,,,123,143,139,306,,,,140,120,121,122,,226,',
'129,,172,204,205,206,207,208,209,,127,130,,,138,,,242,,,,210,211,212',
'213,214,,,,123,143,139,13,,92,,140,120,121,122,,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,306,,,,,22,,,23',
',,,,,204,205,206,207,208,209,,215,217,218,219,220,,,,,,306,210,211,212',
'213,214,,,,,,,,216,204,205,206,207,208,209,,,261,262,263,264,13,,92',
',,,210,211,212,213,214,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,323,,,,,,,,,,,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,,22,,,23,204,205',
'206,207,208,209,,215,217,218,219,220,,,,,,,210,211,212,213,214,,,,,',
',,216,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51',
'52,53,54,,-25,,,,,-25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,,,,,147,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,,,,,147,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,204,205',
'206,207,208,209,,,261,262,263,264,204,205,206,207,208,209,210,211,212',
'213,214,204,205,206,207,208,209,,210,211,212,213,214,204,205,206,207',
'208,209,210,211,212,213,214,204,205,206,207,208,209,,210,211,212,213',
'214,204,205,206,207,208,209,210,211,212,213,214,,,,,,,,210,211,212,213',
'214' ]
        racc_action_table = arr = ::Array.new(3232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'77,77,77,176,181,373,25,77,77,286,28,77,77,77,77,287,77,187,112,112',
'286,77,77,287,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,28,77,176,77,373,25,351,187,117,92,117,77,77',
'144,92,77,2,222,144,2,181,181,77,351,176,176,373,373,77,117,77,77,77',
'20,167,167,167,77,77,77,77,167,167,222,222,167,167,167,167,20,167,1',
'20,20,20,167,167,11,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,271,167,119',
'167,167,20,115,167,20,271,12,167,167,347,5,167,236,5,13,278,251,236',
'167,119,16,251,115,271,167,347,167,167,167,24,239,239,239,167,167,167',
'167,239,239,278,278,239,239,239,239,24,239,18,268,24,24,239,239,268',
'239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,0,239,277,239,69,24,66,277,24,97',
'316,239,239,97,316,239,0,69,26,0,0,0,239,172,66,172,97,316,239,27,239',
'239,239,150,253,253,253,239,239,239,239,253,253,29,154,253,253,253,253',
'150,253,169,169,150,150,253,253,154,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,70,253,59,253,247,150,378,74,150,61,74,253,253,250,250,253,70,247',
'62,378,70,70,253,84,86,65,84,86,253,67,253,253,253,152,256,256,256,253',
'253,253,253,256,256,252,252,256,256,256,256,152,256,270,270,152,152',
'256,256,71,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,82,256,85,256,93,299,299',
'299,299,299,299,256,256,276,276,256,295,295,295,295,295,295,256,299',
'299,299,299,299,256,95,256,256,256,98,265,265,265,256,256,256,256,265',
'265,279,279,265,265,265,265,99,265,241,99,100,241,265,265,103,265,265',
'265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,113,265,114,265,118,300,300,300,300,300',
'300,265,265,280,280,265,296,296,296,296,296,296,265,300,300,300,300',
'300,265,129,265,265,265,130,358,358,358,265,265,265,265,358,358,281',
'281,358,358,358,358,282,358,143,282,284,284,358,358,146,358,358,358',
'358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,358,358,147,358,149,358,151,301,301,301,301,301,301',
'358,358,328,328,358,288,288,288,288,331,331,358,301,301,301,301,301',
'358,155,358,358,358,162,379,379,379,358,358,358,358,379,379,332,332',
'379,379,379,379,163,379,289,289,289,289,379,379,170,379,379,379,379',
'379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379,379',
'379,379,379,379,379,173,379,177,379,102,102,102,337,337,354,354,379',
'379,185,102,379,294,294,294,294,294,294,379,363,363,382,382,188,379',
'189,379,379,379,199,224,294,294,379,379,379,379,225,102,230,102,232',
'102,105,105,105,244,249,257,259,102,102,260,105,102,297,297,297,297',
'297,297,102,267,290,291,292,293,102,313,102,102,102,318,297,297,297',
'102,102,102,102,323,105,324,105,329,105,106,106,106,333,336,342,343',
'105,105,345,106,105,298,298,298,298,298,298,105,353,355,366,370,380',
'105,383,105,105,105,,298,298,298,105,105,105,105,,106,,106,,106,107',
'107,107,,,,,106,106,,107,106,,,,,,,,,,,201,201,201,,106,106,106,,,,201',
'106,106,106,106,,107,,107,,107,132,132,132,,,,,107,107,,132,107,,,,',
',,107,201,,201,,,107,,107,107,107,201,201,,,107,107,107,107,,132,,132',
',132,136,136,136,,,201,201,132,132,,136,132,,201,201,201,,,,,,,,,132',
',132,132,132,,,,,132,132,132,132,,136,,136,,136,137,137,137,,,,,136',
'136,,137,136,,,,,,,136,,,,,,136,,136,136,136,,,,,136,136,136,136,,137',
',137,,137,138,138,138,,,,,137,137,,138,137,,,,,,,137,,,,,,137,,137,137',
'137,,,,,137,137,137,137,,138,,138,,138,139,139,139,,,,,138,138,,139',
'138,,,,,,,,,,,234,234,234,,138,138,138,,,,234,138,138,138,138,,139,',
'139,,139,140,140,140,,,,,139,139,,140,139,,,,,,,,234,,234,344,344,344',
',139,139,139,234,234,,344,139,139,139,139,,140,,140,,140,168,168,168',
',,234,234,140,140,,168,140,,234,234,234,,,,344,,344,365,365,365,,140',
'140,140,344,344,,365,140,140,140,140,,168,,168,,168,174,174,174,,,344',
'344,168,168,,174,168,,344,344,344,,,168,365,,365,,,168,,168,168,168',
'365,365,,,168,168,168,168,,174,,174,,174,178,178,178,,,365,365,174,174',
',178,174,,365,365,365,,,174,,,,,,174,,174,174,174,,,,,174,174,174,174',
',178,,178,,178,182,182,182,319,319,,,178,178,,182,178,,,,,,,,319,,,',
'319,319,,178,178,178,,,,,178,178,178,178,,182,,182,,182,183,183,183',
',,,,182,182,,183,182,,,,,319,,182,319,,,,,182,,182,182,182,,,,,182,182',
'182,182,,183,,183,,183,184,184,184,,,,,183,183,,184,183,,,,,,,183,,',
',,,183,,183,183,183,,,,,183,183,183,183,,184,,184,,184,186,186,186,',
',,,184,184,,186,184,,,,,,,184,,,,,,184,,184,184,184,,,,,184,184,184',
'184,,186,,186,,186,191,191,191,,,,,186,186,,191,186,,,,,,,186,,,,,,186',
',186,186,186,,,,,186,186,186,186,,191,,191,,191,193,193,193,,,,,191',
'191,,193,191,,,,,,,191,,,,,,191,,191,191,191,,,,,191,191,191,191,,193',
',193,,193,194,194,194,,,,,193,193,,194,193,,,,,,,193,,,,,,193,,193,193',
'193,,,,,193,193,193,193,,194,,194,,194,195,195,195,,,,,194,194,,195',
'194,,,,,,,194,,,,,,194,,194,194,194,,,,,194,194,194,194,,195,,195,,195',
'196,196,196,,,,,195,195,,196,195,,,,,,,195,,,,,,195,,195,195,195,,,',
',195,195,195,195,,196,,196,,196,198,198,198,,,,,196,196,,198,196,,,',
',,,196,,,,,,196,,196,196,196,,,,,196,196,196,196,,198,,198,,198,204',
'204,204,,,,,198,198,,204,198,,,,,,,198,,,,,,198,,198,198,198,,,,,198',
'198,198,198,,204,,204,,204,205,205,205,,,,,204,204,,205,204,,,,,,,,',
',,,,,,204,204,204,,,,,204,204,204,204,,205,,205,,205,206,206,206,,,',
',205,205,,206,205,,,,,,,,,,,,,,,205,205,205,,,,,205,205,205,205,,206',
',206,,206,207,207,207,,,,,206,206,,207,206,,,,,,,,,,,,,,,206,206,206',
',,,,206,206,206,206,,207,,207,,207,208,208,208,,,,,207,207,,208,207',
',,,,,,,,,,,,,,207,207,207,,,,,207,207,207,207,,208,,208,,208,209,209',
'209,,,,,208,208,,209,208,,,,,,,,,,,,,,,208,208,208,,,,,208,208,208,208',
',209,,209,,209,210,210,210,,,,,209,209,,210,209,,,,,,,,,,,,,,,209,209',
'209,,,,,209,209,209,209,,210,,210,,210,211,211,211,,,,,210,210,,211',
'210,,,,,,,,,,,,,,,210,210,210,,,,,210,210,210,210,,211,,211,,211,212',
'212,212,,,,,211,211,,212,211,,,,,,,,,,,,,,,211,211,211,,,,,211,211,211',
'211,,212,,212,,212,213,213,213,,,,,212,212,,213,212,,,,,,,,,,,,,,,212',
'212,212,,,,,212,212,212,212,,213,,213,,213,214,214,214,,,,,213,213,',
'214,213,,,,,,,,,,,,,,,213,213,213,,,,,213,213,213,213,,214,,214,,214',
'215,215,215,,,,,214,214,,215,214,,,,,,,,,,,,,,,214,214,214,,,,,214,214',
'214,214,,215,,215,,215,216,216,216,,,,,215,215,,216,215,,,,,,,,,,,,',
',,215,215,215,,,,,215,215,215,215,,216,,216,,216,217,217,217,,,,,216',
'216,,217,216,,,,,,,,,,,,,,,216,216,216,,,,,216,216,216,216,,217,,217',
',217,218,218,218,,,,,217,217,,218,217,,,,,,,,,,,,,,,217,217,217,,,,',
'217,217,217,217,,218,,218,,218,219,219,219,,,,,218,218,,219,218,,,,',
',,,,,,,,,,218,218,218,,,,,218,218,218,218,,219,,219,,219,220,220,220',
',,,,219,219,,220,219,,,,,,,,,,,,,,,219,219,219,,,,,219,219,219,219,',
'220,,220,,220,226,226,226,,,,,220,220,,226,220,,,,,,,,,,,,,,,220,220',
'220,,,,,220,220,220,220,,226,,226,,226,275,275,275,,,,,226,226,,275',
'226,,,,,,,,,,,,,,,226,226,226,,,,,226,226,226,226,,275,,275,,275,326',
'326,326,,,,,275,275,,326,275,,,,,,,275,,,,,,275,,275,275,275,,,,,275',
'275,275,275,,326,,326,,326,340,340,340,,,,,326,326,,340,326,,,,,,,326',
',,,,,326,,326,326,326,,,,,326,326,326,326,,340,,340,,340,357,357,357',
',,,,340,340,,357,340,,,,,,,340,,,,,,340,,340,340,340,,,,,340,340,340',
'340,,357,,357,,357,360,360,360,,,,,357,357,,360,357,,,,,,,357,,,,,,357',
',357,357,357,,,,,357,357,357,357,,360,,360,,360,361,361,361,,,,,360',
'360,,361,360,,,,,,,,,,,,,,,360,360,360,308,,,,360,360,360,360,,361,',
'361,,361,308,308,308,308,308,308,,361,361,,,361,,,153,,,,308,308,308',
'308,308,,,,361,361,361,153,,153,,361,361,361,361,,,,153,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,223,,,,,153,,,153,,,,,,223,223,223,223,223,223,,223,223',
'223,223,223,,,,,,258,223,223,223,223,223,,,,,,,,223,258,258,258,258',
'258,258,,,258,258,258,258,73,,73,,,,258,258,258,258,258,73,73,73,73',
'73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,245,,,,',
',,,,,,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,94,94,94,94,94,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,94,94,94,94,94,,,,,,94,,,94,134,134,134,134,134',
'134,,134,134,134,134,134,,,,,,,134,134,134,134,134,,,,,,,,134,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,,148,,,,,148,78,78,78,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,,,,,78,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
',,,,231,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,314,314,314,180,180,180,180,180,180,,,180,180,180',
'180,302,302,302,302,302,302,180,180,180,180,180,303,303,303,303,303',
'303,,302,302,302,302,302,304,304,304,304,304,304,303,303,303,303,303',
'375,375,375,375,375,375,,304,304,304,304,304,376,376,376,376,376,376',
'375,375,375,375,375,,,,,,,,376,376,376,376,376' ]
        racc_action_check = arr = ::Array.new(3232, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   216,   101,     8,   nil,   nil,    90,   nil,   nil,   nil,   nil,
   nil,    50,    60,    95,   nil,   nil,   134,  2978,   185,   nil,
    81,   nil,   nil,   nil,   165,   -21,   222,   189,    -7,   198,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   246,
  3002,   254,   262,  3026,   nil,   274,   160,   267,   nil,   165,
   300,   283,   nil,  2766,   251,   nil,   nil,    -4,  2920,   nil,
   nil,   nil,   333,   nil,   267,   330,   268,   nil,   nil,   nil,
   nil,   nil,     7,   387,  2825,   356,   nil,   174,   416,   377,
   433,   nil,   627,   390,   nil,   670,   713,   756,   nil,   nil,
   nil,   nil,   -62,   417,   454,    77,   nil,     5,   400,    83,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   441,
   445,   nil,   799,  3050,  2819,   nil,   842,   885,   928,   971,
  1014,   nil,   nil,   468,     9,   nil,   470,   480,  2889,   498,
   249,   555,   333,  2674,   205,   509,   nil,   nil,   nil,   nil,
   nil,   nil,   534,   548,   nil,   nil,   nil,    80,  1057,   189,
   548,   nil,   188,   585,  1100,   nil,    -6,   626,  1143,   nil,
  3083,   -10,  1186,  1229,  1272,   594,  1315,     0,   606,   593,
   nil,  1358,   nil,  1401,  1444,  1487,  1530,   nil,  1573,   613,
   nil,   778,   nil,   nil,  1616,  1659,  1702,  1745,  1788,  1831,
  1874,  1917,  1960,  2003,  2046,  2089,  2132,  2175,  2218,  2261,
  2304,   nil,    13,  2673,   618,   607,  2347,   nil,   nil,  3074,
   623,  2949,   609,   nil,   993,   nil,    96,   nil,   nil,   164,
   nil,   379,   nil,   nil,   635,  2801,   nil,   249,   nil,   683,
   235,   100,   265,   248,   nil,   nil,   332,   636,  2704,   634,
   637,   nil,   nil,   nil,   nil,   416,   nil,   624,   132,   nil,
   273,    79,   nil,   nil,   nil,  2390,   319,   166,    97,   349,
   403,   433,   463,   nil,   465,   nil,   -54,   -55,   500,   535,
   633,   634,   635,   636,   586,   334,   418,   629,   672,   323,
   407,   491,  3095,  3106,  3118,   nil,   nil,   nil,  2595,   nil,
   nil,   nil,   nil,   647,  3098,   nil,   175,   nil,   711,  1202,
   nil,   nil,   nil,   665,   670,   nil,  2433,   nil,   560,   723,
   nil,   498,   519,   728,   nil,   nil,   658,   565,   nil,   nil,
  2476,   nil,   666,   676,  1036,   659,   nil,    93,   nil,   nil,
   nil,     3,   nil,   694,   567,   745,   nil,  2519,   500,   nil,
  2562,  2605,   nil,   581,   nil,  1079,   686,   nil,   nil,   nil,
   680,   nil,   nil,    -4,   nil,  3129,  3141,   nil,   251,   584,
   697,   nil,   656,   700,   nil,   nil ]

racc_action_default = [
    -6,  -219,  -208,    -2,    -4,  -219,    -7,    -9,   -10,   -11,
   -12,  -219,  -219,  -219,   -45,   -46,   -52,  -219,  -219,    -1,
  -209,  -210,  -212,  -213,    -5,   -15,   -18,  -219,  -219,  -219,
   -98,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,
  -199,  -200,  -201,  -202,  -203,   386,    -3,  -211,    -8,  -219,
  -219,  -219,  -219,   -31,  -218,  -126,  -124,  -219,   -53,  -219,
    -6,   -15,   -16,  -219,  -208,   -32,   -98,   -55,  -219,  -122,
  -123,  -125,   -28,   -99,  -208,  -219,  -219,   -19,   -21,   -22,
   -23,   -98,  -219,  -219,  -209,   -34,   -36,  -219,  -219,  -208,
   -56,   -58,  -219,  -204,   -61,  -219,  -219,  -219,   -66,   -67,
   -68,   -69,   -70,  -204,  -219,  -158,   -98,  -174,  -166,  -174,
  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -214,
  -214,  -134,  -219,  -219,  -139,  -140,  -219,  -219,  -219,  -219,
  -219,  -167,  -169,  -219,  -219,  -128,  -219,  -132,   -98,  -219,
  -209,  -219,    -6,  -219,  -219,  -219,   -38,   -39,   -30,   -33,
   -98,   -98,   -28,   -95,   -96,   -47,   -54,  -209,  -219,   -59,
  -158,  -166,  -174,  -174,  -176,  -205,  -219,  -219,  -219,   -75,
  -219,  -219,  -219,  -219,  -176,  -219,  -219,  -219,   -88,   -91,
   -92,  -219,  -168,  -176,  -219,  -219,  -219,  -171,  -100,  -215,
  -216,  -117,  -135,   -98,  -219,  -219,  -219,  -219,  -219,  -219,
  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,  -219,
  -219,  -141,  -219,  -139,  -140,  -154,  -219,  -155,  -156,  -219,
  -219,  -219,  -132,  -131,  -219,   -26,  -219,   -98,   -51,   -55,
   -13,  -219,   -17,   -20,   -28,  -219,   -35,  -219,   -94,   -57,
   -63,  -206,  -177,   -55,   -82,   -83,   -55,  -219,  -219,  -219,
  -219,   -78,   -79,   -80,   -81,   -55,  -136,  -137,  -206,   -72,
   -73,  -124,  -172,  -173,   -98,  -219,  -103,  -219,  -219,  -104,
  -105,  -101,  -219,  -217,  -214,  -118,  -219,  -219,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -159,
  -160,  -161,  -162,  -163,  -164,  -142,  -157,  -165,  -219,   -98,
  -127,  -129,  -130,  -133,   -98,   -29,   -49,   -50,  -219,  -219,
   -24,   -37,   -98,  -219,  -219,   -60,  -219,  -207,   -84,  -219,
   -74,  -219,  -219,  -219,   -71,   -89,   -90,   -97,  -175,  -179,
  -219,  -115,  -219,  -214,  -219,  -219,  -138,  -219,   -27,   -48,
   -14,   -40,   -98,   -28,  -178,  -219,   -85,  -219,   -55,   -64,
  -219,  -219,   -65,  -102,  -116,  -219,  -120,  -121,  -170,   -98,
   -41,   -93,   -62,  -219,   -87,   -76,   -77,  -119,   -43,   -55,
  -219,   -44,   -84,   -28,   -86,   -42 ]

racc_goto_table = [
    63,    69,    10,    98,   115,   118,   285,   149,    58,   119,
    57,   235,    96,   179,    57,   253,    20,    65,    59,    24,
    30,    19,    10,   198,   201,   164,    10,   233,   190,    84,
    87,     3,    70,     1,   145,    73,    90,   355,   197,    75,
   251,     2,    86,   325,   174,   236,    74,    95,   155,   321,
   268,    56,   189,   380,   184,    28,    77,   249,   152,   277,
   334,   177,   154,    71,    85,   360,    76,   361,   188,   324,
   159,   282,    10,   284,   344,    89,    91,   144,   202,   224,
   nil,   146,   nil,   nil,    57,   257,   nil,   248,    94,   nil,
   nil,   384,   197,    93,   115,   118,   246,    76,   150,   119,
   153,   nil,   nil,   151,   nil,   nil,   nil,   nil,   nil,   nil,
   243,   241,   312,   167,   nil,   273,    90,   nil,   166,   nil,
   nil,   nil,   239,   nil,   nil,   nil,   nil,   nil,   286,   nil,
   nil,   nil,   247,   nil,    58,   nil,   203,   nil,   nil,   nil,
    57,   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,   255,
   nil,   237,    10,   nil,    10,    89,    91,    57,   nil,   nil,
   nil,   313,   nil,   nil,   nil,   318,   115,   118,   nil,   320,
   377,   119,   283,   317,   287,   164,   272,   348,   342,   328,
   115,   118,   329,   115,   118,   119,   335,   311,   119,   nil,
   nil,   333,   115,   118,   nil,   nil,   nil,   119,   nil,   nil,
   nil,   nil,   nil,   310,   nil,   nil,   nil,   nil,   316,   nil,
   336,   nil,   379,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   309,   nil,   146,   nil,   nil,   365,   169,   nil,
   nil,   176,   nil,   181,   164,   nil,   nil,   nil,   322,   nil,
   nil,   nil,   nil,   nil,   nil,   319,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   366,   221,   222,   nil,   nil,   nil,   nil,   371,   nil,
   347,   nil,   nil,   nil,   374,   115,   118,   nil,   nil,   nil,
   119,   nil,   286,   351,   223,   225,   227,   228,   nil,   nil,
   nil,   nil,   nil,    58,   250,   382,   115,   118,   385,    57,
   252,   119,   nil,   nil,   nil,   nil,   nil,   237,   266,   267,
   252,    10,   270,   370,   nil,   nil,   nil,   276,   nil,   252,
   278,   279,   280,   nil,   281,   258,   nil,   nil,   nil,   nil,
   378,   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   nil,   nil,
   nil,   nil,   nil,   308,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   337,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   354,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   363,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   373,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   375,   376 ]

racc_goto_check = [
    14,    20,    12,    36,    50,    59,    65,    21,     8,    61,
    75,    23,    27,    51,    75,    45,     5,    34,    13,     5,
    15,     3,    12,    63,    63,    59,    12,    69,    57,     7,
    17,     4,    14,     1,    68,    14,    19,    46,    73,    25,
    42,     2,    16,    43,    41,    22,    24,    26,    28,    29,
    42,     4,    27,    30,    41,    33,    35,    38,    14,    42,
    43,    47,    20,    15,    13,    53,    15,    54,    56,    58,
    25,    60,    12,    64,    66,    12,    15,    67,    70,    72,
   nil,    15,   nil,   nil,    75,    51,   nil,    21,     5,   nil,
   nil,    46,    73,     3,    50,    59,    27,    15,     5,    61,
     5,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
    17,     7,    69,     5,   nil,    59,    19,   nil,     3,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,    50,   nil,
   nil,   nil,    20,   nil,     8,   nil,    15,   nil,   nil,   nil,
    75,   nil,   nil,    75,   nil,   nil,   nil,   nil,   nil,    14,
   nil,    15,    12,   nil,    12,    12,    15,    75,   nil,   nil,
   nil,    50,   nil,   nil,   nil,    36,    50,    59,   nil,    21,
    65,    61,    14,    27,    20,    59,    34,    23,    63,    36,
    50,    59,    36,    50,    59,    61,    57,    68,    61,   nil,
   nil,    36,    50,    59,   nil,   nil,   nil,    61,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,    20,   nil,
    27,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,    15,   nil,   nil,    63,    40,   nil,
   nil,    40,   nil,    40,    59,   nil,   nil,   nil,    15,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50,    40,    40,   nil,   nil,   nil,   nil,    21,   nil,
    20,   nil,   nil,   nil,    36,    50,    59,   nil,   nil,   nil,
    61,   nil,    50,    20,    52,    52,    52,    52,   nil,   nil,
   nil,   nil,   nil,     8,    40,    36,    50,    59,    21,    75,
    40,    61,   nil,   nil,   nil,   nil,   nil,    15,    40,    40,
    40,    12,    40,    20,   nil,   nil,   nil,    40,   nil,    40,
    40,    40,    40,   nil,    40,    52,   nil,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,   nil,   nil,
   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,    52 ]

racc_goto_pointer = [
   nil,    33,    41,    19,    31,    14,   nil,   -41,   -16,   nil,
   nil,   nil,     2,    -7,   -27,     3,   -31,   -43,   nil,   -37,
   -29,   -75,  -103,  -137,   -17,   -24,   -29,   -64,   -44,  -196,
  -325,   nil,   nil,    39,   -11,    -9,   -74,   nil,  -110,   nil,
   136,   -59,  -134,  -208,   nil,  -161,  -291,   -45,   nil,   nil,
   -73,   -93,   157,  -266,  -265,   nil,   -48,   -88,  -178,   -72,
  -127,   -68,   nil,  -106,  -128,  -195,  -212,    -1,   -44,  -120,
   -54,   nil,   -58,   -81,   nil,   -10,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   109,   nil,   200,   116,   nil,   nil,    88,   111,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    99,   100,   101,
   112,   nil,   nil,   nil,   104,   nil,   nil,   nil,   108,   110,
   170,   nil,   134,   259,   260,   356,   nil,   nil,   162,   171,
   nil,   173,   141,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   132,   135,   192,   142,    21,   199 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 100, :_reduce_1,
  1, 101, :_reduce_2,
  3, 101, :_reduce_3,
  1, 103, :_reduce_4,
  2, 103, :_reduce_5,
  0, 106, :_reduce_6,
  1, 106, :_reduce_7,
  3, 106, :_reduce_8,
  1, 107, :_reduce_9,
  1, 107, :_reduce_10,
  1, 107, :_reduce_11,
  1, 107, :_reduce_12,
  7, 109, :_reduce_13,
  9, 110, :_reduce_14,
  0, 112, :_reduce_15,
  2, 112, :_reduce_16,
  7, 105, :_reduce_17,
  2, 105, :_reduce_18,
  1, 115, :_reduce_19,
  3, 115, :_reduce_20,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  4, 117, :_reduce_24,
  0, 121, :_reduce_25,
  1, 121, :_reduce_26,
  3, 121, :_reduce_27,
  0, 120, :_reduce_28,
  3, 120, :_reduce_29,
  6, 111, :_reduce_30,
  0, 123, :_reduce_31,
  1, 123, :_reduce_32,
  3, 123, :_reduce_33,
  2, 124, :_reduce_34,
  3, 125, :_reduce_35,
  1, 125, :_reduce_36,
  4, 118, :_reduce_37,
  1, 127, :_reduce_none,
  1, 127, :_reduce_39,
  2, 128, :_reduce_40,
  3, 128, :_reduce_41,
  7, 128, :_reduce_42,
  0, 129, :_reduce_43,
  1, 129, :_reduce_44,
  1, 108, :_reduce_45,
  1, 108, :_reduce_46,
  6, 130, :_reduce_47,
  8, 131, :_reduce_48,
  2, 122, :_reduce_49,
  2, 122, :_reduce_50,
  1, 122, :_reduce_51,
  0, 132, :_reduce_52,
  2, 132, :_reduce_53,
  2, 135, :_reduce_54,
  0, 136, :_reduce_55,
  1, 136, :_reduce_56,
  3, 136, :_reduce_57,
  1, 137, :_reduce_58,
  2, 137, :_reduce_59,
  4, 137, :_reduce_60,
  1, 137, :_reduce_61,
  6, 137, :_reduce_62,
  3, 137, :_reduce_63,
  5, 137, :_reduce_64,
  5, 137, :_reduce_65,
  1, 137, :_reduce_66,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_70,
  4, 137, :_reduce_71,
  3, 148, :_reduce_72,
  3, 147, :_reduce_73,
  3, 146, :_reduce_74,
  1, 146, :_reduce_none,
  5, 150, :_reduce_76,
  5, 150, :_reduce_77,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 145, :_reduce_84,
  1, 145, :_reduce_85,
  5, 145, :_reduce_86,
  2, 154, :_reduce_87,
  2, 138, :_reduce_88,
  3, 155, :_reduce_89,
  3, 155, :_reduce_90,
  1, 155, :_reduce_91,
  1, 155, :_reduce_92,
  6, 126, :_reduce_93,
  3, 126, :_reduce_94,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  3, 156, :_reduce_97,
  0, 119, :_reduce_98,
  2, 119, :_reduce_99,
  0, 159, :_reduce_100,
  1, 159, :_reduce_101,
  3, 159, :_reduce_102,
  3, 143, :_reduce_103,
  3, 143, :_reduce_104,
  3, 143, :_reduce_105,
  1, 161, :_reduce_106,
  1, 161, :_reduce_107,
  1, 161, :_reduce_108,
  1, 161, :_reduce_109,
  1, 161, :_reduce_110,
  1, 161, :_reduce_111,
  1, 161, :_reduce_112,
  1, 161, :_reduce_113,
  1, 161, :_reduce_114,
  4, 161, :_reduce_115,
  5, 161, :_reduce_116,
  0, 163, :_reduce_117,
  1, 163, :_reduce_118,
  4, 163, :_reduce_119,
  3, 164, :_reduce_120,
  2, 165, :_reduce_none,
  2, 133, :_reduce_122,
  2, 133, :_reduce_123,
  1, 133, :_reduce_124,
  2, 133, :_reduce_125,
  0, 134, :_reduce_126,
  4, 134, :_reduce_127,
  1, 166, :_reduce_128,
  3, 166, :_reduce_129,
  3, 167, :_reduce_130,
  2, 167, :_reduce_131,
  0, 168, :_reduce_132,
  2, 168, :_reduce_133,
  1, 139, :_reduce_134,
  2, 139, :_reduce_135,
  3, 139, :_reduce_136,
  3, 139, :_reduce_137,
  4, 170, :_reduce_138,
  1, 169, :_reduce_139,
  1, 169, :_reduce_140,
  2, 169, :_reduce_141,
  3, 169, :_reduce_142,
  3, 151, :_reduce_143,
  3, 151, :_reduce_144,
  3, 151, :_reduce_145,
  3, 151, :_reduce_146,
  3, 151, :_reduce_147,
  3, 151, :_reduce_148,
  3, 151, :_reduce_149,
  3, 151, :_reduce_150,
  3, 151, :_reduce_151,
  3, 151, :_reduce_152,
  3, 151, :_reduce_153,
  2, 151, :_reduce_154,
  2, 151, :_reduce_155,
  2, 151, :_reduce_156,
  3, 151, :_reduce_157,
  1, 151, :_reduce_158,
  3, 171, :_reduce_159,
  3, 171, :_reduce_160,
  3, 171, :_reduce_161,
  3, 171, :_reduce_162,
  3, 171, :_reduce_163,
  3, 171, :_reduce_164,
  3, 171, :_reduce_165,
  1, 149, :_reduce_166,
  1, 149, :_reduce_167,
  2, 149, :_reduce_168,
  1, 149, :_reduce_none,
  5, 149, :_reduce_170,
  2, 173, :_reduce_171,
  3, 160, :_reduce_172,
  3, 160, :_reduce_173,
  0, 172, :_reduce_174,
  3, 172, :_reduce_175,
  0, 141, :_reduce_176,
  1, 141, :_reduce_177,
  3, 141, :_reduce_178,
  4, 158, :_reduce_179,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_203,
  0, 140, :_reduce_204,
  1, 140, :_reduce_none,
  0, 142, :_reduce_206,
  1, 142, :_reduce_none,
  0, 102, :_reduce_208,
  1, 102, :_reduce_209,
  1, 104, :_reduce_210,
  2, 104, :_reduce_211,
  1, 174, :_reduce_212,
  1, 174, :_reduce_none,
  0, 162, :_reduce_214,
  1, 162, :_reduce_none,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  1, 113, :_reduce_218 ]

racc_reduce_n = 219

racc_shift_n = 386

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kDTYPE_UINT => 29,
  :kDTYPE_LINT => 30,
  :kDTYPE_LLINT => 31,
  :kDTYPE_CHAR => 32,
  :kDTYPE_I8 => 33,
  :kDTYPE_I16 => 34,
  :kDTYPE_I32 => 35,
  :kDTYPE_I64 => 36,
  :kDTYPE_UI8 => 37,
  :kDTYPE_UI16 => 38,
  :kDTYPE_UI32 => 39,
  :kDTYPE_UI64 => 40,
  :kDTYPE_INT => 41,
  :kDTYPE_F32 => 42,
  :kDTYPE_F64 => 43,
  :kDTYPE_LF64 => 44,
  :kDTYPE_ROBJ => 45,
  :kDTYPE_ULINT => 46,
  :kDTYPE_ULLINT => 47,
  :kDTYPE_VOID => 48,
  :kDTYPE_SIZE_T => 49,
  :kDTYPE_RB_STR => 50,
  :kDTYPE_UCHAR => 51,
  :tCUSTOM_DTYPE => 52,
  :tLPAREN => 53,
  :tRPAREN => 54,
  :tLSQUARE => 55,
  :tRSQUARE => 56,
  :tIDENTIFIER => 57,
  :tNL => 58,
  :tCOMMA => 59,
  :tSQUOTE => 60,
  :tSCOLON => 61,
  :EOF => 62,
  :tDOT => 63,
  :tQMARK => 64,
  :tSYMBOL => 65,
  :tLBRACE => 66,
  :tRBRACE => 67,
  :tPLUS => 68,
  :tMINUS => 69,
  :tSTAR => 70,
  :tDIVIDE => 71,
  :tEXPO => 72,
  :tMODULUS => 73,
  :tASSIGN => 74,
  :tEQ => 75,
  :tLT => 76,
  :tLTEQ => 77,
  :tGT => 78,
  :tGTEQ => 79,
  :tANDOP => 80,
  :tOROP => 81,
  :tBANG => 82,
  :tOP_ASSIGN => 83,
  :tSTRING => 84,
  :kSIZEOF => 85,
  :tBIT_AND => 86,
  :tBIT_OR => 87,
  :tBIT_XOR => 88,
  :tBIT_LSHIFT => 89,
  :tBIT_RSHIFT => 90,
  :tBIT_NOT => 91,
  :tINTEGER => 92,
  :tFLOAT => 93,
  :tSINGLE_CHAR => 94,
  :ADDRESS_OF => 95,
  :TYPECAST => 96,
  :UMINUS => 97,
  :tNEQ => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_71(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_72(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_73(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_74(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_76(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_77(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_84(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_85(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_86(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_87(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_88(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_89(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_90(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_91(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_92(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_93(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 386)
  def _reduce_94(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_97(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 413)
  def _reduce_98(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 414)
  def _reduce_99(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 417)
  def _reduce_100(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 418)
  def _reduce_101(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_102(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 424)
  def _reduce_103(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 429)
  def _reduce_104(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_105(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 439)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 454)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 455)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_119(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 459)
  def _reduce_120(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 465)
  def _reduce_122(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 466)
  def _reduce_123(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_124(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_126(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 472)
  def _reduce_127(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_128(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 481)
  def _reduce_129(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 487)
  def _reduce_130(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_131(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 511)
  def _reduce_132(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_133(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_134(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_135(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_136(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_138(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_139(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_140(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_141(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 534)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 535)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_154(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_155(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_156(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_158(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 552)
  def _reduce_159(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 553)
  def _reduce_160(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 561)
  def _reduce_166(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 562)
  def _reduce_167(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 565)
  def _reduce_168(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 169 omitted

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_170(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 582)
  def _reduce_171(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 588)
  def _reduce_172(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 592)
  def _reduce_173(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 596)
  def _reduce_174(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 597)
  def _reduce_175(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 600)
  def _reduce_176(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_177(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_178(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 607)
  def _reduce_179(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_203(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 621)
  def _reduce_204(val, _values, result)
    
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_206(val, _values, result)
    
    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'parser.racc', 629)
  def _reduce_208(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 630)
  def _reduce_209(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 633)
  def _reduce_210(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 634)
  def _reduce_211(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 637)
  def _reduce_212(val, _values, result)
    
    result
  end
.,.,

# reduce 213 omitted

module_eval(<<'.,.,', 'parser.racc', 641)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

module_eval(<<'.,.,', 'parser.racc', 649)
  def _reduce_218(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
