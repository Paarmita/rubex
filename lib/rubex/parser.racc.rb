#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 636)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'100,101,103,245,255,245,60,104,105,182,80,121,122,123,13,22,90,188,23',
'189,327,125,111,81,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47',
'48,49,50,51,52,53,54,134,78,126,64,114,64,61,350,18,188,154,189,124',
'127,22,153,135,23,294,79,25,178,179,130,81,178,179,178,179,133,186,120',
'140,136,16,100,101,103,137,117,118,119,104,105,178,179,121,122,123,13',
'13,90,26,12,11,17,125,111,27,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,134,189,126,188,114,22,22,182,23,23',
'78,81,124,127,349,22,135,224,23,328,321,301,225,130,191,29,300,181,79',
'133,81,120,140,136,16,100,101,103,137,117,118,119,104,105,178,179,121',
'122,123,13,13,90,55,320,11,17,125,111,243,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,134,16,126,62,114,236,22',
'158,64,23,158,160,124,127,160,160,135,13,81,66,12,11,17,130,81,178,179',
'81,81,133,67,120,140,136,16,100,101,103,137,117,118,119,104,105,64,362',
'121,122,123,13,13,90,178,179,11,17,125,111,81,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,134,16,126,71,114,22',
'22,22,23,23,23,22,124,127,23,22,135,13,23,178,179,11,17,130,323,178',
'179,322,64,133,77,120,140,136,16,100,101,103,137,117,118,119,104,105',
'178,179,121,122,123,13,13,90,178,179,11,17,125,111,61,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,134,145,126',
'64,114,155,199,200,201,202,203,204,124,127,178,179,135,199,200,201,202',
'203,204,130,205,206,207,208,209,133,157,120,140,136,162,100,101,103',
'137,117,118,119,104,105,178,179,121,122,123,13,165,90,201,202,203,204',
'125,111,180,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,134,190,126,64,114,64,199,200,201,202,203,204,124,127',
'178,179,135,199,200,201,202,203,204,130,205,206,207,208,209,133,223',
'120,140,136,226,100,101,103,137,117,118,119,104,105,64,325,121,122,123',
'13,64,90,201,202,203,204,125,111,232,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,134,237,126,145,114,189,199,200',
'201,202,203,204,124,127,178,179,135,338,339,250,251,252,253,130,205',
'206,207,208,209,133,182,120,140,136,188,100,101,103,137,117,118,119',
'104,105,178,179,121,122,123,13,243,90,178,179,338,339,125,111,247,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'134,258,126,260,114,121,122,123,263,264,64,296,124,127,203,125,135,199',
'200,201,202,203,204,130,64,145,165,314,315,133,178,120,140,136,203,203',
'206,207,137,117,118,119,134,203,126,203,169,121,122,123,331,334,335',
'340,124,127,343,125,135,199,200,201,202,203,204,130,264,345,64,348,145',
'133,353,120,140,136,182,205,206,207,137,117,118,119,134,81,126,364,169',
'121,122,123,145,,,,124,127,,125,135,199,200,201,202,203,204,130,,,,',
',133,,120,140,136,,205,206,207,137,117,118,119,134,,126,,169,121,122',
'123,,,,,124,127,,125,135,,,,,,,130,,,,,,133,,120,140,136,,,,,137,117',
'118,119,176,,126,,169,121,122,123,16,332,,,124,127,,125,135,,,,,,,,13',
',,,11,17,,120,140,136,,,,,137,117,118,119,134,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,22,,130,23,,,,,133,,120,140,136,,,,,137,117',
'118,119,134,,126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,133',
',120,140,136,,,,,137,117,118,119,134,,126,,169,121,122,123,,,,,124,127',
',125,135,,,,,,,130,,,,,,133,,120,140,136,,,,,137,117,118,119,134,,126',
',169,121,122,123,,,,,124,127,,125,135,,,,,,,130,,,,,,133,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,134,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,130,,,,,,133,,120,140,136,,,,,137,117,118,119,176,,126,,169,121',
'122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118',
'119,134,,126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,130,,,,,,133',
',120,140,136,,,,,137,117,118,119,134,,126,,169,121,122,123,,,,,124,127',
',125,135,,,,,,,130,,,,,,133,,120,140,136,,,,,137,117,118,119,134,,126',
',169,121,122,123,,,,,124,127,,125,135,,,,,,,130,,,,,,133,,120,140,136',
',,,,137,117,118,119,134,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,130,,,,,,133,,120,140,136,,,,,137,117,118,119,134,,126,,169,121',
'122,123,,,,,124,127,,125,135,,,,,,,130,,,,,,133,,120,140,136,,,,,137',
'117,118,119,134,,126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,130',
',,,,,133,,120,140,136,,,,,137,117,118,119,134,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,130,,,,,,133,,120,140,136,,,,,137,117,118',
'119,134,,126,,169,121,122,123,,,,,124,127,,125,135,,121,122,123,,,130',
',,,,125,133,,120,140,136,,,,,137,117,118,119,134,,126,,169,,,,,121,122',
'123,124,127,,126,135,169,,125,,,,130,,124,127,,,133,,120,140,136,,,',
',137,117,118,119,,,120,140,176,,126,,169,,117,118,119,121,122,123,124',
'127,,,135,,,125,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,,,,,176,',
'126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,176,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176,,126,,169,121,122,123',
',,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136,,,,,137,117,118,119,176',
',126,,169,121,122,123,,,,,124,127,,125,135,,,,,,,,,,,,,,,120,140,136',
',,,,137,117,118,119,134,,126,,169,121,122,123,,,,,124,127,,125,135,',
',,,,,130,,,,,,133,,120,140,136,,,,,137,117,118,119,134,,126,,169,121',
'122,123,,,,,124,127,,125,135,,121,122,123,,,130,,,,,125,133,,120,140',
'136,,,,,137,117,118,119,134,,126,,169,,,,,121,122,123,124,127,,126,135',
'169,,125,,,,130,,124,127,,,133,,120,140,136,,,,,137,117,118,119,,,120',
'140,134,,126,,169,,117,118,119,121,122,123,124,127,,,135,,,125,,,,130',
',,,,,133,,120,140,136,,,,,137,117,118,119,,,,,176,,126,,169,121,122',
'123,,,,,124,127,,125,135,,121,122,123,,,,,,,,125,,,120,140,136,,,,,137',
'117,118,119,176,,126,,169,,,,,,,,124,127,,126,135,169,,,,,,,,124,127',
',,,,120,140,136,234,,,,137,117,118,119,,,120,140,,,,13,,90,117,118,119',
',,,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52',
'53,54,295,,,,,22,,,23,,,,,,199,200,201,202,203,204,,210,212,213,214',
'215,,,,,,295,205,206,207,208,209,,,,,,,,211,199,200,201,202,203,204',
',,,,,,,13,,90,,,205,206,207,208,209,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,309,,,,,,,,,,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,,22,,,23',
'199,200,201,202,203,204,,210,212,213,214,215,,,,,,,205,206,207,208,209',
',,,,,,,211,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,,-25,,,,,-25,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,,,,,144,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,,,,,144,31,32,33,34,35,36',
'37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35',
'36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33',
'34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'199,200,201,202,203,204,,,250,251,252,253,199,200,201,202,203,204,205',
'206,207,208,209,199,200,201,202,203,204,,205,206,207,208,209,199,200',
'201,202,203,204,205,206,207,208,209,199,200,201,202,203,204,,205,206',
'207,208,209,199,200,201,202,203,204,205,206,207,208,209,,,,,,,,205,206',
'207,208,209' ]
        racc_action_table = arr = ::Array.new(3122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'76,76,76,173,177,354,25,76,76,275,68,76,76,76,76,2,76,169,2,169,275',
'76,76,68,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,66,76,173,76,354,25,333,1,114,90,114,76,76,5,90,76,5',
'217,66,11,177,177,76,333,173,173,354,354,76,114,76,76,76,20,164,164',
'164,76,76,76,76,164,164,217,217,164,164,164,164,20,164,12,20,20,20,164',
'164,13,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,260,164,116,164,164,20,112,164,20',
'260,276,164,164,329,73,164,141,73,276,267,228,141,164,116,16,228,112',
'260,164,329,164,164,164,24,231,231,231,164,164,164,164,231,231,267,267',
'231,231,231,231,24,231,18,266,24,24,231,231,266,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,0,231,26,231,151,24,95,27,24,302,95,231,231,302,239,231',
'0,151,28,0,0,0,231,95,110,110,302,239,231,29,231,231,231,147,244,244',
'244,231,231,231,231,244,244,59,359,244,244,244,244,147,244,166,166,147',
'147,244,244,359,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,69,244,61,244,82,147',
'84,82,147,84,97,244,244,97,233,244,69,233,172,172,69,69,244,271,242',
'242,271,62,244,65,244,244,244,149,247,247,247,244,244,244,244,247,247',
'259,259,247,247,247,247,149,247,265,265,149,149,247,247,70,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,80,247,83,247,91,288,288,288,288,288,288,247,247',
'268,268,247,284,284,284,284,284,284,247,288,288,288,288,288,247,93,247',
'247,247,96,255,255,255,247,247,247,247,255,255,269,269,255,255,255,255',
'98,255,277,277,277,277,255,255,111,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,115',
'255,126,255,127,289,289,289,289,289,289,255,255,270,270,255,285,285',
'285,285,285,285,255,289,289,289,289,289,255,140,255,255,255,143,339',
'339,339,255,255,255,255,339,339,273,273,339,339,339,339,146,339,278',
'278,278,278,339,339,148,339,339,339,339,339,339,339,339,339,339,339',
'339,339,339,339,339,339,339,339,339,339,339,339,339,339,152,339,159',
'339,160,290,290,290,290,290,290,339,339,311,311,339,312,312,314,314',
'315,315,339,290,290,290,290,290,339,167,339,339,339,170,360,360,360',
'339,339,339,339,360,360,319,319,360,360,360,360,171,360,344,344,363',
'363,360,360,174,360,360,360,360,360,360,360,360,360,360,360,360,360',
'360,360,360,360,360,360,360,360,360,360,360,360,180,360,182,360,100',
'100,100,183,184,194,219,360,360,220,100,360,283,283,283,283,283,283',
'360,224,236,241,248,249,360,257,360,360,360,279,280,283,283,360,360',
'360,360,100,281,100,282,100,101,101,101,304,309,310,313,100,100,316',
'101,100,286,286,286,286,286,286,100,318,324,325,327,335,100,336,100',
'100,100,347,286,286,286,100,100,100,100,101,351,101,361,101,103,103',
'103,364,,,,101,101,,103,101,287,287,287,287,287,287,101,,,,,,101,,101',
'101,101,,287,287,287,101,101,101,101,103,,103,,103,104,104,104,,,,,103',
'103,,104,103,,,,,,,103,,,,,,103,,103,103,103,,,,,103,103,103,103,104',
',104,,104,105,105,105,305,305,,,104,104,,105,104,,,,,,,,305,,,,305,305',
',104,104,104,,,,,104,104,104,104,105,,105,,105,129,129,129,,,,,105,105',
',129,105,,,,,305,,105,305,,,,,105,,105,105,105,,,,,105,105,105,105,129',
',129,,129,133,133,133,,,,,129,129,,133,129,,,,,,,,,,,,,129,,129,129',
'129,,,,,129,129,129,129,133,,133,,133,134,134,134,,,,,133,133,,134,133',
',,,,,,133,,,,,,133,,133,133,133,,,,,133,133,133,133,134,,134,,134,135',
'135,135,,,,,134,134,,135,134,,,,,,,134,,,,,,134,,134,134,134,,,,,134',
'134,134,134,135,,135,,135,136,136,136,,,,,135,135,,136,135,,,,,,,,,',
',,,,,135,135,135,,,,,135,135,135,135,136,,136,,136,137,137,137,,,,,136',
'136,,137,136,,,,,,,,,,,,,,,136,136,136,,,,,136,136,136,136,137,,137',
',137,165,165,165,,,,,137,137,,165,137,,,,,,,,,,,,,,,137,137,137,,,,',
'137,137,137,137,165,,165,,165,176,176,176,,,,,165,165,,176,165,,,,,',
',165,,,,,,165,,165,165,165,,,,,165,165,165,165,176,,176,,176,178,178',
'178,,,,,176,176,,178,176,,,,,,,,,,,,,,,176,176,176,,,,,176,176,176,176',
'178,,178,,178,179,179,179,,,,,178,178,,179,178,,,,,,,178,,,,,,178,,178',
'178,178,,,,,178,178,178,178,179,,179,,179,181,181,181,,,,,179,179,,181',
'179,,,,,,,179,,,,,,179,,179,179,179,,,,,179,179,179,179,181,,181,,181',
'186,186,186,,,,,181,181,,186,181,,,,,,,181,,,,,,181,,181,181,181,,,',
',181,181,181,181,186,,186,,186,188,188,188,,,,,186,186,,188,186,,,,',
',,186,,,,,,186,,186,186,186,,,,,186,186,186,186,188,,188,,188,189,189',
'189,,,,,188,188,,189,188,,,,,,,188,,,,,,188,,188,188,188,,,,,188,188',
'188,188,189,,189,,189,190,190,190,,,,,189,189,,190,189,,,,,,,189,,,',
',,189,,189,189,189,,,,,189,189,189,189,190,,190,,190,191,191,191,,,',
',190,190,,191,190,,,,,,,190,,,,,,190,,190,190,190,,,,,190,190,190,190',
'191,,191,,191,193,193,193,,,,,191,191,,193,191,,196,196,196,,,191,,',
',,196,191,,191,191,191,,,,,191,191,191,191,193,,193,,193,,,,,199,199',
'199,193,193,,196,193,196,,199,,,,193,,196,196,,,193,,193,193,193,,,',
',193,193,193,193,,,196,196,199,,199,,199,,196,196,196,200,200,200,199',
'199,,,199,,,200,,,,,,,,,,,,199,199,199,,,,,199,199,199,199,,,,,200,',
'200,,200,201,201,201,,,,,200,200,,201,200,,,,,,,,,,,,,,,200,200,200',
',,,,200,200,200,200,201,,201,,201,202,202,202,,,,,201,201,,202,201,',
',,,,,,,,,,,,,201,201,201,,,,,201,201,201,201,202,,202,,202,203,203,203',
',,,,202,202,,203,202,,,,,,,,,,,,,,,202,202,202,,,,,202,202,202,202,203',
',203,,203,204,204,204,,,,,203,203,,204,203,,,,,,,,,,,,,,,203,203,203',
',,,,203,203,203,203,204,,204,,204,205,205,205,,,,,204,204,,205,204,',
',,,,,,,,,,,,,204,204,204,,,,,204,204,204,204,205,,205,,205,206,206,206',
',,,,205,205,,206,205,,,,,,,,,,,,,,,205,205,205,,,,,205,205,205,205,206',
',206,,206,207,207,207,,,,,206,206,,207,206,,,,,,,,,,,,,,,206,206,206',
',,,,206,206,206,206,207,,207,,207,208,208,208,,,,,207,207,,208,207,',
',,,,,,,,,,,,,207,207,207,,,,,207,207,207,207,208,,208,,208,209,209,209',
',,,,208,208,,209,208,,,,,,,,,,,,,,,208,208,208,,,,,208,208,208,208,209',
',209,,209,210,210,210,,,,,209,209,,210,209,,,,,,,,,,,,,,,209,209,209',
',,,,209,209,209,209,210,,210,,210,211,211,211,,,,,210,210,,211,210,',
',,,,,,,,,,,,,210,210,210,,,,,210,210,210,210,211,,211,,211,212,212,212',
',,,,211,211,,212,211,,,,,,,,,,,,,,,211,211,211,,,,,211,211,211,211,212',
',212,,212,213,213,213,,,,,212,212,,213,212,,,,,,,,,,,,,,,212,212,212',
',,,,212,212,212,212,213,,213,,213,214,214,214,,,,,213,213,,214,213,',
',,,,,,,,,,,,,213,213,213,,,,,213,213,213,213,214,,214,,214,215,215,215',
',,,,214,214,,215,214,,,,,,,,,,,,,,,214,214,214,,,,,214,214,214,214,215',
',215,,215,243,243,243,,,,,215,215,,243,215,,,,,,,,,,,,,,,215,215,215',
',,,,215,215,215,215,243,,243,,243,264,264,264,,,,,243,243,,264,243,',
',,,,,243,,,,,,243,,243,243,243,,,,,243,243,243,243,264,,264,,264,322',
'322,322,,,,,264,264,,322,264,,326,326,326,,,264,,,,,326,264,,264,264',
'264,,,,,264,264,264,264,322,,322,,322,,,,,338,338,338,322,322,,326,322',
'326,,338,,,,322,,326,326,,,322,,322,322,322,,,,,322,322,322,322,,,326',
'326,338,,338,,338,,326,326,326,341,341,341,338,338,,,338,,,341,,,,338',
',,,,,338,,338,338,338,,,,,338,338,338,338,,,,,341,,341,,341,342,342',
'342,,,,,341,341,,342,341,,346,346,346,,,,,,,,346,,,341,341,341,,,,,341',
'341,341,341,342,,342,,342,,,,,,,,342,342,,346,342,346,,,,,,,,346,346',
',,,,342,342,342,150,,,,342,342,342,342,,,346,346,,,,150,,150,346,346',
'346,,,,,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,150,150,150,150,150,218,,,,,150,,,150,,,,,,218,218,218',
'218,218,218,,218,218,218,218,218,,,,,,254,218,218,218,218,218,,,,,,',
',218,254,254,254,254,254,254,,,,,,,,72,,72,,,254,254,254,254,254,72',
'72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'237,,,,,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,,,,,,92,,,92,131,131,131,131',
'131,131,,131,131,131,131,131,,,,,,,131,131,131,131,131,,,,,,,,131,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,,145,,,,,145,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,77,77,77,77,77,,,,,77,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,,,,,225,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,130,130,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,130,130,130,130,130,130,130,130,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,175,175,175,175,175,175,,,175,175',
'175,175,291,291,291,291,291,291,175,175,175,175,175,292,292,292,292',
'292,292,,291,291,291,291,291,293,293,293,293,293,293,292,292,292,292',
'292,356,356,356,356,356,356,,293,293,293,293,293,357,357,357,357,357',
'357,356,356,356,356,356,,,,,,,,357,357,357,357,357' ]
        racc_action_check = arr = ::Array.new(3122, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   213,    56,   -42,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,    12,    17,    50,   nil,   nil,   132,  2869,   183,   nil,
    80,   nil,   nil,   nil,   163,   -21,   203,   165,   177,   182,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,
  2893,   244,   268,  2917,   nil,   275,   -14,   nil,   -46,   296,
   280,   nil,  2658,    89,   nil,   nil,    -4,  2811,   nil,   nil,
   329,   nil,   245,   326,   247,   nil,   nil,   nil,   nil,   nil,
     7,   382,  2716,   352,   nil,   169,   411,   251,   424,   nil,
   619,   661,   nil,   703,   745,   787,   nil,   nil,   nil,   nil,
   160,   420,    76,   nil,     5,   391,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   409,   411,   nil,   829,
  2941,  2710,   nil,   871,   913,   955,   997,  1039,   nil,   nil,
   441,    95,   nil,   441,   nil,  2780,   456,   246,   518,   329,
  2566,   163,   474,   nil,   nil,   nil,   nil,   nil,   nil,   497,
   497,   nil,   nil,   nil,    79,  1081,   187,   514,   nil,   -35,
   528,   538,   237,    -6,   590,  2974,  1123,   -10,  1165,  1207,
   574,  1249,   576,   579,   565,   nil,  1291,   nil,  1333,  1375,
  1417,  1459,   nil,  1501,   582,   nil,  1514,   nil,   nil,  1547,
  1593,  1635,  1677,  1719,  1761,  1803,  1845,  1887,  1929,  1971,
  2013,  2055,  2097,  2139,  2181,  2223,   nil,    13,  2565,   587,
   572,   nil,   nil,  2965,   596,  2840,   nil,   nil,    99,   nil,
   nil,   162,   nil,   255,   nil,   nil,   602,  2692,   nil,   173,
   nil,   649,   243,  2265,   245,   nil,   nil,   328,   600,   601,
   nil,   nil,   nil,   nil,  2596,   411,   nil,   580,   nil,   262,
    78,   nil,   nil,   nil,  2307,   270,   131,    96,   315,   345,
   398,   266,   nil,   450,   nil,   -53,    73,   363,   446,   592,
   593,   601,   603,   579,   330,   413,   621,   663,   319,   402,
   485,  2986,  2997,  3009,   nil,   nil,   nil,   nil,   nil,   nil,
  2989,   nil,   172,   nil,   676,   803,   nil,   nil,   nil,   624,
   628,   481,   556,   679,   490,   490,   682,   nil,   622,   511,
   nil,   nil,  2349,   nil,   630,   640,  2362,   621,   nil,    92,
   nil,   nil,   nil,     3,   nil,   647,   698,   nil,  2395,   494,
   nil,  2441,  2483,   nil,   519,   nil,  2496,   643,   nil,   nil,
   nil,   645,   nil,   nil,    -4,   nil,  3020,  3032,   nil,   203,
   577,   663,   nil,   593,   669,   nil,   nil ]

racc_action_default = [
    -6,  -209,  -198,    -2,    -4,  -209,    -7,    -9,   -10,   -11,
   -12,  -209,  -209,  -209,   -45,   -46,   -52,  -209,  -209,    -1,
  -199,  -200,  -202,  -203,    -5,   -15,   -18,  -209,  -209,  -209,
   -95,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,
  -193,  -194,  -195,  -196,  -197,   367,    -3,  -201,    -8,  -209,
  -209,  -209,  -209,   -31,  -208,  -122,  -121,   -53,  -209,    -6,
   -15,   -16,  -209,  -198,   -32,   -95,   -55,  -209,  -119,  -120,
   -28,   -96,  -198,  -209,  -209,   -19,   -21,   -22,   -23,   -95,
  -209,  -209,  -199,   -34,   -36,  -209,  -209,  -198,   -56,   -58,
  -209,  -170,   -61,  -209,  -209,  -209,   -66,   -67,   -68,   -69,
   -70,  -209,  -152,   -95,  -168,  -160,  -168,  -103,  -104,  -105,
  -106,  -107,  -108,  -109,  -110,  -111,  -204,  -204,  -128,  -209,
  -209,  -133,  -134,  -209,  -209,  -209,  -209,  -209,  -161,  -163,
  -209,  -209,  -124,  -209,  -127,   -95,  -209,  -199,  -209,    -6,
  -209,  -209,  -209,   -38,   -39,   -30,   -33,   -95,   -95,   -28,
   -92,   -93,   -47,   -54,  -199,  -209,   -59,  -152,  -160,  -168,
  -168,   -60,  -171,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,   -85,   -88,   -89,  -209,  -162,  -170,  -209,
  -209,  -209,  -165,   -97,  -205,  -206,  -114,  -129,   -95,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -135,  -209,  -133,  -134,
  -148,  -149,  -150,  -209,  -209,  -209,  -126,   -26,  -209,   -95,
   -51,   -55,   -13,  -209,   -17,   -20,   -28,  -209,   -35,  -209,
   -91,   -57,   -63,  -209,   -55,   -79,   -80,   -55,  -209,  -209,
   -75,   -76,   -77,   -78,  -209,   -55,  -130,  -131,   -71,   -72,
  -121,  -166,  -167,   -95,  -209,  -100,  -209,  -209,  -101,  -102,
   -98,  -209,  -207,  -204,  -115,  -209,  -209,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -153,  -154,
  -155,  -156,  -157,  -158,  -136,  -151,  -159,   -95,  -123,  -125,
   -95,   -29,   -49,   -50,  -209,  -209,   -24,   -37,   -95,  -209,
  -209,  -172,   -81,  -209,  -209,  -209,  -209,   -86,   -87,   -94,
  -169,  -173,  -209,  -112,  -209,  -204,  -209,  -209,  -132,  -209,
   -27,   -48,   -14,   -40,   -95,   -28,  -209,   -82,  -209,   -55,
   -64,  -209,  -209,   -65,   -99,  -113,  -209,  -117,  -118,  -164,
   -95,   -41,   -90,   -62,  -209,   -84,   -73,   -74,  -116,   -43,
   -55,  -209,   -44,   -81,   -28,   -83,   -42 ]

racc_goto_table = [
    63,    68,    10,    57,    30,   146,    65,    57,    96,   115,
   116,    20,   193,   196,    24,   112,    58,   244,   185,   248,
   227,   274,    10,   171,    82,    19,    10,   192,   161,    85,
    88,    59,    69,    74,   142,    72,   336,     3,     1,    94,
     2,    84,   228,    73,   249,    93,   152,    70,   307,   361,
    75,    28,    76,   241,   174,   183,   149,    56,   310,    89,
   151,   271,   156,   273,   143,   326,   141,   197,   219,   nil,
   nil,    10,   nil,   nil,    87,    57,    83,   184,   nil,    75,
   nil,   192,    92,   nil,   240,   nil,   nil,   365,   nil,   nil,
   nil,   147,   nil,   150,   nil,   nil,    91,   115,   116,   nil,
   nil,   nil,   nil,   112,   233,   148,   164,   235,    88,   nil,
   266,   nil,   nil,   nil,   nil,   262,   nil,   198,   nil,   231,
   163,   238,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,
    57,   nil,   229,    57,   nil,   275,   nil,    89,   nil,    58,
   166,   172,   nil,   173,   nil,   177,   246,    57,   nil,    10,
   nil,    10,    87,   nil,   nil,   nil,   nil,   nil,   341,   324,
   261,   306,   nil,   304,   115,   116,   nil,   272,   317,   276,
   112,   358,   161,   216,   217,   330,   312,   115,   116,   313,
   115,   116,   299,   112,   342,   nil,   112,   316,   115,   116,
   nil,   nil,   nil,   303,   112,   nil,   nil,   298,   360,   nil,
   302,   nil,   nil,   nil,   nil,   242,   nil,   nil,   nil,   nil,
   297,   346,   143,   nil,   nil,   nil,   nil,   nil,   256,   257,
   nil,   259,   nil,   nil,   308,   nil,   265,   318,   172,   267,
   268,   269,   nil,   270,   nil,   161,   nil,   nil,   nil,   nil,
   nil,   nil,   305,   nil,   175,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   352,   nil,   nil,   nil,   nil,   347,   nil,   nil,   329,   nil,
   nil,   355,   115,   116,   218,   220,   221,   222,   112,   333,
   nil,   nil,   nil,   311,   nil,   275,   nil,   229,    57,   366,
   nil,   nil,   363,   115,   116,   nil,   nil,    58,   nil,   112,
   nil,   nil,   nil,   nil,   319,   351,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   254,   nil,   nil,   nil,
   nil,   359,   nil,   nil,   nil,   nil,   nil,   246,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   277,
   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,   nil,   nil,   nil,   nil,
   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   354,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   356,   357 ]

racc_goto_check = [
    14,    20,    12,    71,    15,    21,    34,    71,    36,    56,
    58,     5,    60,    60,     5,    48,     8,    43,    54,    50,
    23,    62,    12,    41,     7,     3,    12,    69,    56,    17,
    19,    13,    14,    25,    65,    14,    44,     4,     1,    27,
     2,    16,    22,    24,    51,    26,    28,    15,    29,    30,
    15,    33,    35,    38,    45,    53,    14,     4,    55,    15,
    20,    57,    25,    61,    15,    63,    64,    66,    68,   nil,
   nil,    12,   nil,   nil,    12,    71,    13,    27,   nil,    15,
   nil,    69,     5,   nil,    21,   nil,   nil,    44,   nil,   nil,
   nil,     5,   nil,     5,   nil,   nil,     3,    56,    58,   nil,
   nil,   nil,   nil,    48,     7,     3,     5,    17,    19,   nil,
    41,   nil,   nil,   nil,   nil,    56,   nil,    15,   nil,    14,
     3,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,
    71,   nil,    15,    71,   nil,    48,   nil,    15,   nil,     8,
    40,    40,   nil,    40,   nil,    40,    14,    71,   nil,    12,
   nil,    12,    12,   nil,   nil,   nil,   nil,   nil,    50,    60,
    34,    21,   nil,    36,    56,    58,   nil,    14,    54,    20,
    48,    62,    56,    40,    40,    23,    36,    56,    58,    36,
    56,    58,    65,    48,    51,   nil,    48,    36,    56,    58,
   nil,   nil,   nil,    27,    48,   nil,   nil,    14,    43,   nil,
    20,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,
    15,    60,    15,   nil,   nil,   nil,   nil,   nil,    40,    40,
   nil,    40,   nil,   nil,    15,   nil,    40,    27,    40,    40,
    40,    40,   nil,    40,   nil,    56,   nil,   nil,   nil,   nil,
   nil,   nil,     5,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,    48,   nil,   nil,    20,   nil,
   nil,    36,    56,    58,    49,    49,    49,    49,    48,    20,
   nil,   nil,   nil,    40,   nil,    48,   nil,    15,    71,    21,
   nil,   nil,    36,    56,    58,   nil,   nil,     8,   nil,    48,
   nil,   nil,   nil,   nil,    40,    20,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,    49 ]

racc_goto_pointer = [
   nil,    38,    40,    23,    37,     9,   nil,   -45,    -8,   nil,
   nil,   nil,     2,     6,   -27,   -13,   -31,   -43,   nil,   -42,
   -29,   -75,  -103,  -125,   -20,   -30,   -30,   -36,   -44,  -189,
  -310,   nil,   nil,    35,   -22,   -13,   -68,   nil,  -111,   nil,
    40,   -78,   nil,  -156,  -276,   -50,   nil,   nil,   -61,   140,
  -156,  -131,   nil,   -58,   -95,  -181,   -67,  -132,   -66,   nil,
  -114,  -133,  -175,  -210,   -11,   -43,   -62,   nil,   -66,   -89,
   nil,   -17,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   107,   nil,   195,   113,   nil,   nil,    86,   109,
    95,   nil,   nil,   nil,   nil,   nil,   nil,   230,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    97,    98,    99,
   110,   nil,   102,   nil,   nil,   nil,   106,   108,   167,   131,
   nil,   nil,   337,   nil,   nil,   159,   168,   nil,   170,   138,
   nil,   nil,   nil,   nil,   nil,   nil,   128,   129,   132,   187,
   139,    21,   194 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 99, :_reduce_1,
  1, 100, :_reduce_2,
  3, 100, :_reduce_3,
  1, 102, :_reduce_4,
  2, 102, :_reduce_5,
  0, 105, :_reduce_6,
  1, 105, :_reduce_7,
  3, 105, :_reduce_8,
  1, 106, :_reduce_9,
  1, 106, :_reduce_10,
  1, 106, :_reduce_11,
  1, 106, :_reduce_12,
  7, 108, :_reduce_13,
  9, 109, :_reduce_14,
  0, 111, :_reduce_15,
  2, 111, :_reduce_16,
  7, 104, :_reduce_17,
  2, 104, :_reduce_18,
  1, 114, :_reduce_19,
  3, 114, :_reduce_20,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  4, 116, :_reduce_24,
  0, 120, :_reduce_25,
  1, 120, :_reduce_26,
  3, 120, :_reduce_27,
  0, 119, :_reduce_28,
  3, 119, :_reduce_29,
  6, 110, :_reduce_30,
  0, 122, :_reduce_31,
  1, 122, :_reduce_32,
  3, 122, :_reduce_33,
  2, 123, :_reduce_34,
  3, 124, :_reduce_35,
  1, 124, :_reduce_36,
  4, 117, :_reduce_37,
  1, 126, :_reduce_none,
  1, 126, :_reduce_39,
  2, 127, :_reduce_40,
  3, 127, :_reduce_41,
  7, 127, :_reduce_42,
  0, 128, :_reduce_43,
  1, 128, :_reduce_44,
  1, 107, :_reduce_45,
  1, 107, :_reduce_46,
  6, 129, :_reduce_47,
  8, 130, :_reduce_48,
  2, 121, :_reduce_49,
  2, 121, :_reduce_50,
  1, 121, :_reduce_51,
  0, 131, :_reduce_52,
  2, 131, :_reduce_53,
  2, 134, :_reduce_54,
  0, 135, :_reduce_55,
  1, 135, :_reduce_56,
  3, 135, :_reduce_57,
  1, 136, :_reduce_58,
  2, 136, :_reduce_59,
  2, 136, :_reduce_60,
  1, 136, :_reduce_61,
  6, 136, :_reduce_62,
  3, 136, :_reduce_63,
  5, 136, :_reduce_64,
  5, 136, :_reduce_65,
  1, 136, :_reduce_66,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_70,
  3, 145, :_reduce_71,
  3, 144, :_reduce_72,
  5, 143, :_reduce_73,
  5, 143, :_reduce_74,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 142, :_reduce_81,
  1, 142, :_reduce_82,
  5, 142, :_reduce_83,
  2, 150, :_reduce_84,
  2, 137, :_reduce_85,
  3, 151, :_reduce_86,
  3, 151, :_reduce_87,
  1, 151, :_reduce_88,
  1, 151, :_reduce_89,
  6, 125, :_reduce_90,
  3, 125, :_reduce_91,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 152, :_reduce_94,
  0, 118, :_reduce_95,
  2, 118, :_reduce_96,
  0, 155, :_reduce_97,
  1, 155, :_reduce_98,
  3, 155, :_reduce_99,
  3, 140, :_reduce_100,
  3, 140, :_reduce_101,
  3, 140, :_reduce_102,
  1, 157, :_reduce_103,
  1, 157, :_reduce_104,
  1, 157, :_reduce_105,
  1, 157, :_reduce_106,
  1, 157, :_reduce_107,
  1, 157, :_reduce_108,
  1, 157, :_reduce_109,
  1, 157, :_reduce_110,
  1, 157, :_reduce_111,
  4, 157, :_reduce_112,
  5, 157, :_reduce_113,
  0, 159, :_reduce_114,
  1, 159, :_reduce_115,
  4, 159, :_reduce_116,
  3, 160, :_reduce_117,
  2, 161, :_reduce_none,
  2, 132, :_reduce_119,
  2, 132, :_reduce_120,
  1, 132, :_reduce_121,
  0, 133, :_reduce_122,
  4, 133, :_reduce_123,
  1, 162, :_reduce_124,
  3, 162, :_reduce_125,
  2, 163, :_reduce_126,
  1, 163, :_reduce_127,
  1, 138, :_reduce_128,
  2, 138, :_reduce_129,
  3, 138, :_reduce_130,
  3, 138, :_reduce_131,
  4, 165, :_reduce_132,
  1, 164, :_reduce_133,
  1, 164, :_reduce_134,
  2, 164, :_reduce_135,
  3, 164, :_reduce_136,
  3, 147, :_reduce_137,
  3, 147, :_reduce_138,
  3, 147, :_reduce_139,
  3, 147, :_reduce_140,
  3, 147, :_reduce_141,
  3, 147, :_reduce_142,
  3, 147, :_reduce_143,
  3, 147, :_reduce_144,
  3, 147, :_reduce_145,
  3, 147, :_reduce_146,
  3, 147, :_reduce_147,
  2, 147, :_reduce_148,
  2, 147, :_reduce_149,
  2, 147, :_reduce_150,
  3, 147, :_reduce_151,
  1, 147, :_reduce_152,
  3, 166, :_reduce_153,
  3, 166, :_reduce_154,
  3, 166, :_reduce_155,
  3, 166, :_reduce_156,
  3, 166, :_reduce_157,
  3, 166, :_reduce_158,
  3, 166, :_reduce_159,
  1, 146, :_reduce_160,
  1, 146, :_reduce_161,
  2, 146, :_reduce_162,
  1, 146, :_reduce_none,
  5, 146, :_reduce_164,
  2, 168, :_reduce_165,
  3, 156, :_reduce_166,
  3, 156, :_reduce_167,
  0, 167, :_reduce_168,
  3, 167, :_reduce_169,
  0, 139, :_reduce_170,
  1, 139, :_reduce_171,
  3, 139, :_reduce_172,
  4, 154, :_reduce_173,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 113, :_reduce_197,
  0, 101, :_reduce_198,
  1, 101, :_reduce_199,
  1, 103, :_reduce_200,
  2, 103, :_reduce_201,
  1, 169, :_reduce_202,
  1, 169, :_reduce_none,
  0, 158, :_reduce_204,
  1, 158, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_none,
  1, 112, :_reduce_208 ]

racc_reduce_n = 209

racc_shift_n = 367

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kDTYPE_UINT => 28,
  :kDTYPE_LINT => 29,
  :kDTYPE_LLINT => 30,
  :kDTYPE_CHAR => 31,
  :kDTYPE_I8 => 32,
  :kDTYPE_I16 => 33,
  :kDTYPE_I32 => 34,
  :kDTYPE_I64 => 35,
  :kDTYPE_UI8 => 36,
  :kDTYPE_UI16 => 37,
  :kDTYPE_UI32 => 38,
  :kDTYPE_UI64 => 39,
  :kDTYPE_INT => 40,
  :kDTYPE_F32 => 41,
  :kDTYPE_F64 => 42,
  :kDTYPE_LF64 => 43,
  :kDTYPE_ROBJ => 44,
  :kDTYPE_ULINT => 45,
  :kDTYPE_ULLINT => 46,
  :kDTYPE_VOID => 47,
  :kDTYPE_SIZE_T => 48,
  :kDTYPE_RB_STR => 49,
  :kDTYPE_UCHAR => 50,
  :tCUSTOM_DTYPE => 51,
  :tLPAREN => 52,
  :tRPAREN => 53,
  :tLSQUARE => 54,
  :tRSQUARE => 55,
  :tIDENTIFIER => 56,
  :tNL => 57,
  :tCOMMA => 58,
  :tSQUOTE => 59,
  :tSCOLON => 60,
  :EOF => 61,
  :tDOT => 62,
  :tQMARK => 63,
  :tSYMBOL => 64,
  :tLBRACE => 65,
  :tRBRACE => 66,
  :tPLUS => 67,
  :tMINUS => 68,
  :tSTAR => 69,
  :tDIVIDE => 70,
  :tEXPO => 71,
  :tMODULUS => 72,
  :tASSIGN => 73,
  :tEQ => 74,
  :tLT => 75,
  :tLTEQ => 76,
  :tGT => 77,
  :tGTEQ => 78,
  :tANDOP => 79,
  :tOROP => 80,
  :tBANG => 81,
  :tOP_ASSIGN => 82,
  :tSTRING => 83,
  :kSIZEOF => 84,
  :tBIT_AND => 85,
  :tBIT_OR => 86,
  :tBIT_XOR => 87,
  :tBIT_LSHIFT => 88,
  :tBIT_RSHIFT => 89,
  :tBIT_NOT => 90,
  :tINTEGER => 91,
  :tFLOAT => 92,
  :tSINGLE_CHAR => 93,
  :ADDRESS_OF => 94,
  :TYPECAST => 95,
  :UMINUS => 96,
  :tNEQ => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "command_arg_list",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Statement::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Statement::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Statement::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_60(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_61(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_62(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_63(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_64(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_65(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
    
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_70(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_71(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_72(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_73(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_74(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_81(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_82(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_83(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_84(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_85(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_86(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_87(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_88(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 355)
  def _reduce_89(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_90(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_91(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_94(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 404)
  def _reduce_95(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 405)
  def _reduce_96(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 408)
  def _reduce_97(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 409)
  def _reduce_98(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 410)
  def _reduce_99(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_100(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_101(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 423)
  def _reduce_102(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 430)
  def _reduce_103(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_104(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 432)
  def _reduce_105(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 433)
  def _reduce_106(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_107(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 435)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 436)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 437)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 438)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 440)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_114(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_116(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 450)
  def _reduce_117(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_119(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_120(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_121(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_122(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 462)
  def _reduce_123(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_124(val, _values, result)
            result = [Statement::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 471)
  def _reduce_125(val, _values, result)
            result = [*val[0], Statement::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 477)
  def _reduce_126(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 488)
  def _reduce_127(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 499)
  def _reduce_128(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 502)
  def _reduce_129(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 505)
  def _reduce_130(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 506)
  def _reduce_131(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 509)
  def _reduce_132(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 512)
  def _reduce_133(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_134(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_135(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 515)
  def _reduce_136(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 518)
  def _reduce_137(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 519)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 521)
  def _reduce_140(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 522)
  def _reduce_141(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_142(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_143(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 525)
  def _reduce_144(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 526)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 528)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 529)
  def _reduce_148(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_149(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_150(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_156(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_157(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_158(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_161(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_162(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_164(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 566)
  def _reduce_165(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 572)
  def _reduce_166(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 576)
  def _reduce_167(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 580)
  def _reduce_168(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 581)
  def _reduce_169(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_170(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 585)
  def _reduce_171(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 586)
  def _reduce_172(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 591)
  def _reduce_173(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'parser.racc', 601)
  def _reduce_197(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 605)
  def _reduce_198(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 606)
  def _reduce_199(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_200(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 610)
  def _reduce_201(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 613)
  def _reduce_202(val, _values, result)
    
    result
  end
.,.,

# reduce 203 omitted

module_eval(<<'.,.,', 'parser.racc', 617)
  def _reduce_204(val, _values, result)
    
    result
  end
.,.,

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'parser.racc', 625)
  def _reduce_208(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
