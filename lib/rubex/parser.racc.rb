#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 662)

attr_reader :lineno, :location, :string

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def set_location
  @location = @lexer.location
end

def set_string
  @string = @lexer.ss.string
end

def set_lineno
  @lineno = @lexer.lineno
end

def next_token
  set_location
  set_string
  set_lineno

  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) &&
        !(@prev_token[0] == :kSTRUCT || @prev_token[0] == :tDOT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "cfunc"
    return [:kCFUNC, match]
  elsif match == "self"
    return [:kSELF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  elsif match == "sizeof"
    return [:kSIZEOF, match]
  elsif match == "raise"
    return [:kRAISE, match]
  elsif match == "break"
    return [:kBREAK, match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  elsif match == "void"
    return[:kDTYPE_VOID, match]
  elsif match == "size_t"
    return [:kDTYPE_SIZE_T, match]
  elsif match == "str"
    return [:kDTYPE_RB_STR, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def variable_decl_nodes val
  variables = val[0]
  type = variables[:dtype]

  result = variables[:variables].map do |var|
    ident = var[:ident]
    ptr_level = var[:ptr_level]

    statement =
    if ident.is_a?(Hash) # only if function pointer
      dtype = { dtype: type, ident: ident }
      Statement::CPtrDecl.new(dtype, ident[:name], var[:value], ptr_level,
        location)
    else
      if ptr_level
        Statement::CPtrDecl.new(type, var[:ident], var[:value], ptr_level,
          location)
      elsif ident.is_a?(Expression::ElementRef)
        Statement::CArrayDecl.new(type, var[:ident], var[:value], location)
      else
        Statement::VarDecl.new(type, var[:ident], var[:value], location)
      end
    end

    statement
  end

  result
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'102,103,105,255,266,255,60,106,107,188,67,125,126,127,13,83,92,67,183',
'184,346,129,115,347,113,114,31,32,33,34,35,36,37,38,39,40,41,42,43,44',
'45,46,47,48,49,50,51,52,53,54,138,66,130,64,118,64,61,370,272,194,158',
'195,128,131,231,157,139,22,306,232,23,183,184,134,83,183,184,183,184',
'137,192,124,144,140,16,102,103,105,141,121,122,123,106,107,183,184,125',
'126,127,13,13,92,18,12,11,17,129,115,25,113,114,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,138,195,130,194,118',
'22,22,188,23,23,79,26,128,131,369,22,139,316,23,27,340,328,315,134,197',
'29,327,187,80,137,83,124,144,140,16,102,103,105,141,121,122,123,106',
'107,183,184,125,126,127,13,13,92,55,328,11,17,129,115,327,113,114,31',
'32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54',
'138,16,130,339,118,82,22,79,327,23,162,162,128,131,164,164,139,13,83',
'62,12,11,17,134,194,80,195,83,83,137,64,124,144,140,16,102,103,105,141',
'121,122,123,106,107,68,245,125,126,127,13,13,92,183,184,11,17,129,115',
'83,113,114,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,138,16,130,64,118,164,22,382,22,23,72,23,128,131,183',
'184,139,13,83,64,83,11,17,134,22,22,78,23,23,137,81,124,144,140,16,102',
'103,105,141,121,122,123,106,107,183,184,125,126,127,13,13,92,183,184',
'11,17,129,115,61,113,114,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,138,149,130,64,118,159,205,206,207,208,209',
'210,128,131,183,184,139,205,206,207,208,209,210,134,211,212,213,214',
'215,137,161,124,144,140,166,102,103,105,141,121,122,123,106,107,183',
'184,125,126,127,13,22,92,22,23,169,23,129,115,176,113,114,31,32,33,34',
'35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,138,176',
'130,186,118,196,205,206,207,208,209,210,128,131,183,184,139,205,206',
'207,208,209,210,134,211,212,213,214,215,137,64,124,144,140,64,102,103',
'105,141,121,122,123,106,107,183,184,125,126,127,13,342,92,230,341,64',
'344,129,115,233,113,114,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45',
'46,47,48,49,50,51,52,53,54,138,235,130,64,118,241,205,206,207,208,209',
'210,128,131,358,359,139,207,208,209,210,262,263,134,211,212,213,214',
'215,137,246,124,144,140,149,102,103,105,141,121,122,123,106,107,264',
'265,125,126,127,13,195,92,207,208,209,210,129,115,188,113,114,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,138',
'194,130,257,118,125,126,127,183,184,183,184,128,131,270,129,139,205',
'206,207,208,209,210,134,183,184,358,359,275,137,276,124,144,140,64,308',
'212,213,141,121,122,123,16,351,138,209,130,64,173,125,126,127,235,149',
'169,331,128,131,13,129,139,332,11,17,333,183,209,134,209,209,209,188',
'350,137,353,124,144,140,354,360,363,276,141,121,122,123,365,64,138,368',
'130,149,173,125,126,127,373,188,83,22,128,131,23,129,139,205,206,207',
'208,209,210,134,384,149,,,,137,,124,144,140,,211,212,213,141,121,122',
'123,,,179,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,125,126',
'127,,124,144,140,,,,129,141,121,122,123,,,138,,130,,173,125,126,127',
',,,,128,131,,129,139,,,,,,,134,130,,173,,,137,,124,144,140,128,131,',
',141,121,122,123,,,138,,130,,173,125,126,127,,124,144,,128,131,,129',
'139,121,122,123,,,,,,,,,,137,,124,144,140,,,,,141,121,122,123,,,138',
',130,,173,125,126,127,,,,,128,131,,129,139,205,206,207,208,209,210,134',
',,,,,137,,124,144,140,,211,212,213,141,121,122,123,,,138,,130,,173,125',
'126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141',
'121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,',
',,,125,126,127,,124,144,140,,,,129,141,121,122,123,,,227,,130,,173,125',
'126,127,,,,,128,131,,129,139,,,,,,,,130,,173,125,126,127,,124,144,140',
'128,131,,129,141,121,122,123,,,227,,130,,173,125,126,127,,124,144,,128',
'131,,129,139,121,122,123,,,,,130,,173,125,126,127,,124,144,140,128,131',
',129,141,121,122,123,,,138,,130,,173,125,126,127,,124,144,,128,131,',
'129,139,121,122,123,,,,134,130,,173,,,137,,124,144,140,128,131,,,141',
'121,122,123,,,138,,130,,173,125,126,127,,124,144,,128,131,,129,139,121',
'122,123,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,227,,130',
',173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,',
'141,121,122,123,,,138,,130,,173,125,126,127,,,,,128,131,,129,139,,,',
',,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,138,,130,,173,125',
'126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141',
'121,122,123,,,138,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,134',
',,,,,137,,124,144,140,,,,,141,121,122,123,,,138,,130,,173,125,126,127',
',,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122',
'123,,,138,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,134,,,,,',
'137,,124,144,140,,,,,141,121,122,123,,,138,,130,,173,125,126,127,,,',
',128,131,,129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123',
',,138,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137',
',124,144,140,,,,,141,121,122,123,,,138,,130,,173,125,126,127,,,,,128',
'131,,129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,138',
',130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144',
'140,,,,,141,121,122,123,,,138,,130,,173,125,126,127,,,,,128,131,,129',
'139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,227,,130,',
'173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141',
'121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,',
',,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130,,173,125,126,127,',
',,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,,',
'227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144',
'140,,,,,141,121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129',
'139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130,,173,125',
'126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122',
'123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124',
'144,140,,,,,141,121,122,123,,,227,,130,,173,125,126,127,,,,,128,131',
',129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130,,173',
'125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121',
'122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,',
',,,124,144,140,,,,,141,121,122,123,,,227,,130,,173,125,126,127,,,,,128',
'131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130',
',173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,',
'141,121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,',
',,,,,,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130,,173,125,126,127',
',,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,',
',227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144',
'140,,,,,141,121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129',
'139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122,123,,,227,,130,,173,125',
'126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124,144,140,,,,,141,121,122',
'123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,,,,,,,,,124',
'144,140,,,,,141,121,122,123,,,138,,130,,173,125,126,127,,,,,128,131',
',129,139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,138,',
'130,,173,125,126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144',
'140,,,,,141,121,122,123,,,138,,130,,173,125,126,127,,,,,128,131,,129',
'139,,,,,,,134,,,,,,137,,124,144,140,,,,,141,121,122,123,,,138,,130,',
'173,125,126,127,,,,,128,131,,129,139,,,,,,,134,,,,,,137,,124,144,140',
',,,,141,121,122,123,,,227,,130,,173,125,126,127,,,,,128,131,,129,139',
',,,,,,,,,,,,,,124,144,140,,307,,,141,121,122,123,,,227,,130,,173,205',
'206,207,208,209,210,,128,131,,,139,,,243,,,,211,212,213,214,215,,,,124',
'144,140,13,,92,,141,121,122,123,,,,,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,307,,,,,22,,,23,,,,,,205,206',
'207,208,209,210,,216,218,219,220,221,,,,,,307,211,212,213,214,215,,',
',,,,,217,205,206,207,208,209,210,,,262,263,264,265,13,,92,,,,211,212',
'213,214,215,,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49',
'50,51,52,53,54,324,,,,,,,,,,,,31,32,33,34,35,36,37,38,39,40,41,42,43',
'44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,,,,,,22,,,23,205,206,207,208,209',
'210,,216,218,219,220,221,,,,,,,211,212,213,214,215,,,,,,,,217,31,32',
'33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,,-25',
',,,,-25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50',
'51,52,53,54,,,,,148,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46',
'47,48,49,50,51,52,53,54,,,,,148,31,32,33,34,35,36,37,38,39,40,41,42',
'43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40,41',
'42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39,40',
'41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38,39',
'40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37,38',
'39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,31,32,33,34,35,36,37',
'38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,205,206,207,208,209',
'210,,,262,263,264,265,205,206,207,208,209,210,211,212,213,214,215,205',
'206,207,208,209,210,,211,212,213,214,215,205,206,207,208,209,210,211',
'212,213,214,215,205,206,207,208,209,210,,211,212,213,214,215,205,206',
'207,208,209,210,211,212,213,214,215,,,,,,,,211,212,213,214,215' ]
        racc_action_table = arr = ::Array.new(3290, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'77,77,77,177,182,374,25,77,77,287,28,77,77,77,77,288,77,188,112,112',
'287,77,77,288,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,77,28,77,177,77,374,25,352,188,118,92,118,77',
'77,145,92,77,2,223,145,2,182,182,77,352,177,177,374,374,77,118,77,77',
'77,20,168,168,168,77,77,77,77,168,168,223,223,168,168,168,168,20,168',
'1,20,20,20,168,168,11,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,272,168',
'120,168,168,20,116,168,20,272,12,168,168,348,5,168,237,5,13,279,252',
'237,168,120,16,252,116,272,168,348,168,168,168,24,240,240,240,168,168',
'168,168,240,240,279,279,240,240,240,240,24,240,18,269,24,24,240,240',
'269,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,0,240,278,240,69,24,66,278',
'24,97,317,240,240,97,317,240,0,69,26,0,0,0,240,173,66,173,97,317,240',
'27,240,240,240,151,254,254,254,240,240,240,240,254,254,29,155,254,254',
'254,254,151,254,170,170,151,151,254,254,155,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,70,254,59,254,248,151,379,74,151,61,74,254,254,251,251',
'254,70,248,62,379,70,70,254,84,86,65,84,86,254,67,254,254,254,153,257',
'257,257,254,254,254,254,257,257,253,253,257,257,257,257,153,257,271',
'271,153,153,257,257,71,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,82,257,85',
'257,93,300,300,300,300,300,300,257,257,277,277,257,296,296,296,296,296',
'296,257,300,300,300,300,300,257,95,257,257,257,98,266,266,266,257,257',
'257,257,266,266,280,280,266,266,266,266,99,266,242,99,100,242,266,266',
'103,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,113,266,115,266,119,301',
'301,301,301,301,301,266,266,281,281,266,297,297,297,297,297,297,266',
'301,301,301,301,301,266,130,266,266,266,131,359,359,359,266,266,266',
'266,359,359,282,282,359,359,359,359,283,359,144,283,285,285,359,359',
'147,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,359,359,359,148,359,150,359,152,302',
'302,302,302,302,302,359,359,329,329,359,289,289,289,289,332,332,359',
'302,302,302,302,302,359,156,359,359,359,163,380,380,380,359,359,359',
'359,380,380,333,333,380,380,380,380,164,380,290,290,290,290,380,380',
'171,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,380',
'380,380,380,380,380,380,380,380,380,380,380,174,380,178,380,102,102',
'102,338,338,355,355,380,380,186,102,380,295,295,295,295,295,295,380',
'364,364,383,383,189,380,190,380,380,380,200,225,295,295,380,380,380',
'380,320,320,102,226,102,231,102,105,105,105,233,245,250,258,102,102',
'320,105,102,260,320,320,261,268,291,102,292,293,294,314,319,102,324',
'102,102,102,325,330,334,337,102,102,102,102,343,344,105,346,105,354',
'105,106,106,106,356,367,371,320,105,105,320,106,105,298,298,298,298',
'298,298,105,381,384,,,,105,,105,105,105,,298,298,298,105,105,105,105',
',,106,,106,,106,107,107,107,,,,,106,106,,107,106,,,,,,,,,,,202,202,202',
',106,106,106,,,,202,106,106,106,106,,,107,,107,,107,133,133,133,,,,',
'107,107,,133,107,,,,,,,107,202,,202,,,107,,107,107,107,202,202,,,107',
'107,107,107,,,133,,133,,133,137,137,137,,202,202,,133,133,,137,133,202',
'202,202,,,,,,,,,,133,,133,133,133,,,,,133,133,133,133,,,137,,137,,137',
'138,138,138,,,,,137,137,,138,137,299,299,299,299,299,299,137,,,,,,137',
',137,137,137,,299,299,299,137,137,137,137,,,138,,138,,138,139,139,139',
',,,,138,138,,139,138,,,,,,,138,,,,,,138,,138,138,138,,,,,138,138,138',
'138,,,139,,139,,139,140,140,140,,,,,139,139,,140,139,,,,,,,,,,,235,235',
'235,,139,139,139,,,,235,139,139,139,139,,,140,,140,,140,141,141,141',
',,,,140,140,,141,140,,,,,,,,235,,235,345,345,345,,140,140,140,235,235',
',345,140,140,140,140,,,141,,141,,141,169,169,169,,235,235,,141,141,',
'169,141,235,235,235,,,,,345,,345,366,366,366,,141,141,141,345,345,,366',
'141,141,141,141,,,169,,169,,169,175,175,175,,345,345,,169,169,,175,169',
'345,345,345,,,,169,366,,366,,,169,,169,169,169,366,366,,,169,169,169',
'169,,,175,,175,,175,179,179,179,,366,366,,175,175,,179,175,366,366,366',
',,,175,,,,,,175,,175,175,175,,,,,175,175,175,175,,,179,,179,,179,183',
'183,183,,,,,179,179,,183,179,,,,,,,,,,,,,,,179,179,179,,,,,179,179,179',
'179,,,183,,183,,183,184,184,184,,,,,183,183,,184,183,,,,,,,183,,,,,',
'183,,183,183,183,,,,,183,183,183,183,,,184,,184,,184,185,185,185,,,',
',184,184,,185,184,,,,,,,184,,,,,,184,,184,184,184,,,,,184,184,184,184',
',,185,,185,,185,187,187,187,,,,,185,185,,187,185,,,,,,,185,,,,,,185',
',185,185,185,,,,,185,185,185,185,,,187,,187,,187,192,192,192,,,,,187',
'187,,192,187,,,,,,,187,,,,,,187,,187,187,187,,,,,187,187,187,187,,,192',
',192,,192,194,194,194,,,,,192,192,,194,192,,,,,,,192,,,,,,192,,192,192',
'192,,,,,192,192,192,192,,,194,,194,,194,195,195,195,,,,,194,194,,195',
'194,,,,,,,194,,,,,,194,,194,194,194,,,,,194,194,194,194,,,195,,195,',
'195,196,196,196,,,,,195,195,,196,195,,,,,,,195,,,,,,195,,195,195,195',
',,,,195,195,195,195,,,196,,196,,196,197,197,197,,,,,196,196,,197,196',
',,,,,,196,,,,,,196,,196,196,196,,,,,196,196,196,196,,,197,,197,,197',
'199,199,199,,,,,197,197,,199,197,,,,,,,197,,,,,,197,,197,197,197,,,',
',197,197,197,197,,,199,,199,,199,205,205,205,,,,,199,199,,205,199,,',
',,,,199,,,,,,199,,199,199,199,,,,,199,199,199,199,,,205,,205,,205,206',
'206,206,,,,,205,205,,206,205,,,,,,,,,,,,,,,205,205,205,,,,,205,205,205',
'205,,,206,,206,,206,207,207,207,,,,,206,206,,207,206,,,,,,,,,,,,,,,206',
'206,206,,,,,206,206,206,206,,,207,,207,,207,208,208,208,,,,,207,207',
',208,207,,,,,,,,,,,,,,,207,207,207,,,,,207,207,207,207,,,208,,208,,208',
'209,209,209,,,,,208,208,,209,208,,,,,,,,,,,,,,,208,208,208,,,,,208,208',
'208,208,,,209,,209,,209,210,210,210,,,,,209,209,,210,209,,,,,,,,,,,',
',,,209,209,209,,,,,209,209,209,209,,,210,,210,,210,211,211,211,,,,,210',
'210,,211,210,,,,,,,,,,,,,,,210,210,210,,,,,210,210,210,210,,,211,,211',
',211,212,212,212,,,,,211,211,,212,211,,,,,,,,,,,,,,,211,211,211,,,,',
'211,211,211,211,,,212,,212,,212,213,213,213,,,,,212,212,,213,212,,,',
',,,,,,,,,,,212,212,212,,,,,212,212,212,212,,,213,,213,,213,214,214,214',
',,,,213,213,,214,213,,,,,,,,,,,,,,,213,213,213,,,,,213,213,213,213,',
',214,,214,,214,215,215,215,,,,,214,214,,215,214,,,,,,,,,,,,,,,214,214',
'214,,,,,214,214,214,214,,,215,,215,,215,216,216,216,,,,,215,215,,216',
'215,,,,,,,,,,,,,,,215,215,215,,,,,215,215,215,215,,,216,,216,,216,217',
'217,217,,,,,216,216,,217,216,,,,,,,,,,,,,,,216,216,216,,,,,216,216,216',
'216,,,217,,217,,217,218,218,218,,,,,217,217,,218,217,,,,,,,,,,,,,,,217',
'217,217,,,,,217,217,217,217,,,218,,218,,218,219,219,219,,,,,218,218',
',219,218,,,,,,,,,,,,,,,218,218,218,,,,,218,218,218,218,,,219,,219,,219',
'220,220,220,,,,,219,219,,220,219,,,,,,,,,,,,,,,219,219,219,,,,,219,219',
'219,219,,,220,,220,,220,221,221,221,,,,,220,220,,221,220,,,,,,,,,,,',
',,,220,220,220,,,,,220,220,220,220,,,221,,221,,221,227,227,227,,,,,221',
'221,,227,221,,,,,,,,,,,,,,,221,221,221,,,,,221,221,221,221,,,227,,227',
',227,276,276,276,,,,,227,227,,276,227,,,,,,,,,,,,,,,227,227,227,,,,',
'227,227,227,227,,,276,,276,,276,327,327,327,,,,,276,276,,327,276,,,',
',,,276,,,,,,276,,276,276,276,,,,,276,276,276,276,,,327,,327,,327,341',
'341,341,,,,,327,327,,341,327,,,,,,,327,,,,,,327,,327,327,327,,,,,327',
'327,327,327,,,341,,341,,341,358,358,358,,,,,341,341,,358,341,,,,,,,341',
',,,,,341,,341,341,341,,,,,341,341,341,341,,,358,,358,,358,361,361,361',
',,,,358,358,,361,358,,,,,,,358,,,,,,358,,358,358,358,,,,,358,358,358',
'358,,,361,,361,,361,362,362,362,,,,,361,361,,362,361,,,,,,,,,,,,,,,361',
'361,361,,309,,,361,361,361,361,,,362,,362,,362,309,309,309,309,309,309',
',362,362,,,362,,,154,,,,309,309,309,309,309,,,,362,362,362,154,,154',
',362,362,362,362,,,,,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,224,,,,,154,,,154,,',
',,,224,224,224,224,224,224,,224,224,224,224,224,,,,,,259,224,224,224',
'224,224,,,,,,,,224,259,259,259,259,259,259,,,259,259,259,259,73,,73',
',,,259,259,259,259,259,,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,73,73,73,73,73,73,73,246,,,,,,,,,,,,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94',
'94,,,,,,94,,,94,135,135,135,135,135,135,,135,135,135,135,135,,,,,,,135',
'135,135,135,135,,,,,,,,135,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,,149,,,,,149,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
',,,,78,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,232,232,232,,,,,232,17,17,17,17,17,17,17,17,17,17',
'17,17,17,17,17,17,17,17,17,17,17,17,17,17,60,60,60,60,60,60,60,60,60',
'60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,63,63,63,63,63,63,63,63',
'63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,315,315,315,315,315,315,315,315',
'315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,181',
'181,181,181,181,181,,,181,181,181,181,303,303,303,303,303,303,181,181',
'181,181,181,304,304,304,304,304,304,,303,303,303,303,303,305,305,305',
'305,305,305,304,304,304,304,304,376,376,376,376,376,376,,305,305,305',
'305,305,377,377,377,377,377,377,376,376,376,376,376,,,,,,,,377,377,377',
'377,377' ]
        racc_action_check = arr = ::Array.new(3290, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   219,   102,     8,   nil,   nil,    91,   nil,   nil,   nil,   nil,
   nil,    50,    61,    96,   nil,   nil,   136,  3035,   187,   nil,
    82,   nil,   nil,   nil,   167,   -21,   225,   191,    -7,   200,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   249,
  3059,   257,   265,  3083,   nil,   277,   162,   270,   nil,   167,
   304,   286,   nil,  2822,   254,   nil,   nil,    -4,  2977,   nil,
   nil,   nil,   337,   nil,   270,   334,   271,   nil,   nil,   nil,
   nil,   nil,     7,   392,  2882,   360,   nil,   176,   421,   381,
   438,   nil,   635,   394,   nil,   679,   723,   767,   nil,   nil,
   nil,   nil,   -63,   422,   nil,   460,    78,   nil,     5,   405,
    84,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   446,   450,   nil,   811,  3107,  2876,   nil,   855,   899,   943,
   987,  1031,   nil,   nil,   473,     9,   nil,   475,   486,  2946,
   504,   252,   562,   337,  2729,   207,   515,   nil,   nil,   nil,
   nil,   nil,   nil,   540,   554,   nil,   nil,   nil,    81,  1075,
   191,   554,   nil,   190,   592,  1119,   nil,    -6,   634,  1163,
   nil,  3140,   -10,  1207,  1251,  1295,   601,  1339,     0,   613,
   600,   nil,  1383,   nil,  1427,  1471,  1515,  1559,   nil,  1603,
   620,   nil,   789,   nil,   nil,  1647,  1691,  1735,  1779,  1823,
  1867,  1911,  1955,  1999,  2043,  2087,  2131,  2175,  2219,  2263,
  2307,  2351,   nil,    13,  2728,   625,   617,  2395,   nil,   nil,
  3131,   633,  3006,   622,   nil,  1009,   nil,    97,   nil,   nil,
   166,   nil,   383,   nil,   nil,   644,  2858,   nil,   252,   nil,
   693,   238,   101,   268,   251,   nil,   nil,   336,   645,  2759,
   648,   651,   nil,   nil,   nil,   nil,   421,   nil,   629,   133,
   nil,   276,    80,   nil,   nil,   nil,  2439,   323,   168,    98,
   353,   408,   438,   468,   nil,   470,   nil,   -55,   -56,   506,
   541,   638,   640,   641,   642,   593,   338,   423,   681,   857,
   327,   412,   497,  3152,  3163,  3175,   nil,   nil,   nil,  2649,
   nil,   nil,   nil,   nil,   652,  3155,   nil,   177,   nil,   714,
   685,   nil,   nil,   nil,   661,   668,   nil,  2483,   nil,   567,
   721,   nil,   504,   525,   722,   nil,   nil,   651,   572,   nil,
   nil,  2527,   nil,   663,   673,  1053,   655,   nil,    94,   nil,
   nil,   nil,     3,   nil,   682,   574,   738,   nil,  2571,   506,
   nil,  2615,  2659,   nil,   588,   nil,  1097,   678,   nil,   nil,
   nil,   672,   nil,   nil,    -4,   nil,  3186,  3198,   nil,   254,
   591,   702,   nil,   664,   704,   nil,   nil ]

racc_action_default = [
    -6,  -221,  -210,    -2,    -4,  -221,    -7,    -9,   -10,   -11,
   -12,  -221,  -221,  -221,   -45,   -46,   -52,  -221,  -221,    -1,
  -211,  -212,  -214,  -215,    -5,   -15,   -18,  -221,  -221,  -221,
  -100,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,
  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,
  -201,  -202,  -203,  -204,  -205,   387,    -3,  -213,    -8,  -221,
  -221,  -221,  -221,   -31,  -220,  -128,  -126,  -221,   -53,  -221,
    -6,   -15,   -16,  -221,  -210,   -32,  -100,   -55,  -221,  -124,
  -125,  -127,   -28,  -101,  -210,  -221,  -221,   -19,   -21,   -22,
   -23,  -100,  -221,  -221,  -211,   -34,   -36,  -221,  -221,  -210,
   -56,   -58,   -60,  -206,   -62,  -221,  -221,  -221,   -67,   -68,
   -69,   -70,   -71,  -206,   -73,  -221,  -160,  -100,  -176,  -168,
  -176,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -216,  -216,  -136,  -221,  -221,  -141,  -142,  -221,  -221,  -221,
  -221,  -221,  -169,  -171,  -221,  -221,  -130,  -221,  -134,  -100,
  -221,  -211,  -221,    -6,  -221,  -221,  -221,   -38,   -39,   -30,
   -33,  -100,  -100,   -28,   -97,   -98,   -47,   -54,  -211,  -221,
   -59,  -160,  -168,  -176,  -176,  -178,  -207,  -221,  -221,  -221,
   -77,  -221,  -221,  -221,  -221,  -178,  -221,  -221,  -221,   -90,
   -93,   -94,  -221,  -170,  -178,  -221,  -221,  -221,  -173,  -102,
  -217,  -218,  -119,  -137,  -100,  -221,  -221,  -221,  -221,  -221,
  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,  -221,
  -221,  -221,  -143,  -221,  -141,  -142,  -156,  -221,  -157,  -158,
  -221,  -221,  -221,  -134,  -133,  -221,   -26,  -221,  -100,   -51,
   -55,   -13,  -221,   -17,   -20,   -28,  -221,   -35,  -221,   -96,
   -57,   -64,  -208,  -179,   -55,   -84,   -85,   -55,  -221,  -221,
  -221,  -221,   -80,   -81,   -82,   -83,   -55,  -138,  -139,  -208,
   -74,   -75,  -126,  -174,  -175,  -100,  -221,  -105,  -221,  -221,
  -106,  -107,  -103,  -221,  -219,  -216,  -120,  -221,  -221,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -161,  -162,  -163,  -164,  -165,  -166,  -144,  -159,  -167,  -221,
  -100,  -129,  -131,  -132,  -135,  -100,   -29,   -49,   -50,  -221,
  -221,   -24,   -37,  -100,  -221,  -221,   -61,  -221,  -209,   -86,
  -221,   -76,  -221,  -221,  -221,   -72,   -91,   -92,   -99,  -177,
  -181,  -221,  -117,  -221,  -216,  -221,  -221,  -140,  -221,   -27,
   -48,   -14,   -40,  -100,   -28,  -180,  -221,   -87,  -221,   -55,
   -65,  -221,  -221,   -66,  -104,  -118,  -221,  -122,  -123,  -172,
  -100,   -41,   -95,   -63,  -221,   -89,   -78,   -79,  -121,   -43,
   -55,  -221,   -44,   -86,   -28,   -88,   -42 ]

racc_goto_table = [
    63,    69,    10,    98,   116,   119,   254,   150,    58,   120,
    57,   236,   180,   191,    57,    20,   234,    30,    24,    84,
   146,    19,    10,   286,    87,   165,    10,    90,    96,   356,
    59,    65,    70,   199,   202,    73,   198,    75,   252,     3,
   175,     1,     2,    86,   326,   237,    74,    95,   269,   156,
   185,   322,   381,    28,    77,   250,   178,   278,   153,    56,
    71,   335,   155,    76,   361,   362,   189,   325,   160,   190,
   283,   285,    10,    91,   345,    89,    85,   145,   147,   203,
   225,   nil,   nil,   385,    57,   258,   nil,    94,   249,   nil,
   198,   nil,   nil,    93,    76,   116,   119,   151,   nil,   154,
   120,   313,   242,   152,   nil,   244,   nil,   nil,    90,   nil,
   nil,   nil,   168,   247,   nil,   nil,   274,   nil,   167,   nil,
   nil,   nil,   nil,   240,   nil,   nil,   nil,   nil,   nil,   287,
   nil,   nil,   nil,   248,   204,    58,   nil,   nil,   nil,   nil,
   nil,    57,   nil,   170,    57,   nil,   177,   nil,   182,   238,
   256,   nil,   nil,    10,    91,    10,    89,   nil,    57,   nil,
   nil,   nil,   314,   nil,   nil,   nil,   319,   116,   119,   nil,
   321,   336,   120,   284,   312,   288,   165,   349,   222,   223,
   329,   116,   119,   330,   116,   119,   120,   378,   343,   120,
   318,   273,   334,   116,   119,   nil,   nil,   nil,   120,   nil,
   nil,   nil,   nil,   380,   311,   nil,   nil,   nil,   nil,   317,
   251,   nil,   nil,   nil,   nil,   nil,   253,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   267,   268,   253,   337,   271,   nil,
   310,   nil,   147,   277,   nil,   253,   279,   280,   281,   nil,
   282,   nil,   nil,   nil,   nil,   165,   323,   366,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   320,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   367,   nil,   nil,   nil,   nil,   nil,   nil,   372,
   nil,   348,   nil,   nil,   nil,   375,   116,   119,   nil,   nil,
   nil,   120,   nil,   287,   352,   nil,   nil,   nil,   nil,   nil,
   nil,   181,   nil,   nil,    58,   nil,   383,   116,   119,   386,
    57,   nil,   120,   nil,   nil,   238,   nil,   338,   nil,   nil,
   nil,   nil,    10,   nil,   371,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   224,   226,   228,   229,   nil,   nil,   nil,
   nil,   379,   nil,   nil,   nil,   nil,   nil,   256,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,   nil,
   nil,   nil,   nil,   nil,   259,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   364,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   374,
   289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   304,   305,   nil,   nil,   nil,
   nil,   nil,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   376,   377 ]

racc_goto_check = [
    14,    20,    12,    36,    50,    59,    45,    21,     8,    61,
    75,    23,    51,    57,    75,     5,    69,    15,     5,     7,
    68,     3,    12,    65,    17,    59,    12,    19,    27,    46,
    13,    34,    14,    63,    63,    14,    73,    25,    42,     4,
    41,     1,     2,    16,    43,    22,    24,    26,    42,    28,
    41,    29,    30,    33,    35,    38,    47,    42,    14,     4,
    15,    43,    20,    15,    53,    54,    56,    58,    25,    27,
    60,    64,    12,    15,    66,    12,    13,    67,    15,    70,
    72,   nil,   nil,    46,    75,    51,   nil,     5,    21,   nil,
    73,   nil,   nil,     3,    15,    50,    59,     5,   nil,     5,
    61,    69,     7,     3,   nil,    17,   nil,   nil,    19,   nil,
   nil,   nil,     5,    27,   nil,   nil,    59,   nil,     3,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,    50,
   nil,   nil,   nil,    20,    15,     8,   nil,   nil,   nil,   nil,
   nil,    75,   nil,    40,    75,   nil,    40,   nil,    40,    15,
    14,   nil,   nil,    12,    15,    12,    12,   nil,    75,   nil,
   nil,   nil,    50,   nil,   nil,   nil,    36,    50,    59,   nil,
    21,    57,    61,    14,    68,    20,    59,    23,    40,    40,
    36,    50,    59,    36,    50,    59,    61,    65,    63,    61,
    27,    34,    36,    50,    59,   nil,   nil,   nil,    61,   nil,
   nil,   nil,   nil,    45,    14,   nil,   nil,   nil,   nil,    20,
    40,   nil,   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    40,    40,    40,    27,    40,   nil,
    15,   nil,    15,    40,   nil,    40,    40,    40,    40,   nil,
    40,   nil,   nil,   nil,   nil,    59,    15,    63,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,    20,   nil,   nil,   nil,    36,    50,    59,   nil,   nil,
   nil,    61,   nil,    50,    20,   nil,   nil,   nil,   nil,   nil,
   nil,    52,   nil,   nil,     8,   nil,    36,    50,    59,    21,
    75,   nil,    61,   nil,   nil,    15,   nil,    40,   nil,   nil,
   nil,   nil,    12,   nil,    20,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    52,    52,    52,    52,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,   nil,   nil,   nil,
   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    52,    52 ]

racc_goto_pointer = [
   nil,    41,    42,    19,    39,    13,   nil,   -51,   -16,   nil,
   nil,   nil,     2,     5,   -27,     0,   -30,   -49,   nil,   -46,
   -29,   -75,  -104,  -138,   -17,   -26,   -29,   -48,   -43,  -195,
  -327,   nil,   nil,    37,     3,   -11,   -74,   nil,  -113,   nil,
    41,   -63,  -137,  -208,   nil,  -171,  -300,   -50,   nil,   nil,
   -73,   -94,   195,  -268,  -268,   nil,   -51,  -104,  -181,   -72,
  -129,   -68,   nil,   -97,  -131,  -179,  -213,    -1,   -58,  -132,
   -54,   nil,   -58,   -84,   nil,   -10,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     4,     5,     6,     7,
     8,     9,   109,   nil,   201,   117,   nil,   nil,    88,   111,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   239,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,    99,   100,   101,
   112,   nil,   nil,   nil,   104,   nil,   nil,   nil,   108,   110,
   171,   nil,   135,   260,   261,   357,   nil,   nil,   163,   172,
   nil,   174,   142,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   132,   133,   136,   193,   143,    21,   200 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 101, :_reduce_1,
  1, 102, :_reduce_2,
  3, 102, :_reduce_3,
  1, 104, :_reduce_4,
  2, 104, :_reduce_5,
  0, 107, :_reduce_6,
  1, 107, :_reduce_7,
  3, 107, :_reduce_8,
  1, 108, :_reduce_9,
  1, 108, :_reduce_10,
  1, 108, :_reduce_11,
  1, 108, :_reduce_12,
  7, 110, :_reduce_13,
  9, 111, :_reduce_14,
  0, 113, :_reduce_15,
  2, 113, :_reduce_16,
  7, 106, :_reduce_17,
  2, 106, :_reduce_18,
  1, 116, :_reduce_19,
  3, 116, :_reduce_20,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  4, 118, :_reduce_24,
  0, 122, :_reduce_25,
  1, 122, :_reduce_26,
  3, 122, :_reduce_27,
  0, 121, :_reduce_28,
  3, 121, :_reduce_29,
  6, 112, :_reduce_30,
  0, 124, :_reduce_31,
  1, 124, :_reduce_32,
  3, 124, :_reduce_33,
  2, 125, :_reduce_34,
  3, 126, :_reduce_35,
  1, 126, :_reduce_36,
  4, 119, :_reduce_37,
  1, 128, :_reduce_none,
  1, 128, :_reduce_39,
  2, 129, :_reduce_40,
  3, 129, :_reduce_41,
  7, 129, :_reduce_42,
  0, 130, :_reduce_43,
  1, 130, :_reduce_44,
  1, 109, :_reduce_45,
  1, 109, :_reduce_46,
  6, 131, :_reduce_47,
  8, 132, :_reduce_48,
  2, 123, :_reduce_49,
  2, 123, :_reduce_50,
  1, 123, :_reduce_51,
  0, 133, :_reduce_52,
  2, 133, :_reduce_53,
  2, 136, :_reduce_54,
  0, 137, :_reduce_55,
  1, 137, :_reduce_56,
  3, 137, :_reduce_57,
  1, 138, :_reduce_58,
  2, 138, :_reduce_59,
  1, 138, :_reduce_none,
  4, 138, :_reduce_61,
  1, 138, :_reduce_62,
  6, 138, :_reduce_63,
  3, 138, :_reduce_64,
  5, 138, :_reduce_65,
  5, 138, :_reduce_66,
  1, 138, :_reduce_67,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_71,
  4, 138, :_reduce_72,
  1, 138, :_reduce_73,
  3, 149, :_reduce_74,
  3, 148, :_reduce_75,
  3, 147, :_reduce_76,
  1, 147, :_reduce_none,
  5, 151, :_reduce_78,
  5, 151, :_reduce_79,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 146, :_reduce_86,
  1, 146, :_reduce_87,
  5, 146, :_reduce_88,
  2, 155, :_reduce_89,
  2, 139, :_reduce_90,
  3, 156, :_reduce_91,
  3, 156, :_reduce_92,
  1, 156, :_reduce_93,
  1, 156, :_reduce_94,
  6, 127, :_reduce_95,
  3, 127, :_reduce_96,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 157, :_reduce_99,
  0, 120, :_reduce_100,
  2, 120, :_reduce_101,
  0, 160, :_reduce_102,
  1, 160, :_reduce_103,
  3, 160, :_reduce_104,
  3, 144, :_reduce_105,
  3, 144, :_reduce_106,
  3, 144, :_reduce_107,
  1, 162, :_reduce_108,
  1, 162, :_reduce_109,
  1, 162, :_reduce_110,
  1, 162, :_reduce_111,
  1, 162, :_reduce_112,
  1, 162, :_reduce_113,
  1, 162, :_reduce_114,
  1, 162, :_reduce_115,
  1, 162, :_reduce_116,
  4, 162, :_reduce_117,
  5, 162, :_reduce_118,
  0, 164, :_reduce_119,
  1, 164, :_reduce_120,
  4, 164, :_reduce_121,
  3, 165, :_reduce_122,
  2, 166, :_reduce_none,
  2, 134, :_reduce_124,
  2, 134, :_reduce_125,
  1, 134, :_reduce_126,
  2, 134, :_reduce_127,
  0, 135, :_reduce_128,
  4, 135, :_reduce_129,
  1, 167, :_reduce_130,
  3, 167, :_reduce_131,
  3, 168, :_reduce_132,
  2, 168, :_reduce_133,
  0, 169, :_reduce_134,
  2, 169, :_reduce_135,
  1, 140, :_reduce_136,
  2, 140, :_reduce_137,
  3, 140, :_reduce_138,
  3, 140, :_reduce_139,
  4, 171, :_reduce_140,
  1, 170, :_reduce_141,
  1, 170, :_reduce_142,
  2, 170, :_reduce_143,
  3, 170, :_reduce_144,
  3, 152, :_reduce_145,
  3, 152, :_reduce_146,
  3, 152, :_reduce_147,
  3, 152, :_reduce_148,
  3, 152, :_reduce_149,
  3, 152, :_reduce_150,
  3, 152, :_reduce_151,
  3, 152, :_reduce_152,
  3, 152, :_reduce_153,
  3, 152, :_reduce_154,
  3, 152, :_reduce_155,
  2, 152, :_reduce_156,
  2, 152, :_reduce_157,
  2, 152, :_reduce_158,
  3, 152, :_reduce_159,
  1, 152, :_reduce_160,
  3, 172, :_reduce_161,
  3, 172, :_reduce_162,
  3, 172, :_reduce_163,
  3, 172, :_reduce_164,
  3, 172, :_reduce_165,
  3, 172, :_reduce_166,
  3, 172, :_reduce_167,
  1, 150, :_reduce_168,
  1, 150, :_reduce_169,
  2, 150, :_reduce_170,
  1, 150, :_reduce_none,
  5, 150, :_reduce_172,
  2, 174, :_reduce_173,
  3, 161, :_reduce_174,
  3, 161, :_reduce_175,
  0, 173, :_reduce_176,
  3, 173, :_reduce_177,
  0, 142, :_reduce_178,
  1, 142, :_reduce_179,
  3, 142, :_reduce_180,
  4, 159, :_reduce_181,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_205,
  0, 141, :_reduce_206,
  1, 141, :_reduce_none,
  0, 143, :_reduce_208,
  1, 143, :_reduce_none,
  0, 103, :_reduce_210,
  1, 103, :_reduce_211,
  1, 105, :_reduce_212,
  2, 105, :_reduce_213,
  1, 175, :_reduce_214,
  1, 175, :_reduce_none,
  0, 163, :_reduce_216,
  1, 163, :_reduce_none,
  1, 176, :_reduce_none,
  2, 176, :_reduce_none,
  1, 114, :_reduce_220 ]

racc_reduce_n = 221

racc_shift_n = 387

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kCLASS => 22,
  :kCFUNC => 23,
  :kSELF => 24,
  :kNULL => 25,
  :kFWD => 26,
  :kATTACH => 27,
  :kRAISE => 28,
  :kBREAK => 29,
  :kDTYPE_UINT => 30,
  :kDTYPE_LINT => 31,
  :kDTYPE_LLINT => 32,
  :kDTYPE_CHAR => 33,
  :kDTYPE_I8 => 34,
  :kDTYPE_I16 => 35,
  :kDTYPE_I32 => 36,
  :kDTYPE_I64 => 37,
  :kDTYPE_UI8 => 38,
  :kDTYPE_UI16 => 39,
  :kDTYPE_UI32 => 40,
  :kDTYPE_UI64 => 41,
  :kDTYPE_INT => 42,
  :kDTYPE_F32 => 43,
  :kDTYPE_F64 => 44,
  :kDTYPE_LF64 => 45,
  :kDTYPE_ROBJ => 46,
  :kDTYPE_ULINT => 47,
  :kDTYPE_ULLINT => 48,
  :kDTYPE_VOID => 49,
  :kDTYPE_SIZE_T => 50,
  :kDTYPE_RB_STR => 51,
  :kDTYPE_UCHAR => 52,
  :tCUSTOM_DTYPE => 53,
  :tLPAREN => 54,
  :tRPAREN => 55,
  :tLSQUARE => 56,
  :tRSQUARE => 57,
  :tIDENTIFIER => 58,
  :tNL => 59,
  :tCOMMA => 60,
  :tSQUOTE => 61,
  :tSCOLON => 62,
  :EOF => 63,
  :tDOT => 64,
  :tQMARK => 65,
  :tSYMBOL => 66,
  :tLBRACE => 67,
  :tRBRACE => 68,
  :tPLUS => 69,
  :tMINUS => 70,
  :tSTAR => 71,
  :tDIVIDE => 72,
  :tEXPO => 73,
  :tMODULUS => 74,
  :tASSIGN => 75,
  :tEQ => 76,
  :tLT => 77,
  :tLTEQ => 78,
  :tGT => 79,
  :tGTEQ => 80,
  :tANDOP => 81,
  :tOROP => 82,
  :tBANG => 83,
  :tOP_ASSIGN => 84,
  :tSTRING => 85,
  :kSIZEOF => 86,
  :tBIT_AND => 87,
  :tBIT_OR => 88,
  :tBIT_XOR => 89,
  :tBIT_LSHIFT => 90,
  :tBIT_RSHIFT => 91,
  :tBIT_NOT => 92,
  :tINTEGER => 93,
  :tFLOAT => 94,
  :tSINGLE_CHAR => 95,
  :ADDRESS_OF => 96,
  :TYPECAST => 97,
  :UMINUS => 98,
  :tNEQ => 99 }

racc_nt_base = 100

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kCLASS",
  "kCFUNC",
  "kSELF",
  "kNULL",
  "kFWD",
  "kATTACH",
  "kRAISE",
  "kBREAK",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "kDTYPE_VOID",
  "kDTYPE_SIZE_T",
  "kDTYPE_RB_STR",
  "kDTYPE_UCHAR",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSYMBOL",
  "tLBRACE",
  "tRBRACE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "kSIZEOF",
  "tBIT_AND",
  "tBIT_OR",
  "tBIT_XOR",
  "tBIT_LSHIFT",
  "tBIT_RSHIFT",
  "tBIT_NOT",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "ADDRESS_OF",
  "TYPECAST",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "top_compstmts",
  "opt_terms",
  "top_compstmt",
  "terms",
  "c_bindings",
  "top_stmts",
  "top_stmt",
  "methods",
  "klass",
  "attached_klass",
  "struct_or_union_def",
  "opt_inheritance",
  "eol",
  "dtype",
  "c_declarations",
  "c_declaration",
  "c_function_declaration_or_var_decl",
  "alias_stmt",
  "opt_star",
  "opt_c_func_arg_list",
  "c_func_args",
  "c_func_normal_arg",
  "var_decl_stmts",
  "var_decl_stmt",
  "var_decls",
  "normal_decl",
  "ident_or_custom_dtype",
  "aliased_type",
  "opt_identifier",
  "ruby_method",
  "c_function",
  "opt_singleton",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "opt_lparen",
  "command_arg_list",
  "opt_rparen",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "atomic_value",
  "actual_for_expr",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "opt_else",
  "decls_or_inits",
  "var_init",
  "actual_normal_decl",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "opt_eols",
  "hash_data",
  "hash_data_k_v",
  "rocket",
  "f_args",
  "f_normal_arg",
  "opt_default_value",
  "actual_expr",
  "typecast",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "term",
  "eols" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_1(val, _values, result)
    result = Node.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_4(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_8(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_9(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_10(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_12(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::Klass.new val[1], val[2], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_14(val, _values, result)
            raise Rubex::SyntaxError unless val[1][0].match(/[A-Z]/)
        result = TopStatement::AttachedKlass.new(val[1], val[3], val[4], val[6], 
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_15(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_17(val, _values, result)
            result = TopStatement::CBindings.new val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_18(val, _values, result)
     result = TopStatement::CBindings.new val[1], nil, location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_19(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_20(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_24(val, _values, result)
            if val[3] # function decl
          val[3].pop # HACK: because declared external C functions don't have implicit self argument.
          result = Statement::CFunctionDecl.new val[0], val[1], val[2], val[4]
        else # var/macro decl
          result = variable_decl_nodes([{
            dtype: val[0], 
            variables: [{
              ptr_level: val[1],
              ident: val[2]
            }]
          }])[0]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_26(val, _values, result)
     result = [Expression::ArgDeclaration.new(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_27(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_28(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_29(val, _values, result)
            # self is a compulsory implicit argument for C methods.
        val[1] << Expression::ArgDeclaration.new(
            { dtype: 'object', variables: [ {ident: 'self' }] })
        result = Statement::ArgumentList.new(val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_30(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new(val[0], val[1], val[3].flatten,
          location)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_32(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_33(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_34(val, _values, result)
            result = variable_decl_nodes([{ dtype: val[0], variables: val[1] }])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_35(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_36(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_37(val, _values, result)
     # TODO: take hash from aliased_type and turn into nodes.
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_39(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_40(val, _values, result)
            result =  {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_41(val, _values, result)
            result = {
          dtype: "#{val[0]}#{val[1]}",
          variables: [
            {
              ptr_level: val[2],
              ident: nil
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_42(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[3],
              ident:{
                return_ptr_level: val[1],
                arg_list: val[6],
                name: val[4]
              }              
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_43(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_44(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_47(val, _values, result)
            result = TopStatement::RubyMethodDef.new(
          val[2], val[3], val[4], singleton: val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_48(val, _values, result)
            if !val[4] # since last arg of cfunc must be self.
          val[4] = Statement::ArgumentList.new(
            [
              Expression::ArgDeclaration.new(
                { dtype: 'object', variables: [ {ident: 'self' }] }
                )
            ]
          ) 
        end
        result = TopStatement::CFunctionDef.new(val[1], val[2], val[3], 
          val[4], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_49(val, _values, result)
            result = {
          dtype: val[0],
          variables: [
            {
              ptr_level: val[1]
            }
          ]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_50(val, _values, result)
     result = { dtype: val[0]  , variables: [val[1]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_51(val, _values, result)
     result = { dtype: 'object', variables: [val[0]] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_52(val, _values, result)
     result = false 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_53(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 263)
  def _reduce_54(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 266)
  def _reduce_55(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_56(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_57(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_58(val, _values, result)
     result = variable_decl_nodes val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_59(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_61(val, _values, result)
     result = Statement::Print.new val[2], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_62(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_63(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_64(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], nil, location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_65(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_66(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_67(val, _values, result)
    
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_71(val, _values, result)
     result = Statement::Expression.new(val[0], location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_72(val, _values, result)
            result = Statement::Raise.new(Statement::ActualArgList.new(val[2]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_73(val, _values, result)
     result = Statement::Break.new(location) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_74(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[2]
      result = Statement::ForwardDecl.new val[1], val[2], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_75(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_76(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_78(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_79(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_86(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_87(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 347)
  def _reduce_88(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 351)
  def _reduce_89(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_90(val, _values, result)
            result = {
          dtype: val[0],
          variables: val[1]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 363)
  def _reduce_91(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_92(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_93(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_95(val, _values, result)
            result = {}

        if val[5] # function (pointer) decl
          result[:ptr_level] = val[2]
          result[:ident] = {
            :return_ptr_level => val[0],
            :name             => val[3],
            :arg_list         => val[5]
          }
        else
          result[:ptr_level] = val[0].join val[2]
          result[:ident]    = val[3]
        end
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 388)
  def _reduce_96(val, _values, result)
            result = {}

        if val[2]
          result[:ptr_level] = val[0]
          result[:ident] = {
            :name => val[1],
            :arg_list => val[2]
          }
        else
          result[:ptr_level] = val[0]
          result[:ident] = val[1]
        end
      
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 407)
  def _reduce_99(val, _values, result)
            result = val[0]
        value = val[2]

        value.c_array = true if value.is_a?(Expression::Literal::ArrayLit)
        result[:value] = value
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 415)
  def _reduce_100(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 416)
  def _reduce_101(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 419)
  def _reduce_102(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 420)
  def _reduce_103(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 421)
  def _reduce_104(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 426)
  def _reduce_105(val, _values, result)
            result = { 
          name: Expression::Name.new(val[0]),
          value: val[2]
        } 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 431)
  def _reduce_106(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 434)
  def _reduce_107(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 441)
  def _reduce_108(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 442)
  def _reduce_109(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 443)
  def _reduce_110(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 444)
  def _reduce_111(val, _values, result)
     result = Expression::Literal::StringLit.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 445)
  def _reduce_112(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 446)
  def _reduce_113(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 447)
  def _reduce_114(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 448)
  def _reduce_115(val, _values, result)
     result = Expression::Literal::RubySymbol.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 449)
  def _reduce_116(val, _values, result)
     result = Expression::Literal::CNull.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 451)
  def _reduce_117(val, _values, result)
     result = Expression::Literal::ArrayLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 453)
  def _reduce_118(val, _values, result)
     result = Expression::Literal::HashLit.new val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 456)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 457)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 458)
  def _reduce_121(val, _values, result)
     result = [*val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 461)
  def _reduce_122(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'parser.racc', 467)
  def _reduce_124(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 468)
  def _reduce_125(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 469)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 470)
  def _reduce_127(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 473)
  def _reduce_128(val, _values, result)
     result = Statement::ArgumentList.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 474)
  def _reduce_129(val, _values, result)
     result = Statement::ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 479)
  def _reduce_130(val, _values, result)
            result = [Expression::ArgDeclaration.new(val[0])] 
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 483)
  def _reduce_131(val, _values, result)
            result = [*val[0], Expression::ArgDeclaration.new(val[2])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 489)
  def _reduce_132(val, _values, result)
            result = { 
          dtype: val[0],
          variables: [
            {
              ident: val[1],
              value: val[2]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 501)
  def _reduce_133(val, _values, result)
            result = { 
          dtype: 'object',
          variables: [
            {
              ident: val[0],
              value: val[1]
            }
          ]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 513)
  def _reduce_134(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 514)
  def _reduce_135(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 517)
  def _reduce_136(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 520)
  def _reduce_137(val, _values, result)
            val[1].typecast = val[0]
        result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 523)
  def _reduce_138(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 524)
  def _reduce_139(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 527)
  def _reduce_140(val, _values, result)
     result = Expression::Typecast.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 530)
  def _reduce_141(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 531)
  def _reduce_142(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 532)
  def _reduce_143(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 533)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 536)
  def _reduce_145(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 537)
  def _reduce_146(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 538)
  def _reduce_147(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 539)
  def _reduce_148(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 540)
  def _reduce_149(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 541)
  def _reduce_150(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 542)
  def _reduce_151(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 543)
  def _reduce_152(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 544)
  def _reduce_153(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 545)
  def _reduce_154(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 546)
  def _reduce_155(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 547)
  def _reduce_156(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 548)
  def _reduce_157(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 549)
  def _reduce_158(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 550)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 551)
  def _reduce_160(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 554)
  def _reduce_161(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 555)
  def _reduce_162(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 556)
  def _reduce_163(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 557)
  def _reduce_164(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 558)
  def _reduce_165(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 559)
  def _reduce_166(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 560)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 563)
  def _reduce_168(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 564)
  def _reduce_169(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 567)
  def _reduce_170(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.racc', 578)
  def _reduce_172(val, _values, result)
            result = Expression::SizeOf.new(val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 584)
  def _reduce_173(val, _values, result)
            result = Expression::CommandCall.new val[0][0], val[0][1], val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 590)
  def _reduce_174(val, _values, result)
            result = [val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 594)
  def _reduce_175(val, _values, result)
          result = [val[0], val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 598)
  def _reduce_176(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 599)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 602)
  def _reduce_178(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 603)
  def _reduce_179(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 604)
  def _reduce_180(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 609)
  def _reduce_181(val, _values, result)
            result = Expression::ElementRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'parser.racc', 619)
  def _reduce_205(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 623)
  def _reduce_206(val, _values, result)
    
    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'parser.racc', 627)
  def _reduce_208(val, _values, result)
    
    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'parser.racc', 631)
  def _reduce_210(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 632)
  def _reduce_211(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 635)
  def _reduce_212(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 636)
  def _reduce_213(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 639)
  def _reduce_214(val, _values, result)
    
    result
  end
.,.,

# reduce 215 omitted

module_eval(<<'.,.,', 'parser.racc', 643)
  def _reduce_216(val, _values, result)
    
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'parser.racc', 651)
  def _reduce_220(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
