#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

module Rubex
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 414)

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      puts "#{@custom_dtypes} #{@custom_dtypes.has_key?(t[1])} #{t} #{@prev_token}"
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    34,    35,    37,   154,   172,   154,   258,    38,    39,   229,
   230,    53,    54,    55,    41,   169,    29,   169,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   117,     8,
   116,   156,    46,   156,   117,   121,    26,    26,   217,   240,
   122,     9,   115,   218,   241,   160,   161,     8,     6,   119,
     8,   113,    27,    27,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   162,   163,    53,    54,    55,    41,     6,
    29,    16,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   116,   207,   117,    13,    46,    13,    14,    18,
    14,    13,   115,    19,    14,   134,   135,   136,   137,   138,
   139,   113,   134,   135,   136,   137,   138,   139,    34,    35,
    37,    52,    49,    50,    51,    38,    39,   229,   230,    53,
    54,    55,    41,    22,    29,    25,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    13,   192,    88,    14,
    46,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    89,    34,    35,    37,    52,    49,    50,    51,    38,
    39,    92,   109,    53,    54,    55,    41,   110,    29,   112,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    13,   118,   123,    14,    46,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   128,    34,    35,    37,    52,
    49,    50,    51,    38,    39,   129,   112,    53,    54,    55,
    41,   131,    29,   116,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    13,   157,   165,    14,    46,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,   166,
    34,    35,    37,    52,    49,    50,    51,    38,    39,   177,
   156,    53,    54,    55,    41,   188,    29,   189,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    13,   169,
    92,    14,    46,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   138,    34,    35,    37,    52,    49,    50,
    51,    38,    39,   208,   211,    53,    54,    55,    41,   212,
    29,   215,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   116,   216,   117,   119,    46,   219,    53,    54,
    55,   226,   115,   138,    53,    54,    55,   138,   138,   138,
    53,    54,    55,   134,   135,   136,   137,   138,   139,   231,
   234,    52,    49,    50,    51,    97,   172,    13,   242,   101,
    14,    97,   112,    13,   246,   101,    14,    97,   251,    96,
    13,   101,   263,    14,   117,    96,    53,    54,    55,   258,
   261,    96,    99,   262,    52,    49,    50,    51,    99,   nil,
    52,    49,    50,    51,    99,   nil,    52,    49,    50,    51,
    53,    54,    55,   107,   nil,   nil,   nil,   101,   nil,    53,
    54,    55,   136,   137,   138,   139,   nil,    96,   nil,   nil,
    53,    54,    55,   136,   137,   138,   139,    97,   nil,   nil,
   nil,   101,    52,    49,    50,    51,    97,   nil,   nil,   nil,
   101,    96,    53,    54,    55,   nil,   nil,   107,   nil,   nil,
    96,   101,   nil,   nil,    99,   nil,    52,    49,    50,    51,
   nil,    96,   nil,    99,   nil,    52,    49,    50,    51,    97,
   nil,   nil,   nil,   101,   nil,   nil,    52,    49,    50,    51,
    53,    54,    55,    96,   nil,    53,    54,    55,   nil,   nil,
   nil,    53,    54,    55,   nil,   nil,    99,   nil,    52,    49,
    50,    51,   nil,   nil,   nil,   nil,   nil,    97,   nil,   nil,
   nil,   101,   107,   nil,   nil,   nil,   101,   nil,    97,   nil,
   nil,    96,   101,   nil,   nil,   nil,    96,    53,    54,    55,
   nil,   nil,    96,   nil,    99,   nil,    52,    49,    50,    51,
   nil,    52,    49,    50,    51,    99,   nil,    52,    49,    50,
    51,    53,    54,    55,    97,   nil,   nil,   nil,   101,   nil,
    53,    54,    55,   nil,   nil,   nil,   nil,   nil,    96,   nil,
   nil,    53,    54,    55,   nil,   nil,   nil,   nil,    97,   nil,
   nil,    99,   101,    52,    49,    50,    51,    97,   nil,   nil,
   nil,   101,    96,    53,    54,    55,   nil,   nil,    97,   nil,
   nil,    96,   101,   nil,   nil,    99,   nil,    52,    49,    50,
    51,   nil,    96,   nil,    99,   nil,    52,    49,    50,    51,
    97,   nil,   nil,   nil,   101,    99,   nil,    52,    49,    50,
    51,    53,    54,    55,    96,   nil,    53,    54,    55,   nil,
   nil,   nil,    53,    54,    55,   nil,   nil,    99,   nil,    52,
    49,    50,    51,   nil,   nil,    53,    54,    55,   107,   nil,
   nil,   nil,   101,   107,   nil,   nil,   nil,   101,   nil,   107,
   nil,   nil,    96,   101,   nil,   nil,   nil,    96,    53,    54,
    55,   nil,   107,    96,   nil,   nil,   101,    52,    49,    50,
    51,   nil,    52,    49,    50,    51,    96,   nil,    52,    49,
    50,    51,    53,    54,    55,   107,   nil,   nil,   nil,   101,
   nil,    52,    49,    50,    51,    53,    54,    55,   nil,    96,
   nil,    53,    54,    55,   nil,   nil,    53,    54,    55,   107,
   nil,   nil,   nil,   101,    52,    49,    50,    51,   nil,   nil,
   nil,   nil,   107,    96,   nil,   nil,   101,   nil,   107,   nil,
   nil,   nil,   101,   107,   nil,   nil,    96,   101,    52,    49,
    50,    51,    96,    53,    54,    55,   nil,    96,    53,    54,
    55,    52,    49,    50,    51,   nil,   nil,    52,    49,    50,
    51,   nil,    52,    49,    50,    51,   nil,    53,    54,    55,
   107,   nil,   nil,   nil,   101,   107,   nil,   nil,   nil,   101,
   nil,   nil,   nil,   nil,    96,   nil,    53,    54,    55,    96,
   nil,    53,    54,    55,   107,   nil,   nil,   nil,   101,    52,
    49,    50,    51,   nil,    52,    49,    50,    51,    96,   nil,
    53,    54,    55,   107,   nil,   nil,   nil,   101,   107,   nil,
   nil,   nil,   101,    52,    49,    50,    51,    96,   nil,    53,
    54,    55,    96,   nil,    53,    54,    55,    97,   nil,   238,
   nil,   101,    52,    49,    50,    51,   nil,    52,    49,    50,
    51,    96,   nil,    53,    54,    55,    97,   nil,   nil,   nil,
   101,   107,   nil,   nil,    99,   101,    52,    49,    50,    51,
    96,   nil,    53,    54,    55,    96,   nil,   nil,   nil,   nil,
    97,   nil,   nil,    99,   101,    52,    49,    50,    51,   nil,
    52,    49,    50,    51,    96,    53,    54,    55,   nil,   107,
   nil,   nil,   nil,   101,   nil,   nil,   nil,    99,   nil,    52,
    49,    50,    51,    96,    53,    54,    55,   nil,   nil,   nil,
   nil,   nil,    97,   nil,   nil,   nil,   101,   nil,    52,    49,
    50,    51,   nil,   nil,   nil,   nil,    96,   nil,   nil,   nil,
   nil,    97,   nil,   nil,   nil,   101,   nil,   nil,   nil,    99,
   nil,    52,    49,    50,    51,    96,   nil,   nil,   nil,   124,
   134,   135,   136,   137,   138,   139,   nil,   nil,    99,   nil,
    52,    49,    50,    51,    85,   nil,    29,   nil,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,   207,   134,
   135,   136,   137,   138,   139,   nil,   nil,   nil,   nil,   nil,
   134,   135,   136,   137,   138,   139,   nil,   140,   142,   143,
   144,   145,   146,   147,   nil,   nil,   nil,   nil,    85,   nil,
    29,   141,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
    14,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,    14,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
   nil,   nil,   nil,   nil,    81,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,   nil,   nil,   nil,   nil,    81,
   134,   135,   136,   137,   138,   139,   nil,   140,   142,   143,
   144,   145,   146,   147,   nil,   134,   135,   136,   137,   138,
   139,   141,   140,   142,   143,   144,   145,   146,   147,   134,
   135,   136,   137,   138,   139,   nil,   141,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,   134,   135,   136,
   137,   138,   139,   nil,   nil,   160,   161,   162,   163,   134,
   135,   136,   137,   138,   139,   134,   135,   136,   137,   138,
   139,   134,   135,   136,   137,   138,   139,   134,   135,   136,
   137,   138,   139,   134,   135,   136,   137,   138,   139 ]

racc_action_check = [
    23,    23,    23,   104,   111,   247,   245,    23,    23,   209,
   209,    23,    23,    23,    23,   111,    23,   245,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    23,    23,    23,   177,     0,
    48,   104,    23,   247,   172,    78,    18,   177,   180,   220,
    78,     1,   172,   180,   220,   211,   211,     5,     0,    48,
    11,   172,    18,   177,    91,    91,    91,    23,    23,    23,
    23,    91,    91,   212,   212,    91,    91,    91,    91,    11,
    91,     6,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    91,
    91,    91,    46,   164,    46,    11,    91,    91,    11,     8,
    91,     2,    46,     9,     2,   164,   164,   164,   164,   164,
   164,    46,   199,   199,   199,   199,   199,   199,   153,   153,
   153,    91,    91,    91,    91,   153,   153,   264,   264,   153,
   153,   153,   153,    16,   153,    17,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,    22,   131,    29,    22,
   153,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,    30,   157,   157,   157,   153,   153,   153,   153,   157,
   157,    32,    41,   157,   157,   157,   157,    44,   157,    45,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
    31,    47,    80,    31,   157,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,    84,   165,   165,   165,   157,
   157,   157,   157,   165,   165,    85,    87,   165,   165,   165,
   165,    88,   165,   102,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,    83,   105,   108,    83,   165,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   109,
   230,   230,   230,   165,   165,   165,   165,   230,   230,   115,
   121,   230,   230,   230,   230,   128,   230,   129,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   125,   130,
   132,   125,   230,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
   214,   214,   214,   148,   260,   260,   260,   230,   230,   230,
   230,   260,   260,   150,   158,   260,   260,   260,   260,   159,
   260,   168,   260,   260,   260,   260,   260,   260,   260,   260,
   260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
   260,   260,   101,   173,   101,   175,   260,   182,    34,    34,
    34,   192,   101,   195,    35,    35,    35,   196,   197,   198,
    37,    37,    37,   200,   200,   200,   200,   200,   200,   210,
   213,   260,   260,   260,   260,    34,   215,   127,   222,    34,
   127,    35,   225,   166,   227,    35,   166,    37,   235,    34,
   223,    37,   256,   223,   258,    35,    38,    38,    38,   263,
   252,    37,    34,   252,    34,    34,    34,    34,    35,   nil,
    35,    35,    35,    35,    37,   nil,    37,    37,    37,    37,
    39,    39,    39,    38,   nil,   nil,   nil,    38,   nil,    92,
    92,    92,   193,   193,   193,   193,   nil,    38,   nil,   nil,
    96,    96,    96,   194,   194,   194,   194,    39,   nil,   nil,
   nil,    39,    38,    38,    38,    38,    92,   nil,   nil,   nil,
    92,    39,    97,    97,    97,   nil,   nil,    96,   nil,   nil,
    92,    96,   nil,   nil,    39,   nil,    39,    39,    39,    39,
   nil,    96,   nil,    92,   nil,    92,    92,    92,    92,    97,
   nil,   nil,   nil,    97,   nil,   nil,    96,    96,    96,    96,
    99,    99,    99,    97,   nil,   107,   107,   107,   nil,   nil,
   nil,   110,   110,   110,   nil,   nil,    97,   nil,    97,    97,
    97,    97,   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,
   nil,    99,   107,   nil,   nil,   nil,   107,   nil,   110,   nil,
   nil,    99,   110,   nil,   nil,   nil,   107,   113,   113,   113,
   nil,   nil,   110,   nil,    99,   nil,    99,    99,    99,    99,
   nil,   107,   107,   107,   107,   110,   nil,   110,   110,   110,
   110,   116,   116,   116,   113,   nil,   nil,   nil,   113,   nil,
   117,   117,   117,   nil,   nil,   nil,   nil,   nil,   113,   nil,
   nil,   118,   118,   118,   nil,   nil,   nil,   nil,   116,   nil,
   nil,   113,   116,   113,   113,   113,   113,   117,   nil,   nil,
   nil,   117,   116,   119,   119,   119,   nil,   nil,   118,   nil,
   nil,   117,   118,   nil,   nil,   116,   nil,   116,   116,   116,
   116,   nil,   118,   nil,   117,   nil,   117,   117,   117,   117,
   119,   nil,   nil,   nil,   119,   118,   nil,   118,   118,   118,
   118,   134,   134,   134,   119,   nil,   135,   135,   135,   nil,
   nil,   nil,   136,   136,   136,   nil,   nil,   119,   nil,   119,
   119,   119,   119,   nil,   nil,   137,   137,   137,   134,   nil,
   nil,   nil,   134,   135,   nil,   nil,   nil,   135,   nil,   136,
   nil,   nil,   134,   136,   nil,   nil,   nil,   135,   138,   138,
   138,   nil,   137,   136,   nil,   nil,   137,   134,   134,   134,
   134,   nil,   135,   135,   135,   135,   137,   nil,   136,   136,
   136,   136,   139,   139,   139,   138,   nil,   nil,   nil,   138,
   nil,   137,   137,   137,   137,   140,   140,   140,   nil,   138,
   nil,   141,   141,   141,   nil,   nil,   142,   142,   142,   139,
   nil,   nil,   nil,   139,   138,   138,   138,   138,   nil,   nil,
   nil,   nil,   140,   139,   nil,   nil,   140,   nil,   141,   nil,
   nil,   nil,   141,   142,   nil,   nil,   140,   142,   139,   139,
   139,   139,   141,   143,   143,   143,   nil,   142,   144,   144,
   144,   140,   140,   140,   140,   nil,   nil,   141,   141,   141,
   141,   nil,   142,   142,   142,   142,   nil,   145,   145,   145,
   143,   nil,   nil,   nil,   143,   144,   nil,   nil,   nil,   144,
   nil,   nil,   nil,   nil,   143,   nil,   146,   146,   146,   144,
   nil,   147,   147,   147,   145,   nil,   nil,   nil,   145,   143,
   143,   143,   143,   nil,   144,   144,   144,   144,   145,   nil,
   216,   216,   216,   146,   nil,   nil,   nil,   146,   147,   nil,
   nil,   nil,   147,   145,   145,   145,   145,   146,   nil,   218,
   218,   218,   147,   nil,   232,   232,   232,   216,   nil,   216,
   nil,   216,   146,   146,   146,   146,   nil,   147,   147,   147,
   147,   216,   nil,   229,   229,   229,   218,   nil,   nil,   nil,
   218,   232,   nil,   nil,   216,   232,   216,   216,   216,   216,
   218,   nil,   233,   233,   233,   232,   nil,   nil,   nil,   nil,
   229,   nil,   nil,   218,   229,   218,   218,   218,   218,   nil,
   232,   232,   232,   232,   229,   238,   238,   238,   nil,   233,
   nil,   nil,   nil,   233,   nil,   nil,   nil,   229,   nil,   229,
   229,   229,   229,   233,   262,   262,   262,   nil,   nil,   nil,
   nil,   nil,   238,   nil,   nil,   nil,   238,   nil,   233,   233,
   233,   233,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   262,   nil,   nil,   nil,   238,
   nil,   238,   238,   238,   238,   262,   nil,   nil,   nil,    82,
   201,   201,   201,   201,   201,   201,   nil,   nil,   262,   nil,
   262,   262,   262,   262,    82,   nil,    82,   nil,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,   149,   202,
   202,   202,   202,   202,   202,   nil,   nil,   nil,   nil,   nil,
   149,   149,   149,   149,   149,   149,   nil,   149,   149,   149,
   149,   149,   149,   149,   nil,   nil,   nil,   nil,    28,   nil,
    28,   149,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,   nil,   nil,   nil,   nil,   nil,    28,   nil,   nil,
    28,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   244,   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,   244,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
   nil,   nil,   nil,   nil,    25,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   nil,   nil,   nil,   nil,   122,
    94,    94,    94,    94,    94,    94,   nil,    94,    94,    94,
    94,    94,    94,    94,   nil,   151,   151,   151,   151,   151,
   151,    94,   151,   151,   151,   151,   151,   151,   151,   203,
   203,   203,   203,   203,   203,   nil,   151,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   106,   106,   106,
   106,   106,   106,   nil,   nil,   106,   106,   106,   106,   204,
   204,   204,   204,   204,   204,   205,   205,   205,   205,   205,
   205,   206,   206,   206,   206,   206,   206,   249,   249,   249,
   249,   249,   249,   250,   250,   250,   250,   250,   250 ]

racc_action_pointer = [
    37,    51,    64,   nil,   nil,    55,    10,   nil,    63,   113,
   nil,    58,   nil,   nil,   nil,   nil,   129,   103,    -7,   nil,
   nil,   nil,   119,    -4,   nil,  1188,   nil,   nil,  1130,   122,
   188,   183,   195,   nil,   413,   419,   nil,   425,   461,   485,
   nil,   156,   nil,   nil,   137,   152,    60,   170,    -2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   186,   nil,  1076,   247,   209,   219,   nil,   209,   210,   nil,
   nil,    60,   494,   nil,  1205,   nil,   505,   527,   nil,   565,
   nil,   380,   231,   nil,    -6,   281,  1262,   570,   282,   305,
   576,   -42,   nil,   612,   nil,   283,   636,   645,   656,   678,
   nil,   283,  1213,   nil,   nil,   311,   nil,   410,   293,   323,
   302,   149,   354,   nil,   716,   721,   727,   740,   763,   787,
   800,   806,   811,   848,   853,   872,   891,   896,   324,  1075,
   350,  1220,   nil,   124,   nil,   nil,   nil,   188,   348,   353,
   nil,   nil,   nil,   nil,    60,   252,   416,   nil,   353,   nil,
   nil,   nil,     0,   362,   nil,   364,   nil,    -6,   nil,   nil,
     5,   nil,   382,   nil,   nil,   nil,   nil,   nil,   213,   277,
   nil,   nil,   385,   455,   466,   374,   378,   379,   380,    67,
   388,  1025,  1064,  1234,  1274,  1280,  1286,   nil,   nil,     2,
   446,    -8,     8,   447,   341,   410,   915,   nil,   934,   nil,
     6,   nil,   455,   423,   nil,   405,   nil,   461,   nil,   958,
   316,   nil,   939,   977,   nil,   465,   nil,   nil,  1000,   nil,
   nil,  1275,   nil,   nil,  1159,   -40,   nil,    -4,   nil,  1292,
  1298,   nil,   435,   nil,   nil,   nil,   424,   nil,   430,   nil,
   380,   nil,  1019,   433,   130,   nil,   nil,   nil ]

racc_action_default = [
    -2,  -157,  -150,    -3,    -5,    -6,  -157,   -20,  -157,  -157,
    -1,  -151,  -152,  -154,  -155,   -21,  -157,   -88,   -87,   268,
    -4,  -153,  -157,   -24,   -89,  -157,   -85,   -86,  -157,  -157,
  -157,  -150,   -25,   -27,  -157,  -157,   -30,  -157,  -157,  -157,
   -35,  -157,   -37,   -38,  -157,   -61,  -124,  -117,  -124,   -78,
   -79,   -80,   -81,   -82,   -83,   -84,  -118,  -120,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -157,   -91,
  -157,   -94,  -157,  -150,  -157,  -157,   -12,   -61,  -157,   -22,
   -23,  -151,  -157,   -28,   -95,   -96,  -157,  -157,  -105,  -157,
  -117,  -124,  -124,   -29,  -157,  -157,  -157,  -157,  -157,   -39,
  -157,  -157,   -62,  -157,  -119,  -157,  -126,  -157,  -157,  -157,
  -121,  -157,  -157,   -93,    -7,  -150,    -8,  -151,  -157,  -157,
   -13,  -157,   -26,   -32,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -103,  -157,
  -157,  -115,  -116,   -24,   -54,   -55,  -156,   -24,  -157,  -157,
   -50,   -51,   -52,   -53,  -157,   -24,  -150,   -47,   -60,   -63,
   -66,   -67,   -68,   -69,   -70,  -157,   -75,   -87,  -122,  -123,
  -157,  -127,  -157,   -76,   -77,   -90,   -92,    -9,   -17,   -41,
   -14,   -15,  -157,   -97,   -98,   -99,  -100,  -101,  -102,  -106,
  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -104,  -114,   -56,
  -157,  -157,  -157,  -157,   -41,  -157,  -157,  -125,  -157,  -129,
  -157,   -18,  -157,  -150,   -42,   -61,   -16,  -157,   -57,  -157,
   -24,   -33,  -157,  -157,   -34,  -157,   -64,   -65,   -72,  -128,
   -10,  -157,   -11,   -40,  -151,  -157,   -31,  -157,   -59,   -48,
   -49,   -36,  -157,   -73,   -19,   -43,   -44,   -45,   -68,   -69,
   -24,   -71,  -157,  -157,   -56,   -74,   -46,   -58 ]

racc_goto_table = [
    47,    30,    44,    21,   111,    10,    17,    48,    11,   227,
   159,    79,    80,    83,   222,    87,   170,   158,    86,   174,
    21,    93,   103,   153,   104,   171,   108,   120,    28,   221,
     3,   150,     1,   152,    90,     2,    82,    91,   220,   235,
   190,    20,    15,    23,   132,   105,   130,   255,   256,   185,
   168,   252,    24,    78,   180,   nil,   106,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   267,   nil,   nil,   125,    47,    87,
    44,   nil,    86,   nil,   nil,    48,   nil,   nil,   nil,   133,
   nil,   120,   254,    21,   nil,   nil,   126,   nil,   173,   nil,
   nil,   nil,   179,   nil,   nil,   175,   nil,   167,   nil,   nil,
   176,   nil,   nil,   181,   182,   nil,   184,   nil,   186,    80,
   nil,   nil,   nil,   178,   148,   149,   233,   151,   191,    21,
   237,   nil,   232,   174,   nil,   164,   nil,   nil,   187,   236,
    47,   209,    44,   nil,    47,   210,    44,    48,   nil,   nil,
   nil,    48,    47,   213,    44,   nil,   nil,   nil,   nil,    48,
   257,   nil,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   260,   nil,   266,   214,
   nil,   nil,   nil,   nil,   nil,    87,   225,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   245,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   173,   nil,   nil,   nil,   nil,   nil,   nil,   175,
   nil,   225,   nil,   nil,   nil,   239,   nil,    47,   248,    44,
   nil,   nil,   nil,   nil,    48,   nil,   247,   nil,   nil,   nil,
   nil,   nil,   259,   nil,   nil,   253,   243,   nil,    87,   244,
   nil,   225,   nil,   nil,   nil,   nil,    21,    47,   264,    44,
   259,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   265,
   249,   250 ]

racc_goto_check = [
    43,    20,    35,    54,    15,     3,    18,    45,     5,    27,
    38,    49,    14,     9,    12,    14,    34,    37,    13,    25,
    54,    24,    24,    26,    24,    42,    24,    51,     5,    10,
     4,    50,     1,    50,     3,     2,     8,     5,    11,    12,
    16,     4,    17,    19,    22,    28,    15,    32,    33,    39,
    41,    44,    47,    48,    53,   nil,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,     9,    43,    14,
    35,   nil,    13,   nil,   nil,    45,   nil,   nil,   nil,    24,
   nil,    51,    10,    54,   nil,   nil,     3,   nil,    43,   nil,
   nil,   nil,    43,   nil,   nil,    45,   nil,    24,   nil,   nil,
    24,   nil,   nil,    24,    24,   nil,    24,   nil,    49,    14,
   nil,   nil,   nil,    18,    36,    36,    38,    36,    14,    54,
    34,   nil,    37,    25,   nil,    36,   nil,   nil,     3,    42,
    43,    20,    35,   nil,    43,    20,    35,    45,   nil,   nil,
   nil,    45,    43,    20,    35,   nil,   nil,   nil,   nil,    45,
    34,   nil,    36,    36,    36,    36,    36,    36,    36,    36,
    36,    36,    36,    36,    36,    36,    26,   nil,    34,     3,
   nil,   nil,   nil,   nil,   nil,    14,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,    14,   nil,   nil,   nil,    24,   nil,    43,    20,    35,
   nil,   nil,   nil,   nil,    45,   nil,    24,   nil,   nil,   nil,
   nil,   nil,    43,   nil,   nil,    24,     3,   nil,    14,     5,
   nil,    14,   nil,   nil,   nil,   nil,    54,    43,    20,    35,
    43,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,    24,
    36,    36 ]

racc_goto_pointer = [
   nil,    32,    35,     3,    30,     6,   nil,   nil,     8,   -15,
  -159,  -150,  -175,   -10,   -13,   -41,   -91,    37,    -2,    26,
   -22,   nil,   -47,   nil,   -13,   -92,   -81,  -200,     7,   nil,
   nil,   nil,  -197,  -197,   -95,   -21,    18,   -89,   -96,   -72,
   nil,   -61,   -86,   -23,  -187,   -16,   nil,    35,    28,   -14,
   -66,   -21,   nil,   -62,    -8 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   127,     4,     5,   nil,   nil,
    84,   nil,   nil,    43,    45,   nil,   nil,     7,   nil,   nil,
   nil,    31,    32,    33,   183,    36,   nil,   nil,   nil,    40,
    42,   223,   224,   nil,   nil,    98,    94,   nil,   nil,   155,
   228,   nil,   nil,   100,   nil,   102,    56,   nil,   nil,   nil,
    95,   114,    57,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 78, :_reduce_1,
  0, 79, :_reduce_2,
  1, 79, :_reduce_3,
  3, 79, :_reduce_4,
  1, 81, :_reduce_5,
  1, 81, :_reduce_6,
  6, 83, :_reduce_7,
  2, 85, :_reduce_8,
  3, 85, :_reduce_9,
  5, 86, :_reduce_10,
  5, 86, :_reduce_11,
  1, 86, :_reduce_none,
  2, 87, :_reduce_13,
  4, 90, :_reduce_14,
  1, 93, :_reduce_none,
  2, 93, :_reduce_16,
  0, 88, :_reduce_17,
  1, 88, :_reduce_18,
  3, 88, :_reduce_19,
  1, 84, :_reduce_20,
  2, 84, :_reduce_21,
  5, 94, :_reduce_22,
  2, 97, :_reduce_23,
  0, 98, :_reduce_24,
  1, 98, :_reduce_25,
  3, 98, :_reduce_26,
  1, 99, :_reduce_27,
  2, 99, :_reduce_28,
  2, 99, :_reduce_29,
  1, 99, :_reduce_30,
  6, 99, :_reduce_31,
  3, 99, :_reduce_32,
  5, 99, :_reduce_33,
  5, 99, :_reduce_34,
  1, 99, :_reduce_35,
  6, 99, :_reduce_36,
  1, 99, :_reduce_37,
  1, 99, :_reduce_none,
  2, 107, :_reduce_39,
  2, 89, :_reduce_40,
  0, 108, :_reduce_41,
  1, 108, :_reduce_42,
  3, 108, :_reduce_43,
  3, 109, :_reduce_44,
  1, 110, :_reduce_45,
  3, 110, :_reduce_46,
  3, 106, :_reduce_47,
  5, 105, :_reduce_48,
  5, 105, :_reduce_49,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  0, 104, :_reduce_56,
  1, 104, :_reduce_57,
  5, 104, :_reduce_58,
  2, 117, :_reduce_59,
  3, 100, :_reduce_60,
  0, 92, :_reduce_61,
  1, 92, :_reduce_62,
  2, 92, :_reduce_63,
  3, 118, :_reduce_64,
  3, 118, :_reduce_65,
  1, 118, :_reduce_66,
  1, 118, :_reduce_67,
  1, 111, :_reduce_68,
  1, 111, :_reduce_69,
  1, 119, :_reduce_none,
  5, 119, :_reduce_71,
  0, 121, :_reduce_72,
  1, 121, :_reduce_73,
  3, 121, :_reduce_74,
  3, 102, :_reduce_75,
  3, 102, :_reduce_76,
  3, 102, :_reduce_77,
  1, 123, :_reduce_78,
  1, 123, :_reduce_79,
  1, 123, :_reduce_80,
  1, 123, :_reduce_81,
  1, 123, :_reduce_82,
  1, 123, :_reduce_83,
  1, 123, :_reduce_84,
  2, 95, :_reduce_85,
  2, 95, :_reduce_86,
  1, 95, :_reduce_87,
  0, 96, :_reduce_88,
  1, 96, :_reduce_none,
  4, 124, :_reduce_90,
  1, 125, :_reduce_91,
  3, 125, :_reduce_92,
  2, 126, :_reduce_93,
  1, 126, :_reduce_94,
  1, 101, :_reduce_95,
  1, 101, :_reduce_96,
  3, 113, :_reduce_97,
  3, 113, :_reduce_98,
  3, 113, :_reduce_99,
  3, 113, :_reduce_100,
  3, 113, :_reduce_101,
  3, 113, :_reduce_102,
  2, 113, :_reduce_103,
  3, 113, :_reduce_104,
  1, 113, :_reduce_105,
  3, 127, :_reduce_106,
  3, 127, :_reduce_107,
  3, 127, :_reduce_108,
  3, 127, :_reduce_109,
  3, 127, :_reduce_110,
  3, 127, :_reduce_111,
  3, 127, :_reduce_112,
  3, 127, :_reduce_113,
  3, 127, :_reduce_114,
  2, 127, :_reduce_115,
  2, 127, :_reduce_116,
  1, 112, :_reduce_117,
  1, 112, :_reduce_118,
  2, 112, :_reduce_119,
  1, 112, :_reduce_none,
  2, 129, :_reduce_121,
  3, 122, :_reduce_122,
  3, 122, :_reduce_123,
  0, 128, :_reduce_124,
  3, 128, :_reduce_125,
  0, 130, :_reduce_126,
  1, 130, :_reduce_127,
  3, 130, :_reduce_128,
  4, 120, :_reduce_129,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_149,
  0, 80, :_reduce_150,
  1, 80, :_reduce_151,
  1, 82, :_reduce_152,
  2, 82, :_reduce_153,
  1, 131, :_reduce_154,
  1, 131, :_reduce_none,
  1, 116, :_reduce_156 ]

racc_reduce_n = 157

racc_shift_n = 268

racc_token_table = {
  false => 0,
  :error => 1,
  :kDEF => 2,
  :kEND => 3,
  :kRETURN => 4,
  :kPRINT => 5,
  :kIF => 6,
  :kELSIF => 7,
  :kELSE => 8,
  :kTHEN => 9,
  :kSTATIC_ARRAY => 10,
  :kFOR => 11,
  :kWHILE => 12,
  :kDOT_EACH => 13,
  :kDO => 14,
  :kTRUE => 15,
  :kFALSE => 16,
  :kNIL => 17,
  :kSTRUCT => 18,
  :kUNION => 19,
  :kALIAS => 20,
  :kLIB => 21,
  :kDTYPE_UINT => 22,
  :kDTYPE_LINT => 23,
  :kDTYPE_LLINT => 24,
  :kDTYPE_CHAR => 25,
  :kDTYPE_I8 => 26,
  :kDTYPE_I16 => 27,
  :kDTYPE_I32 => 28,
  :kDTYPE_I64 => 29,
  :kDTYPE_UI8 => 30,
  :kDTYPE_UI16 => 31,
  :kDTYPE_UI32 => 32,
  :kDTYPE_UI64 => 33,
  :kDTYPE_INT => 34,
  :kDTYPE_F32 => 35,
  :kDTYPE_F64 => 36,
  :kDTYPE_LF64 => 37,
  :kDTYPE_ROBJ => 38,
  :kDTYPE_ULINT => 39,
  :kDTYPE_ULLINT => 40,
  :tCUSTOM_DTYPE => 41,
  :tLPAREN => 42,
  :tRPAREN => 43,
  :tLSQUARE => 44,
  :tRSQUARE => 45,
  :tIDENTIFIER => 46,
  :tNL => 47,
  :tCOMMA => 48,
  :tSQUOTE => 49,
  :tSCOLON => 50,
  :EOF => 51,
  :tDOT => 52,
  :tQMARK => 53,
  :tSTART_LINE => 54,
  :tPLUS => 55,
  :tMINUS => 56,
  :tSTAR => 57,
  :tDIVIDE => 58,
  :tEXPO => 59,
  :tMODULUS => 60,
  :tASSIGN => 61,
  :tEQ => 62,
  :tLT => 63,
  :tLTEQ => 64,
  :tGT => 65,
  :tGTEQ => 66,
  :tANDOP => 67,
  :tOROP => 68,
  :tBANG => 69,
  :tOP_ASSIGN => 70,
  :tSTRING => 71,
  :tINTEGER => 72,
  :tFLOAT => 73,
  :tSINGLE_CHAR => 74,
  :UMINUS => 75,
  :tNEQ => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kDEF",
  "kEND",
  "kRETURN",
  "kPRINT",
  "kIF",
  "kELSIF",
  "kELSE",
  "kTHEN",
  "kSTATIC_ARRAY",
  "kFOR",
  "kWHILE",
  "kDOT_EACH",
  "kDO",
  "kTRUE",
  "kFALSE",
  "kNIL",
  "kSTRUCT",
  "kUNION",
  "kALIAS",
  "kLIB",
  "kDTYPE_UINT",
  "kDTYPE_LINT",
  "kDTYPE_LLINT",
  "kDTYPE_CHAR",
  "kDTYPE_I8",
  "kDTYPE_I16",
  "kDTYPE_I32",
  "kDTYPE_I64",
  "kDTYPE_UI8",
  "kDTYPE_UI16",
  "kDTYPE_UI32",
  "kDTYPE_UI64",
  "kDTYPE_INT",
  "kDTYPE_F32",
  "kDTYPE_F64",
  "kDTYPE_LF64",
  "kDTYPE_ROBJ",
  "kDTYPE_ULINT",
  "kDTYPE_ULLINT",
  "tCUSTOM_DTYPE",
  "tLPAREN",
  "tRPAREN",
  "tLSQUARE",
  "tRSQUARE",
  "tIDENTIFIER",
  "tNL",
  "tCOMMA",
  "tSQUOTE",
  "tSCOLON",
  "EOF",
  "tDOT",
  "tQMARK",
  "tSTART_LINE",
  "tPLUS",
  "tMINUS",
  "tSTAR",
  "tDIVIDE",
  "tEXPO",
  "tMODULUS",
  "tASSIGN",
  "tEQ",
  "tLT",
  "tLTEQ",
  "tGT",
  "tGTEQ",
  "tANDOP",
  "tOROP",
  "tBANG",
  "tOP_ASSIGN",
  "tSTRING",
  "tINTEGER",
  "tFLOAT",
  "tSINGLE_CHAR",
  "UMINUS",
  "tNEQ",
  "$start",
  "program",
  "topstmts",
  "opt_terms",
  "topstmt",
  "terms",
  "c_bindings",
  "methods",
  "c_declarations",
  "c_declaration",
  "dtype_or_ptr",
  "dtype_list",
  "var_decl_stmts",
  "alias_stmt",
  "dtype",
  "opt_star",
  "aliased_type",
  "ruby_method",
  "f_name",
  "f_opt_arglist",
  "compstmt",
  "stmts",
  "stmt",
  "var_decl_or_init",
  "expr",
  "normal_init",
  "then",
  "if_tail",
  "for_expr",
  "op_assign",
  "forward_declaration",
  "var_decls",
  "var_decl",
  "var_names",
  "normal_decl",
  "atomic_value",
  "expr_value",
  "lt_or_lteq",
  "gt_or_gteq",
  "eol",
  "opt_else",
  "decl_or_init",
  "var_init",
  "array_ref",
  "array_list",
  "method_or_attr",
  "literal",
  "f_arglist",
  "f_args",
  "f_normal_arg",
  "expr_cmp",
  "command_opt_args",
  "command_call",
  "command_arg_list",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_1(val, _values, result)
     result = Node.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_2(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_3(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_4(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_5(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_6(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_7(val, _values, result)
            result = CBindings.new val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_8(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_9(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_10(val, _values, result)
            result = CBindings::CFunctionDecl.new val[0], val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_11(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_13(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_14(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_16(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_17(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_19(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_21(val, _values, result)
     result = [*val[0], val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_22(val, _values, result)
            result = RubyMethodDef.new(val[1], val[2], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_24(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_25(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_26(val, _values, result)
     result = [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_27(val, _values, result)
            variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_28(val, _values, result)
     result = Statement::Return.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_29(val, _values, result)
     result = Statement::Print.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_30(val, _values, result)
            match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_31(val, _values, result)
            result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_32(val, _values, result)
            set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_33(val, _values, result)
            result = Statement::For.new *val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_34(val, _values, result)
            result = Statement::While.new val[1], val[3], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_35(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_36(val, _values, result)
            add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_37(val, _values, result)
    
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.racc', 154)
  def _reduce_39(val, _values, result)
          val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_40(val, _values, result)
            declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_41(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_43(val, _values, result)
     result = [*val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_44(val, _values, result)
          val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_45(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_46(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_47(val, _values, result)
            #  TODO: error if lvalue is a literal
        result = op_assign val
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_48(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_49(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_56(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_57(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_58(val, _values, result)
            result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_59(val, _values, result)
     result = Statement::IfBlock::Else.new val[1], location 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_60(val, _values, result)
            val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_61(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_62(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_63(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_64(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_65(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_66(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_67(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_68(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_69(val, _values, result)
     result = { name: val[0] } 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_71(val, _values, result)
          result = { name: val[0], value: val[3] }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_72(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_73(val, _values, result)
     result = [*val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_74(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_75(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_76(val, _values, result)
     result = { name: val[0], value: val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_77(val, _values, result)
          result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_78(val, _values, result)
     result = Expression::Literal::Int.new val[0]    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_79(val, _values, result)
     result = Expression::Literal::Double.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_80(val, _values, result)
     result = Expression::Literal::Char.new val[0]   
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_81(val, _values, result)
     result = Expression::Literal::Str.new val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_82(val, _values, result)
     result = Expression::Literal::True.new 'Qtrue' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_83(val, _values, result)
     result = Expression::Literal::False.new 'Qfalse' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_84(val, _values, result)
     result = Expression::Literal::Nil.new 'Qnil' 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_85(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_86(val, _values, result)
     result = "#{val[0]}#{val[1]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_88(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_90(val, _values, result)
     result = ArgumentList.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_91(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_92(val, _values, result)
            result = [*val[0], val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_93(val, _values, result)
     result = CBaseType.new val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_94(val, _values, result)
     result = CBaseType.new 'object', val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 304)
  def _reduce_95(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_96(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_97(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_98(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_99(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_100(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_101(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_102(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_103(val, _values, result)
     result = unary_op val  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_104(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_105(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_106(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_107(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_108(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_109(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_110(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_111(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_112(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_113(val, _values, result)
     result = binary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_114(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_115(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_116(val, _values, result)
     result = unary_op val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_117(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_118(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_119(val, _values, result)
            args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_121(val, _values, result)
            args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_122(val, _values, result)
            name = Expression::Name.new val[0]
        result = [name, val[2]]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_123(val, _values, result)
          name = Expression::Name.new val[0]
      result = [name, val[2]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 368)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 371)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 372)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_128(val, _values, result)
     result = [*val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 378)
  def _reduce_129(val, _values, result)
            result = Expression::ArrayRef.new val[0], val[2]
      
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_149(val, _values, result)
            result = val[0]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 391)
  def _reduce_150(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 392)
  def _reduce_151(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 395)
  def _reduce_152(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 396)
  def _reduce_153(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 399)
  def _reduce_154(val, _values, result)
    
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 403)
  def _reduce_156(val, _values, result)
    result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Rubex
