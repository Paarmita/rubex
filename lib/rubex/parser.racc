class Rubex::Parser
token
  kDEF kEND kRETURN kPRINT kIF kELSIF kELSE kTHEN

  kDTYPE_UINT  kDTYPE_LINT kDTYPE_LLINT kDTYPE_CHAR kDTYPE_I8   kDTYPE_I16
  kDTYPE_I32   kDTYPE_I64  kDTYPE_UI8   kDTYPE_UI16 kDTYPE_UI32 kDTYPE_UI64
  kDTYPE_INT   kDTYPE_F32  kDTYPE_F64   kDTYPE_LF64 kDTYPE_ROBJ kDTYPE_ULINT
  kDTYPE_ULLINT

  tLPAREN tRPAREN tIDENTIFIER tNL tCOMMA tSQUOTE tSCOLON EOF

  tPLUS tMINUS tMULTIPLY tDIVIDE tEXPO tMODULUS tASSIGN tEQ tLT tLTEQ tGT
  tGTEQ tCMP   tANDOP    tOROP

  tINTEGER tFLOAT tSINGLE_CHAR

prechigh
  right tEXPO


  left tMULTIPLY tDIVIDE tMODULUS
  left tPLUS
  left tMINUS
  left tLT
  left tLTEQ
  left tGT
  left tGTEQ
  nonassoc tEQ tCMP tNEQ
  left tANDOP
  left tOROP

  right tASSIGN
preclow

rule

  program:
    methods { result = Node.new(val[0]) }

  methods:
    methods ruby_method { result = val[1] }
  | {}

  ruby_method:
    kDEF f_name f_arglist compstmt kEND opt_terms
      {
        result = RubyMethodDef.new(val[1], val[2], val[3])
      }

  compstmt:
    stmts opt_terms { result = val[0] }

  stmts:
    {}
  | stmt
  | stmts terms stmt { result = [*val[0], *val[2]] }


  stmt:
    var_decl_or_init
      {
        variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          var = Statement::VariableDeclaration.new(dtype, di[:name], di[:value])
          variables << var
        end

          result = variables
      }
  | kRETURN expr { result = Statement::Return.new val[1] }
  | kPRINT expr { result = Statement::Print.new val[1] }
  | normal_init
    {
      match = val[0]
      result = Statement::Assign.new match[:name], match[:value]
    }
  | kIF expr then compstmt if_tail kEND
    {
      stmts = [*val[3], *val[4]]
      result = Statement::IfBlock.new val[1], stmts
    }
  | stmt kIF expr { result = Statement::IfBlock.new val[2], [*val[0]] }

  then:
    kTHEN {}
  | eol {}

  if_tail:
    {}
  | opt_else {}
  | kELSIF expr then compstmt if_tail
    {
      stmts = [*val[3], *val[4]]
      result = Statement::IfBlock::Elsif.new val[1], stmts
    }

  opt_else:
    kELSE compstmt { result = Statement::IfBlock::Else.new val[1] }

  var_decl_or_init:
    dtype decl_or_init
      {
        result = {
          dtype: val[0],
          decl_or_init: val[1]
        }
      }

  decl_or_init:
    decl_or_init tCOMMA normal_init { result = [*val[0], val[2]] }
  | decl_or_init tCOMMA normal_decl { result = [*val[0], val[2]] }
  | normal_decl { result = [val[0]] }
  | normal_init { result = [val[0]] }

  normal_decl:
    tIDENTIFIER { result = { name: val[0] } }

  normal_init:
    tIDENTIFIER tASSIGN expr { result = { name: val[0], value: val[2] } }

  literal:
    tINTEGER     { result = Literal::Int.new val[0]    }
  | tFLOAT       { result = Literal::Double.new val[0] }
  | tSINGLE_CHAR { result = Literal::Char.new val[0]   }

  f_name:
    tIDENTIFIER {}

  f_arglist:
    tLPAREN f_args tRPAREN eol { result = ArgumentList.new val[1] }

  f_args:
    f_args tCOMMA f_normal_arg
      {
        result = [*val[0], val[2]]
      }
  | f_normal_arg { result = [val[0]] }

  f_normal_arg:
    dtype tIDENTIFIER { result = CBaseType.new val[0], val[1] }

  expr:
    binary_op
      {

      }
  | tLPAREN expr tRPAREN { result = val[1] }
  | literal {}
  | tIDENTIFIER {}

  dtype:
    kDTYPE_UINT  | kDTYPE_LINT | kDTYPE_LLINT | kDTYPE_CHAR | kDTYPE_I8   |
    kDTYPE_I16   | kDTYPE_I32  | kDTYPE_I64   | kDTYPE_UI8  | kDTYPE_UI16 |
    kDTYPE_UI32  | kDTYPE_UI64 | kDTYPE_INT   | kDTYPE_F32  | kDTYPE_F64  |
    kDTYPE_LF64  | kDTYPE_ROBJ | kDTYPE_ULINT | kDTYPE_ULLINT
      {
        result = val[0]
      }

  binary_op:
    expr tPLUS     expr { result = binary_op val }|
    expr tMINUS    expr { result = binary_op val }|
    expr tMULTIPLY expr { result = binary_op val }|
    expr tDIVIDE   expr { result = binary_op val }|
    expr tEXPO     expr { result = binary_op val }|
    expr tMODULUS  expr { result = binary_op val }|
    expr tEQ       expr { result = binary_op val }|
    expr tLT       expr { result = binary_op val }|
    expr tLTEQ     expr { result = binary_op val }|
    expr tGT       expr { result = binary_op val }|
    expr tGTEQ     expr { result = binary_op val }|
    expr tCMP      expr { result = binary_op val }|
    expr tANDOP    expr { result = binary_op val }|
    expr tOROP     expr { result = binary_op val }

  opt_terms:
    {}
  | terms {}

  terms:
    term {}
  | terms term {}

  term:
    tNL {}
  | tSCOLON

  eol:
    tNL {result = val[0]}
end

---- header
require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

---- inner

def parse file_name
  @lexer = Rubex::Lexer.new
  @lexer.parse_file file_name
  @yydebug = true
end

def next_token
  @lexer.next_token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end
