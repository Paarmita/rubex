class Rubex::Parser
token
  kDEF kEND kRETURN kPRINT kIF    kELSIF kELSE   kTHEN  kSTATIC_ARRAY kFOR kWHILE
  kDOT_EACH kDO     kTRUE  kFALSE kNIL   kSTRUCT kUNION kALIAS        kLIB

  kDTYPE_UINT  kDTYPE_LINT kDTYPE_LLINT kDTYPE_CHAR kDTYPE_I8   kDTYPE_I16
  kDTYPE_I32   kDTYPE_I64  kDTYPE_UI8   kDTYPE_UI16 kDTYPE_UI32 kDTYPE_UI64
  kDTYPE_INT   kDTYPE_F32  kDTYPE_F64   kDTYPE_LF64 kDTYPE_ROBJ kDTYPE_ULINT
  kDTYPE_ULLINT tCUSTOM_DTYPE

  tLPAREN tRPAREN tLSQUARE tRSQUARE tIDENTIFIER tNL tCOMMA tSQUOTE tSCOLON
  EOF     tDOT    tQMARK   tSTART_LINE

  tPLUS tMINUS tSTAR tDIVIDE tEXPO      tMODULUS tASSIGN tEQ tLT tLTEQ tGT
  tGTEQ tANDOP tOROP tBANG   tOP_ASSIGN tSTRING

  tINTEGER tFLOAT tSINGLE_CHAR

prechigh
  right tBANG
  right tEXPO

  right UMINUS
  left tSTAR tDIVIDE tMODULUS
  left tPLUS tMINUS
  left tLT tLTEQ tGT tGTEQ
  nonassoc tEQ tNEQ
  left tANDOP
  left tOROP

  right tASSIGN tOP_ASSIGN
preclow

rule

  program:
    topstmts opt_terms { result = Node.new(val[0]) }

  topstmts:
    {}
  | topstmt { result = [val[0]] }
  | topstmts terms topstmt { result = [*val[0], val[2]] }

  topstmt:
    c_bindings {}
  | methods {}

  c_bindings:
    kLIB tSTRING kDO terms c_declarations kEND
      {
        result = CBindings.new val[1], val[4]
      }

  c_declarations:
    c_declaration opt_terms { result = [val[0]] }
  | c_declarations c_declaration opt_terms { result = [*val[0], val[1]] }

  c_declaration:
    dtype_or_ptr tIDENTIFIER tLPAREN dtype_list tRPAREN
      {
        result = CBindings::CFunctionDecl.new val[0], val[1], val[3]
      }
  | kSTRUCT tIDENTIFIER kDO var_decl_stmts kEND
      {
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[3], location
      }
  | alias_stmt

  dtype_or_ptr:
    dtype opt_star { result = val.join }

  alias_stmt:
    kALIAS ident_or_custom_dtype tASSIGN aliased_type
      {
        add_dtype_to_lexer val[1]
        result = Statement::Alias.new val[1], val[3], location
      }

  ident_or_custom_dtype:
    tIDENTIFIER | tCUSTOM_DTYPE {}

  aliased_type:
    dtype
  | kSTRUCT tIDENTIFIER { result = val.join }

  dtype_list:
    { result = [] }
  | dtype_or_ptr { result = [val[0]] }
  | dtype_list tCOMMA dtype_or_ptr { result = [*val[0], val[2]] }

  methods:
    ruby_method { result = val[0] }
  | methods ruby_method { result = [*val[0], val[1]] }

  ruby_method:
    kDEF f_name f_opt_arglist compstmt kEND
      {
        result = RubyMethodDef.new(val[1], val[2], val[3])
      }

  compstmt:
    stmts opt_terms { result = val[0] }

  stmts:
    {}
  | stmt { result = [*val[0]] }
  | stmts terms stmt { result = [*val[0], *val[2]] }


  stmt:
    var_decl_or_init
      {
        variables = []
        dtype = val[0][:dtype]
        val[0][:decl_or_init].each do |di|
          variables << node_variable(dtype, di)
        end

        result = variables
      }
  | kRETURN expr { result = Statement::Return.new val[1], location }
  | kPRINT expr { result = Statement::Print.new val[1], location }
  | normal_init
      {
        match = val[0]
        result = Statement::Assign.new match[:name], match[:value], location
      }
  | kIF expr then compstmt if_tail kEND
      {
        result = Statement::IfBlock.new val[1], [*val[3]], [*val[4]], location
      }
  | stmt kIF expr
      {
        set_location
        result = Statement::IfBlock.new val[2], [*val[0]], [], location
      }
  | kFOR for_expr kDO compstmt kEND
      {
        result = Statement::For.new *val[1], val[3], location
      }
  | kWHILE expr kDO compstmt kEND
      {
        result = Statement::While.new val[1], val[3], location
      }
  | op_assign {}
  | kSTRUCT tIDENTIFIER kDO opt_terms var_decl_stmts kEND
      { 
        add_dtype_to_lexer val[1]
        result = Statement::CStructOrUnionDef.new val[0], val[1], val[4], location
      }
  | forward_declaration {}
  | alias_stmt

  forward_declaration:
    kSTRUCT tIDENTIFIER
    {
      val.flatten!
      add_dtype_to_lexer val[1]
      result = Statement::ForwardDecl.new val[0], val[1], location
    }

  var_decl_stmts:
    var_decls opt_terms
      {
        declarations = []
        val[0]&.each do |data|
          dtype = data[:dtype]
          data[:decl].each do |d|
            declarations << node_variable(dtype, d)
          end
        end

        result = declarations
      }

  var_decls:
    {}
  | var_decl { result = [val[0]] }
  | var_decls terms var_decl { result = [*val[0], val[2]]}

  var_decl:
    dtype opt_star var_names
    {
      val[2].each { |d| d[:pointer] = val[1] }
      result = {
        dtype: val[0],
        decl:  val[2]
      }
    }

  var_names:
    normal_decl { result = [val[0]] }
  | var_names tCOMMA normal_decl { result = [*val[0], val[2]] }

  op_assign:
    atomic_value tOP_ASSIGN expr
      {
        #  TODO: error if lvalue is a literal
        result = op_assign val
      }

  for_expr:
    expr_value lt_or_lteq tIDENTIFIER lt_or_lteq expr_value { result = val }
  | expr_value gt_or_gteq tIDENTIFIER gt_or_gteq expr_value { result = val }

  lt_or_lteq:
    tLT | tLTEQ

  gt_or_gteq:
    tGT | tGTEQ

  then:
    kTHEN | eol

  if_tail:
    {}
  | opt_else {}
  | kELSIF expr then compstmt if_tail
      {
        result = Statement::IfBlock::Elsif.new val[1], [*val[3]], [*val[4]], location
      }

  opt_else:
    kELSE compstmt { result = Statement::IfBlock::Else.new val[1], location }

  var_decl_or_init:
    dtype opt_star decl_or_init
      {
        val[2][0][:pointer] = val[1]
        result = {
          dtype: val[0],
          decl_or_init: val[2]
        }
      }

  opt_star:
    { result = nil }
  | tSTAR { }
  | opt_star tSTAR { result = val.join }

  decl_or_init:
    decl_or_init tCOMMA var_init { result = [*val[0], val[2]] }
  | decl_or_init tCOMMA normal_decl { result = [*val[0], val[2]] }
  | normal_decl { result = [val[0]] }
  | var_init { result = [val[0]] }

  normal_decl:
    tIDENTIFIER  { result = { name: val[0] } }
  | array_ref  { result = { name: val[0] } }

  var_init:
    normal_init
  | array_ref tASSIGN tLSQUARE array_list tRSQUARE
    {
      result = { name: val[0], value: val[3] }
    }

  array_list:
    {}
  | expr { result = [*val[0]] }
  | array_list tCOMMA expr { result = [*val[0], val[2]] }

  normal_init:
    tIDENTIFIER tASSIGN expr { result = { name: val[0], value: val[2] } }
  | array_ref tASSIGN expr   { result = { name: val[0], value: val[2] } }
  | method_or_attr tASSIGN expr
    {
      result = {
        name: Expression::CommandCall.new(val[0][0], val[0][1], []),
        value: val[2]
      }
    }

  literal:
    tINTEGER     { result = Expression::Literal::Int.new val[0]    }
  | tFLOAT       { result = Expression::Literal::Double.new val[0] }
  | tSINGLE_CHAR { result = Expression::Literal::Char.new val[0]   }
  | tSTRING      { result = Expression::Literal::Str.new val[0] }
  | kTRUE        { result = Expression::Literal::True.new 'Qtrue' }
  | kFALSE       { result = Expression::Literal::False.new 'Qfalse' }
  | kNIL         { result = Expression::Literal::Nil.new 'Qnil' }

  f_name:
    tIDENTIFIER tQMARK { result = "#{val[0]}#{val[1]}" }
  | tIDENTIFIER tBANG  { result = "#{val[0]}#{val[1]}" }
  | tIDENTIFIER        { result = val[0] }

  f_opt_arglist:
    { result = [] }
  | f_arglist

  f_arglist:
    tLPAREN f_args tRPAREN eol { result = ArgumentList.new val[1] }

  f_args:
    f_normal_arg { result = [val[0]] }
  | f_args tCOMMA f_normal_arg
      {
        result = [*val[0], val[2]]
      }

  f_normal_arg:
    dtype tIDENTIFIER { result = CBaseType.new val[0], val[1] }
  | tIDENTIFIER { result = CBaseType.new 'object', val[0] }

  expr:
    expr_value {}
  | expr_cmp {}

  expr_value:
    expr_value tPLUS     expr_value { result = binary_op val }
  | expr_value tMINUS    expr_value { result = binary_op val }
  | expr_value tSTAR     expr_value { result = binary_op val }
  | expr_value tDIVIDE   expr_value { result = binary_op val }
  | expr_value tEXPO     expr_value { result = binary_op val }
  | expr_value tMODULUS  expr_value { result = binary_op val }
  | tMINUS expr_value    =UMINUS    { result = unary_op val  }
  | tLPAREN expr_value   tRPAREN    { result = val[1] }
  | atomic_value {}

  expr_cmp:
    expr_value tEQ       expr_value { result = binary_op val }
  | expr_value tNEQ      expr_value { result = binary_op val }
  | expr_value tLT       expr_value { result = binary_op val }
  | expr_value tLTEQ     expr_value { result = binary_op val }
  | expr_value tGT       expr_value { result = binary_op val }
  | expr_value tGTEQ     expr_value { result = binary_op val }
  | expr_value tANDOP    expr_value { result = binary_op val }
  | expr_value tOROP     expr_value { result = binary_op val }
  | tLPAREN    expr_cmp  tRPAREN    { result = val[1] }
  | tBANG expr_value                { result = unary_op val }
  | tBANG expr_cmp                  { result = unary_op val }

  atomic_value:
    array_ref {}
  | literal {}
  | tIDENTIFIER command_opt_args
      {
        args = val[1]
        result =
        if args.empty?
          Expression::Name.new val[0]
        else
          Expression::CommandCall.new nil, val[0], args
        end
      }
  | command_call

  command_call:
    method_or_attr command_opt_args
      {
        args = ArgumentList.new val[1]
        result = Expression::CommandCall.new val[0][0], val[0][1], args
      }

  method_or_attr:
    tIDENTIFIER tDOT f_name
      {
        name = Expression::Name.new val[0]
        result = [name, val[2]]
      }
  | tIDENTIFIER tDOT array_ref
    {
      name = Expression::Name.new val[0]
      result = [name, val[2]]
    }
  # | tIDENTIFIER tDOT f_name

  command_opt_args:
    { result = [] }
  | tLPAREN command_arg_list tRPAREN { result = val[1] }

  command_arg_list:
    { result = [] }
  | expr { result = val }
  | command_arg_list tCOMMA expr { result = [*val[0], val[2]] }

  array_ref:
    tIDENTIFIER tLSQUARE expr tRSQUARE
      {
        result = Expression::ArrayRef.new val[0], val[2]
      }

  dtype:
    kDTYPE_UINT  | kDTYPE_LINT | kDTYPE_LLINT | kDTYPE_CHAR   | kDTYPE_I8   |
    kDTYPE_I16   | kDTYPE_I32  | kDTYPE_I64   | kDTYPE_UI8    | kDTYPE_UI16 |
    kDTYPE_UI32  | kDTYPE_UI64 | kDTYPE_INT   | kDTYPE_F32    | kDTYPE_F64  |
    kDTYPE_LF64  | kDTYPE_ROBJ | kDTYPE_ULINT | kDTYPE_ULLINT | tCUSTOM_DTYPE
      {
        result = val[0]
      }

  opt_terms:
    {}
  | terms {}

  terms:
    term {}
  | terms term {}

  term:
    tNL {}
  | tSCOLON

  eol:
    tNL {result = val[0]}
end

---- header
require_relative 'lexer.rex.rb'
require_relative 'ast.rb'

include Rubex::AST

---- inner

def parse file_name
  @lexer = Rubex::Lexer.new
  @yydebug = true
  @custom_dtypes = {}
  @prev_token = nil
  @lexer.parse_file file_name
end

def location
  @location
end

def next_token
  set_location
  t = @lexer.next_token

  if !t.nil?
    if t[0] == :tIDENTIFIER
      if @custom_dtypes.has_key?(t[1]) && !(@prev_token[0] == :kSTRUCT)
        t = [:tCUSTOM_DTYPE, t[1]]
      else
        t = check_for_primitive_dtype(t)
        t = check_for_keyword(t)
      end
    end
  end

  @prev_token = t
  t
end

def check_for_keyword token
  match = token[1]
  if match == "def"
    return [:kDEF, match]
  elsif match == "do"
    return [:kDO, match]
  elsif match == "end"
    return [:kEND, match]
  elsif match == "return"
    return [:kRETURN, match]
  elsif match == "print"
    return [:kPRINT , match]
  elsif match == "if"
    return [:kIF    , match]
  elsif match == "elsif"
    return [:kELSIF , match]
  elsif match == "else"
    return [:kELSE  , match]
  elsif match == "then"
    return [:kTHEN  , match]
  end

  return token
end

def check_for_primitive_dtype token
  match = token[1]
  if match == "char"
    return [:kDTYPE_CHAR, match]
  elsif match == "i8"
    return [:kDTYPE_I8, match]
  elsif match == "i16"
    return [:kDTYPE_I16, match]
  elsif match == "i32"
    return [:kDTYPE_I32, match]
  elsif match == "i64"
    return [:kDTYPE_I64, match]
  elsif match == "u8"
    return [:kDTYPE_UI8, match]
  elsif match == "u16"
    return [:kDTYPE_UI16, match]
  elsif match == "u32"
    return [:kDTYPE_UI32, match]
  elsif match == "u64"
    return [:kDTYPE_UI64, match]
  elsif match == "int"
    return [:kDTYPE_INT, match]
  elsif match == "long"
    return [:kDTYPE_LINT, match]
  elsif match == "f32"
    return [:kDTYPE_F32, match]
  elsif match == "float"
    return [:kDTYPE_F32, match]
  elsif match == "f64"
    return [:kDTYPE_F64, match]
  elsif match == "double"
    return [:kDTYPE_F64, match]
  elsif match == "object"
    return[:kDTYPE_ROBJ, match]
  end

  token
end

def binary_op val
  Expression::Binary.new val[0], val[1], val[2]
end

def unary_op val
  Expression::Unary.new val[0], val[1]
end

# expr, op_assign, expr => expr = expr op expr
def op_assign val
  Statement::Assign.new(val[0], binary_op([val[0], val[1][0], val[2]]), location)
end

def node_variable dtype, di
  if di[:name].is_a? Expression::ArrayRef
    var = Statement::CArrayDecl.new(dtype, di[:name], di[:value], location)
  elsif di[:pointer]
    if di[:pointer] == '*'
      var = Statement::CPtrDecl.new(dtype, di[:name], di[:value], location)
    end
  else
    var = Statement::VarDecl.new(dtype, di[:name], di[:value], location)
  end

  var
end

def add_dtype_to_lexer dtype
  @custom_dtypes[dtype] = true
end

def set_location
  @location = @lexer.location
end
